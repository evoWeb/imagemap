{"version":3,"sources":["fabric.js"],"names":["fabric","version","exports","define","amd","document","window","require","jsdom","decodeURIComponent","features","FetchExternalResources","jsdomImplForWrapper","implForWrapper","nodeCanvas","Canvas","defaultView","DOMParser","isTouchSupported","navigator","maxTouchPoints","isLikelyNode","Buffer","SHARED_ATTRIBUTES","DPI","reNum","fontPaths","iMatrix","canvasModule","perfLimitSizeTotal","maxCacheSideLimit","minCacheSideLimit","charWidthsCache","textureSize","enableGLFiltering","devicePixelRatio","webkitDevicePixelRatio","mozDevicePixelRatio","browserShadowBlurConstant","arcToSegmentsCache","boundsOfCurveCache","cachesBoundsOfCurve","initFilterBackend","isWebglSupported","console","log","maxTextureSize","WebglFilterBackend","tileSize","Canvas2dFilterBackend","_removeEventListener","eventName","handler","__eventListeners","eventListener","indexOf","util","array","fill","observe","arguments","length","prop","on","push","stopObserving","call","fire","options","listenersForEvent","i","len","filter","value","Observable","off","trigger","Collection","_objects","add","apply","_onObjectAdded","renderOnAddRemove","requestRenderAll","insertAt","object","index","nonSplicing","objects","splice","remove","somethingRemoved","_onObjectRemoved","forEachObject","callback","context","getObjects","type","concat","o","item","isEmpty","size","contains","complexity","reduce","memo","current","CommonMethods","_setOptions","set","_initGradient","filler","property","colorStops","Gradient","_initPattern","source","Pattern","_initClipping","clipTo","functionBody","getFunctionBody","Function","_setObject","obj","_set","key","get","toggle","global","sqrt","Math","atan2","pow","abs","PiBy180","PI","PiBy2","cos","angle","angleSlice","sin","sign","removeFromArray","idx","getRandomInt","min","max","floor","random","degreesToRadians","degrees","radiansToDegrees","radians","rotatePoint","point","origin","subtractEquals","v","rotateVector","Point","x","y","addEquals","vector","rx","ry","transformPoint","p","t","ignoreOffset","makeBoundingBoxFromPoints","points","xPoints","minX","maxX","width","yPoints","minY","maxY","height","left","top","invertTransform","a","r","toFixed","number","fractionDigits","parseFloat","Number","parseUnit","fontSize","unit","exec","Text","DEFAULT_SVG_FONT_SIZE","falseFunction","getKlass","namespace","string","camelize","charAt","toUpperCase","slice","resolveNamespace","getSvgAttributes","attributes","parts","split","loadImage","url","crossOrigin","img","createImage","onLoadCallback","onload","onerror","src","substring","loadImageInDom","div","createElement","style","position","appendChild","querySelector","parentNode","removeChild","enlivenObjects","reviver","onLoaded","numLoadedObjects","numTotalObjects","enlivenedObjects","forEach","klass","fromObject","error","enlivenPatterns","patterns","numLoadedPatterns","numPatterns","enlivenedPatterns","pattern","groupSVGElements","elements","path","centerPoint","Group","sourcePath","populateWithProperties","destination","properties","Object","prototype","toString","drawDashedLine","ctx","x2","y2","da","dx","dy","rot","dc","di","draw","save","translate","moveTo","rotate","restore","createCanvasElement","copyCanvasElement","canvas","newCanvas","getContext","drawImage","toDataURL","canvasEl","format","quality","clipContext","receiver","beginPath","clip","multiplyTransformMatrices","b","is2x2","qrDecompose","denom","scaleX","scaleY","skewX","skewY","translateX","translateY","customTransformMatrix","skewMatrixX","tan","scaleMatrix","resetObjectTransform","target","flipX","flipY","saveObjectTransform","fn","String","match","isTransparent","tolerance","_isTransparent","temp","imageData","getImageData","l","data","parsePreserveAspectRatioAttribute","attribute","meetOrSlice","alignX","alignY","aspectRatioAttrs","align","pop","clearFabricFontCache","fontFamily","toLowerCase","limitDimsByArea","ar","maximumArea","roughWidth","perfLimitSizeY","capValue","findScaleToFit","findScaleToCover","_join","Array","join","arcToSegments","toX","toY","large","sweep","rotateX","argsString","th","sinTh","cosTh","fromX","fromY","px","py","rx2","ry2","py2","px2","pl","root","s","cx","cy","cx1","cy1","mTheta","calcVectorAngle","dtheta","segments","ceil","result","mDelta","mT","th3","segmentToBezier","th2","costh2","sinth2","costh3","sinth3","cp1X","cp1Y","cp2X","cp2Y","ux","uy","vx","vy","ta","tb","drawArc","fx","fy","coords","tx","ty","segs","segsNorm","bezierCurveTo","getBoundsOfArc","bound","bounds","getBoundsOfCurve","x0","y0","x1","y1","x3","y3","tvalues","c","t1","t2","b2ac","sqrtb2ac","j","jlen","mt","invoke","method","args","byProperty","find","value1","value2","k","condition","extend","deep","Element","hasOwnProperty","clone","replace","character","capitalize","firstLetterOnly","escapeXml","graphemeSplit","textstring","chr","graphemes","getWholeChar","str","code","charCodeAt","isNaN","next","prev","emptyFunction","IS_DONTENUM_BUGGY","addMethods","parent","superclass","constructor","returnValue","valueOf","Subclass","callSuper","methodName","parentMethod","_this","superClassMethod","createClass","shift","initialize","subclasses","unknown","areHostMethods","methodNames","test","getElement","setElement","getUniqueId","uid","element","__uniqueID","createListener","wrappedHandler","createWrappedHandler","e","event","createDispatcher","handlers","handlersForEvent","shouldUseAddListenerRemoveListener","documentElement","shouldUseAttachEventDetachEvent","listeners","addListener","removeListener","addEventListener","removeEventListener","listener","attachEvent","detachEvent","existingHandler","getPointer","srcElement","scroll","getScrollLeftTop","pointerX","pointerY","clientX","clientY","_getPointer","pageProp","clientProp","touchProp","pointer","eventTouchProp","setStyle","styles","elementStyle","cssText","setOpacity","normalizedProperty","styleFloat","parseEl","supportsOpacity","opacity","supportsFilters","reOpacity","es","currentStyle","hasLayout","zoom","_slice","getById","id","getElementById","sliceCanConvertNodelists","toArray","arrayLike","childNodes","err","arr","makeElement","tagName","el","className","htmlFor","setAttribute","addClass","wrapElement","wrapper","replaceChild","docElement","body","scrollLeft","scrollTop","host","nodeType","getElementOffset","docElem","doc","ownerDocument","box","offset","scrollLeftTop","offsetAttributes","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","attr","parseInt","getElementStyle","getBoundingClientRect","clientLeft","clientTop","getComputedStyle","undefined","selectProp","makeElementUnselectable","onselectstart","unselectable","makeElementSelectable","getScript","headEl","getElementsByTagName","scriptEl","loading","onreadystatechange","readyState","getNodeCanvas","impl","_canvas","_image","cleanUpJsdomNode","_currentSrc","_attributes","_classList","addParamToUrl","param","emptyFn","request","onComplete","xhr","XMLHttpRequest","parameters","open","setRequestHeader","send","warn","noop","animate","requestAnimFrame","timestamp","start","Date","duration","finish","time","onChange","abort","easing","d","startValue","endValue","byValue","onStart","tick","ticktime","currentTime","timePerc","valuePerc","_requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","_cancelAnimFrame","cancelAnimationFrame","clearTimeout","cancelAnimFrame","calculateColor","begin","end","pos","color","animateColor","fromColor","toColor","startColor","Color","getSource","endColor","posValue","colorEasing","normalize","asin","elastic","opts","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","ease","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","svgValidTagNames","svgViewBoxElements","svgInvalidAncestors","svgValidParents","attributesMap","display","visibility","transform","colorAttributes","stroke","svgValidTagNamesRegEx","getSvgRegex","svgViewBoxElementsRegEx","svgInvalidAncestorsRegEx","svgValidParentsRegEx","cssRules","gradientDefs","clipPaths","normalizeAttr","normalizeValue","parentAttributes","isArray","parsed","map","transformMatrix","parseTransformAttribute","visible","fillIndex","strokeIndex","RegExp","_setStrokeFillOpacity","setAlpha","getAlpha","toRgba","_getMultipleNodes","nodeNames","nodeName","nodeArray","nodeList","rotateMatrix","matrix","multiplierX","multiplierY","skewMatrix","translateMatrix","commaWsp","scale","transforms","transformList","reTransformList","reTransform","attributeValue","matrices","m","operation","combinedMatrix","parseStyleString","oStyle","chunk","pair","trim","parseStyleObject","getGlobalStylesForElement","svgUid","rule","elementMatchesRule","selectors","firstMatching","parentMatching","selectorMatches","doesSomeParentMatch","selector","classNames","getAttribute","matcher","elementById","node","nodelist","parseUseDirectives","xlink","substr","el2","cloneNode","currentTrans","oldLength","attrs","applyViewboxTransform","el3","nodeValue","firstChild","removeAttribute","reViewBoxAttrValue","viewBoxAttr","viewBoxWidth","viewBoxHeight","widthAttr","heightAttr","preserveAspectRatio","missingViewBox","missingDimAttr","toBeParsed","parsedDim","widthDiff","heightDiff","viewboxTransform","hasAncestorWithNodeName","parseSVGDocument","parsingOptions","__uid","descendants","selectNodes","getGradientDefs","getCSSRules","parseElements","instances","recursivelyParseGradientsXlink","gradient","gradientsAttrs","xlinkAttr","xLink","referencedGradient","hasAttribute","children","referenceClone","reFontDeclaration","parseFontDeclaration","fontStyle","fontWeight","lineHeight","tagArray","elList","parseAttributes","parentFontSize","ownAttributes","parseStyleAttribute","normalizedAttr","normalizedValue","normalizedStyle","font","mergedAttrs","ElementsParser","parse","parsePointsAttribute","parsedPoints","allRules","rules","styleContents","textContent","text","ruleObj","declaration","propertyValuePairs","_rule","loadSVGFromURL","xml","responseXML","ActiveXObject","responseText","async","loadXML","results","_options","allElements","loadSVGFromString","parser","parseFromString","regexUrl","proto","numElements","createObjects","createObject","findTag","fromElement","createCallback","checkIfDone","resolveGradient","Image","_originalElement","_removeTransformMatrix","resolveClipPath","extractPropertyDefinition","storage","lastIndex","gradientDef","createClipPathCallback","container","_newObj","fillRule","clipRule","clipPath","objTransformInv","gTransform","calcTransformMatrix","setPositionByOrigin","that","scalarAdd","scalar","scalarAddEquals","subtract","scalarSubtract","scalarSubtractEquals","multiply","multiplyEquals","divide","divideEquals","eq","lt","lte","gt","gte","lerp","distanceFrom","midPointFrom","setXY","setX","setY","setFromPoint","swap","Intersection","status","appendPoint","appendPoints","intersectLineLine","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","intersectLinePolygon","inter","intersectPolygonPolygon","points1","points2","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","setSource","_tryParsingColor","colorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","_rgbToHsl","g","h","round","_source","toRgb","toHsl","hsl","toHsla","toHex","toHexa","alpha","toGrayscale","average","currentAlpha","toBlackWhite","threshold","overlayWith","otherColor","otherAlpha","otherSource","reRGBa","reHSLa","reHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hue2rgb","q","fromRgb","fromSource","fromRgba","fromHsl","fromHsla","fromHex","isShortNotation","isRGBa","oColor","getColorStop","colorAlpha","keyValuePairs","getLinearCoords","getRadialCoords","offsetX","offsetY","gradientTransform","addColorStop","toObject","propertiesToInclude","toSVG","markup","commonAttributes","needsSwap","sort","pathOffset","reverse","minRadius","maxRadius","percentageShift","colorStop","toLive","createLinearGradient","createRadialGradient","instance","colorStopEls","gradientUnits","ellipseMatrix","_convertPercentUnitsToValues","forObject","propValue","addFactor","multFactor","scaleFactor","repeat","patternTransform","setOptions","NUM_FRACTION_DIGITS","patternSource","patternWidth","patternHeight","patternOffsetX","patternOffsetY","patternImgSrc","complete","naturalWidth","naturalHeight","createPattern","Shadow","blur","affectStroke","includeDefaultValues","_parseShadow","shadow","shadowStr","offsetsAndBlur","reOffsetsAndBlur","fBoxX","fBoxY","BLUR_BOX","StaticCanvas","CANVAS_INIT_ERROR","Error","renderAndResetBound","renderAndReset","bind","requestRenderAllBound","_initStatic","backgroundColor","backgroundImage","overlayColor","overlayImage","stateful","controlsAboveOverlay","allowTouchScrolling","imageSmoothingEnabled","viewportTransform","backgroundVpt","overlayVpt","onBeforeScaleRotate","enableRetinaScaling","vptCoords","skipOffscreen","cb","_createLowerCanvas","_initOptions","_setImageSmoothing","interactive","_initRetinaScaling","setOverlayImage","setBackgroundImage","setBackgroundColor","setOverlayColor","calcOffset","_isRetinaScaling","getRetinaScaling","lowerCanvasEl","contextContainer","_offset","image","__setBgOverlayImage","__setBgOverlayColor","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","_createCanvasElement","_applyCanvasStyle","getWidth","getHeight","setWidth","setDimensions","setHeight","dimensions","cssValue","cssOnly","_setBackstoreDimension","hasLostContext","backstoreOnly","_setCssDimension","_isCurrentlyDrawing","freeDrawingBrush","_setBrushStyles","upperCanvasEl","cacheCanvasEl","wrapperEl","getZoom","setViewportTransform","vpt","activeObject","_activeObject","ignoreVpt","skipAbsolute","group","setCoords","calcViewportBoundaries","zoomToPoint","before","after","setZoom","absolutePan","relativePan","setupState","clearContext","clearRect","clear","_hasITextHandlers","_mouseUpITextHandler","_iTextInstances","renderAll","canvasToDrawOn","renderCanvas","isRendering","iVpt","tl","br","tr","bl","cancelRequestedRender","_renderBackground","_renderObjects","drawControls","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","globalCompositeOperation","zoomX","zoomY","_cacheCanvas","cacheTranslationX","cacheTranslationY","render","_renderBackgroundOrOverlay","fillStyle","fillRect","getCenter","centerObjectH","_centerObject","getCenterPoint","centerObjectV","centerObject","center","viewportCenterObject","vpCenter","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","toDatalessJSON","toDatalessObject","_toObjectMethod","_toObjects","__serializeBgOverlay","excludeFromExport","_toObject","originalValue","bgImage","overlay","background","svgViewportTransformation","_setSVGPreamble","_setSVGHeader","clipPathId","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","createSVGClipPathMarkup","toClipPathSVG","fontList","row","rowIndex","_char","charIndex","_setSVGObject","finalWidth","finalHeight","sendToBack","activeSelection","objs","unshift","bringToFront","sendBackwards","intersecting","newIdx","objsMoved","_findNewLowerIndex","isIntersecting","intersectsWithObject","isContainedWithinObject","bringForward","_findNewUpperIndex","dispose","DataURLExporter","EMPTY_JSON","supports","setLineDash","toJSON","createPNGStream","createJPEGStream","BaseBrush","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeDashArray","setShadow","contextTop","strokeStyle","lineWidth","lineCap","miterLimit","lineJoin","_saveAndTransform","_setShadow","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","_resetShadow","PencilBrush","_points","_drawSegment","p1","p2","midPoint","quadraticCurveTo","onMouseDown","_prepareForDrawing","_captureDrawingPath","_render","onMouseMove","needsFullRender","oldEnd","onMouseUp","_finalizeAndAddPath","_reset","_addPoint","pointerPoint","lineTo","convertPointsToSVGPath","multSignX","multSignY","manyPoints","createPath","pathData","Path","strokeWidth","translateToGivenOrigin","originX","originY","closePath","CircleBrush","drawDot","addPoint","arc","radius","originalRenderOnAddRemove","circles","circle","Circle","circleRadius","circleColor","SprayBrush","density","dotWidth","dotWidthVariance","randomOpacity","optimizeOverlapping","sprayChunks","addSprayChunk","sprayChunkPoints","rects","ilen","sprayChunk","rect","Rect","_getOptimizedRects","uniqueRects","uniqueRectsArray","globalAlpha","PatternBrush","getPatternSrc","dotDistance","patternCanvas","patternCtx","getPatternSrcFunction","getPattern","topLeft","_getLeftTopCoords","supportLineDash","STROKE_OFFSET","_initInteractive","_createCacheCanvas","uniScaleTransform","uniScaleKey","centeredScaling","centeredRotation","centeredKey","altActionKey","selection","selectionKey","altSelectionKey","selectionColor","selectionDashArray","selectionBorderColor","selectionLineWidth","selectionFullyContained","hoverCursor","moveCursor","defaultCursor","freeDrawingCursor","rotationCursor","notAllowedCursor","containerClass","perPixelTargetFind","targetFindTolerance","skipTargetFind","isDrawingMode","preserveObjectStacking","snapAngle","snapThreshold","stopContextMenu","fireRightClick","fireMiddleClick","_currentTransform","_groupSelector","_initWrapperElement","_createUpperCanvas","_initEventListeners","_chooseObjectsToRender","activeObjects","getActiveObjects","objsToRender","activeGroupObjects","contextTopDirty","renderTopLayer","_drawSelection","renderTop","_resetCurrentTransform","original","_shouldCenterTransform","mouseXSign","mouseYSign","containsPoint","ignoreZoom","xy","_normalizePointer","_findTargetCorner","invertedM","vptPointer","restorePointerVpt","isTargetTransparent","normalizedPointer","targetRelativeX","targetRelativeY","_cacheContext","contextCache","originalColor","selectionBackgroundColor","_renderControls","hasBorders","transparentCorners","_isSelectionKeyPressed","selectionKeyPressed","_shouldClearSelection","evented","selectable","centerTransform","action","altKey","_getOriginFromCorner","corner","_getActionFromCorner","alreadySelected","_setupCurrentTransform","ex","ey","lastX","lastY","theta","shiftKey","_beforeTransform","_translateObject","newLeft","newTop","moveX","moveY","_changeSkewTransformOrigin","mouseMove","by","origins","skew","originA","originB","flipSign","skewSign","_skewObject","skewed","lockSkewingX","lockSkewingY","actualMouseByCenter","toLocalPoint","lastMouseByCenter","actualMouseByOrigin","constraintPosition","dim","_getTransformedDimensions","translateToOriginPoint","_setObjectSkew","localMouse","_dim","newValue","newDim","dimNoSkew","otherBy","_otherBy","_by","newDimMouse","atan","_scaleObject","lockScalingX","lockScalingY","lockScalingFlip","scaled","_setLocalMouse","_setObjectScale","forbidScalingX","forbidScalingY","changeX","changeY","_scaleObjectEqually","newScaleX","newScaleY","_flipObject","dist","lastDist","signX","signY","padding","_rotateObject","lockRotation","lastAngle","curAngle","hasRotated","rightAngleLocked","leftAngleLocked","setCursor","cursor","groupSelector","aleft","atop","_setLineDash","strokeRect","findTarget","skipGroup","aObjects","activeTarget","activeTargetSubs","targets","_searchPossibleTargets","_checkTarget","globalPointer","isEditing","subTarget","objToCheck","pointerToUse","subTargetCheck","_absolutePointer","_pointer","boundsWidth","boundsHeight","cssScale","bottom","right","lowerCanvasClass","_copyCanvasStyle","fromEl","toEl","getSelectionContext","getSelectionElement","getActiveObject","active","_discardActiveObject","_hoveredTarget","_fireSelectionEvents","oldObjects","somethingChanged","added","removed","opt","oldObject","selected","deselected","updated","setActiveObject","currentActives","_setActiveObject","onSelect","onDeselect","discardActiveObject","removeListeners","originalProperties","_realizeGroupTransformOnObject","_unwindGroupTransformOnObject","layoutProps","originalValues","realizeTransform","clearContextTop","_setCursorFromEvent","cursorOffset","mr","mb","ml","RIGHT_CLICK","MIDDLE_CLICK","LEFT_CLICK","addEventOptions","passive","checkClick","which","button","cursorMap","_bindEvents","addOrRemove","functor","eventjsFunctor","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onDoubleClick","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","eventjs","_onGesture","_onDrag","_onOrientationChange","_onShake","_onLongPress","_onMouseUp","eventsBound","_simpleEventHandler","self","__onTransformGesture","__onDrag","__onMouseWheel","hiddenTextarea","focus","__onOrientationChange","__onShake","__onLongPress","preventDefault","_fireEnterLeaveEvents","stopPropagation","_cacheTransformEventData","_handleEvent","_resetTransformEventData","__onMouseDown","__onMouseUp","__onMouseMove","_shouldRender","shouldRender","isClick","_target","_onMouseUpInDrawingMode","_finalizeCurrentTransform","actionPerformed","_maybeGroupObjects","isMoving","__corner","eventType","subTargets","absolutePointer","_scaling","hasStateChanged","_addEventOptions","_fire","_onMouseDownInDrawingMode","_onMouseMoveInDrawingMode","_previousPointer","shouldGroup","_shouldGroup","_handleGrouping","saveState","touches","_fireOverOutEvents","_transformObject","fireSynteticInOutEvents","targetName","canvasEvtOut","evtOut","canvasEvtIn","evtIn","config","inOpt","outOpt","oldTarget","outFires","inFires","targetChanged","previousTarget","nextTarget","reset","_beforeScaleTransform","_performTransformAction","_onScale","_isUniscalePossible","currentAction","getCornerCursor","actionIsDisabled","_getRotatedCornerCursor","hasRotatingPoint","n","_updateActiveSelection","_createActiveSelection","currentActiveObjects","removeWithUpdate","addWithUpdate","_createGroup","isActiveLower","groupObjects","exitEditing","ActiveSelection","_groupSelectedObjects","_collectObjects","aGroup","currentObject","selectionX1Y1","selectionX2Y2","allowIntersect","intersectsWithRect","isContainedWithinRect","multiplier","toCanvasElement","cropping","scaledWidth","scaledHeight","originalWidth","originalHeight","newZoom","vp","originalInteractive","originalContext","newVp","loadFromDatalessJSON","json","loadFromJSON","serialized","JSON","_enlivenObjects","_setBgOverlay","loaded","cbIfLoaded","__setBgOverlay","enlivedObject","_toDataURL","_toDataURLWithMultiplier","toDataURLWithMultiplier","stringify","cloneWithoutData","backgroundImageOpacity","backgroundImageStretch","supportsLineDash","objectCaching","ALIASING_LIMIT","cornerSize","borderColor","borderDashArray","cornerColor","cornerStrokeColor","cornerStyle","cornerDashArray","strokeDashOffset","borderOpacityWhenMoving","borderScaleFactor","minScaleLimit","hasControls","rotatingPointOffset","lockMovementX","lockMovementY","lockUniScaling","statefullCache","noScaleCache","dirty","paintFirst","stateProperties","cacheProperties","inverted","absolutePositioned","_cacheProperties","_updateCacheCanvas","_limitCacheSize","dims","limitedDims","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","_getNonTransformedDimensions","targetCanvas","minCacheSize","drawingWidth","drawingHeight","dimensionsChanged","cacheWidth","cacheHeight","zoomChanged","shouldRedraw","additionalWidth","additionalHeight","shouldResizeCanvas","canvasWidth","canvasHeight","sizeGrowing","sizeShrinking","setTransform","calcOwnMatrix","_removeDefaultValues","getObjectScaling","scaling","retina","getObjectOpacity","shouldConstrainValue","isChanged","groupNeedsUpdate","_constrainScale","isOnACache","setOnGroup","getViewportTransform","isNotVisible","isOnScreen","_setupCompositeOperation","drawSelectionBackground","_setOpacity","drawCacheOnCanvas","_removeCacheCanvas","drawObject","propertySet","isCacheDirty","needsItsOwnCache","ownCaching","willDrawShadow","drawClipPathOnCache","originalFill","originalStroke","_setClippingProperties","_setStrokeStyles","_setFillStyles","_drawClipPath","skipCanvas","_removeShadow","decl","lineDashOffset","dashArray","alternative","styleOverride","drawBorders","forActiveSelection","drawBordersInGroup","multX","multY","_applyPatternGradientTransform","_renderPaintInOrder","_renderStroke","_renderFill","_renderDashedStroke","_findCenterFromElement","_assignTransformMatrixProps","preserveAspectRatioOptions","cropX","cropY","offsetLeft","offsetTop","objectForm","_fromObject","cloneAsImage","utils","origParams","originalShadow","withoutTransform","withoutShadow","boundingRect","getBoundingRect","shadowOffset","originalCanvas","isType","setGradient","setPatternFill","setColor","shouldCenterOrigin","_setOriginToCenter","_resetOrigin","centerH","viewportCenterH","centerV","viewportCenterV","viewportCenter","getLocalPointer","pClicked","objectLeftTop","createAccessors","extraParam","enlivedProps","originXOffset","originYOffset","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","leftTop","getPointByOrigin","adjustPosition","to","hypotFull","getScaledWidth","xFull","yFull","offsetFrom","offsetTo","_originalOriginX","_originalOriginY","originPoint","getCoords","multiplyMatrices","oCoords","aCoords","ownMatrixCache","matrixCache","absolute","calculate","calcCoords","pointTL","pointBR","intersection","other","lines","_getImageLines","_findCrossPoints","_containsCenterOfCanvas","isPartiallyOnScreen","topline","rightline","bottomline","leftline","xi","xcount","iLine","lineKey","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","_calcRotateMatrix","_calcTranslateMatrix","startMatrix","finalMatrix","w","cosP","sinP","cosPSinP","cosPMinusSinP","mtr","_setCornerCoords","transformMatrixKey","sep","prefix","cache","dimensionMatrix","_calcDimensionsTransformMatrix","flipping","dimX","dimY","bbox","_calculateCurrentDimensions","getSvgColorString","getSvgStyles","skipShadow","getSvgFilter","getSvgSpanStyles","useWhiteSpace","term","textDecoration","getSvgTextDecoration","deltaY","overline","underline","linethrough","getSvgCommons","getSvgTransform","full","additionalTransform","svgTransform","getSvgTransformMatrix","_setSVGBg","textBgRects","_getFillAttributes","_createBaseSVGMarkup","_toSVG","_createBaseClipPathSVGMarkup","objectMarkup","commonPieces","noStyle","withShadow","styleInfo","shadowInfo","absoluteClipPath","clipPathMarkup","addPaintOrder","originalSet","saveProps","props","tmpObj","_isEqual","origValue","currentValue","firstPass","keys","dashedPropertySet","_controlsVisibility","isControlVisible","newTheta","cornerHypotenuse","cosHalfOffset","sinHalfOffset","wh","drawRotatingPoint","rotateHeight","scaleOffset","_drawControl","control","controlName","_getControlsVisibility","setControlVisible","setControlsVisibility","FX_DURATION","fxCenterObjectH","callbacks","empty","fxCenterObjectV","fxRemove","propsToAnimate","skipCallbacks","_animate","propPair","from","valueProgress","timeProgress","coordProps","Line","_setWidthHeight","_getLeftToOriginX","_getTopToOriginY","makeEdgeToOriginGetter","axis1","axis2","dimension","nearest","farthest","calcLinePoints","origStrokeStyle","xMult","yMult","ATTRIBUTE_NAMES","parsedAttributes","_callback","propertyNames","originValues","pi","startAngle","endAngle","setRadius","svgString","startX","startY","endX","endY","largeFlag","getRadiusX","getRadiusY","isValidRadius","Triangle","widthBy2","heightBy2","piBy2","Ellipse","getRx","getRy","_initRxRy","isRounded","Polyline","calcDim","_calcDimensions","diffX","diffY","commonRender","Polygon","_toString","commandLengths","repeatedCommands","M","fromArray","_parsePath","_setPositionDimensions","_parseDimensions","_renderPathCommands","previous","subpathStartX","subpathStartY","controlX","controlY","tempX","tempY","_getOffsetTransform","digits","currentPath","re","coordsStr","coordsParsed","command","commandLength","repeatedCommand","klen","aX","aY","deltaX","pathUrl","useSetOnGroup","isAlreadyGrouped","_calcBounds","_updateObjectsCoords","_updateObjectsACoords","_updateObjectCoords","objectLeft","objectTop","_restoreObjectsState","_includeDefaultValues","objsToObject","originalDefaults","_obj","ownCache","_restoreObjectState","destroy","toActiveSelection","ungroupOnCanvas","setObjectsCoords","onlyWidthHeight","iLen","jLen","_getBounds","minXY","maxXY","enlivedClipPath","toGroup","newGroup","childrenOverride","_lastScaleX","_lastScaleY","_filterScalingX","_filterScalingY","minimumScaleTrigger","cacheKey","filters","_initElement","_element","removeTexture","_initConfig","applyFilters","resizeFilter","applyResizeFilters","backend","filterBackend","evictCachesForKey","setCrossOrigin","getOriginalSize","_stroke","filterObj","getSrc","hasCrop","imageMarkup","strokeSvg","getSvgSrc","origFill","filtered","setSrc","minimumScale","elementToFilter","_filteredEl","sourceWidth","sourceHeight","isNeutralState","imgElement","_needsResize","elementToDraw","sW","sH","sX","sY","_resetWidthHeight","CSS_CANVAS","_initFilters","pAR","rWidth","rHeight","pWidth","pHeight","_object","resizeFilters","fromURL","imgOptions","_getAngleValueForStraighten","straighten","fxStraighten","straightenObject","fxStraightenObject","testPrecision","gl","precision","fragmentSource","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","isSupported","getParameter","MAX_TEXTURE_SIZE","precisions","webGlPrecision","setupGLContext","captureGPUInfo","resources","createWebGLCanvas","aPosition","Float32Array","chooseFastestCopyGLTo2DMethod","canMeasurePerf","performance","canUseImageData","ImageData","canUseArrayBuffer","ArrayBuffer","canUseUint8Clamped","Uint8ClampedArray","imageBuffer","testContext","destinationWidth","destinationHeight","startTime","drawImageTime","putImageDataTime","now","copyGLTo2DDrawImage","copyGLTo2DPutImageData","copyGLTo2D","glOptions","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","pipelineState","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","applyTo","resizeCanvasIfNeeded","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","textureImageSource","texture","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","uniqueId","gpuInfo","renderer","vendor","ext","getExtension","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","dWidth","dHeight","glCanvas","sourceY","numBytes","u8","Uint8Array","u8Clamped","readPixels","imgData","putImageData","sourceElement","originalImageData","originalEl","BaseFilter","vertexSource","createProgram","vertexShader","VERTEX_SHADER","getShaderInfoLog","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributeLocations","getAttributeLocations","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","getAttribLocation","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","_swapTextures","main","mainParameter","_class","applyToWebGL","applyTo2d","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","getMainParameter","setMainParameter","createHelpLayer","helpLayer","mainP","ColorMatrix","colorsOnly","uColorMatrix","uConstants","constants","uniformMatrix4fv","uniform4fv","Brightness","brightness","uBrightness","Convolute","opaque","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","weights","side","halfSide","sw","sh","output","createImageData","dst","alphaFac","dstOff","scx","scy","srcOff","wt","uMatrix","uOpaque","uHalfSize","uSize","uniform1fv","Grayscale","lightness","luminosity","mode","uMode","uniform1i","Invert","invert","uInvert","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","_iLen","_jLen","uBlocksize","RemoveColor","distance","useAlpha","lowC","highC","uLow","uHigh","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","BlendColor","screen","diff","lighten","darken","exclusion","tint","buildSource","tg","alpha1","uColor","BlendImage","mask","TEXTURE1","calculateMatrix","canvas1","blendData","blendImage","uTransformMatrix","uImage","uniformMatrix3fv","Resize","resizeType","lanczosLobes","uDelta","uTaps","uniform2fv","horizontal","taps","filterWindow","getFilterWindow","generateShader","tempScale","getTaps","lobeFunction","lanczosCreate","offsets","fragmentSourceTOP","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","oW","oH","newData","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","mult","doneW","doneH","stepW","stepH","tmpCanvas","dX","dY","process","u","weight","fX","fY","ratioX","icenter","ratioY","range2X","cacheLanc","range2Y","lanczos","rcpRatioX","rcpRatioY","srcData","destData","destImg","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","centerY","yy","centerX","w0","Contrast","contrast","contrastF","uContrast","Saturation","saturation","adjust","uSaturation","Blur","aspectRatio","simpleBlur","canvas2","blurLayer1","blurLayer2","ctx1","ctx2","nSamples","percent","newImageData","delta","chooseRightDelta","blurScale","Gamma","gamma","rInv","gInv","bInv","rVals","gVals","bVals","uGamma","uniform3fv","Composed","subFilters","some","HueRotation","rotation","rad","aThird","aThirdSqtSin","OneMinusCos","_dimensionAffectingProps","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","textAlign","superscript","baseline","subscript","textBackgroundColor","_fontSizeFraction","_fontSizeMult","charSpacing","_measuringContext","_styleProperties","__charBounds","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","__skipDimension","initDimensions","getMeasuringContext","_splitText","newLines","_splitTextIntoLines","textLines","_textLines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","enlargeSpaces","calcTextHeight","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","line","charBound","spaces","isEndOfWrapping","getLineWidth","kernedWidth","lineIndex","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderText","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","styleHas","lineTopOffset","heightOfLine","lineLeftOffset","lastColor","leftOffset","_getLeftOffset","topOffset","_getTopOffset","boxStart","boxWidth","charBox","currentColor","getHeightOfLine","_getLineLeftOffset","getValueOfPropertyAt","getFontCache","cacheProp","_applyCharStyles","styleDeclaration","_measureChar","previousChar","prevCharStyle","fontCache","fontDeclaration","previousFontDeclaration","couple","stylesAreEqual","coupleWidth","previousWidth","fontMultiplier","measureText","getHeightOfChar","char","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","grapheme","prevGrapheme","graphemeInfo","numOfSpaces","lineBounds","_getGraphemeBox","skipLeft","getCompleteStyleDeclaration","prevStyle","info","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isEmptyStyles","isJustify","actualStyle","nextStyle","charsToRender","timeToRender","shortCut","_renderChar","_hasStyleChanged","_getStyleDeclaration","fullDecl","shouldFill","shouldStroke","fillText","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","get2DCursorLocation","setSelectionStyles","thisStyle","_hasStyleChangedForSvg","__lineWidths","_shouldClearDimensionCache","shouldClear","_forceClearCache","_size","_dy","lastDecoration","currentDecoration","currentFill","lastFill","styleObject","family","fontIsGeneric","genericFonts","newLine","newText","additionalProperties","needsDims","_key","parsedAnchor","textAnchor","originalStrokeWidth","textHeightScaleFactor","lineHeightDiff","scaledDiff","textHeight","offX","p3","cleanStyle","stylesCount","letterCount","stylePropertyValue","allStyleObjectPropertiesMatch","graphemeCount","stylePropertyHasBeenSet","removeStyle","lineNum","charNum","_extendStyles","_getLineStyle","_setLineStyle","_setStyleDeclaration","selectionStart","skipWrapping","getSelectionStyles","startIndex","endIndex","selectionEnd","getStyleAtPosition","lineStyle","_deleteStyleDeclaration","_deleteLineStyle","parseDecoration","IText","editable","editingBorderColor","cursorColor","cursorDelay","cursorDuration","caching","_reSpace","_currentCursorOpacity","_selectionDirection","_abortCursorAnimation","__widthOfSpace","inCompositionMode","initBehavior","setSelectionStart","_updateAndFire","setSelectionEnd","_fireSelectionChanged","_updateTextarea","initDelayedCursor","cursorOffsetCache","renderCursorOrSelection","skipRestore","_clearTextArea","boundaries","_getCursorBoundaries","renderCursor","renderSelection","_getCursorBoundariesOffsets","cursorPosition","cursorLocation","charHeight","__isMousedown","startLine","endLine","startChar","endChar","lineOffset","realLineHeight","boxEnd","compositionColor","getCurrentCharFontSize","cp","_getCurrentCharIndex","getCurrentCharColor","initAddedHandler","initRemovedHandler","initCursorSelectionHandlers","initDoubleClickSimulation","mouseMoveHandler","_initCanvasHandlers","_removeCanvasHandlers","_tick","_currentTickState","_animateCursor","targetOpacity","completeMethod","tickState","isAborted","_onTickComplete","_cursorTimeout1","_currentTickCompleteState","restart","delay","abortCursorAnimation","_cursorTimeout2","selectAll","getSelectedText","findWordBoundaryLeft","startFrom","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","direction","reNonWord","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditing","exitEditingOnOthers","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","initMouseMoveHandler","getSelectionStartFromPointer","currentStart","currentEnd","__selectionStartOnMouseDown","restartCursorIfNeeded","fromStringToGraphemeSelection","smallerTextStart","graphemeStart","smallerTextEnd","graphemeEnd","fromGraphemeToStringSelection","newSelection","updateTextareaPosition","updateFromTextArea","_calcTextareaPosition","desiredPostion","compositionStart","upperCanvas","upperCanvasWidth","upperCanvasHeight","clientWidth","clientHeight","_savedProps","_restoreEditingProps","isTextChanged","_removeExtraneousStyles","removeStyleFromTo","cursorStart","cursorEnd","lineStart","charStart","lineEnd","charEnd","styleObj","shiftLineStyles","numericChar","clonedStyles","numericLine","insertNewlineStyleObject","qty","copiedStyle","currentCharStyle","newLineStyles","somethingAdded","numIndex","insertCharStyleObject","quantity","currentLineStyles","currentLineStylesCloned","numericIndex","newStyle","insertNewStyleBlock","insertedText","cursorLoc","addedLines","linesLenght","setSelectionStartEndWithShift","setSelectionInBoundaries","__lastClickTime","__lastLastClickTime","__lastPointer","__newClickTime","newPointer","isTripleClick","_stopEvent","__lastIsEditing","__lastSelected","initMousedownHandler","initMouseupHandler","initClicks","_mouseDownHandler","setCursorByClick","_mouseDownHandlerBefore","mouseUpHandler","currentActive","mouseOffset","prevWidth","_getNewSelectionStartFromOffset","distanceBtwLastCharAndCursor","distanceBtwNextCharAndCursor","onKeyDown","onKeyUp","onInput","copy","paste","onCompositionStart","onCompositionUpdate","onCompositionEnd","_clickHandlerInitialized","onClick","keysMap","ctrlKeysMapUp","ctrlKeysMapDown","keyCode","ctrlKey","metaKey","stopImmediatePropagation","_copyDone","fromPaste","nextText","charCount","nextCharCount","removedText","charDiff","textareaSelection","backDelete","copiedText","copiedTextStyle","compositionEnd","_getClipboardData","clipboardData","_getWidthBeforeCursor","widthBeforeCursor","getDownCursorOffset","isRight","selectionProp","_getSelectionForOffset","indexOnOtherLine","_getIndexOnLine","textAfterCursor","getUpCursorOffset","textBeforeCursor","widthOfCharsOnLine","indexOnLine","charWidth","foundMatch","leftEdge","rightEdge","offsetFromLeftEdge","offsetFromRightEdge","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","_moveLeft","_moveRight","moveCursorLeftWithoutShift","change","moveCursorLeftWithShift","moveCursorRight","actionName","moveCursorRightWithShift","moveCursorRightWithoutShift","changed","removeChars","insertChars","multipleSpacesRegex","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","internalMarkup","_wrapSVGTextAndBg","lineTop","noShadow","textSpans","textTopOffset","textLeftOffset","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","styleDecl","shouldUseWhitespace","styleProps","fillStyles","dySpan","_pushTextBgRect","fillColor","_getSVGLineTopOffset","lastHeight","svgStyle","Textbox","minWidth","dynamicMinWidth","__cachedLines","_wordJoiners","splitByGrapheme","_styleMap","_generateStyleMap","textInfo","realLineCount","realLineCharCount","isWrapping","nextLineIndex","nextOffset","shouldLimit","mapNextLine","_wrapText","desiredWidth","wrapped","_wrapLine","_measureWord","word","charOffset","_line","reservedSpace","words","infix","wordWidth","infixWidth","largestWordWidth","lineJustStarted","additionalSpace","getMinWidth","setObjectScaleOverridden","tw"],"mappings":"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","file":"Fabric.js","sourcesContent":["/* build: `node build.js modules=ALL exclude=gestures,accessors requirejs minifier=uglifyjs` */\n/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */\n\nvar fabric = fabric || { version: '2.6.0' };\nif (typeof exports !== 'undefined') {\n  exports.fabric = fabric;\n}\n/* _AMD_START_ */\nelse if (typeof define === 'function' && define.amd) {\n  define([], function() { return fabric; });\n}\n/* _AMD_END_ */\nif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n  fabric.document = document;\n  fabric.window = window;\n}\nelse {\n  // assume we're running under node.js when document/window are not present\n  fabric.document = require('jsdom')\n    .jsdom(\n      decodeURIComponent('%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E'),\n      { features: {\n        FetchExternalResources: ['img']\n      }\n      });\n  fabric.jsdomImplForWrapper = require('jsdom/lib/jsdom/living/generated/utils').implForWrapper;\n  fabric.nodeCanvas = require('jsdom/lib/jsdom/utils').Canvas;\n  fabric.window = fabric.document.defaultView;\n  DOMParser = require('xmldom').DOMParser;\n}\n\n/**\n * True when in environment that supports touch events\n * @type boolean\n */\nfabric.isTouchSupported = 'ontouchstart' in fabric.window || 'ontouchstart' in fabric.document ||\n  (fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0);\n\n/**\n * True when in environment that's probably Node.js\n * @type boolean\n */\nfabric.isLikelyNode = typeof Buffer !== 'undefined' &&\n                      typeof window === 'undefined';\n\n/* _FROM_SVG_START_ */\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nfabric.SHARED_ATTRIBUTES = [\n  'display',\n  'transform',\n  'fill', 'fill-opacity', 'fill-rule',\n  'opacity',\n  'stroke', 'stroke-dasharray', 'stroke-linecap', 'stroke-dashoffset',\n  'stroke-linejoin', 'stroke-miterlimit',\n  'stroke-opacity', 'stroke-width',\n  'id', 'paint-order',\n  'instantiated_by_use', 'clip-path'\n];\n/* _FROM_SVG_END_ */\n\n/**\n * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n */\nfabric.DPI = 96;\nfabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:e[-+]?\\\\d+)?)';\nfabric.fontPaths = { };\nfabric.iMatrix = [1, 0, 0, 1, 0, 0];\nfabric.canvasModule = 'canvas';\n\n/**\n * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n * @since 1.7.14\n * @type Number\n * @default\n */\nfabric.perfLimitSizeTotal = 2097152;\n\n/**\n * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n * @since 1.7.14\n * @type Number\n * @default\n */\nfabric.maxCacheSideLimit = 4096;\n\n/**\n * Lowest pixel limit for cache canvases, set at 256PX\n * @since 1.7.14\n * @type Number\n * @default\n */\nfabric.minCacheSideLimit = 256;\n\n/**\n * Cache Object for widths of chars in text rendering.\n */\nfabric.charWidthsCache = { };\n\n/**\n * if webgl is enabled and available, textureSize will determine the size\n * of the canvas backend\n * @since 2.0.0\n * @type Number\n * @default\n */\nfabric.textureSize = 2048;\n\n/**\n * Enable webgl for filtering picture is available\n * A filtering backend will be initialized, this will both take memory and\n * time since a default 2048x2048 canvas will be created for the gl context\n * @since 2.0.0\n * @type Boolean\n * @default\n */\nfabric.enableGLFiltering = true;\n\n/**\n * Device Pixel Ratio\n * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n */\nfabric.devicePixelRatio = fabric.window.devicePixelRatio ||\n                          fabric.window.webkitDevicePixelRatio ||\n                          fabric.window.mozDevicePixelRatio ||\n                          1;\n/**\n * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n * which is unitless and not rendered equally across browsers.\n *\n * Values that work quite well (as of October 2017) are:\n * - Chrome: 1.5\n * - Edge: 1.75\n * - Firefox: 0.9\n * - Safari: 0.95\n *\n * @since 2.0.0\n * @type Number\n * @default 1\n */\nfabric.browserShadowBlurConstant = 1;\n\n/**\n * This object contains the result of arc to beizer conversion for faster retrieving if the same arc needs to be converted again.\n * It was an internal variable, is accessible since version 2.3.4\n */\nfabric.arcToSegmentsCache = { };\n\n/**\n * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n * you do not get any speed benefit and you get a big object in memory.\n * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n * can eventually clear it.\n * It was an internal variable, is accessible since version 2.3.4\n */\nfabric.boundsOfCurveCache = { };\n\n/**\n * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n * @default true\n */\nfabric.cachesBoundsOfCurve = true;\n\nfabric.initFilterBackend = function() {\n  if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {\n    console.log('max texture size: ' + fabric.maxTextureSize);\n    return (new fabric.WebglFilterBackend({ tileSize: fabric.textureSize }));\n  }\n  else if (fabric.Canvas2dFilterBackend) {\n    return (new fabric.Canvas2dFilterBackend());\n  }\n};\n\n\nif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)\n  window.fabric = fabric;\n}\n\n\n(function() {\n\n  /**\n   * @private\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  function _removeEventListener(eventName, handler) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n    var eventListener = this.__eventListeners[eventName];\n    if (handler) {\n      eventListener[eventListener.indexOf(handler)] = false;\n    }\n    else {\n      fabric.util.array.fill(eventListener, false);\n    }\n  }\n\n  /**\n   * Observes specified event\n   * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)\n   * @memberOf fabric.Observable\n   * @alias on\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function observe(eventName, handler) {\n    if (!this.__eventListeners) {\n      this.__eventListeners = { };\n    }\n    // one object with key/value pairs was passed\n    if (arguments.length === 1) {\n      for (var prop in eventName) {\n        this.on(prop, eventName[prop]);\n      }\n    }\n    else {\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n    }\n    return this;\n  }\n\n  /**\n   * Stops event observing for a particular event handler. Calling this method\n   * without arguments removes all handlers for all events\n   * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)\n   * @memberOf fabric.Observable\n   * @alias off\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function to be deleted from EventListeners\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function stopObserving(eventName, handler) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (arguments.length === 0) {\n      for (eventName in this.__eventListeners) {\n        _removeEventListener.call(this, eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (arguments.length === 1 && typeof arguments[0] === 'object') {\n      for (var prop in eventName) {\n        _removeEventListener.call(this, prop, eventName[prop]);\n      }\n    }\n    else {\n      _removeEventListener.call(this, eventName, handler);\n    }\n    return this;\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)\n   * @memberOf fabric.Observable\n   * @alias trigger\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function fire(eventName, options) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    var listenersForEvent = this.__eventListeners[eventName];\n    if (!listenersForEvent) {\n      return;\n    }\n\n    for (var i = 0, len = listenersForEvent.length; i < len; i++) {\n      listenersForEvent[i] && listenersForEvent[i].call(this, options || { });\n    }\n    this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {\n      return value !== false;\n    });\n    return this;\n  }\n\n  /**\n   * @namespace fabric.Observable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n   * @see {@link http://fabricjs.com/events|Events demo}\n   */\n  fabric.Observable = {\n    observe: observe,\n    stopObserving: stopObserving,\n    fire: fire,\n\n    on: observe,\n    off: stopObserving,\n    trigger: fire\n  };\n})();\n\n\n/**\n * @namespace fabric.Collection\n */\nfabric.Collection = {\n\n  _objects: [],\n\n  /**\n   * Adds objects to collection, Canvas or Group, then renders canvas\n   * (if `renderOnAddRemove` is not `false`).\n   * in case of Group no changes to bounding box are made.\n   * Objects should be instances of (or inherit from) fabric.Object\n   * Use of this function is highly discouraged for groups.\n   * you can add a bunch of objects with the add method but then you NEED\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   * @chainable\n   */\n  add: function () {\n    this._objects.push.apply(this._objects, arguments);\n    if (this._onObjectAdded) {\n      for (var i = 0, length = arguments.length; i < length; i++) {\n        this._onObjectAdded(arguments[i]);\n      }\n    }\n    this.renderOnAddRemove && this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * An object should be an instance of (or inherit from) fabric.Object\n   * Use of this function is highly discouraged for groups.\n   * you can add a bunch of objects with the insertAt method but then you NEED\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\n   * @param {Object} object Object to insert\n   * @param {Number} index Index to insert object at\n   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\n   * @return {Self} thisArg\n   * @chainable\n   */\n  insertAt: function (object, index, nonSplicing) {\n    var objects = this._objects;\n    if (nonSplicing) {\n      objects[index] = object;\n    }\n    else {\n      objects.splice(index, 0, object);\n    }\n    this._onObjectAdded && this._onObjectAdded(object);\n    this.renderOnAddRemove && this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   * @chainable\n   */\n  remove: function() {\n    var objects = this._objects,\n        index, somethingRemoved = false;\n\n    for (var i = 0, length = arguments.length; i < length; i++) {\n      index = objects.indexOf(arguments[i]);\n\n      // only call onObjectRemoved if an object was actually removed\n      if (index !== -1) {\n        somethingRemoved = true;\n        objects.splice(index, 1);\n        this._onObjectRemoved && this._onObjectRemoved(arguments[i]);\n      }\n    }\n\n    this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Executes given function for each object in this group\n   * @param {Function} callback\n   *                   Callback invoked with current object as first argument,\n   *                   index - as second and an array of all objects - as third.\n   *                   Callback is invoked in a context of Global Object (e.g. `window`)\n   *                   when no `context` argument is given\n   *\n   * @param {Object} context Context (aka thisObject)\n   * @return {Self} thisArg\n   * @chainable\n   */\n  forEachObject: function(callback, context) {\n    var objects = this.getObjects();\n    for (var i = 0, len = objects.length; i < len; i++) {\n      callback.call(context, objects[i], i, objects);\n    }\n    return this;\n  },\n\n  /**\n   * Returns an array of children objects of this instance\n   * Type parameter introduced in 1.3.10\n   * since 2.3.5 this method return always a COPY of the array;\n   * @param {String} [type] When specified, only objects of this type are returned\n   * @return {Array}\n   */\n  getObjects: function(type) {\n    if (typeof type === 'undefined') {\n      return this._objects.concat();\n    }\n    return this._objects.filter(function(o) {\n      return o.type === type;\n    });\n  },\n\n  /**\n   * Returns object at specified index\n   * @param {Number} index\n   * @return {Self} thisArg\n   */\n  item: function (index) {\n    return this._objects[index];\n  },\n\n  /**\n   * Returns true if collection contains no objects\n   * @return {Boolean} true if collection is empty\n   */\n  isEmpty: function () {\n    return this._objects.length === 0;\n  },\n\n  /**\n   * Returns a size of a collection (i.e: length of an array containing its objects)\n   * @return {Number} Collection size\n   */\n  size: function() {\n    return this._objects.length;\n  },\n\n  /**\n   * Returns true if collection contains an object\n   * @param {Object} object Object to check against\n   * @return {Boolean} `true` if collection contains an object\n   */\n  contains: function(object) {\n    return this._objects.indexOf(object) > -1;\n  },\n\n  /**\n   * Returns number representation of a collection complexity\n   * @return {Number} complexity\n   */\n  complexity: function () {\n    return this._objects.reduce(function (memo, current) {\n      memo += current.complexity ? current.complexity() : 0;\n      return memo;\n    }, 0);\n  }\n};\n\n\n/**\n * @namespace fabric.CommonMethods\n */\nfabric.CommonMethods = {\n\n  /**\n   * Sets object's properties from options\n   * @param {Object} [options] Options object\n   */\n  _setOptions: function(options) {\n    for (var prop in options) {\n      this.set(prop, options[prop]);\n    }\n  },\n\n  /**\n   * @private\n   * @param {Object} [filler] Options object\n   * @param {String} [property] property to set the Gradient to\n   */\n  _initGradient: function(filler, property) {\n    if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {\n      this.set(property, new fabric.Gradient(filler));\n    }\n  },\n\n  /**\n   * @private\n   * @param {Object} [filler] Options object\n   * @param {String} [property] property to set the Pattern to\n   * @param {Function} [callback] callback to invoke after pattern load\n   */\n  _initPattern: function(filler, property, callback) {\n    if (filler && filler.source && !(filler instanceof fabric.Pattern)) {\n      this.set(property, new fabric.Pattern(filler, callback));\n    }\n    else {\n      callback && callback();\n    }\n  },\n\n  /**\n   * @private\n   * @param {Object} [options] Options object\n   */\n  _initClipping: function(options) {\n    if (!options.clipTo || typeof options.clipTo !== 'string') {\n      return;\n    }\n\n    var functionBody = fabric.util.getFunctionBody(options.clipTo);\n    if (typeof functionBody !== 'undefined') {\n      this.clipTo = new Function('ctx', functionBody);\n    }\n  },\n\n  /**\n   * @private\n   */\n  _setObject: function(obj) {\n    for (var prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  },\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  set: function(key, value) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    }\n    else {\n      if (typeof value === 'function' && key !== 'clipTo') {\n        this._set(key, value(this.get(key)));\n      }\n      else {\n        this._set(key, value);\n      }\n    }\n    return this;\n  },\n\n  _set: function(key, value) {\n    this[key] = value;\n  },\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  toggle: function(property) {\n    var value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  },\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get: function(property) {\n    return this[property];\n  }\n};\n\n\n(function(global) {\n\n  var sqrt = Math.sqrt,\n      atan2 = Math.atan2,\n      pow = Math.pow,\n      abs = Math.abs,\n      PiBy180 = Math.PI / 180,\n      PiBy2 = Math.PI / 2;\n\n  /**\n   * @namespace fabric.util\n   */\n  fabric.util = {\n\n    /**\n     * Calculate the cos of an angle, avoiding returning floats for known results\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} angle the angle in radians or in degree\n     * @return {Number}\n     */\n    cos: function(angle) {\n      if (angle === 0) { return 1; }\n      if (angle < 0) {\n        // cos(a) = cos(-a)\n        angle = -angle;\n      }\n      var angleSlice = angle / PiBy2;\n      switch (angleSlice) {\n        case 1: case 3: return 0;\n        case 2: return -1;\n      }\n      return Math.cos(angle);\n    },\n\n    /**\n     * Calculate the sin of an angle, avoiding returning floats for known results\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} angle the angle in radians or in degree\n     * @return {Number}\n     */\n    sin: function(angle) {\n      if (angle === 0) { return 0; }\n      var angleSlice = angle / PiBy2, sign = 1;\n      if (angle < 0) {\n        // sin(-a) = -sin(a)\n        sign = -1;\n      }\n      switch (angleSlice) {\n        case 1: return sign;\n        case 2: return 0;\n        case 3: return -sign;\n      }\n      return Math.sin(angle);\n    },\n\n    /**\n     * Removes value from an array.\n     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} array\n     * @param {*} value\n     * @return {Array} original array\n     */\n    removeFromArray: function(array, value) {\n      var idx = array.indexOf(value);\n      if (idx !== -1) {\n        array.splice(idx, 1);\n      }\n      return array;\n    },\n\n    /**\n     * Returns random number between 2 specified ones.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} min lower limit\n     * @param {Number} max upper limit\n     * @return {Number} random value (between min and max)\n     */\n    getRandomInt: function(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\n     * Transforms degrees to radians.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} degrees value in degrees\n     * @return {Number} value in radians\n     */\n    degreesToRadians: function(degrees) {\n      return degrees * PiBy180;\n    },\n\n    /**\n     * Transforms radians to degrees.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} radians value in radians\n     * @return {Number} value in degrees\n     */\n    radiansToDegrees: function(radians) {\n      return radians / PiBy180;\n    },\n\n    /**\n     * Rotates `point` around `origin` with `radians`\n     * @static\n     * @memberOf fabric.util\n     * @param {fabric.Point} point The point to rotate\n     * @param {fabric.Point} origin The origin of the rotation\n     * @param {Number} radians The radians of the angle for the rotation\n     * @return {fabric.Point} The new rotated point\n     */\n    rotatePoint: function(point, origin, radians) {\n      point.subtractEquals(origin);\n      var v = fabric.util.rotateVector(point, radians);\n      return new fabric.Point(v.x, v.y).addEquals(origin);\n    },\n\n    /**\n     * Rotates `vector` with `radians`\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} vector The vector to rotate (x and y)\n     * @param {Number} radians The radians of the angle for the rotation\n     * @return {Object} The new rotated point\n     */\n    rotateVector: function(vector, radians) {\n      var sin = fabric.util.sin(radians),\n          cos = fabric.util.cos(radians),\n          rx = vector.x * cos - vector.y * sin,\n          ry = vector.x * sin + vector.y * cos;\n      return {\n        x: rx,\n        y: ry\n      };\n    },\n\n    /**\n     * Apply transform t to point p\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Point} p The point to transform\n     * @param  {Array} t The transform\n     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n     * @return {fabric.Point} The transformed point\n     */\n    transformPoint: function(p, t, ignoreOffset) {\n      if (ignoreOffset) {\n        return new fabric.Point(\n          t[0] * p.x + t[2] * p.y,\n          t[1] * p.x + t[3] * p.y\n        );\n      }\n      return new fabric.Point(\n        t[0] * p.x + t[2] * p.y + t[4],\n        t[1] * p.x + t[3] * p.y + t[5]\n      );\n    },\n\n    /**\n     * Returns coordinates of points's bounding rectangle (left, top, width, height)\n     * @param {Array} points 4 points array\n     * @return {Object} Object with left, top, width, height properties\n     */\n    makeBoundingBoxFromPoints: function(points) {\n      var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],\n          minX = fabric.util.array.min(xPoints),\n          maxX = fabric.util.array.max(xPoints),\n          width = maxX - minX,\n          yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],\n          minY = fabric.util.array.min(yPoints),\n          maxY = fabric.util.array.max(yPoints),\n          height = maxY - minY;\n\n      return {\n        left: minX,\n        top: minY,\n        width: width,\n        height: height\n      };\n    },\n\n    /**\n     * Invert transformation t\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} t The transform\n     * @return {Array} The inverted transform\n     */\n    invertTransform: function(t) {\n      var a = 1 / (t[0] * t[3] - t[1] * t[2]),\n          r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\n          o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\n      r[4] = -o.x;\n      r[5] = -o.y;\n      return r;\n    },\n\n    /**\n     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number|String} number number to operate on\n     * @param {Number} fractionDigits number of fraction digits to \"leave\"\n     * @return {Number}\n     */\n    toFixed: function(number, fractionDigits) {\n      return parseFloat(Number(number).toFixed(fractionDigits));\n    },\n\n    /**\n     * Converts from attribute value to pixel value if applicable.\n     * Returns converted pixels or original value not converted.\n     * @param {Number|String} value number to operate on\n     * @param {Number} fontSize\n     * @return {Number|String}\n     */\n    parseUnit: function(value, fontSize) {\n      var unit = /\\D{0,2}$/.exec(value),\n          number = parseFloat(value);\n      if (!fontSize) {\n        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n      }\n      switch (unit[0]) {\n        case 'mm':\n          return number * fabric.DPI / 25.4;\n\n        case 'cm':\n          return number * fabric.DPI / 2.54;\n\n        case 'in':\n          return number * fabric.DPI;\n\n        case 'pt':\n          return number * fabric.DPI / 72; // or * 4 / 3\n\n        case 'pc':\n          return number * fabric.DPI / 72 * 12; // or * 16\n\n        case 'em':\n          return number * fontSize;\n\n        default:\n          return number;\n      }\n    },\n\n    /**\n     * Function which always returns `false`.\n     * @static\n     * @memberOf fabric.util\n     * @return {Boolean}\n     */\n    falseFunction: function() {\n      return false;\n    },\n\n    /**\n     * Returns klass \"Class\" object of given namespace\n     * @memberOf fabric.util\n     * @param {String} type Type of object (eg. 'circle')\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @return {Object} klass \"Class\"\n     */\n    getKlass: function(type, namespace) {\n      // capitalize first letter only\n      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\n      return fabric.util.resolveNamespace(namespace)[type];\n    },\n\n    /**\n     * Returns array of attributes for given svg that fabric parses\n     * @memberOf fabric.util\n     * @param {String} type Type of svg element (eg. 'circle')\n     * @return {Array} string names of supported attributes\n     */\n    getSvgAttributes: function(type) {\n      var attributes = [\n        'instantiated_by_use',\n        'style',\n        'id',\n        'class'\n      ];\n      switch (type) {\n        case 'linearGradient':\n          attributes = attributes.concat(['x1', 'y1', 'x2', 'y2', 'gradientUnits', 'gradientTransform']);\n          break;\n        case 'radialGradient':\n          attributes = attributes.concat(['gradientUnits', 'gradientTransform', 'cx', 'cy', 'r', 'fx', 'fy', 'fr']);\n          break;\n        case 'stop':\n          attributes = attributes.concat(['offset', 'stop-color', 'stop-opacity']);\n          break;\n      }\n      return attributes;\n    },\n\n    /**\n     * Returns object of given namespace\n     * @memberOf fabric.util\n     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\n     * @return {Object} Object for given namespace (default fabric)\n     */\n    resolveNamespace: function(namespace) {\n      if (!namespace) {\n        return fabric;\n      }\n\n      var parts = namespace.split('.'),\n          len = parts.length, i,\n          obj = global || fabric.window;\n\n      for (i = 0; i < len; ++i) {\n        obj = obj[parts[i]];\n      }\n\n      return obj;\n    },\n\n    /**\n     * Loads image element from given url and passes it to a callback\n     * @memberOf fabric.util\n     * @param {String} url URL representing an image\n     * @param {Function} callback Callback; invoked with loaded image\n     * @param {*} [context] Context to invoke callback in\n     * @param {Object} [crossOrigin] crossOrigin value to set image element to\n     */\n    loadImage: function(url, callback, context, crossOrigin) {\n      if (!url) {\n        callback && callback.call(context, url);\n        return;\n      }\n\n      var img = fabric.util.createImage();\n\n      /** @ignore */\n      var onLoadCallback = function () {\n        callback && callback.call(context, img);\n        img = img.onload = img.onerror = null;\n      };\n\n      img.onload = onLoadCallback;\n      /** @ignore */\n      img.onerror = function() {\n        fabric.log('Error loading ' + img.src);\n        callback && callback.call(context, null, true);\n        img = img.onload = img.onerror = null;\n      };\n\n      // data-urls appear to be buggy with crossOrigin\n      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\n      // see https://code.google.com/p/chromium/issues/detail?id=315152\n      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\n      if (url.indexOf('data') !== 0 && crossOrigin) {\n        img.crossOrigin = crossOrigin;\n      }\n\n      // IE10 / IE11-Fix: SVG contents from data: URI\n      // will only be available if the IMG is present\n      // in the DOM (and visible)\n      if (url.substring(0,14) === 'data:image/svg') {\n        img.onload = null;\n        fabric.util.loadImageInDom(img, onLoadCallback);\n      }\n\n      img.src = url;\n    },\n\n    /**\n     * Attaches SVG image with data: URL to the dom\n     * @memberOf fabric.util\n     * @param {Object} img Image object with data:image/svg src\n     * @param {Function} callback Callback; invoked with loaded image\n     * @return {Object} DOM element (div containing the SVG image)\n     */\n    loadImageInDom: function(img, onLoadCallback) {\n      var div = fabric.document.createElement('div');\n      div.style.width = div.style.height = '1px';\n      div.style.left = div.style.top = '-100%';\n      div.style.position = 'absolute';\n      div.appendChild(img);\n      fabric.document.querySelector('body').appendChild(div);\n      /**\n       * Wrap in function to:\n       *   1. Call existing callback\n       *   2. Cleanup DOM\n       */\n      img.onload = function () {\n        onLoadCallback();\n        div.parentNode.removeChild(div);\n        div = null;\n      };\n    },\n\n    /**\n     * Creates corresponding fabric instances from their object representations\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} objects Objects to enliven\n     * @param {Function} callback Callback to invoke when all objects are created\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @param {Function} reviver Method for further parsing of object elements,\n     * called after each fabric object created.\n     */\n    enlivenObjects: function(objects, callback, namespace, reviver) {\n      objects = objects || [];\n\n      function onLoaded() {\n        if (++numLoadedObjects === numTotalObjects) {\n          callback && callback(enlivenedObjects);\n        }\n      }\n\n      var enlivenedObjects = [],\n          numLoadedObjects = 0,\n          numTotalObjects = objects.length;\n\n      if (!numTotalObjects) {\n        callback && callback(enlivenedObjects);\n        return;\n      }\n\n      objects.forEach(function (o, index) {\n        // if sparse array\n        if (!o || !o.type) {\n          onLoaded();\n          return;\n        }\n        var klass = fabric.util.getKlass(o.type, namespace);\n        klass.fromObject(o, function (obj, error) {\n          error || (enlivenedObjects[index] = obj);\n          reviver && reviver(o, obj, error);\n          onLoaded();\n        });\n      });\n    },\n\n    /**\n     * Create and wait for loading of patterns\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} patterns Objects to enliven\n     * @param {Function} callback Callback to invoke when all objects are created\n     * called after each fabric object created.\n     */\n    enlivenPatterns: function(patterns, callback) {\n      patterns = patterns || [];\n\n      function onLoaded() {\n        if (++numLoadedPatterns === numPatterns) {\n          callback && callback(enlivenedPatterns);\n        }\n      }\n\n      var enlivenedPatterns = [],\n          numLoadedPatterns = 0,\n          numPatterns = patterns.length;\n\n      if (!numPatterns) {\n        callback && callback(enlivenedPatterns);\n        return;\n      }\n\n      patterns.forEach(function (p, index) {\n        if (p && p.source) {\n          new fabric.Pattern(p, function(pattern) {\n            enlivenedPatterns[index] = pattern;\n            onLoaded();\n          });\n        }\n        else {\n          enlivenedPatterns[index] = p;\n          onLoaded();\n        }\n      });\n    },\n\n    /**\n     * Groups SVG elements (usually those retrieved from SVG document)\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} elements SVG elements to group\n     * @param {Object} [options] Options object\n     * @param {String} path Value to set sourcePath to\n     * @return {fabric.Object|fabric.Group}\n     */\n    groupSVGElements: function(elements, options, path) {\n      var object;\n      if (elements && elements.length === 1) {\n        return elements[0];\n      }\n      if (options) {\n        if (options.width && options.height) {\n          options.centerPoint = {\n            x: options.width / 2,\n            y: options.height / 2\n          };\n        }\n        else {\n          delete options.width;\n          delete options.height;\n        }\n      }\n      object = new fabric.Group(elements, options);\n      if (typeof path !== 'undefined') {\n        object.sourcePath = path;\n      }\n      return object;\n    },\n\n    /**\n     * Populates an object with properties of another object\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} source Source object\n     * @param {Object} destination Destination object\n     * @return {Array} properties Properties names to include\n     */\n    populateWithProperties: function(source, destination, properties) {\n      if (properties && Object.prototype.toString.call(properties) === '[object Array]') {\n        for (var i = 0, len = properties.length; i < len; i++) {\n          if (properties[i] in source) {\n            destination[properties[i]] = source[properties[i]];\n          }\n        }\n      }\n    },\n\n    /**\n     * Draws a dashed line between two points\n     *\n     * This method is used to draw dashed line around selection area.\n     * See <a href=\"http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\">dotted stroke in canvas</a>\n     *\n     * @param {CanvasRenderingContext2D} ctx context\n     * @param {Number} x  start x coordinate\n     * @param {Number} y start y coordinate\n     * @param {Number} x2 end x coordinate\n     * @param {Number} y2 end y coordinate\n     * @param {Array} da dash array pattern\n     */\n    drawDashedLine: function(ctx, x, y, x2, y2, da) {\n      var dx = x2 - x,\n          dy = y2 - y,\n          len = sqrt(dx * dx + dy * dy),\n          rot = atan2(dy, dx),\n          dc = da.length,\n          di = 0,\n          draw = true;\n\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.moveTo(0, 0);\n      ctx.rotate(rot);\n\n      x = 0;\n      while (len > x) {\n        x += da[di++ % dc];\n        if (x > len) {\n          x = len;\n        }\n        ctx[draw ? 'lineTo' : 'moveTo'](x, 0);\n        draw = !draw;\n      }\n\n      ctx.restore();\n    },\n\n    /**\n     * Creates canvas element\n     * @static\n     * @memberOf fabric.util\n     * @return {CanvasElement} initialized canvas element\n     */\n    createCanvasElement: function() {\n      return fabric.document.createElement('canvas');\n    },\n\n    /**\n     * Creates a canvas element that is a copy of another and is also painted\n     * @param {CanvasElement} canvas to copy size and content of\n     * @static\n     * @memberOf fabric.util\n     * @return {CanvasElement} initialized canvas element\n     */\n    copyCanvasElement: function(canvas) {\n      var newCanvas = fabric.util.createCanvasElement();\n      newCanvas.width = canvas.width;\n      newCanvas.height = canvas.height;\n      newCanvas.getContext('2d').drawImage(canvas, 0, 0);\n      return newCanvas;\n    },\n\n    /**\n     * since 2.6.0 moved from canvas instance to utility.\n     * @param {CanvasElement} canvasEl to copy size and content of\n     * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n     * @param {Number} quality <= 1 and > 0\n     * @static\n     * @memberOf fabric.util\n     * @return {String} data url\n     */\n    toDataURL: function(canvasEl, format, quality) {\n      return canvasEl.toDataURL('image/' + format, quality);\n    },\n\n    /**\n     * Creates image element (works on client and node)\n     * @static\n     * @memberOf fabric.util\n     * @return {HTMLImageElement} HTML image element\n     */\n    createImage: function() {\n      return fabric.document.createElement('img');\n    },\n\n    /**\n     * @static\n     * @memberOf fabric.util\n     * @deprecated since 2.0.0\n     * @param {fabric.Object} receiver Object implementing `clipTo` method\n     * @param {CanvasRenderingContext2D} ctx Context to clip\n     */\n    clipContext: function(receiver, ctx) {\n      ctx.save();\n      ctx.beginPath();\n      receiver.clipTo(ctx);\n      ctx.clip();\n    },\n\n    /**\n     * Multiply matrix A by matrix B to nest transformations\n     * @static\n     * @memberOf fabric.util\n     * @param  {Array} a First transformMatrix\n     * @param  {Array} b Second transformMatrix\n     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n     * @return {Array} The product of the two transform matrices\n     */\n    multiplyTransformMatrices: function(a, b, is2x2) {\n      // Matrix multiply a * b\n      return [\n        a[0] * b[0] + a[2] * b[1],\n        a[1] * b[0] + a[3] * b[1],\n        a[0] * b[2] + a[2] * b[3],\n        a[1] * b[2] + a[3] * b[3],\n        is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n        is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]\n      ];\n    },\n\n    /**\n     * Decomposes standard 2x2 matrix into transform componentes\n     * @static\n     * @memberOf fabric.util\n     * @param  {Array} a transformMatrix\n     * @return {Object} Components of transform\n     */\n    qrDecompose: function(a) {\n      var angle = atan2(a[1], a[0]),\n          denom = pow(a[0], 2) + pow(a[1], 2),\n          scaleX = sqrt(denom),\n          scaleY = (a[0] * a[3] - a[2] * a [1]) / scaleX,\n          skewX = atan2(a[0] * a[2] + a[1] * a [3], denom);\n      return {\n        angle: angle  / PiBy180,\n        scaleX: scaleX,\n        scaleY: scaleY,\n        skewX: skewX / PiBy180,\n        skewY: 0,\n        translateX: a[4],\n        translateY: a[5]\n      };\n    },\n\n    customTransformMatrix: function(scaleX, scaleY, skewX) {\n      var skewMatrixX = [1, 0, abs(Math.tan(skewX * PiBy180)), 1],\n          scaleMatrix = [abs(scaleX), 0, 0, abs(scaleY)];\n      return fabric.util.multiplyTransformMatrices(scaleMatrix, skewMatrixX, true);\n    },\n\n    /**\n     * reset an object transform state to neutral. Top and left are not accounted for\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Object} target object to transform\n     */\n    resetObjectTransform: function (target) {\n      target.scaleX = 1;\n      target.scaleY = 1;\n      target.skewX = 0;\n      target.skewY = 0;\n      target.flipX = false;\n      target.flipY = false;\n      target.rotate(0);\n    },\n\n    /**\n     * Extract Object transform values\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Object} target object to read from\n     * @return {Object} Components of transform\n     */\n    saveObjectTransform: function (target) {\n      return {\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        angle: target.angle,\n        left: target.left,\n        flipX: target.flipX,\n        flipY: target.flipY,\n        top: target.top\n      };\n    },\n\n    /**\n     * Returns string representation of function body\n     * @param {Function} fn Function to get body of\n     * @return {String} Function body\n     */\n    getFunctionBody: function(fn) {\n      return (String(fn).match(/function[^{]*\\{([\\s\\S]*)\\}/) || {})[1];\n    },\n\n    /**\n     * Returns true if context has transparent pixel\n     * at specified location (taking tolerance into account)\n     * @param {CanvasRenderingContext2D} ctx context\n     * @param {Number} x x coordinate\n     * @param {Number} y y coordinate\n     * @param {Number} tolerance Tolerance\n     */\n    isTransparent: function(ctx, x, y, tolerance) {\n\n      // If tolerance is > 0 adjust start coords to take into account.\n      // If moves off Canvas fix to 0\n      if (tolerance > 0) {\n        if (x > tolerance) {\n          x -= tolerance;\n        }\n        else {\n          x = 0;\n        }\n        if (y > tolerance) {\n          y -= tolerance;\n        }\n        else {\n          y = 0;\n        }\n      }\n\n      var _isTransparent = true, i, temp,\n          imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1),\n          l = imageData.data.length;\n\n      // Split image data - for tolerance > 1, pixelDataSize = 4;\n      for (i = 3; i < l; i += 4) {\n        temp = imageData.data[i];\n        _isTransparent = temp <= 0;\n        if (_isTransparent === false) {\n          break; // Stop if colour found\n        }\n      }\n\n      imageData = null;\n\n      return _isTransparent;\n    },\n\n    /**\n     * Parse preserveAspectRatio attribute from element\n     * @param {string} attribute to be parsed\n     * @return {Object} an object containing align and meetOrSlice attribute\n     */\n    parsePreserveAspectRatioAttribute: function(attribute) {\n      var meetOrSlice = 'meet', alignX = 'Mid', alignY = 'Mid',\n          aspectRatioAttrs = attribute.split(' '), align;\n\n      if (aspectRatioAttrs && aspectRatioAttrs.length) {\n        meetOrSlice = aspectRatioAttrs.pop();\n        if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\n          align = meetOrSlice;\n          meetOrSlice = 'meet';\n        }\n        else if (aspectRatioAttrs.length) {\n          align = aspectRatioAttrs.pop();\n        }\n      }\n      //divide align in alignX and alignY\n      alignX = align !== 'none' ? align.slice(1, 4) : 'none';\n      alignY = align !== 'none' ? align.slice(5, 8) : 'none';\n      return {\n        meetOrSlice: meetOrSlice,\n        alignX: alignX,\n        alignY: alignY\n      };\n    },\n\n    /**\n     * Clear char widths cache for the given font family or all the cache if no\n     * fontFamily is specified.\n     * Use it if you know you are loading fonts in a lazy way and you are not waiting\n     * for custom fonts to load properly when adding text objects to the canvas.\n     * If a text object is added when its own font is not loaded yet, you will get wrong\n     * measurement and so wrong bounding boxes.\n     * After the font cache is cleared, either change the textObject text content or call\n     * initDimensions() to trigger a recalculation\n     * @memberOf fabric.util\n     * @param {String} [fontFamily] font family to clear\n     */\n    clearFabricFontCache: function(fontFamily) {\n      fontFamily = (fontFamily || '').toLowerCase();\n      if (!fontFamily) {\n        fabric.charWidthsCache = { };\n      }\n      else if (fabric.charWidthsCache[fontFamily]) {\n        delete fabric.charWidthsCache[fontFamily];\n      }\n    },\n\n    /**\n     * Given current aspect ratio, determines the max width and height that can\n     * respect the total allowed area for the cache.\n     * @memberOf fabric.util\n     * @param {Number} ar aspect ratio\n     * @param {Number} maximumArea Maximum area you want to achieve\n     * @return {Object.x} Limited dimensions by X\n     * @return {Object.y} Limited dimensions by Y\n     */\n    limitDimsByArea: function(ar, maximumArea) {\n      var roughWidth = Math.sqrt(maximumArea * ar),\n          perfLimitSizeY = Math.floor(maximumArea / roughWidth);\n      return { x: Math.floor(roughWidth), y: perfLimitSizeY };\n    },\n\n    capValue: function(min, value, max) {\n      return Math.max(min, Math.min(value, max));\n    },\n\n    findScaleToFit: function(source, destination) {\n      return Math.min(destination.width / source.width, destination.height / source.height);\n    },\n\n    findScaleToCover: function(source, destination) {\n      return Math.max(destination.width / source.width, destination.height / source.height);\n    }\n  };\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  var _join = Array.prototype.join;\n\n  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\n   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n   * http://mozilla.org/MPL/2.0/\n   */\n  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\n    var argsString = _join.call(arguments);\n    if (fabric.arcToSegmentsCache[argsString]) {\n      return fabric.arcToSegmentsCache[argsString];\n    }\n\n    var PI = Math.PI, th = rotateX * PI / 180,\n        sinTh = fabric.util.sin(th),\n        cosTh = fabric.util.cos(th),\n        fromX = 0, fromY = 0;\n\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\n        py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\n        rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\n        pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\n        root = 0;\n\n    if (pl < 0) {\n      var s = Math.sqrt(1 - pl / (rx2 * ry2));\n      rx *= s;\n      ry *= s;\n    }\n    else {\n      root = (large === sweep ? -1.0 : 1.0) *\n              Math.sqrt( pl / (rx2 * py2 + ry2 * px2));\n    }\n\n    var cx = root * rx * py / ry,\n        cy = -root * ry * px / rx,\n        cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\n        cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\n        mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\n        dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\n\n    if (sweep === 0 && dtheta > 0) {\n      dtheta -= 2 * PI;\n    }\n    else if (sweep === 1 && dtheta < 0) {\n      dtheta += 2 * PI;\n    }\n\n    // Convert into cubic bezier segments <= 90deg\n    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\n        result = [], mDelta = dtheta / segments,\n        mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\n        th3 = mTheta + mDelta;\n\n    for (var i = 0; i < segments; i++) {\n      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\n      fromX = result[i][4];\n      fromY = result[i][5];\n      mTheta = th3;\n      th3 += mDelta;\n    }\n    fabric.arcToSegmentsCache[argsString] = result;\n    return result;\n  }\n\n  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\n    var costh2 = fabric.util.cos(th2),\n        sinth2 = fabric.util.sin(th2),\n        costh3 = fabric.util.cos(th3),\n        sinth3 = fabric.util.sin(th3),\n        toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\n        toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\n        cp1X = fromX + mT * ( -cosTh * rx * sinth2 - sinTh * ry * costh2),\n        cp1Y = fromY + mT * ( -sinTh * rx * sinth2 + cosTh * ry * costh2),\n        cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\n        cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\n\n    return [\n      cp1X, cp1Y,\n      cp2X, cp2Y,\n      toX, toY\n    ];\n  }\n\n  /*\n   * Private\n   */\n  function calcVectorAngle(ux, uy, vx, vy) {\n    var ta = Math.atan2(uy, ux),\n        tb = Math.atan2(vy, vx);\n    if (tb >= ta) {\n      return tb - ta;\n    }\n    else {\n      return 2 * Math.PI - (ta - tb);\n    }\n  }\n\n  /**\n   * Draws arc\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Number} fx\n   * @param {Number} fy\n   * @param {Array} coords\n   */\n  fabric.util.drawArc = function(ctx, fx, fy, coords) {\n    var rx = coords[0],\n        ry = coords[1],\n        rot = coords[2],\n        large = coords[3],\n        sweep = coords[4],\n        tx = coords[5],\n        ty = coords[6],\n        segs = [[], [], [], []],\n        segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n    for (var i = 0, len = segsNorm.length; i < len; i++) {\n      segs[i][0] = segsNorm[i][0] + fx;\n      segs[i][1] = segsNorm[i][1] + fy;\n      segs[i][2] = segsNorm[i][2] + fx;\n      segs[i][3] = segsNorm[i][3] + fy;\n      segs[i][4] = segsNorm[i][4] + fx;\n      segs[i][5] = segsNorm[i][5] + fy;\n      ctx.bezierCurveTo.apply(ctx, segs[i]);\n    }\n  };\n\n  /**\n   * Calculate bounding box of a elliptic-arc\n   * @param {Number} fx start point of arc\n   * @param {Number} fy\n   * @param {Number} rx horizontal radius\n   * @param {Number} ry vertical radius\n   * @param {Number} rot angle of horizontal axe\n   * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points\n   * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction\n   * @param {Number} tx end point of arc\n   * @param {Number} ty\n   */\n  fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {\n\n    var fromX = 0, fromY = 0, bound, bounds = [],\n        segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n    for (var i = 0, len = segs.length; i < len; i++) {\n      bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);\n      bounds.push({ x: bound[0].x + fx, y: bound[0].y + fy });\n      bounds.push({ x: bound[1].x + fx, y: bound[1].y + fy });\n      fromX = segs[i][4];\n      fromY = segs[i][5];\n    }\n    return bounds;\n  };\n\n  /**\n   * Calculate bounding box of a beziercurve\n   * @param {Number} x0 starting point\n   * @param {Number} y0\n   * @param {Number} x1 first control point\n   * @param {Number} y1\n   * @param {Number} x2 secondo control point\n   * @param {Number} y2\n   * @param {Number} x3 end of beizer\n   * @param {Number} y3\n   */\n  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\n  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var argsString;\n    if (fabric.cachesBoundsOfCurve) {\n      argsString = _join.call(arguments);\n      if (fabric.boundsOfCurveCache[argsString]) {\n        return fabric.boundsOfCurveCache[argsString];\n      }\n    }\n\n    var sqrt = Math.sqrt,\n        min = Math.min, max = Math.max,\n        abs = Math.abs, tvalues = [],\n        bounds = [[], []],\n        a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n    b = 6 * x0 - 12 * x1 + 6 * x2;\n    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n    c = 3 * x1 - 3 * x0;\n\n    for (var i = 0; i < 2; ++i) {\n      if (i > 0) {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n\n      if (abs(a) < 1e-12) {\n        if (abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      if (b2ac < 0) {\n        continue;\n      }\n      sqrtb2ac = sqrt(b2ac);\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    var x, y, j = tvalues.length, jlen = j, mt;\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n      bounds[0][j] = x;\n\n      y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n      bounds[1][j] = y;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    var result = [\n      {\n        x: min.apply(null, bounds[0]),\n        y: min.apply(null, bounds[1])\n      },\n      {\n        x: max.apply(null, bounds[0]),\n        y: max.apply(null, bounds[1])\n      }\n    ];\n    if (fabric.cachesBoundsOfCurve) {\n      fabric.boundsOfCurveCache[argsString] = result;\n    }\n    return result;\n  }\n\n  fabric.util.getBoundsOfCurve = getBoundsOfCurve;\n\n})();\n\n\n(function() {\n\n  var slice = Array.prototype.slice;\n\n  /**\n   * Invokes method on all items in a given array\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} method Name of a method to invoke\n   * @return {Array}\n   */\n  function invoke(array, method) {\n    var args = slice.call(arguments, 2), result = [];\n    for (var i = 0, len = array.length; i < len; i++) {\n      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\n    }\n    return result;\n  }\n\n  /**\n   * Finds maximum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {*}\n   */\n  function max(array, byProperty) {\n    return find(array, byProperty, function(value1, value2) {\n      return value1 >= value2;\n    });\n  }\n\n  /**\n   * Finds minimum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {*}\n   */\n  function min(array, byProperty) {\n    return find(array, byProperty, function(value1, value2) {\n      return value1 < value2;\n    });\n  }\n\n  /**\n   * @private\n   */\n  function fill(array, value) {\n    var k = array.length;\n    while (k--) {\n      array[k] = value;\n    }\n    return array;\n  }\n\n  /**\n   * @private\n   */\n  function find(array, byProperty, condition) {\n    if (!array || array.length === 0) {\n      return;\n    }\n\n    var i = array.length - 1,\n        result = byProperty ? array[i][byProperty] : array[i];\n    if (byProperty) {\n      while (i--) {\n        if (condition(array[i][byProperty], result)) {\n          result = array[i][byProperty];\n        }\n      }\n    }\n    else {\n      while (i--) {\n        if (condition(array[i], result)) {\n          result = array[i];\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @namespace fabric.util.array\n   */\n  fabric.util.array = {\n    fill: fill,\n    invoke: invoke,\n    min: min,\n    max: max\n  };\n\n})();\n\n\n(function() {\n  /**\n   * Copies all enumerable properties of one js object to another\n   * this does not and cannot compete with generic utils.\n   * Does not clone or extend fabric.Object subclasses.\n   * This is mostly for internal use and has extra handling for fabricJS objects\n   * it skips the canvas property in deep cloning.\n   * @memberOf fabric.util.object\n   * @param {Object} destination Where to copy to\n   * @param {Object} source Where to copy from\n   * @return {Object}\n   */\n\n  function extend(destination, source, deep) {\n    // JScript DontEnum bug is not taken care of\n    // the deep clone is for internal use, is not meant to avoid\n    // javascript traps or cloning html element or self referenced objects.\n    if (deep) {\n      if (!fabric.isLikelyNode && source instanceof Element) {\n        // avoid cloning deep images, canvases,\n        destination = source;\n      }\n      else if (source instanceof Array) {\n        destination = [];\n        for (var i = 0, len = source.length; i < len; i++) {\n          destination[i] = extend({ }, source[i], deep);\n        }\n      }\n      else if (source && typeof source === 'object') {\n        for (var property in source) {\n          if (property === 'canvas') {\n            destination[property] = extend({ }, source[property]);\n          }\n          else if (source.hasOwnProperty(property)) {\n            destination[property] = extend({ }, source[property], deep);\n          }\n        }\n      }\n      else {\n        // this sounds odd for an extend but is ok for recursive use\n        destination = source;\n      }\n    }\n    else {\n      for (var property in source) {\n        destination[property] = source[property];\n      }\n    }\n    return destination;\n  }\n\n  /**\n   * Creates an empty object and copies all enumerable properties of another object to it\n   * @memberOf fabric.util.object\n   * TODO: this function return an empty object if you try to clone null\n   * @param {Object} object Object to clone\n   * @return {Object}\n   */\n  function clone(object, deep) {\n    return extend({ }, object, deep);\n  }\n\n  /** @namespace fabric.util.object */\n  fabric.util.object = {\n    extend: extend,\n    clone: clone\n  };\n  fabric.util.object.extend(fabric.util, fabric.Observable);\n})();\n\n\n(function() {\n\n  /**\n   * Camelizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to camelize\n   * @return {String} Camelized version of a string\n   */\n  function camelize(string) {\n    return string.replace(/-+(.)?/g, function(match, character) {\n      return character ? character.toUpperCase() : '';\n    });\n  }\n\n  /**\n   * Capitalizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to capitalize\n   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n   * and other letters stay untouched, if false first letter is capitalized\n   * and other letters are converted to lowercase.\n   * @return {String} Capitalized version of a string\n   */\n  function capitalize(string, firstLetterOnly) {\n    return string.charAt(0).toUpperCase() +\n      (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\n  }\n\n  /**\n   * Escapes XML in a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to escape\n   * @return {String} Escaped version of a string\n   */\n  function escapeXml(string) {\n    return string.replace(/&/g, '&amp;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&apos;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n  }\n\n  /**\n   * Divide a string in the user perceived single units\n   * @memberOf fabric.util.string\n   * @param {String} textstring String to escape\n   * @return {Array} array containing the graphemes\n   */\n  function graphemeSplit(textstring) {\n    var i = 0, chr, graphemes = [];\n    for (i = 0, chr; i < textstring.length; i++) {\n      if ((chr = getWholeChar(textstring, i)) === false) {\n        continue;\n      }\n      graphemes.push(chr);\n    }\n    return graphemes;\n  }\n\n  // taken from mdn in the charAt doc page.\n  function getWholeChar(str, i) {\n    var code = str.charCodeAt(i);\n\n    if (isNaN(code)) {\n      return ''; // Position not found\n    }\n    if (code < 0xD800 || code > 0xDFFF) {\n      return str.charAt(i);\n    }\n\n    // High surrogate (could change last hex to 0xDB7F to treat high private\n    // surrogates as single characters)\n    if (0xD800 <= code && code <= 0xDBFF) {\n      if (str.length <= (i + 1)) {\n        throw 'High surrogate without following low surrogate';\n      }\n      var next = str.charCodeAt(i + 1);\n      if (0xDC00 > next || next > 0xDFFF) {\n        throw 'High surrogate without following low surrogate';\n      }\n      return str.charAt(i) + str.charAt(i + 1);\n    }\n    // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n    if (i === 0) {\n      throw 'Low surrogate without preceding high surrogate';\n    }\n    var prev = str.charCodeAt(i - 1);\n\n    // (could change last hex to 0xDB7F to treat high private\n    // surrogates as single characters)\n    if (0xD800 > prev || prev > 0xDBFF) {\n      throw 'Low surrogate without preceding high surrogate';\n    }\n    // We can pass over low surrogates now as the second component\n    // in a pair which we have already processed\n    return false;\n  }\n\n\n  /**\n   * String utilities\n   * @namespace fabric.util.string\n   */\n  fabric.util.string = {\n    camelize: camelize,\n    capitalize: capitalize,\n    escapeXml: escapeXml,\n    graphemeSplit: graphemeSplit\n  };\n})();\n\n\n(function() {\n\n  var slice = Array.prototype.slice, emptyFunction = function() { },\n\n      IS_DONTENUM_BUGGY = (function() {\n        for (var p in { toString: 1 }) {\n          if (p === 'toString') {\n            return false;\n          }\n        }\n        return true;\n      })(),\n\n      /** @ignore */\n      addMethods = function(klass, source, parent) {\n        for (var property in source) {\n\n          if (property in klass.prototype &&\n              typeof klass.prototype[property] === 'function' &&\n              (source[property] + '').indexOf('callSuper') > -1) {\n\n            klass.prototype[property] = (function(property) {\n              return function() {\n\n                var superclass = this.constructor.superclass;\n                this.constructor.superclass = parent;\n                var returnValue = source[property].apply(this, arguments);\n                this.constructor.superclass = superclass;\n\n                if (property !== 'initialize') {\n                  return returnValue;\n                }\n              };\n            })(property);\n          }\n          else {\n            klass.prototype[property] = source[property];\n          }\n\n          if (IS_DONTENUM_BUGGY) {\n            if (source.toString !== Object.prototype.toString) {\n              klass.prototype.toString = source.toString;\n            }\n            if (source.valueOf !== Object.prototype.valueOf) {\n              klass.prototype.valueOf = source.valueOf;\n            }\n          }\n        }\n      };\n\n  function Subclass() { }\n\n  function callSuper(methodName) {\n    var parentMethod = null,\n        _this = this;\n\n    // climb prototype chain to find method not equal to callee's method\n    while (_this.constructor.superclass) {\n      var superClassMethod = _this.constructor.superclass.prototype[methodName];\n      if (_this[methodName] !== superClassMethod) {\n        parentMethod = superClassMethod;\n        break;\n      }\n      // eslint-disable-next-line\n      _this = _this.constructor.superclass.prototype;\n    }\n\n    if (!parentMethod) {\n      return console.log('tried to callSuper ' + methodName + ', method not found in prototype chain', this);\n    }\n\n    return (arguments.length > 1)\n      ? parentMethod.apply(this, slice.call(arguments, 1))\n      : parentMethod.call(this);\n  }\n\n  /**\n   * Helper for creation of \"classes\".\n   * @memberOf fabric.util\n   * @param {Function} [parent] optional \"Class\" to inherit from\n   * @param {Object} [properties] Properties shared by all instances of this class\n   *                  (be careful modifying objects defined here as this would affect all instances)\n   */\n  function createClass() {\n    var parent = null,\n        properties = slice.call(arguments, 0);\n\n    if (typeof properties[0] === 'function') {\n      parent = properties.shift();\n    }\n    function klass() {\n      this.initialize.apply(this, arguments);\n    }\n\n    klass.superclass = parent;\n    klass.subclasses = [];\n\n    if (parent) {\n      Subclass.prototype = parent.prototype;\n      klass.prototype = new Subclass();\n      parent.subclasses.push(klass);\n    }\n    for (var i = 0, length = properties.length; i < length; i++) {\n      addMethods(klass, properties[i], parent);\n    }\n    if (!klass.prototype.initialize) {\n      klass.prototype.initialize = emptyFunction;\n    }\n    klass.prototype.constructor = klass;\n    klass.prototype.callSuper = callSuper;\n    return klass;\n  }\n\n  fabric.util.createClass = createClass;\n})();\n\n\n(function () {\n\n  var unknown = 'unknown';\n\n  /* EVENT HANDLING */\n\n  function areHostMethods(object) {\n    var methodNames = Array.prototype.slice.call(arguments, 1),\n        t, i, len = methodNames.length;\n    for (i = 0; i < len; i++) {\n      t = typeof object[methodNames[i]];\n      if (!(/^(?:function|object|unknown)$/).test(t)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** @ignore */\n  var getElement,\n      setElement,\n      getUniqueId = (function () {\n        var uid = 0;\n        return function (element) {\n          return element.__uniqueID || (element.__uniqueID = 'uniqueID__' + uid++);\n        };\n      })();\n\n  (function () {\n    var elements = { };\n    /** @ignore */\n    getElement = function (uid) {\n      return elements[uid];\n    };\n    /** @ignore */\n    setElement = function (uid, element) {\n      elements[uid] = element;\n    };\n  })();\n\n  function createListener(uid, handler) {\n    return {\n      handler: handler,\n      wrappedHandler: createWrappedHandler(uid, handler)\n    };\n  }\n\n  function createWrappedHandler(uid, handler) {\n    return function (e) {\n      handler.call(getElement(uid), e || fabric.window.event);\n    };\n  }\n\n  function createDispatcher(uid, eventName) {\n    return function (e) {\n      if (handlers[uid] && handlers[uid][eventName]) {\n        var handlersForEvent = handlers[uid][eventName];\n        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n          handlersForEvent[i].call(this, e || fabric.window.event);\n        }\n      }\n    };\n  }\n\n  var shouldUseAddListenerRemoveListener = (\n        areHostMethods(fabric.document.documentElement, 'addEventListener', 'removeEventListener') &&\n        areHostMethods(fabric.window, 'addEventListener', 'removeEventListener')),\n\n      shouldUseAttachEventDetachEvent = (\n        areHostMethods(fabric.document.documentElement, 'attachEvent', 'detachEvent') &&\n        areHostMethods(fabric.window, 'attachEvent', 'detachEvent')),\n\n      // IE branch\n      listeners = { },\n\n      // DOM L0 branch\n      handlers = { },\n\n      addListener, removeListener;\n\n  if (shouldUseAddListenerRemoveListener) {\n    /** @ignore */\n    addListener = function (element, eventName, handler, options) {\n      // since ie10 or ie9 can use addEventListener but they do not support options, i need to check\n      element && element.addEventListener(eventName, handler, shouldUseAttachEventDetachEvent ? false : options);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler, options) {\n      element && element.removeEventListener(eventName, handler, shouldUseAttachEventDetachEvent ? false : options);\n    };\n  }\n\n  else if (shouldUseAttachEventDetachEvent) {\n    /** @ignore */\n    addListener = function (element, eventName, handler) {\n      if (!element) {\n        return;\n      }\n      var uid = getUniqueId(element);\n      setElement(uid, element);\n      if (!listeners[uid]) {\n        listeners[uid] = { };\n      }\n      if (!listeners[uid][eventName]) {\n        listeners[uid][eventName] = [];\n\n      }\n      var listener = createListener(uid, handler);\n      listeners[uid][eventName].push(listener);\n      element.attachEvent('on' + eventName, listener.wrappedHandler);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler) {\n      if (!element) {\n        return;\n      }\n      var uid = getUniqueId(element), listener;\n      if (listeners[uid] && listeners[uid][eventName]) {\n        for (var i = 0, len = listeners[uid][eventName].length; i < len; i++) {\n          listener = listeners[uid][eventName][i];\n          if (listener && listener.handler === handler) {\n            element.detachEvent('on' + eventName, listener.wrappedHandler);\n            listeners[uid][eventName][i] = null;\n          }\n        }\n      }\n    };\n  }\n  else {\n    /** @ignore */\n    addListener = function (element, eventName, handler) {\n      if (!element) {\n        return;\n      }\n      var uid = getUniqueId(element);\n      if (!handlers[uid]) {\n        handlers[uid] = { };\n      }\n      if (!handlers[uid][eventName]) {\n        handlers[uid][eventName] = [];\n        var existingHandler = element['on' + eventName];\n        if (existingHandler) {\n          handlers[uid][eventName].push(existingHandler);\n        }\n        element['on' + eventName] = createDispatcher(uid, eventName);\n      }\n      handlers[uid][eventName].push(handler);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler) {\n      if (!element) {\n        return;\n      }\n      var uid = getUniqueId(element);\n      if (handlers[uid] && handlers[uid][eventName]) {\n        var handlersForEvent = handlers[uid][eventName];\n        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n          if (handlersForEvent[i] === handler) {\n            handlersForEvent.splice(i, 1);\n          }\n        }\n      }\n    };\n  }\n\n  /**\n   * Adds an event listener to an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  fabric.util.addListener = addListener;\n\n  /**\n   * Removes an event listener from an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  fabric.util.removeListener = removeListener;\n\n  /**\n   * Cross-browser wrapper for getting event's coordinates\n   * @memberOf fabric.util\n   * @param {Event} event Event object\n   */\n  function getPointer(event) {\n    event || (event = fabric.window.event);\n\n    var element = event.target ||\n                  (typeof event.srcElement !== unknown ? event.srcElement : null),\n\n        scroll = fabric.util.getScrollLeftTop(element);\n    return {\n      x: pointerX(event) + scroll.left,\n      y: pointerY(event) + scroll.top\n    };\n  }\n\n  var pointerX = function(event) {\n        return event.clientX;\n      },\n\n      pointerY = function(event) {\n        return event.clientY;\n      };\n\n  function _getPointer(event, pageProp, clientProp) {\n    var touchProp = event.type === 'touchend' ? 'changedTouches' : 'touches';\n    var pointer, eventTouchProp = event[touchProp];\n\n    if (eventTouchProp && eventTouchProp[0]) {\n      pointer = eventTouchProp[0][clientProp];\n    }\n\n    if (typeof pointer === 'undefined') {\n      pointer = event[clientProp];\n    }\n\n    return pointer;\n  }\n\n  if (fabric.isTouchSupported) {\n    pointerX = function(event) {\n      return _getPointer(event, 'pageX', 'clientX');\n    };\n    pointerY = function(event) {\n      return _getPointer(event, 'pageY', 'clientY');\n    };\n  }\n\n  fabric.util.getPointer = getPointer;\n\n})();\n\n\n(function () {\n\n  /**\n   * Cross-browser wrapper for setting element's style\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {Object} styles\n   * @return {HTMLElement} Element that was passed as a first argument\n   */\n  function setStyle(element, styles) {\n    var elementStyle = element.style;\n    if (!elementStyle) {\n      return element;\n    }\n    if (typeof styles === 'string') {\n      element.style.cssText += ';' + styles;\n      return styles.indexOf('opacity') > -1\n        ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\n        : element;\n    }\n    for (var property in styles) {\n      if (property === 'opacity') {\n        setOpacity(element, styles[property]);\n      }\n      else {\n        var normalizedProperty = (property === 'float' || property === 'cssFloat')\n          ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\n          : property;\n        elementStyle[normalizedProperty] = styles[property];\n      }\n    }\n    return element;\n  }\n\n  var parseEl = fabric.document.createElement('div'),\n      supportsOpacity = typeof parseEl.style.opacity === 'string',\n      supportsFilters = typeof parseEl.style.filter === 'string',\n      reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\n\n      /** @ignore */\n      setOpacity = function (element) { return element; };\n\n  if (supportsOpacity) {\n    /** @ignore */\n    setOpacity = function(element, value) {\n      element.style.opacity = value;\n      return element;\n    };\n  }\n  else if (supportsFilters) {\n    /** @ignore */\n    setOpacity = function(element, value) {\n      var es = element.style;\n      if (element.currentStyle && !element.currentStyle.hasLayout) {\n        es.zoom = 1;\n      }\n      if (reOpacity.test(es.filter)) {\n        value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\n        es.filter = es.filter.replace(reOpacity, value);\n      }\n      else {\n        es.filter += ' alpha(opacity=' + (value * 100) + ')';\n      }\n      return element;\n    };\n  }\n\n  fabric.util.setStyle = setStyle;\n\n})();\n\n\n(function() {\n\n  var _slice = Array.prototype.slice;\n\n  /**\n   * Takes id and returns an element with that id (if one exists in a document)\n   * @memberOf fabric.util\n   * @param {String|HTMLElement} id\n   * @return {HTMLElement|null}\n   */\n  function getById(id) {\n    return typeof id === 'string' ? fabric.document.getElementById(id) : id;\n  }\n\n  var sliceCanConvertNodelists,\n      /**\n       * Converts an array-like object (e.g. arguments or NodeList) to an array\n       * @memberOf fabric.util\n       * @param {Object} arrayLike\n       * @return {Array}\n       */\n      toArray = function(arrayLike) {\n        return _slice.call(arrayLike, 0);\n      };\n\n  try {\n    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\n  }\n  catch (err) { }\n\n  if (!sliceCanConvertNodelists) {\n    toArray = function(arrayLike) {\n      var arr = new Array(arrayLike.length), i = arrayLike.length;\n      while (i--) {\n        arr[i] = arrayLike[i];\n      }\n      return arr;\n    };\n  }\n\n  /**\n   * Creates specified element with specified attributes\n   * @memberOf fabric.util\n   * @param {String} tagName Type of an element to create\n   * @param {Object} [attributes] Attributes to set on an element\n   * @return {HTMLElement} Newly created element\n   */\n  function makeElement(tagName, attributes) {\n    var el = fabric.document.createElement(tagName);\n    for (var prop in attributes) {\n      if (prop === 'class') {\n        el.className = attributes[prop];\n      }\n      else if (prop === 'for') {\n        el.htmlFor = attributes[prop];\n      }\n      else {\n        el.setAttribute(prop, attributes[prop]);\n      }\n    }\n    return el;\n  }\n\n  /**\n   * Adds class to an element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to add class to\n   * @param {String} className Class to add to an element\n   */\n  function addClass(element, className) {\n    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\n      element.className += (element.className ? ' ' : '') + className;\n    }\n  }\n\n  /**\n   * Wraps element with another element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to wrap\n   * @param {HTMLElement|String} wrapper Element to wrap with\n   * @param {Object} [attributes] Attributes to set on a wrapper\n   * @return {HTMLElement} wrapper\n   */\n  function wrapElement(element, wrapper, attributes) {\n    if (typeof wrapper === 'string') {\n      wrapper = makeElement(wrapper, attributes);\n    }\n    if (element.parentNode) {\n      element.parentNode.replaceChild(wrapper, element);\n    }\n    wrapper.appendChild(element);\n    return wrapper;\n  }\n\n  /**\n   * Returns element scroll offsets\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to operate on\n   * @return {Object} Object with left/top values\n   */\n  function getScrollLeftTop(element) {\n\n    var left = 0,\n        top = 0,\n        docElement = fabric.document.documentElement,\n        body = fabric.document.body || {\n          scrollLeft: 0, scrollTop: 0\n        };\n\n    // While loop checks (and then sets element to) .parentNode OR .host\n    //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n    //  but the .parentNode of a root ShadowDOM node will always be null, instead\n    //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n    while (element && (element.parentNode || element.host)) {\n\n      // Set element to element parent, or 'host' in case of ShadowDOM\n      element = element.parentNode || element.host;\n\n      if (element === fabric.document) {\n        left = body.scrollLeft || docElement.scrollLeft || 0;\n        top = body.scrollTop ||  docElement.scrollTop || 0;\n      }\n      else {\n        left += element.scrollLeft || 0;\n        top += element.scrollTop || 0;\n      }\n\n      if (element.nodeType === 1 && element.style.position === 'fixed') {\n        break;\n      }\n    }\n\n    return { left: left, top: top };\n  }\n\n  /**\n   * Returns offset for a given element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get offset for\n   * @return {Object} Object with \"left\" and \"top\" properties\n   */\n  function getElementOffset(element) {\n    var docElem,\n        doc = element && element.ownerDocument,\n        box = { left: 0, top: 0 },\n        offset = { left: 0, top: 0 },\n        scrollLeftTop,\n        offsetAttributes = {\n          borderLeftWidth: 'left',\n          borderTopWidth:  'top',\n          paddingLeft:     'left',\n          paddingTop:      'top'\n        };\n\n    if (!doc) {\n      return offset;\n    }\n\n    for (var attr in offsetAttributes) {\n      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\n    }\n\n    docElem = doc.documentElement;\n    if ( typeof element.getBoundingClientRect !== 'undefined' ) {\n      box = element.getBoundingClientRect();\n    }\n\n    scrollLeftTop = getScrollLeftTop(element);\n\n    return {\n      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\n    };\n  }\n\n  /**\n   * Returns style attribute value of a given element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get style attribute for\n   * @param {String} attr Style attribute to get for element\n   * @return {String} Style attribute value of the given element.\n   */\n  var getElementStyle;\n  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\n    getElementStyle = function(element, attr) {\n      var style = fabric.document.defaultView.getComputedStyle(element, null);\n      return style ? style[attr] : undefined;\n    };\n  }\n  else {\n    getElementStyle = function(element, attr) {\n      var value = element.style[attr];\n      if (!value && element.currentStyle) {\n        value = element.currentStyle[attr];\n      }\n      return value;\n    };\n  }\n\n  (function () {\n    var style = fabric.document.documentElement.style,\n        selectProp = 'userSelect' in style\n          ? 'userSelect'\n          : 'MozUserSelect' in style\n            ? 'MozUserSelect'\n            : 'WebkitUserSelect' in style\n              ? 'WebkitUserSelect'\n              : 'KhtmlUserSelect' in style\n                ? 'KhtmlUserSelect'\n                : '';\n\n    /**\n     * Makes element unselectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make unselectable\n     * @return {HTMLElement} Element that was passed in\n     */\n    function makeElementUnselectable(element) {\n      if (typeof element.onselectstart !== 'undefined') {\n        element.onselectstart = fabric.util.falseFunction;\n      }\n      if (selectProp) {\n        element.style[selectProp] = 'none';\n      }\n      else if (typeof element.unselectable === 'string') {\n        element.unselectable = 'on';\n      }\n      return element;\n    }\n\n    /**\n     * Makes element selectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make selectable\n     * @return {HTMLElement} Element that was passed in\n     */\n    function makeElementSelectable(element) {\n      if (typeof element.onselectstart !== 'undefined') {\n        element.onselectstart = null;\n      }\n      if (selectProp) {\n        element.style[selectProp] = '';\n      }\n      else if (typeof element.unselectable === 'string') {\n        element.unselectable = '';\n      }\n      return element;\n    }\n\n    fabric.util.makeElementUnselectable = makeElementUnselectable;\n    fabric.util.makeElementSelectable = makeElementSelectable;\n  })();\n\n  (function() {\n\n    /**\n     * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading\n     * @memberOf fabric.util\n     * @param {String} url URL of a script to load\n     * @param {Function} callback Callback to execute when script is finished loading\n     */\n    function getScript(url, callback) {\n      var headEl = fabric.document.getElementsByTagName('head')[0],\n          scriptEl = fabric.document.createElement('script'),\n          loading = true;\n\n      /** @ignore */\n      scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {\n        if (loading) {\n          if (typeof this.readyState === 'string' &&\n              this.readyState !== 'loaded' &&\n              this.readyState !== 'complete') {\n            return;\n          }\n          loading = false;\n          callback(e || fabric.window.event);\n          scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;\n        }\n      };\n      scriptEl.src = url;\n      headEl.appendChild(scriptEl);\n      // causes issue in Opera\n      // headEl.removeChild(scriptEl);\n    }\n\n    fabric.util.getScript = getScript;\n  })();\n\n  function getNodeCanvas(element) {\n    var impl = fabric.jsdomImplForWrapper(element);\n    return impl._canvas || impl._image;\n  };\n\n  function cleanUpJsdomNode(element) {\n    if (!fabric.isLikelyNode) {\n      return;\n    }\n    var impl = fabric.jsdomImplForWrapper(element);\n    if (impl) {\n      impl._image = null;\n      impl._canvas = null;\n      // unsure if necessary\n      impl._currentSrc = null;\n      impl._attributes = null;\n      impl._classList = null;\n    }\n  }\n\n  fabric.util.getById = getById;\n  fabric.util.toArray = toArray;\n  fabric.util.makeElement = makeElement;\n  fabric.util.addClass = addClass;\n  fabric.util.wrapElement = wrapElement;\n  fabric.util.getScrollLeftTop = getScrollLeftTop;\n  fabric.util.getElementOffset = getElementOffset;\n  fabric.util.getElementStyle = getElementStyle;\n  fabric.util.getNodeCanvas = getNodeCanvas;\n  fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;\n\n})();\n\n\n(function() {\n\n  function addParamToUrl(url, param) {\n    return url + (/\\?/.test(url) ? '&' : '?') + param;\n  }\n\n  function emptyFn() { }\n\n  /**\n   * Cross-browser abstraction for sending XMLHttpRequest\n   * @memberOf fabric.util\n   * @param {String} url URL to send XMLHttpRequest to\n   * @param {Object} [options] Options object\n   * @param {String} [options.method=\"GET\"]\n   * @param {String} [options.parameters] parameters to append to url in GET or in body\n   * @param {String} [options.body] body to send with POST or PUT request\n   * @param {Function} options.onComplete Callback to invoke when request is completed\n   * @return {XMLHttpRequest} request\n   */\n  function request(url, options) {\n    options || (options = { });\n\n    var method = options.method ? options.method.toUpperCase() : 'GET',\n        onComplete = options.onComplete || function() { },\n        xhr = new fabric.window.XMLHttpRequest(),\n        body = options.body || options.parameters;\n\n    /** @ignore */\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        onComplete(xhr);\n        xhr.onreadystatechange = emptyFn;\n      }\n    };\n\n    if (method === 'GET') {\n      body = null;\n      if (typeof options.parameters === 'string') {\n        url = addParamToUrl(url, options.parameters);\n      }\n    }\n\n    xhr.open(method, url, true);\n\n    if (method === 'POST' || method === 'PUT') {\n      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    }\n\n    xhr.send(body);\n    return xhr;\n  }\n\n  fabric.util.request = request;\n})();\n\n\n/**\n * Wrapper around `console.log` (when available)\n * @param {*} [values] Values to log\n */\nfabric.log = function() { };\n\n/**\n * Wrapper around `console.warn` (when available)\n * @param {*} [values] Values to log as a warning\n */\nfabric.warn = function() { };\n\n/* eslint-disable */\nif (typeof console !== 'undefined') {\n\n  ['log', 'warn'].forEach(function(methodName) {\n\n    if (typeof console[methodName] !== 'undefined' &&\n        typeof console[methodName].apply === 'function') {\n\n      fabric[methodName] = function() {\n        return console[methodName].apply(console, arguments);\n      };\n    }\n  });\n}\n/* eslint-enable */\n\n\n(function() {\n\n  function noop() {\n    return false;\n  }\n\n  /**\n   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\n   * @memberOf fabric.util\n   * @param {Object} [options] Animation options\n   * @param {Function} [options.onChange] Callback; invoked on every value change\n   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n   * @param {Number} [options.startValue=0] Starting value\n   * @param {Number} [options.endValue=100] Ending value\n   * @param {Number} [options.byValue=100] Value to modify the property by\n   * @param {Function} [options.easing] Easing function\n   * @param {Number} [options.duration=500] Duration of change (in ms)\n   */\n  function animate(options) {\n\n    requestAnimFrame(function(timestamp) {\n      options || (options = { });\n\n      var start = timestamp || +new Date(),\n          duration = options.duration || 500,\n          finish = start + duration, time,\n          onChange = options.onChange || noop,\n          abort = options.abort || noop,\n          onComplete = options.onComplete || noop,\n          easing = options.easing || function(t, b, c, d) {return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;},\n          startValue = 'startValue' in options ? options.startValue : 0,\n          endValue = 'endValue' in options ? options.endValue : 100,\n          byValue = options.byValue || endValue - startValue;\n\n      options.onStart && options.onStart();\n\n      (function tick(ticktime) {\n        if (abort()) {\n          onComplete(endValue, 1, 1);\n          return;\n        }\n        time = ticktime || +new Date();\n        var currentTime = time > finish ? duration : (time - start),\n            timePerc = currentTime / duration,\n            current = easing(currentTime, startValue, byValue, duration),\n            valuePerc = Math.abs((current - startValue) / byValue);\n        onChange(current, valuePerc, timePerc);\n        if (time > finish) {\n          options.onComplete && options.onComplete();\n          return;\n        }\n        requestAnimFrame(tick);\n      })(start);\n    });\n\n  }\n\n  var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\n                          fabric.window.webkitRequestAnimationFrame ||\n                          fabric.window.mozRequestAnimationFrame    ||\n                          fabric.window.oRequestAnimationFrame      ||\n                          fabric.window.msRequestAnimationFrame     ||\n                          function(callback) {\n                            return fabric.window.setTimeout(callback, 1000 / 60);\n                          };\n\n  var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;\n\n  /**\n   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\n   * @memberOf fabric.util\n   * @param {Function} callback Callback to invoke\n   * @param {DOMElement} element optional Element to associate with animation\n   */\n  function requestAnimFrame() {\n    return _requestAnimFrame.apply(fabric.window, arguments);\n  }\n\n  function cancelAnimFrame() {\n    return _cancelAnimFrame.apply(fabric.window, arguments);\n  }\n\n  fabric.util.animate = animate;\n  fabric.util.requestAnimFrame = requestAnimFrame;\n  fabric.util.cancelAnimFrame = cancelAnimFrame;\n})();\n\n\n(function() {\n  // Calculate an in-between color. Returns a \"rgba()\" string.\n  // Credit: Edwin Martin <edwin@bitstorm.org>\n  //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js\n  function calculateColor(begin, end, pos) {\n    var color = 'rgba('\n        + parseInt((begin[0] + pos * (end[0] - begin[0])), 10) + ','\n        + parseInt((begin[1] + pos * (end[1] - begin[1])), 10) + ','\n        + parseInt((begin[2] + pos * (end[2] - begin[2])), 10);\n\n    color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);\n    color += ')';\n    return color;\n  }\n\n  /**\n   * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.\n   * @memberOf fabric.util\n   * @param {String} fromColor The starting color in hex or rgb(a) format.\n   * @param {String} toColor The starting color in hex or rgb(a) format.\n   * @param {Number} [duration] Duration of change (in ms).\n   * @param {Object} [options] Animation options\n   * @param {Function} [options.onChange] Callback; invoked on every value change\n   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n   * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.\n   */\n  function animateColor(fromColor, toColor, duration, options) {\n    var startColor = new fabric.Color(fromColor).getSource(),\n        endColor = new fabric.Color(toColor).getSource();\n\n    options = options || {};\n\n    fabric.util.animate(fabric.util.object.extend(options, {\n      duration: duration || 500,\n      startValue: startColor,\n      endValue: endColor,\n      byValue: endColor,\n      easing: function (currentTime, startValue, byValue, duration) {\n        var posValue = options.colorEasing\n          ? options.colorEasing(currentTime, duration)\n          : 1 - Math.cos(currentTime / duration * (Math.PI / 2));\n        return calculateColor(startValue, byValue, posValue);\n      }\n    }));\n  }\n\n  fabric.util.animateColor = animateColor;\n\n})();\n\n\n(function() {\n\n  function normalize(a, c, p, s) {\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    }\n    else {\n      //handle the 0/0 case:\n      if (c === 0 && a === 0) {\n        s = p / (2 * Math.PI) * Math.asin(1);\n      }\n      else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n      }\n    }\n    return { a: a, c: c, p: p, s: s };\n  }\n\n  function elastic(opts, t, d) {\n    return opts.a *\n      Math.pow(2, 10 * (t -= 1)) *\n      Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );\n  }\n\n  /**\n   * Cubic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n  }\n\n  /**\n   * Cubic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutCubic(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * t * t * t + b;\n    }\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n  }\n\n  /**\n   * Quartic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n  }\n\n  /**\n   * Quartic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n  }\n\n  /**\n   * Quartic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutQuart(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * t * t * t * t + b;\n    }\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n  }\n\n  /**\n   * Quintic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInQuint(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n  }\n\n  /**\n   * Quintic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutQuint(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n  }\n\n  /**\n   * Quintic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutQuint(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * t * t * t * t * t + b;\n    }\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n  }\n\n  /**\n   * Sinusoidal easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInSine(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n  }\n\n  /**\n   * Sinusoidal easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutSine(t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n  }\n\n  /**\n   * Sinusoidal easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutSine(t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n  }\n\n  /**\n   * Exponential easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInExpo(t, b, c, d) {\n    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n  }\n\n  /**\n   * Exponential easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutExpo(t, b, c, d) {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n  }\n\n  /**\n   * Exponential easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutExpo(t, b, c, d) {\n    if (t === 0) {\n      return b;\n    }\n    if (t === d) {\n      return b + c;\n    }\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    }\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n  }\n\n  /**\n   * Circular easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInCirc(t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n  }\n\n  /**\n   * Circular easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutCirc(t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n  }\n\n  /**\n   * Circular easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutCirc(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    }\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n  }\n\n  /**\n   * Elastic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d;\n    if (t === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    var opts = normalize(a, c, p, s);\n    return -elastic(opts, t, d) + b;\n  }\n\n  /**\n   * Elastic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d;\n    if (t === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    var opts = normalize(a, c, p, s);\n    return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;\n  }\n\n  /**\n   * Elastic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d / 2;\n    if (t === 2) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * (0.3 * 1.5);\n    }\n    var opts = normalize(a, c, p, s);\n    if (t < 1) {\n      return -0.5 * elastic(opts, t, d) + b;\n    }\n    return opts.a * Math.pow(2, -10 * (t -= 1)) *\n      Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;\n  }\n\n  /**\n   * Backwards easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n  }\n\n  /**\n   * Backwards easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n  }\n\n  /**\n   * Backwards easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n    }\n    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n  }\n\n  /**\n   * Bouncing easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInBounce(t, b, c, d) {\n    return c - easeOutBounce (d - t, 0, c, d) + b;\n  }\n\n  /**\n   * Bouncing easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutBounce(t, b, c, d) {\n    if ((t /= d) < (1 / 2.75)) {\n      return c * (7.5625 * t * t) + b;\n    }\n    else if (t < (2 / 2.75)) {\n      return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n    }\n    else if (t < (2.5 / 2.75)) {\n      return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n    }\n    else {\n      return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n    }\n  }\n\n  /**\n   * Bouncing easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutBounce(t, b, c, d) {\n    if (t < d / 2) {\n      return easeInBounce (t * 2, 0, c, d) * 0.5 + b;\n    }\n    return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n  }\n\n  /**\n   * Easing functions\n   * See <a href=\"http://gizma.com/easing/\">Easing Equations by Robert Penner</a>\n   * @namespace fabric.util.ease\n   */\n  fabric.util.ease = {\n\n    /**\n     * Quadratic easing in\n     * @memberOf fabric.util.ease\n     */\n    easeInQuad: function(t, b, c, d) {\n      return c * (t /= d) * t + b;\n    },\n\n    /**\n     * Quadratic easing out\n     * @memberOf fabric.util.ease\n     */\n    easeOutQuad: function(t, b, c, d) {\n      return -c * (t /= d) * (t - 2) + b;\n    },\n\n    /**\n     * Quadratic easing in and out\n     * @memberOf fabric.util.ease\n     */\n    easeInOutQuad: function(t, b, c, d) {\n      t /= (d / 2);\n      if (t < 1) {\n        return c / 2 * t * t + b;\n      }\n      return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    },\n\n    /**\n     * Cubic easing in\n     * @memberOf fabric.util.ease\n     */\n    easeInCubic: function(t, b, c, d) {\n      return c * (t /= d) * t * t + b;\n    },\n\n    easeOutCubic: easeOutCubic,\n    easeInOutCubic: easeInOutCubic,\n    easeInQuart: easeInQuart,\n    easeOutQuart: easeOutQuart,\n    easeInOutQuart: easeInOutQuart,\n    easeInQuint: easeInQuint,\n    easeOutQuint: easeOutQuint,\n    easeInOutQuint: easeInOutQuint,\n    easeInSine: easeInSine,\n    easeOutSine: easeOutSine,\n    easeInOutSine: easeInOutSine,\n    easeInExpo: easeInExpo,\n    easeOutExpo: easeOutExpo,\n    easeInOutExpo: easeInOutExpo,\n    easeInCirc: easeInCirc,\n    easeOutCirc: easeOutCirc,\n    easeInOutCirc: easeInOutCirc,\n    easeInElastic: easeInElastic,\n    easeOutElastic: easeOutElastic,\n    easeInOutElastic: easeInOutElastic,\n    easeInBack: easeInBack,\n    easeOutBack: easeOutBack,\n    easeInOutBack: easeInOutBack,\n    easeInBounce: easeInBounce,\n    easeOutBounce: easeOutBounce,\n    easeInOutBounce: easeInOutBounce\n  };\n\n})();\n\n\n(function(global) {\n\n  'use strict';\n\n  /**\n   * @name fabric\n   * @namespace\n   */\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone,\n      toFixed = fabric.util.toFixed,\n      parseUnit = fabric.util.parseUnit,\n      multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,\n\n      svgValidTagNames = ['path', 'circle', 'polygon', 'polyline', 'ellipse', 'rect', 'line',\n        'image', 'text'],\n      svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n      svgInvalidAncestors = ['pattern', 'defs', 'symbol', 'metadata', 'clipPath', 'mask', 'desc'],\n      svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\n\n      attributesMap = {\n        cx:                   'left',\n        x:                    'left',\n        r:                    'radius',\n        cy:                   'top',\n        y:                    'top',\n        display:              'visible',\n        visibility:           'visible',\n        transform:            'transformMatrix',\n        'fill-opacity':       'fillOpacity',\n        'fill-rule':          'fillRule',\n        'font-family':        'fontFamily',\n        'font-size':          'fontSize',\n        'font-style':         'fontStyle',\n        'font-weight':        'fontWeight',\n        'letter-spacing':     'charSpacing',\n        'paint-order':        'paintFirst',\n        'stroke-dasharray':   'strokeDashArray',\n        'stroke-dashoffset':  'strokeDashOffset',\n        'stroke-linecap':     'strokeLineCap',\n        'stroke-linejoin':    'strokeLineJoin',\n        'stroke-miterlimit':  'strokeMiterLimit',\n        'stroke-opacity':     'strokeOpacity',\n        'stroke-width':       'strokeWidth',\n        'text-decoration':    'textDecoration',\n        'text-anchor':        'textAnchor',\n        opacity:              'opacity',\n        'clip-path':          'clipPath',\n        'clip-rule':          'clipRule',\n      },\n\n      colorAttributes = {\n        stroke: 'strokeOpacity',\n        fill:   'fillOpacity'\n      };\n\n  fabric.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n  fabric.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n  fabric.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n  fabric.svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n  fabric.cssRules = { };\n  fabric.gradientDefs = { };\n  fabric.clipPaths = { };\n\n  function normalizeAttr(attr) {\n    // transform attribute names\n    if (attr in attributesMap) {\n      return attributesMap[attr];\n    }\n    return attr;\n  }\n\n  function normalizeValue(attr, value, parentAttributes, fontSize) {\n    var isArray = Object.prototype.toString.call(value) === '[object Array]',\n        parsed;\n\n    if ((attr === 'fill' || attr === 'stroke') && value === 'none') {\n      value = '';\n    }\n    else if (attr === 'strokeDashArray') {\n      if (value === 'none') {\n        value = null;\n      }\n      else {\n        value = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\n      }\n    }\n    else if (attr === 'transformMatrix') {\n      if (parentAttributes && parentAttributes.transformMatrix) {\n        value = multiplyTransformMatrices(\n          parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));\n      }\n      else {\n        value = fabric.parseTransformAttribute(value);\n      }\n    }\n    else if (attr === 'visible') {\n      value = value !== 'none' && value !== 'hidden';\n      // display=none on parent element always takes precedence over child element\n      if (parentAttributes && parentAttributes.visible === false) {\n        value = false;\n      }\n    }\n    else if (attr === 'opacity') {\n      value = parseFloat(value);\n      if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n        value *= parentAttributes.opacity;\n      }\n    }\n    else if (attr === 'textAnchor' /* text-anchor */) {\n      value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';\n    }\n    else if (attr === 'charSpacing') {\n      // parseUnit returns px and we convert it to em\n      parsed = parseUnit(value, fontSize) / fontSize * 1000;\n    }\n    else if (attr === 'paintFirst') {\n      var fillIndex = value.indexOf('fill');\n      var strokeIndex = value.indexOf('stroke');\n      var value = 'fill';\n      if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n        value = 'stroke';\n      }\n      else if (fillIndex === -1 && strokeIndex > -1) {\n        value = 'stroke';\n      }\n    }\n    else if (attr === 'href' || attr === 'xlink:href') {\n      return value;\n    }\n    else {\n      parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);\n    }\n\n    return (!isArray && isNaN(parsed) ? value : parsed);\n  }\n\n  /**\n    * @private\n    */\n  function getSvgRegex(arr) {\n    return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n  }\n\n  /**\n   * @private\n   * @param {Object} attributes Array of attributes to parse\n   */\n  function _setStrokeFillOpacity(attributes) {\n    for (var attr in colorAttributes) {\n\n      if (typeof attributes[colorAttributes[attr]] === 'undefined' || attributes[attr] === '') {\n        continue;\n      }\n\n      if (typeof attributes[attr] === 'undefined') {\n        if (!fabric.Object.prototype[attr]) {\n          continue;\n        }\n        attributes[attr] = fabric.Object.prototype[attr];\n      }\n\n      if (attributes[attr].indexOf('url(') === 0) {\n        continue;\n      }\n\n      var color = new fabric.Color(attributes[attr]);\n      attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();\n    }\n    return attributes;\n  }\n\n  /**\n   * @private\n   */\n  function _getMultipleNodes(doc, nodeNames) {\n    var nodeName, nodeArray = [], nodeList, i, len;\n    for (i = 0, len = nodeNames.length; i < len; i++) {\n      nodeName = nodeNames[i];\n      nodeList = doc.getElementsByTagName(nodeName);\n      nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));\n    }\n    return nodeArray;\n  }\n\n  /**\n   * Parses \"transform\" attribute, returning an array of values\n   * @static\n   * @function\n   * @memberOf fabric\n   * @param {String} attributeValue String containing attribute value\n   * @return {Array} Array of 6 elements representing transformation matrix\n   */\n  fabric.parseTransformAttribute = (function() {\n    function rotateMatrix(matrix, args) {\n      var cos = fabric.util.cos(args[0]), sin = fabric.util.sin(args[0]),\n          x = 0, y = 0;\n      if (args.length === 3) {\n        x = args[1];\n        y = args[2];\n      }\n\n      matrix[0] = cos;\n      matrix[1] = sin;\n      matrix[2] = -sin;\n      matrix[3] = cos;\n      matrix[4] = x - (cos * x - sin * y);\n      matrix[5] = y - (sin * x + cos * y);\n    }\n\n    function scaleMatrix(matrix, args) {\n      var multiplierX = args[0],\n          multiplierY = (args.length === 2) ? args[1] : args[0];\n\n      matrix[0] = multiplierX;\n      matrix[3] = multiplierY;\n    }\n\n    function skewMatrix(matrix, args, pos) {\n      matrix[pos] = Math.tan(fabric.util.degreesToRadians(args[0]));\n    }\n\n    function translateMatrix(matrix, args) {\n      matrix[4] = args[0];\n      if (args.length === 2) {\n        matrix[5] = args[1];\n      }\n    }\n\n    // identity matrix\n    var iMatrix = fabric.iMatrix,\n\n        // == begin transform regexp\n        number = fabric.reNum,\n\n        commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)',\n\n        skewX = '(?:(skewX)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\n        skewY = '(?:(skewY)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\n        rotate = '(?:(rotate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + ')' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        scale = '(?:(scale)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        translate = '(?:(translate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        matrix = '(?:(matrix)\\\\s*\\\\(\\\\s*' +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' +\n                  '\\\\s*\\\\))',\n\n        transform = '(?:' +\n                    matrix + '|' +\n                    translate + '|' +\n                    scale + '|' +\n                    rotate + '|' +\n                    skewX + '|' +\n                    skewY +\n                    ')',\n\n        transforms = '(?:' + transform + '(?:' + commaWsp + '*' + transform + ')*' + ')',\n\n        transformList = '^\\\\s*(?:' + transforms + '?)\\\\s*$',\n\n        // http://www.w3.org/TR/SVG/coords.html#TransformAttribute\n        reTransformList = new RegExp(transformList),\n        // == end transform regexp\n\n        reTransform = new RegExp(transform, 'g');\n\n    return function(attributeValue) {\n\n      // start with identity matrix\n      var matrix = iMatrix.concat(),\n          matrices = [];\n\n      // return if no argument was given or\n      // an argument does not match transform attribute regexp\n      if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {\n        return matrix;\n      }\n\n      attributeValue.replace(reTransform, function(match) {\n\n        var m = new RegExp(transform).exec(match).filter(function (match) {\n              // match !== '' && match != null\n              return (!!match);\n            }),\n            operation = m[1],\n            args = m.slice(2).map(parseFloat);\n\n        switch (operation) {\n          case 'translate':\n            translateMatrix(matrix, args);\n            break;\n          case 'rotate':\n            args[0] = fabric.util.degreesToRadians(args[0]);\n            rotateMatrix(matrix, args);\n            break;\n          case 'scale':\n            scaleMatrix(matrix, args);\n            break;\n          case 'skewX':\n            skewMatrix(matrix, args, 2);\n            break;\n          case 'skewY':\n            skewMatrix(matrix, args, 1);\n            break;\n          case 'matrix':\n            matrix = args;\n            break;\n        }\n\n        // snapshot current matrix into matrices array\n        matrices.push(matrix.concat());\n        // reset\n        matrix = iMatrix.concat();\n      });\n\n      var combinedMatrix = matrices[0];\n      while (matrices.length > 1) {\n        matrices.shift();\n        combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);\n      }\n      return combinedMatrix;\n    };\n  })();\n\n  /**\n   * @private\n   */\n  function parseStyleString(style, oStyle) {\n    var attr, value;\n    style.replace(/;\\s*$/, '').split(';').forEach(function (chunk) {\n      var pair = chunk.split(':');\n\n      attr = pair[0].trim().toLowerCase();\n      value =  pair[1].trim();\n\n      oStyle[attr] = value;\n    });\n  }\n\n  /**\n   * @private\n   */\n  function parseStyleObject(style, oStyle) {\n    var attr, value;\n    for (var prop in style) {\n      if (typeof style[prop] === 'undefined') {\n        continue;\n      }\n\n      attr = prop.toLowerCase();\n      value = style[prop];\n\n      oStyle[attr] = value;\n    }\n  }\n\n  /**\n   * @private\n   */\n  function getGlobalStylesForElement(element, svgUid) {\n    var styles = { };\n    for (var rule in fabric.cssRules[svgUid]) {\n      if (elementMatchesRule(element, rule.split(' '))) {\n        for (var property in fabric.cssRules[svgUid][rule]) {\n          styles[property] = fabric.cssRules[svgUid][rule][property];\n        }\n      }\n    }\n    return styles;\n  }\n\n  /**\n   * @private\n   */\n  function elementMatchesRule(element, selectors) {\n    var firstMatching, parentMatching = true;\n    //start from rightmost selector.\n    firstMatching = selectorMatches(element, selectors.pop());\n    if (firstMatching && selectors.length) {\n      parentMatching = doesSomeParentMatch(element, selectors);\n    }\n    return firstMatching && parentMatching && (selectors.length === 0);\n  }\n\n  function doesSomeParentMatch(element, selectors) {\n    var selector, parentMatching = true;\n    while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {\n      if (parentMatching) {\n        selector = selectors.pop();\n      }\n      element = element.parentNode;\n      parentMatching = selectorMatches(element, selector);\n    }\n    return selectors.length === 0;\n  }\n\n  /**\n   * @private\n   */\n  function selectorMatches(element, selector) {\n    var nodeName = element.nodeName,\n        classNames = element.getAttribute('class'),\n        id = element.getAttribute('id'), matcher, i;\n    // i check if a selector matches slicing away part from it.\n    // if i get empty string i should match\n    matcher = new RegExp('^' + nodeName, 'i');\n    selector = selector.replace(matcher, '');\n    if (id && selector.length) {\n      matcher = new RegExp('#' + id + '(?![a-zA-Z\\\\-]+)', 'i');\n      selector = selector.replace(matcher, '');\n    }\n    if (classNames && selector.length) {\n      classNames = classNames.split(' ');\n      for (i = classNames.length; i--;) {\n        matcher = new RegExp('\\\\.' + classNames[i] + '(?![a-zA-Z\\\\-]+)', 'i');\n        selector = selector.replace(matcher, '');\n      }\n    }\n    return selector.length === 0;\n  }\n\n  /**\n   * @private\n   * to support IE8 missing getElementById on SVGdocument and on node xmlDOM\n   */\n  function elementById(doc, id) {\n    var el;\n    doc.getElementById && (el = doc.getElementById(id));\n    if (el) {\n      return el;\n    }\n    var node, i, len, nodelist = doc.getElementsByTagName('*');\n    for (i = 0, len = nodelist.length; i < len; i++) {\n      node = nodelist[i];\n      if (id === node.getAttribute('id')) {\n        return node;\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  function parseUseDirectives(doc) {\n    var nodelist = _getMultipleNodes(doc, ['use', 'svg:use']), i = 0;\n    while (nodelist.length && i < nodelist.length) {\n      var el = nodelist[i],\n          xlink = (el.getAttribute('xlink:href') || el.getAttribute('href')).substr(1),\n          x = el.getAttribute('x') || 0,\n          y = el.getAttribute('y') || 0,\n          el2 = elementById(doc, xlink).cloneNode(true),\n          currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',\n          parentNode, oldLength = nodelist.length, attr, j, attrs, len;\n\n      applyViewboxTransform(el2);\n      if (/^svg$/i.test(el2.nodeName)) {\n        var el3 = el2.ownerDocument.createElement('g');\n        for (j = 0, attrs = el2.attributes, len = attrs.length; j < len; j++) {\n          attr = attrs.item(j);\n          el3.setAttribute(attr.nodeName, attr.nodeValue);\n        }\n        // el2.firstChild != null\n        while (el2.firstChild) {\n          el3.appendChild(el2.firstChild);\n        }\n        el2 = el3;\n      }\n\n      for (j = 0, attrs = el.attributes, len = attrs.length; j < len; j++) {\n        attr = attrs.item(j);\n        if (attr.nodeName === 'x' || attr.nodeName === 'y' ||\n          attr.nodeName === 'xlink:href' || attr.nodeName === 'href') {\n          continue;\n        }\n\n        if (attr.nodeName === 'transform') {\n          currentTrans = attr.nodeValue + ' ' + currentTrans;\n        }\n        else {\n          el2.setAttribute(attr.nodeName, attr.nodeValue);\n        }\n      }\n\n      el2.setAttribute('transform', currentTrans);\n      el2.setAttribute('instantiated_by_use', '1');\n      el2.removeAttribute('id');\n      parentNode = el.parentNode;\n      parentNode.replaceChild(el2, el);\n      // some browsers do not shorten nodelist after replaceChild (IE8)\n      if (nodelist.length === oldLength) {\n        i++;\n      }\n    }\n  }\n\n  // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n  // matches, e.g.: +14.56e-12, etc.\n  var reViewBoxAttrValue = new RegExp(\n    '^' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*' +\n    '$'\n  );\n\n  /**\n   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n   */\n  function applyViewboxTransform(element) {\n\n    var viewBoxAttr = element.getAttribute('viewBox'),\n        scaleX = 1,\n        scaleY = 1,\n        minX = 0,\n        minY = 0,\n        viewBoxWidth, viewBoxHeight, matrix, el,\n        widthAttr = element.getAttribute('width'),\n        heightAttr = element.getAttribute('height'),\n        x = element.getAttribute('x') || 0,\n        y = element.getAttribute('y') || 0,\n        preserveAspectRatio = element.getAttribute('preserveAspectRatio') || '',\n        missingViewBox = (!viewBoxAttr || !fabric.svgViewBoxElementsRegEx.test(element.nodeName)\n                           || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),\n        missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),\n        toBeParsed = missingViewBox && missingDimAttr,\n        parsedDim = { }, translateMatrix = '', widthDiff = 0, heightDiff = 0;\n\n    parsedDim.width = 0;\n    parsedDim.height = 0;\n    parsedDim.toBeParsed = toBeParsed;\n\n    if (toBeParsed) {\n      return parsedDim;\n    }\n\n    if (missingViewBox) {\n      parsedDim.width = parseUnit(widthAttr);\n      parsedDim.height = parseUnit(heightAttr);\n      return parsedDim;\n    }\n\n    minX = -parseFloat(viewBoxAttr[1]);\n    minY = -parseFloat(viewBoxAttr[2]);\n    viewBoxWidth = parseFloat(viewBoxAttr[3]);\n    viewBoxHeight = parseFloat(viewBoxAttr[4]);\n\n    if (!missingDimAttr) {\n      parsedDim.width = parseUnit(widthAttr);\n      parsedDim.height = parseUnit(heightAttr);\n      scaleX = parsedDim.width / viewBoxWidth;\n      scaleY = parsedDim.height / viewBoxHeight;\n    }\n    else {\n      parsedDim.width = viewBoxWidth;\n      parsedDim.height = viewBoxHeight;\n    }\n\n    // default is to preserve aspect ratio\n    preserveAspectRatio = fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);\n    if (preserveAspectRatio.alignX !== 'none') {\n      //translate all container for the effect of Mid, Min, Max\n      if (preserveAspectRatio.meetOrSlice === 'meet') {\n        scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);\n        // calculate additional translation to move the viewbox\n      }\n      if (preserveAspectRatio.meetOrSlice === 'slice') {\n        scaleY = scaleX = (scaleX > scaleY ? scaleX : scaleY);\n        // calculate additional translation to move the viewbox\n      }\n      widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n      heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n      if (preserveAspectRatio.alignX === 'Mid') {\n        widthDiff /= 2;\n      }\n      if (preserveAspectRatio.alignY === 'Mid') {\n        heightDiff /= 2;\n      }\n      if (preserveAspectRatio.alignX === 'Min') {\n        widthDiff = 0;\n      }\n      if (preserveAspectRatio.alignY === 'Min') {\n        heightDiff = 0;\n      }\n    }\n\n    if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {\n      return parsedDim;\n    }\n\n    if (x || y) {\n      translateMatrix = ' translate(' + parseUnit(x) + ' ' + parseUnit(y) + ') ';\n    }\n\n    matrix = translateMatrix + ' matrix(' + scaleX +\n                  ' 0' +\n                  ' 0 ' +\n                  scaleY + ' ' +\n                  (minX * scaleX + widthDiff) + ' ' +\n                  (minY * scaleY + heightDiff) + ') ';\n    parsedDim.viewboxTransform = fabric.parseTransformAttribute(matrix);\n    if (element.nodeName === 'svg') {\n      el = element.ownerDocument.createElement('g');\n      // element.firstChild != null\n      while (element.firstChild) {\n        el.appendChild(element.firstChild);\n      }\n      element.appendChild(el);\n    }\n    else {\n      el = element;\n      matrix = el.getAttribute('transform') + matrix;\n    }\n    el.setAttribute('transform', matrix);\n    return parsedDim;\n  }\n\n  function hasAncestorWithNodeName(element, nodeName) {\n    while (element && (element = element.parentNode)) {\n      if (element.nodeName && nodeName.test(element.nodeName.replace('svg:', ''))\n        && !element.getAttribute('instantiated_by_use')) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n   * @static\n   * @function\n   * @memberOf fabric\n   * @param {SVGDocument} doc SVG document to parse\n   * @param {Function} callback Callback to call when parsing is finished;\n   * It's being passed an array of elements (parsed from a document).\n   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n   * @param {Object} [parsingOptions] options for parsing document\n   * @param {String} [parsingOptions.crossOrigin] crossOrigin settings\n   */\n  fabric.parseSVGDocument = function(doc, callback, reviver, parsingOptions) {\n    if (!doc) {\n      return;\n    }\n\n    parseUseDirectives(doc);\n\n    var svgUid =  fabric.Object.__uid++, i, len,\n        options = applyViewboxTransform(doc),\n        descendants = fabric.util.toArray(doc.getElementsByTagName('*'));\n    options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;\n    options.svgUid = svgUid;\n\n    if (descendants.length === 0 && fabric.isLikelyNode) {\n      // we're likely in node, where \"o3-xml\" library fails to gEBTN(\"*\")\n      // https://github.com/ajaxorg/node-o3-xml/issues/21\n      descendants = doc.selectNodes('//*[name(.)!=\"svg\"]');\n      var arr = [];\n      for (i = 0, len = descendants.length; i < len; i++) {\n        arr[i] = descendants[i];\n      }\n      descendants = arr;\n    }\n\n    var elements = descendants.filter(function(el) {\n      applyViewboxTransform(el);\n      return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', '')) &&\n            !hasAncestorWithNodeName(el, fabric.svgInvalidAncestorsRegEx); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n    });\n\n    if (!elements || (elements && !elements.length)) {\n      callback && callback([], {});\n      return;\n    }\n    var clipPaths = { };\n    descendants.filter(function(el) {\n      return el.nodeName.replace('svg:', '') === 'clipPath';\n    }).forEach(function(el) {\n      var id = el.getAttribute('id');\n      clipPaths[id] = fabric.util.toArray(el.getElementsByTagName('*')).filter(function(el) {\n        return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', ''));\n      });\n    });\n    fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);\n    fabric.cssRules[svgUid] = fabric.getCSSRules(doc);\n    fabric.clipPaths[svgUid] = clipPaths;\n    // Precedence of rules:   style > class > attribute\n    fabric.parseElements(elements, function(instances, elements) {\n      if (callback) {\n        callback(instances, options, elements, descendants);\n        delete fabric.gradientDefs[svgUid];\n        delete fabric.cssRules[svgUid];\n        delete fabric.clipPaths[svgUid];\n      }\n    }, clone(options), reviver, parsingOptions);\n  };\n\n  function recursivelyParseGradientsXlink(doc, gradient) {\n    var gradientsAttrs = ['gradientTransform', 'x1', 'x2', 'y1', 'y2', 'gradientUnits', 'cx', 'cy', 'r', 'fx', 'fy'],\n        xlinkAttr = 'xlink:href',\n        xLink = gradient.getAttribute(xlinkAttr).substr(1),\n        referencedGradient = elementById(doc, xLink);\n    if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\n      recursivelyParseGradientsXlink(doc, referencedGradient);\n    }\n    gradientsAttrs.forEach(function(attr) {\n      if (!gradient.hasAttribute(attr)) {\n        gradient.setAttribute(attr, referencedGradient.getAttribute(attr));\n      }\n    });\n    if (!gradient.children.length) {\n      var referenceClone = referencedGradient.cloneNode(true);\n      while (referenceClone.firstChild) {\n        gradient.appendChild(referenceClone.firstChild);\n      }\n    }\n    gradient.removeAttribute(xlinkAttr);\n  }\n\n  var reFontDeclaration = new RegExp(\n    '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n      fabric.reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' + fabric.reNum + '))?\\\\s+(.*)');\n\n  extend(fabric, {\n    /**\n     * Parses a short font declaration, building adding its properties to a style object\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {String} value font declaration\n     * @param {Object} oStyle definition\n     */\n    parseFontDeclaration: function(value, oStyle) {\n      var match = value.match(reFontDeclaration);\n\n      if (!match) {\n        return;\n      }\n      var fontStyle = match[1],\n          // font variant is not used\n          // fontVariant = match[2],\n          fontWeight = match[3],\n          fontSize = match[4],\n          lineHeight = match[5],\n          fontFamily = match[6];\n\n      if (fontStyle) {\n        oStyle.fontStyle = fontStyle;\n      }\n      if (fontWeight) {\n        oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);\n      }\n      if (fontSize) {\n        oStyle.fontSize = parseUnit(fontSize);\n      }\n      if (fontFamily) {\n        oStyle.fontFamily = fontFamily;\n      }\n      if (lineHeight) {\n        oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n      }\n    },\n\n    /**\n     * Parses an SVG document, returning all of the gradient declarations found in it\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {SVGDocument} doc SVG document to parse\n     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n     */\n    getGradientDefs: function(doc) {\n      var tagArray = [\n            'linearGradient',\n            'radialGradient',\n            'svg:linearGradient',\n            'svg:radialGradient'],\n          elList = _getMultipleNodes(doc, tagArray),\n          el, j = 0, gradientDefs = { };\n      j = elList.length;\n      while (j--) {\n        el = elList[j];\n        if (el.getAttribute('xlink:href')) {\n          recursivelyParseGradientsXlink(doc, el);\n        }\n        gradientDefs[el.getAttribute('id')] = el;\n      }\n      return gradientDefs;\n    },\n\n    /**\n     * Returns an object of attributes' name/value, given element and an array of attribute names;\n     * Parses parent \"g\" nodes recursively upwards.\n     * @static\n     * @memberOf fabric\n     * @param {DOMElement} element Element to parse\n     * @param {Array} attributes Array of attributes to parse\n     * @return {Object} object containing parsed attributes' names/values\n     */\n    parseAttributes: function(element, attributes, svgUid) {\n\n      if (!element) {\n        return;\n      }\n\n      var value,\n          parentAttributes = { },\n          fontSize, parentFontSize;\n\n      if (typeof svgUid === 'undefined') {\n        svgUid = element.getAttribute('svgUid');\n      }\n      // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n      if (element.parentNode && fabric.svgValidParentsRegEx.test(element.parentNode.nodeName)) {\n        parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);\n      }\n\n      var ownAttributes = attributes.reduce(function(memo, attr) {\n        value = element.getAttribute(attr);\n        if (value) { // eslint-disable-line\n          memo[attr] = value;\n        }\n        return memo;\n      }, { });\n      // add values parsed from style, which take precedence over attributes\n      // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n      ownAttributes = extend(ownAttributes,\n        extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element)));\n\n      fontSize = parentFontSize = parentAttributes.fontSize || fabric.Text.DEFAULT_SVG_FONT_SIZE;\n      if (ownAttributes['font-size']) {\n        // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n        ownAttributes['font-size'] = fontSize = parseUnit(ownAttributes['font-size'], parentFontSize);\n      }\n\n      var normalizedAttr, normalizedValue, normalizedStyle = {};\n      for (var attr in ownAttributes) {\n        normalizedAttr = normalizeAttr(attr);\n        normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize);\n        normalizedStyle[normalizedAttr] = normalizedValue;\n      }\n      if (normalizedStyle && normalizedStyle.font) {\n        fabric.parseFontDeclaration(normalizedStyle.font, normalizedStyle);\n      }\n      var mergedAttrs = extend(parentAttributes, normalizedStyle);\n      return fabric.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);\n    },\n\n    /**\n     * Transforms an array of svg elements to corresponding fabric.* instances\n     * @static\n     * @memberOf fabric\n     * @param {Array} elements Array of elements to parse\n     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)\n     * @param {Object} [options] Options object\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     */\n    parseElements: function(elements, callback, options, reviver, parsingOptions) {\n      new fabric.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();\n    },\n\n    /**\n     * Parses \"style\" attribute, retuning an object with values\n     * @static\n     * @memberOf fabric\n     * @param {SVGElement} element Element to parse\n     * @return {Object} Objects with values parsed from style attribute of an element\n     */\n    parseStyleAttribute: function(element) {\n      var oStyle = { },\n          style = element.getAttribute('style');\n\n      if (!style) {\n        return oStyle;\n      }\n\n      if (typeof style === 'string') {\n        parseStyleString(style, oStyle);\n      }\n      else {\n        parseStyleObject(style, oStyle);\n      }\n\n      return oStyle;\n    },\n\n    /**\n     * Parses \"points\" attribute, returning an array of values\n     * @static\n     * @memberOf fabric\n     * @param {String} points points attribute string\n     * @return {Array} array of points\n     */\n    parsePointsAttribute: function(points) {\n\n      // points attribute is required and must not be empty\n      if (!points) {\n        return null;\n      }\n\n      // replace commas with whitespace and remove bookending whitespace\n      points = points.replace(/,/g, ' ').trim();\n\n      points = points.split(/\\s+/);\n      var parsedPoints = [], i, len;\n\n      for (i = 0, len = points.length; i < len; i += 2) {\n        parsedPoints.push({\n          x: parseFloat(points[i]),\n          y: parseFloat(points[i + 1])\n        });\n      }\n\n      // odd number of points is an error\n      // if (parsedPoints.length % 2 !== 0) {\n      //   return null;\n      // }\n\n      return parsedPoints;\n    },\n\n    /**\n     * Returns CSS rules for a given SVG document\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {SVGDocument} doc SVG document to parse\n     * @return {Object} CSS rules of this document\n     */\n    getCSSRules: function(doc) {\n      var styles = doc.getElementsByTagName('style'), i, len,\n          allRules = { }, rules;\n\n      // very crude parsing of style contents\n      for (i = 0, len = styles.length; i < len; i++) {\n        // IE9 doesn't support textContent, but provides text instead.\n        var styleContents = styles[i].textContent || styles[i].text;\n\n        // remove comments\n        styleContents = styleContents.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n        if (styleContents.trim() === '') {\n          continue;\n        }\n        rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n        rules = rules.map(function(rule) { return rule.trim(); });\n        // eslint-disable-next-line no-loop-func\n        rules.forEach(function(rule) {\n\n          var match = rule.match(/([\\s\\S]*?)\\s*\\{([^}]*)\\}/),\n              ruleObj = { }, declaration = match[2].trim(),\n              propertyValuePairs = declaration.replace(/;$/, '').split(/\\s*;\\s*/);\n\n          for (i = 0, len = propertyValuePairs.length; i < len; i++) {\n            var pair = propertyValuePairs[i].split(/\\s*:\\s*/),\n                property = pair[0],\n                value = pair[1];\n            ruleObj[property] = value;\n          }\n          rule = match[1];\n          rule.split(',').forEach(function(_rule) {\n            _rule = _rule.replace(/^svg/i, '').trim();\n            if (_rule === '') {\n              return;\n            }\n            if (allRules[_rule]) {\n              fabric.util.object.extend(allRules[_rule], ruleObj);\n            }\n            else {\n              allRules[_rule] = fabric.util.object.clone(ruleObj);\n            }\n          });\n        });\n      }\n      return allRules;\n    },\n\n    /**\n     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n     * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n     * @memberOf fabric\n     * @param {String} url\n     * @param {Function} callback\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     * @param {Object} [options] Object containing options for parsing\n     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\n     */\n    loadSVGFromURL: function(url, callback, reviver, options) {\n\n      url = url.replace(/^\\n\\s*/, '').trim();\n      new fabric.util.request(url, {\n        method: 'get',\n        onComplete: onComplete\n      });\n\n      function onComplete(r) {\n\n        var xml = r.responseXML;\n        if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {\n          xml = new ActiveXObject('Microsoft.XMLDOM');\n          xml.async = 'false';\n          //IE chokes on DOCTYPE\n          xml.loadXML(r.responseText.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n        }\n        if (!xml || !xml.documentElement) {\n          callback && callback(null);\n          return false;\n        }\n\n        fabric.parseSVGDocument(xml.documentElement, function (results, _options, elements, allElements) {\n          callback && callback(results, _options, elements, allElements);\n        }, reviver, options);\n      }\n    },\n\n    /**\n     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n     * @memberOf fabric\n     * @param {String} string\n     * @param {Function} callback\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     * @param {Object} [options] Object containing options for parsing\n     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\n     */\n    loadSVGFromString: function(string, callback, reviver, options) {\n      string = string.trim();\n      var doc;\n      if (typeof DOMParser !== 'undefined') {\n        var parser = new DOMParser();\n        if (parser && parser.parseFromString) {\n          doc = parser.parseFromString(string, 'text/xml');\n        }\n      }\n      else if (fabric.window.ActiveXObject) {\n        doc = new ActiveXObject('Microsoft.XMLDOM');\n        doc.async = 'false';\n        // IE chokes on DOCTYPE\n        doc.loadXML(string.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n      }\n\n      fabric.parseSVGDocument(doc.documentElement, function (results, _options, elements, allElements) {\n        callback(results, _options, elements, allElements);\n      }, reviver, options);\n    }\n  });\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\nfabric.ElementsParser = function(elements, callback, options, reviver, parsingOptions) {\n  this.elements = elements;\n  this.callback = callback;\n  this.options = options;\n  this.reviver = reviver;\n  this.svgUid = (options && options.svgUid) || 0;\n  this.parsingOptions = parsingOptions;\n  this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n};\n\n(function(proto) {\n  proto.parse = function() {\n    this.instances = new Array(this.elements.length);\n    this.numElements = this.elements.length;\n    this.createObjects();\n  };\n\n  proto.createObjects = function() {\n    var _this = this;\n    this.elements.forEach(function(element, i) {\n      element.setAttribute('svgUid', _this.svgUid);\n      _this.createObject(element, i);\n    });\n  };\n\n  proto.findTag = function(el) {\n    return fabric[fabric.util.string.capitalize(el.tagName.replace('svg:', ''))];\n  };\n\n  proto.createObject = function(el, index) {\n    var klass = this.findTag(el);\n    if (klass && klass.fromElement) {\n      try {\n        klass.fromElement(el, this.createCallback(index, el), this.options);\n      }\n      catch (err) {\n        fabric.log(err);\n      }\n    }\n    else {\n      this.checkIfDone();\n    }\n  };\n\n  proto.createCallback = function(index, el) {\n    var _this = this;\n    return function(obj) {\n      var _options;\n      _this.resolveGradient(obj, 'fill');\n      _this.resolveGradient(obj, 'stroke');\n      if (obj instanceof fabric.Image && obj._originalElement) {\n        _options = obj.parsePreserveAspectRatioAttribute(el);\n      }\n      obj._removeTransformMatrix(_options);\n      _this.resolveClipPath(obj);\n      _this.reviver && _this.reviver(el, obj);\n      _this.instances[index] = obj;\n      _this.checkIfDone();\n    };\n  };\n\n  proto.extractPropertyDefinition = function(obj, property, storage) {\n    var value = obj[property];\n    if (!(/^url\\(/).test(value)) {\n      return;\n    }\n    var id = this.regexUrl.exec(value)[1];\n    this.regexUrl.lastIndex = 0;\n    return fabric[storage][this.svgUid][id];\n  };\n\n  proto.resolveGradient = function(obj, property) {\n    var gradientDef = this.extractPropertyDefinition(obj, property, 'gradientDefs');\n    if (gradientDef) {\n      obj.set(property, fabric.Gradient.fromElement(gradientDef, obj));\n    }\n  };\n\n  proto.createClipPathCallback = function(obj, container) {\n    return function(_newObj) {\n      _newObj._removeTransformMatrix();\n      _newObj.fillRule = _newObj.clipRule;\n      container.push(_newObj);\n    };\n  };\n\n  proto.resolveClipPath = function(obj) {\n    var clipPath = this.extractPropertyDefinition(obj, 'clipPath', 'clipPaths'),\n        element, klass, objTransformInv, container, gTransform, options;\n    if (clipPath) {\n      container = [];\n      objTransformInv = fabric.util.invertTransform(obj.calcTransformMatrix());\n      for (var i = 0; i < clipPath.length; i++) {\n        element = clipPath[i];\n        klass = this.findTag(element);\n        klass.fromElement(\n          element,\n          this.createClipPathCallback(obj, container),\n          this.options\n        );\n      }\n      if (container.length === 1) {\n        clipPath = container[0];\n      }\n      else {\n        clipPath = new fabric.Group(container);\n      }\n      gTransform = fabric.util.multiplyTransformMatrices(\n        objTransformInv,\n        clipPath.calcTransformMatrix()\n      );\n      var options = fabric.util.qrDecompose(gTransform);\n      clipPath.flipX = false;\n      clipPath.flipY = false;\n      clipPath.set('scaleX', options.scaleX);\n      clipPath.set('scaleY', options.scaleY);\n      clipPath.angle = options.angle;\n      clipPath.skewX = options.skewX;\n      clipPath.skewY = 0;\n      clipPath.setPositionByOrigin({ x: options.translateX, y: options.translateY }, 'center', 'center');\n      obj.clipPath = clipPath;\n    }\n  };\n\n  proto.checkIfDone = function() {\n    if (--this.numElements === 0) {\n      this.instances = this.instances.filter(function(el) {\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        return el != null;\n      });\n      this.callback(this.instances, this.elements);\n    }\n  };\n})(fabric.ElementsParser.prototype);\n\n\n(function(global) {\n\n  'use strict';\n\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Point) {\n    fabric.warn('fabric.Point is already defined');\n    return;\n  }\n\n  fabric.Point = Point;\n\n  /**\n   * Point class\n   * @class fabric.Point\n   * @memberOf fabric\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @return {fabric.Point} thisArg\n   */\n  function Point(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  Point.prototype = /** @lends fabric.Point.prototype */ {\n\n    type: 'point',\n\n    constructor: Point,\n\n    /**\n     * Adds another point to this one and returns another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point instance with added values\n     */\n    add: function (that) {\n      return new Point(this.x + that.x, this.y + that.y);\n    },\n\n    /**\n     * Adds another point to this one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    addEquals: function (that) {\n      this.x += that.x;\n      this.y += that.y;\n      return this;\n    },\n\n    /**\n     * Adds value to this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point} new Point with added value\n     */\n    scalarAdd: function (scalar) {\n      return new Point(this.x + scalar, this.y + scalar);\n    },\n\n    /**\n     * Adds value to this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    scalarAddEquals: function (scalar) {\n      this.x += scalar;\n      this.y += scalar;\n      return this;\n    },\n\n    /**\n     * Subtracts another point from this point and returns a new one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point object with subtracted values\n     */\n    subtract: function (that) {\n      return new Point(this.x - that.x, this.y - that.y);\n    },\n\n    /**\n     * Subtracts another point from this point\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    subtractEquals: function (that) {\n      this.x -= that.x;\n      this.y -= that.y;\n      return this;\n    },\n\n    /**\n     * Subtracts value from this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    scalarSubtract: function (scalar) {\n      return new Point(this.x - scalar, this.y - scalar);\n    },\n\n    /**\n     * Subtracts value from this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    scalarSubtractEquals: function (scalar) {\n      this.x -= scalar;\n      this.y -= scalar;\n      return this;\n    },\n\n    /**\n     * Multiplies this point by a value and returns a new one\n     * TODO: rename in scalarMultiply in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    multiply: function (scalar) {\n      return new Point(this.x * scalar, this.y * scalar);\n    },\n\n    /**\n     * Multiplies this point by a value\n     * TODO: rename in scalarMultiplyEquals in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    multiplyEquals: function (scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      return this;\n    },\n\n    /**\n     * Divides this point by a value and returns a new one\n     * TODO: rename in scalarDivide in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    divide: function (scalar) {\n      return new Point(this.x / scalar, this.y / scalar);\n    },\n\n    /**\n     * Divides this point by a value\n     * TODO: rename in scalarDivideEquals in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    divideEquals: function (scalar) {\n      this.x /= scalar;\n      this.y /= scalar;\n      return this;\n    },\n\n    /**\n     * Returns true if this point is equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    eq: function (that) {\n      return (this.x === that.x && this.y === that.y);\n    },\n\n    /**\n     * Returns true if this point is less than another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    lt: function (that) {\n      return (this.x < that.x && this.y < that.y);\n    },\n\n    /**\n     * Returns true if this point is less than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    lte: function (that) {\n      return (this.x <= that.x && this.y <= that.y);\n    },\n\n    /**\n\n     * Returns true if this point is greater another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    gt: function (that) {\n      return (this.x > that.x && this.y > that.y);\n    },\n\n    /**\n     * Returns true if this point is greater than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    gte: function (that) {\n      return (this.x >= that.x && this.y >= that.y);\n    },\n\n    /**\n     * Returns new point which is the result of linear interpolation with this one and another one\n     * @param {fabric.Point} that\n     * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n     * @return {fabric.Point}\n     */\n    lerp: function (that, t) {\n      if (typeof t === 'undefined') {\n        t = 0.5;\n      }\n      t = Math.max(Math.min(1, t), 0);\n      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\n    },\n\n    /**\n     * Returns distance from this point and another one\n     * @param {fabric.Point} that\n     * @return {Number}\n     */\n    distanceFrom: function (that) {\n      var dx = this.x - that.x,\n          dy = this.y - that.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /**\n     * Returns the point between this point and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    midPointFrom: function (that) {\n      return this.lerp(that);\n    },\n\n    /**\n     * Returns a new point which is the min of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    min: function (that) {\n      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n    },\n\n    /**\n     * Returns a new point which is the max of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    max: function (that) {\n      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n    },\n\n    /**\n     * Returns string representation of this point\n     * @return {String}\n     */\n    toString: function () {\n      return this.x + ',' + this.y;\n    },\n\n    /**\n     * Sets x/y of this point\n     * @param {Number} x\n     * @param {Number} y\n     * @chainable\n     */\n    setXY: function (x, y) {\n      this.x = x;\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets x of this point\n     * @param {Number} x\n     * @chainable\n     */\n    setX: function (x) {\n      this.x = x;\n      return this;\n    },\n\n    /**\n     * Sets y of this point\n     * @param {Number} y\n     * @chainable\n     */\n    setY: function (y) {\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets x/y of this point from another point\n     * @param {fabric.Point} that\n     * @chainable\n     */\n    setFromPoint: function (that) {\n      this.x = that.x;\n      this.y = that.y;\n      return this;\n    },\n\n    /**\n     * Swaps x/y of this point and another point\n     * @param {fabric.Point} that\n     */\n    swap: function (that) {\n      var x = this.x,\n          y = this.y;\n      this.x = that.x;\n      this.y = that.y;\n      that.x = x;\n      that.y = y;\n    },\n\n    /**\n     * return a cloned instance of the point\n     * @return {fabric.Point}\n     */\n    clone: function () {\n      return new Point(this.x, this.y);\n    }\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Intersection) {\n    fabric.warn('fabric.Intersection is already defined');\n    return;\n  }\n\n  /**\n   * Intersection class\n   * @class fabric.Intersection\n   * @memberOf fabric\n   * @constructor\n   */\n  function Intersection(status) {\n    this.status = status;\n    this.points = [];\n  }\n\n  fabric.Intersection = Intersection;\n\n  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\n\n    constructor: Intersection,\n\n    /**\n     * Appends a point to intersection\n     * @param {fabric.Point} point\n     * @return {fabric.Intersection} thisArg\n     * @chainable\n     */\n    appendPoint: function (point) {\n      this.points.push(point);\n      return this;\n    },\n\n    /**\n     * Appends points to intersection\n     * @param {Array} points\n     * @return {fabric.Intersection} thisArg\n     * @chainable\n     */\n    appendPoints: function (points) {\n      this.points = this.points.concat(points);\n      return this;\n    }\n  };\n\n  /**\n   * Checks if one line intersects another\n   * TODO: rename in intersectSegmentSegment\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {fabric.Point} b1\n   * @param {fabric.Point} b2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\n    var result,\n        uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\n        ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\n        uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n    if (uB !== 0) {\n      var ua = uaT / uB,\n          ub = ubT / uB;\n      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n        result = new Intersection('Intersection');\n        result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\n      }\n      else {\n        result = new Intersection();\n      }\n    }\n    else {\n      if (uaT === 0 || ubT === 0) {\n        result = new Intersection('Coincident');\n      }\n      else {\n        result = new Intersection('Parallel');\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Checks if line intersects polygon\n   * TODO: rename in intersectSegmentPolygon\n   * fix detection of coincident\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {Array} points\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\n    var result = new Intersection(),\n        length = points.length,\n        b1, b2, inter, i;\n\n    for (i = 0; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n      result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n  /**\n   * Checks if polygon intersects another polygon\n   * @static\n   * @param {Array} points1\n   * @param {Array} points2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\n    var result = new Intersection(),\n        length = points1.length, i;\n\n    for (i = 0; i < length; i++) {\n      var a1 = points1[i],\n          a2 = points1[(i + 1) % length],\n          inter = Intersection.intersectLinePolygon(a1, a2, points2);\n\n      result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @param {Array} points\n   * @param {fabric.Point} r1\n   * @param {fabric.Point} r2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\n    var min = r1.min(r2),\n        max = r1.max(r2),\n        topRight = new fabric.Point(max.x, min.y),\n        bottomLeft = new fabric.Point(min.x, max.y),\n        inter1 = Intersection.intersectLinePolygon(min, topRight, points),\n        inter2 = Intersection.intersectLinePolygon(topRight, max, points),\n        inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\n        inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\n        result = new Intersection();\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Color) {\n    fabric.warn('fabric.Color is already defined.');\n    return;\n  }\n\n  /**\n   * Color class\n   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\n   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\n   *\n   * @class fabric.Color\n   * @param {String} color optional in hex or rgb(a) or hsl format or from known color list\n   * @return {fabric.Color} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\n   */\n  function Color(color) {\n    if (!color) {\n      this.setSource([0, 0, 0, 1]);\n    }\n    else {\n      this._tryParsingColor(color);\n    }\n  }\n\n  fabric.Color = Color;\n\n  fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\n\n    /**\n     * @private\n     * @param {String|Array} color Color value to parse\n     */\n    _tryParsingColor: function(color) {\n      var source;\n\n      if (color in Color.colorNameMap) {\n        color = Color.colorNameMap[color];\n      }\n\n      if (color === 'transparent') {\n        source = [255, 255, 255, 0];\n      }\n\n      if (!source) {\n        source = Color.sourceFromHex(color);\n      }\n      if (!source) {\n        source = Color.sourceFromRgb(color);\n      }\n      if (!source) {\n        source = Color.sourceFromHsl(color);\n      }\n      if (!source) {\n        //if color is not recognize let's make black as canvas does\n        source = [0, 0, 0, 1];\n      }\n      if (source) {\n        this.setSource(source);\n      }\n    },\n\n    /**\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n     * @private\n     * @param {Number} r Red color value\n     * @param {Number} g Green color value\n     * @param {Number} b Blue color value\n     * @return {Array} Hsl color\n     */\n    _rgbToHsl: function(r, g, b) {\n      r /= 255; g /= 255; b /= 255;\n\n      var h, s, l,\n          max = fabric.util.array.max([r, g, b]),\n          min = fabric.util.array.min([r, g, b]);\n\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0; // achromatic\n      }\n      else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n          case g:\n            h = (b - r) / d + 2;\n            break;\n          case b:\n            h = (r - g) / d + 4;\n            break;\n        }\n        h /= 6;\n      }\n\n      return [\n        Math.round(h * 360),\n        Math.round(s * 100),\n        Math.round(l * 100)\n      ];\n    },\n\n    /**\n     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @return {Array}\n     */\n    getSource: function() {\n      return this._source;\n    },\n\n    /**\n     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @param {Array} source\n     */\n    setSource: function(source) {\n      this._source = source;\n    },\n\n    /**\n     * Returns color representation in RGB format\n     * @return {String} ex: rgb(0-255,0-255,0-255)\n     */\n    toRgb: function() {\n      var source = this.getSource();\n      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\n    },\n\n    /**\n     * Returns color representation in RGBA format\n     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n     */\n    toRgba: function() {\n      var source = this.getSource();\n      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\n    },\n\n    /**\n     * Returns color representation in HSL format\n     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n     */\n    toHsl: function() {\n      var source = this.getSource(),\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\n    },\n\n    /**\n     * Returns color representation in HSLA format\n     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n     */\n    toHsla: function() {\n      var source = this.getSource(),\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\n    },\n\n    /**\n     * Returns color representation in HEX format\n     * @return {String} ex: FF5555\n     */\n    toHex: function() {\n      var source = this.getSource(), r, g, b;\n\n      r = source[0].toString(16);\n      r = (r.length === 1) ? ('0' + r) : r;\n\n      g = source[1].toString(16);\n      g = (g.length === 1) ? ('0' + g) : g;\n\n      b = source[2].toString(16);\n      b = (b.length === 1) ? ('0' + b) : b;\n\n      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\n    },\n\n    /**\n     * Returns color representation in HEXA format\n     * @return {String} ex: FF5555CC\n     */\n    toHexa: function() {\n      var source = this.getSource(), a;\n\n      a = Math.round(source[3] * 255);\n      a = a.toString(16);\n      a = (a.length === 1) ? ('0' + a) : a;\n\n      return this.toHex() + a.toUpperCase();\n    },\n\n    /**\n     * Gets value of alpha channel for this color\n     * @return {Number} 0-1\n     */\n    getAlpha: function() {\n      return this.getSource()[3];\n    },\n\n    /**\n     * Sets value of alpha channel for this color\n     * @param {Number} alpha Alpha value 0-1\n     * @return {fabric.Color} thisArg\n     */\n    setAlpha: function(alpha) {\n      var source = this.getSource();\n      source[3] = alpha;\n      this.setSource(source);\n      return this;\n    },\n\n    /**\n     * Transforms color to its grayscale representation\n     * @return {fabric.Color} thisArg\n     */\n    toGrayscale: function() {\n      var source = this.getSource(),\n          average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\n          currentAlpha = source[3];\n      this.setSource([average, average, average, currentAlpha]);\n      return this;\n    },\n\n    /**\n     * Transforms color to its black and white representation\n     * @param {Number} threshold\n     * @return {fabric.Color} thisArg\n     */\n    toBlackWhite: function(threshold) {\n      var source = this.getSource(),\n          average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\n          currentAlpha = source[3];\n\n      threshold = threshold || 127;\n\n      average = (Number(average) < Number(threshold)) ? 0 : 255;\n      this.setSource([average, average, average, currentAlpha]);\n      return this;\n    },\n\n    /**\n     * Overlays color with another color\n     * @param {String|fabric.Color} otherColor\n     * @return {fabric.Color} thisArg\n     */\n    overlayWith: function(otherColor) {\n      if (!(otherColor instanceof Color)) {\n        otherColor = new Color(otherColor);\n      }\n\n      var result = [],\n          alpha = this.getAlpha(),\n          otherAlpha = 0.5,\n          source = this.getSource(),\n          otherSource = otherColor.getSource(), i;\n\n      for (i = 0; i < 3; i++) {\n        result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\n      }\n\n      result[3] = alpha;\n      this.setSource(result);\n      return this;\n    }\n  };\n\n  /**\n   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  // eslint-disable-next-line max-len\n  fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i;\n\n  /**\n   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i;\n\n  /**\n   * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\n\n  /**\n   * Map of the 148 color names with HEX code\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   * @see: https://www.w3.org/TR/css3-color/#svg-color\n   */\n  fabric.Color.colorNameMap = {\n    aliceblue:            '#F0F8FF',\n    antiquewhite:         '#FAEBD7',\n    aqua:                 '#00FFFF',\n    aquamarine:           '#7FFFD4',\n    azure:                '#F0FFFF',\n    beige:                '#F5F5DC',\n    bisque:               '#FFE4C4',\n    black:                '#000000',\n    blanchedalmond:       '#FFEBCD',\n    blue:                 '#0000FF',\n    blueviolet:           '#8A2BE2',\n    brown:                '#A52A2A',\n    burlywood:            '#DEB887',\n    cadetblue:            '#5F9EA0',\n    chartreuse:           '#7FFF00',\n    chocolate:            '#D2691E',\n    coral:                '#FF7F50',\n    cornflowerblue:       '#6495ED',\n    cornsilk:             '#FFF8DC',\n    crimson:              '#DC143C',\n    cyan:                 '#00FFFF',\n    darkblue:             '#00008B',\n    darkcyan:             '#008B8B',\n    darkgoldenrod:        '#B8860B',\n    darkgray:             '#A9A9A9',\n    darkgrey:             '#A9A9A9',\n    darkgreen:            '#006400',\n    darkkhaki:            '#BDB76B',\n    darkmagenta:          '#8B008B',\n    darkolivegreen:       '#556B2F',\n    darkorange:           '#FF8C00',\n    darkorchid:           '#9932CC',\n    darkred:              '#8B0000',\n    darksalmon:           '#E9967A',\n    darkseagreen:         '#8FBC8F',\n    darkslateblue:        '#483D8B',\n    darkslategray:        '#2F4F4F',\n    darkslategrey:        '#2F4F4F',\n    darkturquoise:        '#00CED1',\n    darkviolet:           '#9400D3',\n    deeppink:             '#FF1493',\n    deepskyblue:          '#00BFFF',\n    dimgray:              '#696969',\n    dimgrey:              '#696969',\n    dodgerblue:           '#1E90FF',\n    firebrick:            '#B22222',\n    floralwhite:          '#FFFAF0',\n    forestgreen:          '#228B22',\n    fuchsia:              '#FF00FF',\n    gainsboro:            '#DCDCDC',\n    ghostwhite:           '#F8F8FF',\n    gold:                 '#FFD700',\n    goldenrod:            '#DAA520',\n    gray:                 '#808080',\n    grey:                 '#808080',\n    green:                '#008000',\n    greenyellow:          '#ADFF2F',\n    honeydew:             '#F0FFF0',\n    hotpink:              '#FF69B4',\n    indianred:            '#CD5C5C',\n    indigo:               '#4B0082',\n    ivory:                '#FFFFF0',\n    khaki:                '#F0E68C',\n    lavender:             '#E6E6FA',\n    lavenderblush:        '#FFF0F5',\n    lawngreen:            '#7CFC00',\n    lemonchiffon:         '#FFFACD',\n    lightblue:            '#ADD8E6',\n    lightcoral:           '#F08080',\n    lightcyan:            '#E0FFFF',\n    lightgoldenrodyellow: '#FAFAD2',\n    lightgray:            '#D3D3D3',\n    lightgrey:            '#D3D3D3',\n    lightgreen:           '#90EE90',\n    lightpink:            '#FFB6C1',\n    lightsalmon:          '#FFA07A',\n    lightseagreen:        '#20B2AA',\n    lightskyblue:         '#87CEFA',\n    lightslategray:       '#778899',\n    lightslategrey:       '#778899',\n    lightsteelblue:       '#B0C4DE',\n    lightyellow:          '#FFFFE0',\n    lime:                 '#00FF00',\n    limegreen:            '#32CD32',\n    linen:                '#FAF0E6',\n    magenta:              '#FF00FF',\n    maroon:               '#800000',\n    mediumaquamarine:     '#66CDAA',\n    mediumblue:           '#0000CD',\n    mediumorchid:         '#BA55D3',\n    mediumpurple:         '#9370DB',\n    mediumseagreen:       '#3CB371',\n    mediumslateblue:      '#7B68EE',\n    mediumspringgreen:    '#00FA9A',\n    mediumturquoise:      '#48D1CC',\n    mediumvioletred:      '#C71585',\n    midnightblue:         '#191970',\n    mintcream:            '#F5FFFA',\n    mistyrose:            '#FFE4E1',\n    moccasin:             '#FFE4B5',\n    navajowhite:          '#FFDEAD',\n    navy:                 '#000080',\n    oldlace:              '#FDF5E6',\n    olive:                '#808000',\n    olivedrab:            '#6B8E23',\n    orange:               '#FFA500',\n    orangered:            '#FF4500',\n    orchid:               '#DA70D6',\n    palegoldenrod:        '#EEE8AA',\n    palegreen:            '#98FB98',\n    paleturquoise:        '#AFEEEE',\n    palevioletred:        '#DB7093',\n    papayawhip:           '#FFEFD5',\n    peachpuff:            '#FFDAB9',\n    peru:                 '#CD853F',\n    pink:                 '#FFC0CB',\n    plum:                 '#DDA0DD',\n    powderblue:           '#B0E0E6',\n    purple:               '#800080',\n    rebeccapurple:        '#663399',\n    red:                  '#FF0000',\n    rosybrown:            '#BC8F8F',\n    royalblue:            '#4169E1',\n    saddlebrown:          '#8B4513',\n    salmon:               '#FA8072',\n    sandybrown:           '#F4A460',\n    seagreen:             '#2E8B57',\n    seashell:             '#FFF5EE',\n    sienna:               '#A0522D',\n    silver:               '#C0C0C0',\n    skyblue:              '#87CEEB',\n    slateblue:            '#6A5ACD',\n    slategray:            '#708090',\n    slategrey:            '#708090',\n    snow:                 '#FFFAFA',\n    springgreen:          '#00FF7F',\n    steelblue:            '#4682B4',\n    tan:                  '#D2B48C',\n    teal:                 '#008080',\n    thistle:              '#D8BFD8',\n    tomato:               '#FF6347',\n    turquoise:            '#40E0D0',\n    violet:               '#EE82EE',\n    wheat:                '#F5DEB3',\n    white:                '#FFFFFF',\n    whitesmoke:           '#F5F5F5',\n    yellow:               '#FFFF00',\n    yellowgreen:          '#9ACD32'\n  };\n\n  /**\n   * @private\n   * @param {Number} p\n   * @param {Number} q\n   * @param {Number} t\n   * @return {Number}\n   */\n  function hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n    if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n      return q;\n    }\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromRgb = function(color) {\n    return Color.fromSource(Color.sourceFromRgb(color));\n  };\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {Array} source\n   */\n  fabric.Color.sourceFromRgb = function(color) {\n    var match = color.match(Color.reRGBa);\n    if (match) {\n      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\n          g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\n          b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\n\n      return [\n        parseInt(r, 10),\n        parseInt(g, 10),\n        parseInt(b, 10),\n        match[4] ? parseFloat(match[4]) : 1\n      ];\n    }\n  };\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromRgba = Color.fromRgb;\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf fabric.Color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHsl = function(color) {\n    return Color.fromSource(Color.sourceFromHsl(color));\n  };\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {Array} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  fabric.Color.sourceFromHsl = function(color) {\n    var match = color.match(Color.reHSLa);\n    if (!match) {\n      return;\n    }\n\n    var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\n        s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\n        l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\n        r, g, b;\n\n    if (s === 0) {\n      r = g = b = l;\n    }\n    else {\n      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n          p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      match[4] ? parseFloat(match[4]) : 1\n    ];\n  };\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHsla = Color.fromHsl;\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: FF5555\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHex = function(color) {\n    return Color.fromSource(Color.sourceFromHex(color));\n  };\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {Array} source\n   */\n  fabric.Color.sourceFromHex = function(color) {\n    if (color.match(Color.reHex)) {\n      var value = color.slice(color.indexOf('#') + 1),\n          isShortNotation = (value.length === 3 || value.length === 4),\n          isRGBa = (value.length === 8 || value.length === 4),\n          r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\n          g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\n          b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6),\n          a = isRGBa ? (isShortNotation ? (value.charAt(3) + value.charAt(3)) : value.substring(6, 8)) : 'FF';\n\n      return [\n        parseInt(r, 16),\n        parseInt(g, 16),\n        parseInt(b, 16),\n        parseFloat((parseInt(a, 16) / 255).toFixed(2))\n      ];\n    }\n  };\n\n  /**\n   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\n   * @static\n   * @memberOf fabric.Color\n   * @param {Array} source\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromSource = function(source) {\n    var oColor = new Color();\n    oColor.setSource(source);\n    return oColor;\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  /* _FROM_SVG_START_ */\n  function getColorStop(el) {\n    var style = el.getAttribute('style'),\n        offset = el.getAttribute('offset') || 0,\n        color, colorAlpha, opacity, i;\n\n    // convert percents to absolute values\n    offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);\n    offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;\n    if (style) {\n      var keyValuePairs = style.split(/\\s*;\\s*/);\n\n      if (keyValuePairs[keyValuePairs.length - 1] === '') {\n        keyValuePairs.pop();\n      }\n\n      for (i = keyValuePairs.length; i--; ) {\n\n        var split = keyValuePairs[i].split(/\\s*:\\s*/),\n            key = split[0].trim(),\n            value = split[1].trim();\n\n        if (key === 'stop-color') {\n          color = value;\n        }\n        else if (key === 'stop-opacity') {\n          opacity = value;\n        }\n      }\n    }\n\n    if (!color) {\n      color = el.getAttribute('stop-color') || 'rgb(0,0,0)';\n    }\n    if (!opacity) {\n      opacity = el.getAttribute('stop-opacity');\n    }\n\n    color = new fabric.Color(color);\n    colorAlpha = color.getAlpha();\n    opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);\n    opacity *= colorAlpha;\n\n    return {\n      offset: offset,\n      color: color.toRgb(),\n      opacity: opacity\n    };\n  }\n\n  function getLinearCoords(el) {\n    return {\n      x1: el.getAttribute('x1') || 0,\n      y1: el.getAttribute('y1') || 0,\n      x2: el.getAttribute('x2') || '100%',\n      y2: el.getAttribute('y2') || 0\n    };\n  }\n\n  function getRadialCoords(el) {\n    return {\n      x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',\n      y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',\n      r1: 0,\n      x2: el.getAttribute('cx') || '50%',\n      y2: el.getAttribute('cy') || '50%',\n      r2: el.getAttribute('r') || '50%'\n    };\n  }\n  /* _FROM_SVG_END_ */\n\n  var clone = fabric.util.object.clone;\n\n  /**\n   * Gradient class\n   * @class fabric.Gradient\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n   * @see {@link fabric.Gradient#initialize} for constructor definition\n   */\n  fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {\n\n    /**\n     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n     * @type Number\n     * @default 0\n     */\n    offsetX: 0,\n\n    /**\n     * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n     * @type Number\n     * @default 0\n     */\n    offsetY: 0,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object with type, coords, gradientUnits and colorStops\n     * @return {fabric.Gradient} thisArg\n     */\n    initialize: function(options) {\n      options || (options = { });\n\n      var coords = { };\n\n      this.id = fabric.Object.__uid++;\n      this.type = options.type || 'linear';\n\n      coords = {\n        x1: options.coords.x1 || 0,\n        y1: options.coords.y1 || 0,\n        x2: options.coords.x2 || 0,\n        y2: options.coords.y2 || 0\n      };\n\n      if (this.type === 'radial') {\n        coords.r1 = options.coords.r1 || 0;\n        coords.r2 = options.coords.r2 || 0;\n      }\n      this.coords = coords;\n      this.colorStops = options.colorStops.slice();\n      if (options.gradientTransform) {\n        this.gradientTransform = options.gradientTransform;\n      }\n      this.offsetX = options.offsetX || this.offsetX;\n      this.offsetY = options.offsetY || this.offsetY;\n    },\n\n    /**\n     * Adds another colorStop\n     * @param {Object} colorStop Object with offset and color\n     * @return {fabric.Gradient} thisArg\n     */\n    addColorStop: function(colorStops) {\n      for (var position in colorStops) {\n        var color = new fabric.Color(colorStops[position]);\n        this.colorStops.push({\n          offset: parseFloat(position),\n          color: color.toRgb(),\n          opacity: color.getAlpha()\n        });\n      }\n      return this;\n    },\n\n    /**\n     * Returns object representation of a gradient\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object}\n     */\n    toObject: function(propertiesToInclude) {\n      var object = {\n        type: this.type,\n        coords: this.coords,\n        colorStops: this.colorStops,\n        offsetX: this.offsetX,\n        offsetY: this.offsetY,\n        gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform\n      };\n      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n\n      return object;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an gradient\n     * @param {Object} object Object to create a gradient for\n     * @return {String} SVG representation of an gradient (linear/radial)\n     */\n    toSVG: function(object) {\n      var coords = clone(this.coords, true), i, len,\n          markup, commonAttributes, colorStops = clone(this.colorStops, true),\n          needsSwap = coords.r1 > coords.r2,\n          transform = this.gradientTransform ? this.gradientTransform.concat() : fabric.iMatrix.concat(),\n          offsetX = object.width / 2 - this.offsetX, offsetY = object.height / 2 - this.offsetY;\n      // colorStops must be sorted ascending\n      colorStops.sort(function(a, b) {\n        return a.offset - b.offset;\n      });\n\n      if (object.type === 'path') {\n        offsetX -= object.pathOffset.x;\n        offsetY -= object.pathOffset.y;\n      }\n\n      transform[4] -= offsetX;\n      transform[5] -= offsetY;\n\n      commonAttributes = 'id=\"SVGID_' + this.id +\n                     '\" gradientUnits=\"userSpaceOnUse\"';\n      commonAttributes += ' gradientTransform=\"matrix(' + transform.join(' ') + ')\" ';\n\n      if (this.type === 'linear') {\n        markup = [\n          '<linearGradient ',\n          commonAttributes,\n          ' x1=\"', coords.x1,\n          '\" y1=\"', coords.y1,\n          '\" x2=\"', coords.x2,\n          '\" y2=\"', coords.y2,\n          '\">\\n'\n        ];\n      }\n      else if (this.type === 'radial') {\n        // svg radial gradient has just 1 radius. the biggest.\n        markup = [\n          '<radialGradient ',\n          commonAttributes,\n          ' cx=\"', needsSwap ? coords.x1 : coords.x2,\n          '\" cy=\"', needsSwap ? coords.y1 : coords.y2,\n          '\" r=\"', needsSwap ? coords.r1 : coords.r2,\n          '\" fx=\"', needsSwap ? coords.x2 : coords.x1,\n          '\" fy=\"', needsSwap ? coords.y2 : coords.y1,\n          '\">\\n'\n        ];\n      }\n\n      if (this.type === 'radial') {\n        if (needsSwap) {\n          // svg goes from internal to external radius. if radius are inverted, swap color stops.\n          colorStops = colorStops.concat();\n          colorStops.reverse();\n          for (i = 0, len = colorStops.length; i < len; i++) {\n            colorStops[i].offset = 1 - colorStops[i].offset;\n          }\n        }\n        var minRadius = Math.min(coords.r1, coords.r2);\n        if (minRadius > 0) {\n          // i have to shift all colorStops and add new one in 0.\n          var maxRadius = Math.max(coords.r1, coords.r2),\n              percentageShift = minRadius / maxRadius;\n          for (i = 0, len = colorStops.length; i < len; i++) {\n            colorStops[i].offset += percentageShift * (1 - colorStops[i].offset);\n          }\n        }\n      }\n\n      for (i = 0, len = colorStops.length; i < len; i++) {\n        var colorStop = colorStops[i];\n        markup.push(\n          '<stop ',\n          'offset=\"', (colorStop.offset * 100) + '%',\n          '\" style=\"stop-color:', colorStop.color,\n          (typeof colorStop.opacity !== 'undefined' ? ';stop-opacity: ' + colorStop.opacity : ';'),\n          '\"/>\\n'\n        );\n      }\n\n      markup.push((this.type === 'linear' ? '</linearGradient>\\n' : '</radialGradient>\\n'));\n\n      return markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns an instance of CanvasGradient\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {CanvasGradient}\n     */\n    toLive: function(ctx) {\n      var gradient, coords = fabric.util.object.clone(this.coords), i, len;\n\n      if (!this.type) {\n        return;\n      }\n\n      if (this.type === 'linear') {\n        gradient = ctx.createLinearGradient(\n          coords.x1, coords.y1, coords.x2, coords.y2);\n      }\n      else if (this.type === 'radial') {\n        gradient = ctx.createRadialGradient(\n          coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);\n      }\n\n      for (i = 0, len = this.colorStops.length; i < len; i++) {\n        var color = this.colorStops[i].color,\n            opacity = this.colorStops[i].opacity,\n            offset = this.colorStops[i].offset;\n\n        if (typeof opacity !== 'undefined') {\n          color = new fabric.Color(color).setAlpha(opacity).toRgba();\n        }\n        gradient.addColorStop(offset, color);\n      }\n\n      return gradient;\n    }\n  });\n\n  fabric.util.object.extend(fabric.Gradient, {\n\n    /* _FROM_SVG_START_ */\n    /**\n     * Returns {@link fabric.Gradient} instance from an SVG element\n     * @static\n     * @memberOf fabric.Gradient\n     * @param {SVGGradientElement} el SVG gradient element\n     * @param {fabric.Object} instance\n     * @return {fabric.Gradient} Gradient instance\n     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n     */\n    fromElement: function(el, instance) {\n      /**\n       *  @example:\n       *\n       *  <linearGradient id=\"linearGrad1\">\n       *    <stop offset=\"0%\" stop-color=\"white\"/>\n       *    <stop offset=\"100%\" stop-color=\"black\"/>\n       *  </linearGradient>\n       *\n       *  OR\n       *\n       *  <linearGradient id=\"linearGrad2\">\n       *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n       *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n       *  </linearGradient>\n       *\n       *  OR\n       *\n       *  <radialGradient id=\"radialGrad1\">\n       *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n       *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n       *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n       *  </radialGradient>\n       *\n       *  OR\n       *\n       *  <radialGradient id=\"radialGrad2\">\n       *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n       *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n       *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n       *  </radialGradient>\n       *\n       */\n\n      var colorStopEls = el.getElementsByTagName('stop'),\n          type,\n          gradientUnits = el.getAttribute('gradientUnits') || 'objectBoundingBox',\n          gradientTransform = el.getAttribute('gradientTransform'),\n          colorStops = [],\n          coords, ellipseMatrix, i;\n\n      if (el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT') {\n        type = 'linear';\n      }\n      else {\n        type = 'radial';\n      }\n\n      if (type === 'linear') {\n        coords = getLinearCoords(el);\n      }\n      else if (type === 'radial') {\n        coords = getRadialCoords(el);\n      }\n\n      for (i = colorStopEls.length; i--; ) {\n        colorStops.push(getColorStop(colorStopEls[i]));\n      }\n\n      ellipseMatrix = _convertPercentUnitsToValues(instance, coords, gradientUnits);\n\n      var gradient = new fabric.Gradient({\n        type: type,\n        coords: coords,\n        colorStops: colorStops,\n        offsetX: -instance.left,\n        offsetY: -instance.top\n      });\n\n      if (gradientTransform || ellipseMatrix !== '') {\n        gradient.gradientTransform = fabric.parseTransformAttribute((gradientTransform || '') + ellipseMatrix);\n      }\n\n      return gradient;\n    },\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns {@link fabric.Gradient} instance from its object representation\n     * @static\n     * @memberOf fabric.Gradient\n     * @param {Object} obj\n     * @param {Object} [options] Options object\n     */\n    forObject: function(obj, options) {\n      options || (options = { });\n      _convertPercentUnitsToValues(obj, options.coords, 'userSpaceOnUse');\n      return new fabric.Gradient(options);\n    }\n  });\n\n  /**\n   * @private\n   */\n  function _convertPercentUnitsToValues(object, options, gradientUnits) {\n    var propValue, addFactor = 0, multFactor = 1, ellipseMatrix = '';\n    for (var prop in options) {\n      if (options[prop] === 'Infinity') {\n        options[prop] = 1;\n      }\n      else if (options[prop] === '-Infinity') {\n        options[prop] = 0;\n      }\n      propValue = parseFloat(options[prop], 10);\n      if (typeof options[prop] === 'string' && /^(\\d+\\.\\d+)%|(\\d+)%$/.test(options[prop])) {\n        multFactor = 0.01;\n      }\n      else {\n        multFactor = 1;\n      }\n      if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n        multFactor *= gradientUnits === 'objectBoundingBox' ? object.width : 1;\n        addFactor = gradientUnits === 'objectBoundingBox' ? object.left || 0 : 0;\n      }\n      else if (prop === 'y1' || prop === 'y2') {\n        multFactor *= gradientUnits === 'objectBoundingBox' ? object.height : 1;\n        addFactor = gradientUnits === 'objectBoundingBox' ? object.top || 0 : 0;\n      }\n      options[prop] = propValue * multFactor + addFactor;\n    }\n    if (object.type === 'ellipse' &&\n        options.r2 !== null &&\n        gradientUnits === 'objectBoundingBox' &&\n        object.rx !== object.ry) {\n\n      var scaleFactor = object.ry / object.rx;\n      ellipseMatrix = ' scale(1, ' + scaleFactor + ')';\n      if (options.y1) {\n        options.y1 /= scaleFactor;\n      }\n      if (options.y2) {\n        options.y2 /= scaleFactor;\n      }\n    }\n    return ellipseMatrix;\n  }\n})();\n\n\n(function() {\n\n  'use strict';\n\n  var toFixed = fabric.util.toFixed;\n\n  /**\n   * Pattern class\n   * @class fabric.Pattern\n   * @see {@link http://fabricjs.com/patterns|Pattern demo}\n   * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}\n   * @see {@link fabric.Pattern#initialize} for constructor definition\n   */\n\n\n  fabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {\n\n    /**\n     * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n     * @type String\n     * @default\n     */\n    repeat: 'repeat',\n\n    /**\n     * Pattern horizontal offset from object's left/top corner\n     * @type Number\n     * @default\n     */\n    offsetX: 0,\n\n    /**\n     * Pattern vertical offset from object's left/top corner\n     * @type Number\n     * @default\n     */\n    offsetY: 0,\n\n    /**\n     * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\n     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n     * @type String\n     * @default\n     */\n    crossOrigin: '',\n\n    /**\n     * transform matrix to change the pattern, imported from svgs.\n     * @type Array\n     * @default\n     */\n    patternTransform: null,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @param {Function} [callback] function to invoke after callback init.\n     * @return {fabric.Pattern} thisArg\n     */\n    initialize: function(options, callback) {\n      options || (options = { });\n\n      this.id = fabric.Object.__uid++;\n      this.setOptions(options);\n      if (!options.source || (options.source && typeof options.source !== 'string')) {\n        callback && callback(this);\n        return;\n      }\n      // function string\n      if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {\n        this.source = new Function(fabric.util.getFunctionBody(options.source));\n        callback && callback(this);\n      }\n      else {\n        // img src string\n        var _this = this;\n        this.source = fabric.util.createImage();\n        fabric.util.loadImage(options.source, function(img) {\n          _this.source = img;\n          callback && callback(_this);\n        }, null, this.crossOrigin);\n      }\n    },\n\n    /**\n     * Returns object representation of a pattern\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of a pattern instance\n     */\n    toObject: function(propertiesToInclude) {\n      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n          source, object;\n\n      // callback\n      if (typeof this.source === 'function') {\n        source = String(this.source);\n      }\n      // <img> element\n      else if (typeof this.source.src === 'string') {\n        source = this.source.src;\n      }\n      // <canvas> element\n      else if (typeof this.source === 'object' && this.source.toDataURL) {\n        source = this.source.toDataURL();\n      }\n\n      object = {\n        type: 'pattern',\n        source: source,\n        repeat: this.repeat,\n        crossOrigin: this.crossOrigin,\n        offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),\n        offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),\n        patternTransform: this.patternTransform ? this.patternTransform.concat() : null\n      };\n      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n\n      return object;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of a pattern\n     * @param {fabric.Object} object\n     * @return {String} SVG representation of a pattern\n     */\n    toSVG: function(object) {\n      var patternSource = typeof this.source === 'function' ? this.source() : this.source,\n          patternWidth = patternSource.width / object.width,\n          patternHeight = patternSource.height / object.height,\n          patternOffsetX = this.offsetX / object.width,\n          patternOffsetY = this.offsetY / object.height,\n          patternImgSrc = '';\n      if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {\n        patternHeight = 1;\n        if (patternOffsetY) {\n          patternHeight += Math.abs(patternOffsetY);\n        }\n      }\n      if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {\n        patternWidth = 1;\n        if (patternOffsetX) {\n          patternWidth += Math.abs(patternOffsetX);\n        }\n\n      }\n      if (patternSource.src) {\n        patternImgSrc = patternSource.src;\n      }\n      else if (patternSource.toDataURL) {\n        patternImgSrc = patternSource.toDataURL();\n      }\n\n      return '<pattern id=\"SVGID_' + this.id +\n                    '\" x=\"' + patternOffsetX +\n                    '\" y=\"' + patternOffsetY +\n                    '\" width=\"' + patternWidth +\n                    '\" height=\"' + patternHeight + '\">\\n' +\n               '<image x=\"0\" y=\"0\"' +\n                      ' width=\"' + patternSource.width +\n                      '\" height=\"' + patternSource.height +\n                      '\" xlink:href=\"' + patternImgSrc +\n               '\"></image>\\n' +\n             '</pattern>\\n';\n    },\n    /* _TO_SVG_END_ */\n\n    setOptions: function(options) {\n      for (var prop in options) {\n        this[prop] = options[prop];\n      }\n    },\n\n    /**\n     * Returns an instance of CanvasPattern\n     * @param {CanvasRenderingContext2D} ctx Context to create pattern\n     * @return {CanvasPattern}\n     */\n    toLive: function(ctx) {\n      var source = typeof this.source === 'function' ? this.source() : this.source;\n\n      // if the image failed to load, return, and allow rest to continue loading\n      if (!source) {\n        return '';\n      }\n\n      // if an image\n      if (typeof source.src !== 'undefined') {\n        if (!source.complete) {\n          return '';\n        }\n        if (source.naturalWidth === 0 || source.naturalHeight === 0) {\n          return '';\n        }\n      }\n      return ctx.createPattern(source, this.repeat);\n    }\n  });\n})();\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      toFixed = fabric.util.toFixed;\n\n  if (fabric.Shadow) {\n    fabric.warn('fabric.Shadow is already defined.');\n    return;\n  }\n\n  /**\n   * Shadow class\n   * @class fabric.Shadow\n   * @see {@link http://fabricjs.com/shadows|Shadow demo}\n   * @see {@link fabric.Shadow#initialize} for constructor definition\n   */\n  fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {\n\n    /**\n     * Shadow color\n     * @type String\n     * @default\n     */\n    color: 'rgb(0,0,0)',\n\n    /**\n     * Shadow blur\n     * @type Number\n     */\n    blur: 0,\n\n    /**\n     * Shadow horizontal offset\n     * @type Number\n     * @default\n     */\n    offsetX: 0,\n\n    /**\n     * Shadow vertical offset\n     * @type Number\n     * @default\n     */\n    offsetY: 0,\n\n    /**\n     * Whether the shadow should affect stroke operations\n     * @type Boolean\n     * @default\n     */\n    affectStroke: false,\n\n    /**\n     * Indicates whether toObject should include default values\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues: true,\n\n    /**\n     * Constructor\n     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n     * @return {fabric.Shadow} thisArg\n     */\n    initialize: function(options) {\n\n      if (typeof options === 'string') {\n        options = this._parseShadow(options);\n      }\n\n      for (var prop in options) {\n        this[prop] = options[prop];\n      }\n\n      this.id = fabric.Object.__uid++;\n    },\n\n    /**\n     * @private\n     * @param {String} shadow Shadow value to parse\n     * @return {Object} Shadow object with color, offsetX, offsetY and blur\n     */\n    _parseShadow: function(shadow) {\n      var shadowStr = shadow.trim(),\n          offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [],\n          color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';\n\n      return {\n        color: color.trim(),\n        offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\n        offsetY: parseInt(offsetsAndBlur[2], 10) || 0,\n        blur: parseInt(offsetsAndBlur[3], 10) || 0\n      };\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n     * @return {String} Returns CSS3 text-shadow declaration\n     */\n    toString: function() {\n      return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of a shadow\n     * @param {fabric.Object} object\n     * @return {String} SVG representation of a shadow\n     */\n    toSVG: function(object) {\n      var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n          offset = fabric.util.rotateVector(\n            { x: this.offsetX, y: this.offsetY },\n            fabric.util.degreesToRadians(-object.angle)),\n          BLUR_BOX = 20, color = new fabric.Color(this.color);\n\n      if (object.width && object.height) {\n        //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n        // we add some extra space to filter box to contain the blur ( 20 )\n        fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\n        fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\n      }\n      if (object.flipX) {\n        offset.x *= -1;\n      }\n      if (object.flipY) {\n        offset.y *= -1;\n      }\n\n      return (\n        '<filter id=\"SVGID_' + this.id + '\" y=\"-' + fBoxY + '%\" height=\"' + (100 + 2 * fBoxY) + '%\" ' +\n          'x=\"-' + fBoxX + '%\" width=\"' + (100 + 2 * fBoxX) + '%\" ' + '>\\n' +\n          '\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"' +\n            toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '\"></feGaussianBlur>\\n' +\n          '\\t<feOffset dx=\"' + toFixed(offset.x, NUM_FRACTION_DIGITS) +\n          '\" dy=\"' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '\" result=\"oBlur\" ></feOffset>\\n' +\n          '\\t<feFlood flood-color=\"' + color.toRgb() + '\" flood-opacity=\"' + color.getAlpha() + '\"/>\\n' +\n          '\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n' +\n          '\\t<feMerge>\\n' +\n            '\\t\\t<feMergeNode></feMergeNode>\\n' +\n            '\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n' +\n          '\\t</feMerge>\\n' +\n        '</filter>\\n');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns object representation of a shadow\n     * @return {Object} Object representation of a shadow instance\n     */\n    toObject: function() {\n      if (this.includeDefaultValues) {\n        return {\n          color: this.color,\n          blur: this.blur,\n          offsetX: this.offsetX,\n          offsetY: this.offsetY,\n          affectStroke: this.affectStroke\n        };\n      }\n      var obj = { }, proto = fabric.Shadow.prototype;\n\n      ['color', 'blur', 'offsetX', 'offsetY', 'affectStroke'].forEach(function(prop) {\n        if (this[prop] !== proto[prop]) {\n          obj[prop] = this[prop];\n        }\n      }, this);\n\n      return obj;\n    }\n  });\n\n  /**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * @static\n   * @field\n   * @memberOf fabric.Shadow\n   */\n  // eslint-disable-next-line max-len\n  fabric.Shadow.reOffsetsAndBlur = /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function () {\n\n  'use strict';\n\n  if (fabric.StaticCanvas) {\n    fabric.warn('fabric.StaticCanvas is already defined.');\n    return;\n  }\n\n  // aliases for faster resolution\n  var extend = fabric.util.object.extend,\n      getElementOffset = fabric.util.getElementOffset,\n      removeFromArray = fabric.util.removeFromArray,\n      toFixed = fabric.util.toFixed,\n      transformPoint = fabric.util.transformPoint,\n      invertTransform = fabric.util.invertTransform,\n      getNodeCanvas = fabric.util.getNodeCanvas,\n      createCanvasElement = fabric.util.createCanvasElement,\n\n      CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\n\n  /**\n   * Static canvas class\n   * @class fabric.StaticCanvas\n   * @mixes fabric.Collection\n   * @mixes fabric.Observable\n   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n   * @see {@link fabric.StaticCanvas#initialize} for constructor definition\n   * @fires before:render\n   * @fires after:render\n   * @fires canvas:cleared\n   * @fires object:added\n   * @fires object:removed\n   */\n  fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(el, options) {\n      options || (options = { });\n      this.renderAndResetBound = this.renderAndReset.bind(this);\n      this.requestRenderAllBound = this.requestRenderAll.bind(this);\n      this._initStatic(el, options);\n    },\n\n    /**\n     * Background color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */\n    backgroundColor: '',\n\n    /**\n     * Background image of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.\n     * <b>Backwards incompatibility note:</b> The \"backgroundImageOpacity\"\n     * and \"backgroundImageStretch\" properties are deprecated since 1.3.9.\n     * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.\n     * since 2.4.0 image caching is active, please when putting an image as background, add to the\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n     * vale. As an alternative you can disable image objectCaching\n     * @type fabric.Image\n     * @default\n     */\n    backgroundImage: null,\n\n    /**\n     * Overlay color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\n     * @since 1.3.9\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */\n    overlayColor: '',\n\n    /**\n     * Overlay image of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.\n     * <b>Backwards incompatibility note:</b> The \"overlayImageLeft\"\n     * and \"overlayImageTop\" properties are deprecated since 1.3.9.\n     * Use {@link fabric.Image#left} and {@link fabric.Image#top}.\n     * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n     * vale. As an alternative you can disable image objectCaching\n     * @type fabric.Image\n     * @default\n     */\n    overlayImage: null,\n\n    /**\n     * Indicates whether toObject/toDatalessObject should include default values\n     * if set to false, takes precedence over the object value.\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues: true,\n\n    /**\n     * Indicates whether objects' state should be saved\n     * @type Boolean\n     * @default\n     */\n    stateful: false,\n\n    /**\n     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},\n     * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.\n     * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n     * since the renders are quequed and executed one per frame.\n     * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n     * Left default to true to do not break documentation and old app, fiddles.\n     * @type Boolean\n     * @default\n     */\n    renderOnAddRemove: true,\n\n    /**\n     * Function that determines clipping of entire canvas area\n     * Being passed context as first argument.\n     * If you are using code minification, ctx argument can be minified/manglied you should use\n     * as a workaround `var ctx = arguments[0];` in the function;\n     * See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}\n     * @deprecated since 2.0.0\n     * @type Function\n     * @default\n     */\n    clipTo: null,\n\n    /**\n     * Indicates whether object controls (borders/controls) are rendered above overlay image\n     * @type Boolean\n     * @default\n     */\n    controlsAboveOverlay: false,\n\n    /**\n     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n     * @type Boolean\n     * @default\n     */\n    allowTouchScrolling: false,\n\n    /**\n     * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n     * @type Boolean\n     * @default\n     */\n    imageSmoothingEnabled: true,\n\n    /**\n     * The transformation (in the format of Canvas transform) which focuses the viewport\n     * @type Array\n     * @default\n     */\n    viewportTransform: fabric.iMatrix.concat(),\n\n    /**\n     * if set to false background image is not affected by viewport transform\n     * @since 1.6.3\n     * @type Boolean\n     * @default\n     */\n    backgroundVpt: true,\n\n    /**\n     * if set to false overlya image is not affected by viewport transform\n     * @since 1.6.3\n     * @type Boolean\n     * @default\n     */\n    overlayVpt: true,\n\n    /**\n     * Callback; invoked right before object is about to be scaled/rotated\n     * @deprecated since 2.3.0\n     * Use before:transform event\n     */\n    onBeforeScaleRotate: function () {\n      /* NOOP */\n    },\n\n    /**\n     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n     * @type Boolean\n     * @default\n     */\n    enableRetinaScaling: true,\n\n    /**\n     * Describe canvas element extension over design\n     * properties are tl,tr,bl,br.\n     * if canvas is not zoomed/panned those points are the four corner of canvas\n     * if canvas is viewportTransformed you those points indicate the extension\n     * of canvas element in plain untrasformed coordinates\n     * The coordinates get updated with @method calcViewportBoundaries.\n     * @memberOf fabric.StaticCanvas.prototype\n     */\n    vptCoords: { },\n\n    /**\n     * Based on vptCoords and object.aCoords, skip rendering of objects that\n     * are not included in current viewport.\n     * May greatly help in applications with crowded canvas and use of zoom/pan\n     * If One of the corner of the bounding box of the object is on the canvas\n     * the objects get rendered.\n     * @memberOf fabric.StaticCanvas.prototype\n     * @type Boolean\n     * @default\n     */\n    skipOffscreen: true,\n\n    /**\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n     * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n     * top left corner of the canvas.\n     * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n     * @type fabric.Object\n     */\n    clipPath: undefined,\n\n    /**\n     * @private\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     */\n    _initStatic: function(el, options) {\n      var cb = this.requestRenderAllBound;\n      this._objects = [];\n      this._createLowerCanvas(el);\n      this._initOptions(options);\n      this._setImageSmoothing();\n      // only initialize retina scaling once\n      if (!this.interactive) {\n        this._initRetinaScaling();\n      }\n\n      if (options.overlayImage) {\n        this.setOverlayImage(options.overlayImage, cb);\n      }\n      if (options.backgroundImage) {\n        this.setBackgroundImage(options.backgroundImage, cb);\n      }\n      if (options.backgroundColor) {\n        this.setBackgroundColor(options.backgroundColor, cb);\n      }\n      if (options.overlayColor) {\n        this.setOverlayColor(options.overlayColor, cb);\n      }\n      this.calcOffset();\n    },\n\n    /**\n     * @private\n     */\n    _isRetinaScaling: function() {\n      return (fabric.devicePixelRatio !== 1 && this.enableRetinaScaling);\n    },\n\n    /**\n     * @private\n     * @return {Number} retinaScaling if applied, otherwise 1;\n     */\n    getRetinaScaling: function() {\n      return this._isRetinaScaling() ? fabric.devicePixelRatio : 1;\n    },\n\n    /**\n     * @private\n     */\n    _initRetinaScaling: function() {\n      if (!this._isRetinaScaling()) {\n        return;\n      }\n      this.lowerCanvasEl.setAttribute('width', this.width * fabric.devicePixelRatio);\n      this.lowerCanvasEl.setAttribute('height', this.height * fabric.devicePixelRatio);\n\n      this.contextContainer.scale(fabric.devicePixelRatio, fabric.devicePixelRatio);\n    },\n\n    /**\n     * Calculates canvas element offset relative to the document\n     * This method is also attached as \"resize\" event handler of window\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    calcOffset: function () {\n      this._offset = getElementOffset(this.lowerCanvasEl);\n      return this;\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\n     * @param {Function} callback callback to invoke when image is loaded and set as an overlay\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\n     * @example <caption>Normal overlayImage with left/top = 0</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage with different properties</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage loaded from cross-origin</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */\n    setOverlayImage: function (image, callback, options) {\n      return this.__setBgOverlayImage('overlayImage', image, callback, options);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}\n     * @example <caption>Normal backgroundImage with left/top = 0</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage with different properties</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage loaded from cross-origin</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */\n    // TODO: fix stretched examples\n    setBackgroundImage: function (image, callback, options) {\n      return this.__setBgOverlayImage('backgroundImage', image, callback, options);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas\n     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to\n     * @param {Function} callback Callback to invoke when foreground color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\n     * @example <caption>Normal overlayColor - color value</caption>\n     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */\n    setOverlayColor: function(overlayColor, callback) {\n      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\n     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\n     * @param {Function} callback Callback to invoke when background color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\n     * @example <caption>Normal backgroundColor - color value</caption>\n     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */\n    setBackgroundColor: function(backgroundColor, callback) {\n      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\n    },\n\n    /**\n     * @private\n     * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}\n     */\n    _setImageSmoothing: function() {\n      var ctx = this.getContext();\n\n      ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled\n        || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;\n      ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\n     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\n     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\n     */\n    __setBgOverlayImage: function(property, image, callback, options) {\n      if (typeof image === 'string') {\n        fabric.util.loadImage(image, function(img) {\n          if (img) {\n            var instance = new fabric.Image(img, options);\n            this[property] = instance;\n            instance.canvas = this;\n          }\n          callback && callback(img);\n        }, this, options && options.crossOrigin);\n      }\n      else {\n        options && image.setOptions(options);\n        this[property] = image;\n        image && (image.canvas = this);\n        callback && callback(image);\n      }\n\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\n     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\n     * @param {(Object|String|null)} color Object with pattern information, color value or null\n     * @param {Function} [callback] Callback is invoked when color is set\n     */\n    __setBgOverlayColor: function(property, color, callback) {\n      this[property] = color;\n      this._initGradient(color, property);\n      this._initPattern(color, property, callback);\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _createCanvasElement: function() {\n      var element = createCanvasElement();\n      if (!element) {\n        throw CANVAS_INIT_ERROR;\n      }\n      if (!element.style) {\n        element.style = { };\n      }\n      if (typeof element.getContext === 'undefined') {\n        throw CANVAS_INIT_ERROR;\n      }\n      return element;\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initOptions: function (options) {\n      var lowerCanvasEl = this.lowerCanvasEl;\n      this._setOptions(options);\n\n      this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;\n      this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;\n\n      if (!this.lowerCanvasEl.style) {\n        return;\n      }\n\n      lowerCanvasEl.width = this.width;\n      lowerCanvasEl.height = this.height;\n\n      lowerCanvasEl.style.width = this.width + 'px';\n      lowerCanvasEl.style.height = this.height + 'px';\n\n      this.viewportTransform = this.viewportTransform.slice();\n    },\n\n    /**\n     * Creates a bottom canvas\n     * @private\n     * @param {HTMLElement} [canvasEl]\n     */\n    _createLowerCanvas: function (canvasEl) {\n      // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n      if (canvasEl && canvasEl.getContext) {\n        this.lowerCanvasEl = canvasEl;\n      }\n      else {\n        this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\n      }\n\n      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\n\n      if (this.interactive) {\n        this._applyCanvasStyle(this.lowerCanvasEl);\n      }\n\n      this.contextContainer = this.lowerCanvasEl.getContext('2d');\n    },\n\n    /**\n     * Returns canvas width (in px)\n     * @return {Number}\n     */\n    getWidth: function () {\n      return this.width;\n    },\n\n    /**\n     * Returns canvas height (in px)\n     * @return {Number}\n     */\n    getHeight: function () {\n      return this.height;\n    },\n\n    /**\n     * Sets width of this canvas instance\n     * @param {Number|String} value                         Value to set width to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setWidth: function (value, options) {\n      return this.setDimensions({ width: value }, options);\n    },\n\n    /**\n     * Sets height of this canvas instance\n     * @param {Number|String} value                         Value to set height to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setHeight: function (value, options) {\n      return this.setDimensions({ height: value }, options);\n    },\n\n    /**\n     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n     * @param {Object}        dimensions                    Object with width/height properties\n     * @param {Number|String} [dimensions.width]            Width of canvas element\n     * @param {Number|String} [dimensions.height]           Height of canvas element\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setDimensions: function (dimensions, options) {\n      var cssValue;\n\n      options = options || {};\n\n      for (var prop in dimensions) {\n        cssValue = dimensions[prop];\n\n        if (!options.cssOnly) {\n          this._setBackstoreDimension(prop, dimensions[prop]);\n          cssValue += 'px';\n          this.hasLostContext = true;\n        }\n\n        if (!options.backstoreOnly) {\n          this._setCssDimension(prop, cssValue);\n        }\n      }\n      if (this._isCurrentlyDrawing) {\n        this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles();\n      }\n      this._initRetinaScaling();\n      this._setImageSmoothing();\n      this.calcOffset();\n\n      if (!options.cssOnly) {\n        this.requestRenderAll();\n      }\n\n      return this;\n    },\n\n    /**\n     * Helper for setting width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {Number} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    _setBackstoreDimension: function (prop, value) {\n      this.lowerCanvasEl[prop] = value;\n\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl[prop] = value;\n      }\n\n      if (this.cacheCanvasEl) {\n        this.cacheCanvasEl[prop] = value;\n      }\n\n      this[prop] = value;\n\n      return this;\n    },\n\n    /**\n     * Helper for setting css width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {String} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    _setCssDimension: function (prop, value) {\n      this.lowerCanvasEl.style[prop] = value;\n\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl.style[prop] = value;\n      }\n\n      if (this.wrapperEl) {\n        this.wrapperEl.style[prop] = value;\n      }\n\n      return this;\n    },\n\n    /**\n     * Returns canvas zoom level\n     * @return {Number}\n     */\n    getZoom: function () {\n      return this.viewportTransform[0];\n    },\n\n    /**\n     * Sets viewport transform of this canvas instance\n     * @param {Array} vpt the transform in the form of context.transform\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setViewportTransform: function (vpt) {\n      var activeObject = this._activeObject, object, ignoreVpt = false, skipAbsolute = true, i, len;\n      this.viewportTransform = vpt;\n      for (i = 0, len = this._objects.length; i < len; i++) {\n        object = this._objects[i];\n        object.group || object.setCoords(ignoreVpt, skipAbsolute);\n      }\n      if (activeObject && activeObject.type === 'activeSelection') {\n        activeObject.setCoords(ignoreVpt, skipAbsolute);\n      }\n      this.calcViewportBoundaries();\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Sets zoom level of this canvas instance, zoom centered around point\n     * @param {fabric.Point} point to zoom with respect to\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    zoomToPoint: function (point, value) {\n      // TODO: just change the scale, preserve other transformations\n      var before = point, vpt = this.viewportTransform.slice(0);\n      point = transformPoint(point, invertTransform(this.viewportTransform));\n      vpt[0] = value;\n      vpt[3] = value;\n      var after = transformPoint(point, vpt);\n      vpt[4] += before.x - after.x;\n      vpt[5] += before.y - after.y;\n      return this.setViewportTransform(vpt);\n    },\n\n    /**\n     * Sets zoom level of this canvas instance\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setZoom: function (value) {\n      this.zoomToPoint(new fabric.Point(0, 0), value);\n      return this;\n    },\n\n    /**\n     * Pan viewport so as to place point at top left corner of canvas\n     * @param {fabric.Point} point to move to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    absolutePan: function (point) {\n      var vpt = this.viewportTransform.slice(0);\n      vpt[4] = -point.x;\n      vpt[5] = -point.y;\n      return this.setViewportTransform(vpt);\n    },\n\n    /**\n     * Pans viewpoint relatively\n     * @param {fabric.Point} point (position vector) to move by\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    relativePan: function (point) {\n      return this.absolutePan(new fabric.Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5]\n      ));\n    },\n\n    /**\n     * Returns &lt;canvas> element corresponding to this instance\n     * @return {HTMLCanvasElement}\n     */\n    getElement: function () {\n      return this.lowerCanvasEl;\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was added\n     */\n    _onObjectAdded: function(obj) {\n      this.stateful && obj.setupState();\n      obj._set('canvas', this);\n      obj.setCoords();\n      this.fire('object:added', { target: obj });\n      obj.fire('added');\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was removed\n     */\n    _onObjectRemoved: function(obj) {\n      this.fire('object:removed', { target: obj });\n      obj.fire('removed');\n      delete obj.canvas;\n    },\n\n    /**\n     * Clears specified context of canvas element\n     * @param {CanvasRenderingContext2D} ctx Context to clear\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clearContext: function(ctx) {\n      ctx.clearRect(0, 0, this.width, this.height);\n      return this;\n    },\n\n    /**\n     * Returns context of canvas where objects are drawn\n     * @return {CanvasRenderingContext2D}\n     */\n    getContext: function () {\n      return this.contextContainer;\n    },\n\n    /**\n     * Clears all contexts (background, main, top) of an instance\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clear: function () {\n      this._objects.length = 0;\n      this.backgroundImage = null;\n      this.overlayImage = null;\n      this.backgroundColor = '';\n      this.overlayColor = '';\n      if (this._hasITextHandlers) {\n        this.off('mouse:up', this._mouseUpITextHandler);\n        this._iTextInstances = null;\n        this._hasITextHandlers = false;\n      }\n      this.clearContext(this.contextContainer);\n      this.fire('canvas:cleared');\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Renders the canvas\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAll: function () {\n      var canvasToDrawOn = this.contextContainer;\n      this.renderCanvas(canvasToDrawOn, this._objects);\n      return this;\n    },\n\n    /**\n     * Function created to be instance bound at initialization\n     * used in requestAnimationFrame rendering\n     * Let the fabricJS call it. If you call it manually you could have more\n     * animationFrame stacking on to of each other\n     * for an imperative rendering, use canvas.renderAll\n     * @private\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAndReset: function() {\n      this.isRendering = 0;\n      this.renderAll();\n    },\n\n    /**\n     * Append a renderAll request to next animation frame.\n     * unless one is already in progress, in that case nothing is done\n     * a boolean flag will avoid appending more.\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    requestRenderAll: function () {\n      if (!this.isRendering) {\n        this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);\n      }\n      return this;\n    },\n\n    /**\n     * Calculate the position of the 4 corner of canvas with current viewportTransform.\n     * helps to determinate when an object is in the current rendering viewport using\n     * object absolute coordinates ( aCoords )\n     * @return {Object} points.tl\n     * @chainable\n     */\n    calcViewportBoundaries: function() {\n      var points = { }, width = this.width, height = this.height,\n          iVpt = invertTransform(this.viewportTransform);\n      points.tl = transformPoint({ x: 0, y: 0 }, iVpt);\n      points.br = transformPoint({ x: width, y: height }, iVpt);\n      points.tr = new fabric.Point(points.br.x, points.tl.y);\n      points.bl = new fabric.Point(points.tl.x, points.br.y);\n      this.vptCoords = points;\n      return points;\n    },\n\n    cancelRequestedRender: function() {\n      if (this.isRendering) {\n        fabric.util.cancelAnimFrame(this.isRendering);\n        this.isRendering = 0;\n      }\n    },\n\n    /**\n     * Renders background, objects, overlay and controls.\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Array} objects to render\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderCanvas: function(ctx, objects) {\n      var v = this.viewportTransform, path = this.clipPath;\n      this.cancelRequestedRender();\n      this.calcViewportBoundaries();\n      this.clearContext(ctx);\n      this.fire('before:render', { ctx: ctx, });\n      if (this.clipTo) {\n        fabric.util.clipContext(this, ctx);\n      }\n      this._renderBackground(ctx);\n\n      ctx.save();\n      //apply viewport transform once for all rendering process\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      this._renderObjects(ctx, objects);\n      ctx.restore();\n      if (!this.controlsAboveOverlay && this.interactive) {\n        this.drawControls(ctx);\n      }\n      if (this.clipTo) {\n        ctx.restore();\n      }\n      if (path) {\n        path.canvas = this;\n        // needed to setup a couple of variables\n        path.shouldCache();\n        path._transformDone = true;\n        path.renderCache({ forClipping: true });\n        this.drawClipPathOnCanvas(ctx);\n      }\n      this._renderOverlay(ctx);\n      if (this.controlsAboveOverlay && this.interactive) {\n        this.drawControls(ctx);\n      }\n      this.fire('after:render', { ctx: ctx, });\n    },\n\n    /**\n     * Paint the cached clipPath on the lowerCanvasEl\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawClipPathOnCanvas: function(ctx) {\n      var v = this.viewportTransform, path = this.clipPath;\n      ctx.save();\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      // DEBUG: uncomment this line, comment the following\n      // ctx.globalAlpha = 0.4;\n      ctx.globalCompositeOperation = 'destination-in';\n      path.transform(ctx);\n      ctx.scale(1 / path.zoomX, 1 / path.zoomY);\n      ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Array} objects to render\n     */\n    _renderObjects: function(ctx, objects) {\n      var i, len;\n      for (i = 0, len = objects.length; i < len; ++i) {\n        objects[i] && objects[i].render(ctx);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {string} property 'background' or 'overlay'\n     */\n    _renderBackgroundOrOverlay: function(ctx, property) {\n      var object = this[property + 'Color'], v;\n      if (object) {\n        ctx.fillStyle = object.toLive\n          ? object.toLive(ctx, this)\n          : object;\n\n        ctx.fillRect(\n          object.offsetX || 0,\n          object.offsetY || 0,\n          this.width,\n          this.height);\n      }\n      object = this[property + 'Image'];\n      if (object) {\n        if (this[property + 'Vpt']) {\n          v = this.viewportTransform;\n          ctx.save();\n          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n        }\n        object.render(ctx);\n        this[property + 'Vpt'] && ctx.restore();\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderBackground: function(ctx) {\n      this._renderBackgroundOrOverlay(ctx, 'background');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderOverlay: function(ctx) {\n      this._renderBackgroundOrOverlay(ctx, 'overlay');\n    },\n\n    /**\n     * Returns coordinates of a center of canvas.\n     * Returned value is an object with top and left properties\n     * @return {Object} object with \"top\" and \"left\" number values\n     */\n    getCenter: function () {\n      return {\n        top: this.height / 2,\n        left: this.width / 2\n      };\n    },\n\n    /**\n     * Centers object horizontally in the canvas\n     * @param {fabric.Object} object Object to center horizontally\n     * @return {fabric.Canvas} thisArg\n     */\n    centerObjectH: function (object) {\n      return this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));\n    },\n\n    /**\n     * Centers object vertically in the canvas\n     * @param {fabric.Object} object Object to center vertically\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    centerObjectV: function (object) {\n      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));\n    },\n\n    /**\n     * Centers object vertically and horizontally in the canvas\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    centerObject: function(object) {\n      var center = this.getCenter();\n\n      return this._centerObject(object, new fabric.Point(center.left, center.top));\n    },\n\n    /**\n     * Centers object vertically and horizontally in the viewport\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    viewportCenterObject: function(object) {\n      var vpCenter = this.getVpCenter();\n\n      return this._centerObject(object, vpCenter);\n    },\n\n    /**\n     * Centers object horizontally in the viewport, object.top is unchanged\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    viewportCenterObjectH: function(object) {\n      var vpCenter = this.getVpCenter();\n      this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));\n      return this;\n    },\n\n    /**\n     * Centers object Vertically in the viewport, object.top is unchanged\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    viewportCenterObjectV: function(object) {\n      var vpCenter = this.getVpCenter();\n\n      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));\n    },\n\n    /**\n     * Calculate the point in canvas that correspond to the center of actual viewport.\n     * @return {fabric.Point} vpCenter, viewport center\n     * @chainable\n     */\n    getVpCenter: function() {\n      var center = this.getCenter(),\n          iVpt = invertTransform(this.viewportTransform);\n      return transformPoint({ x: center.left, y: center.top }, iVpt);\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} object Object to center\n     * @param {fabric.Point} center Center point\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    _centerObject: function(object, center) {\n      object.setPositionByOrigin(center, 'center', 'center');\n      object.setCoords();\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Returs dataless JSON representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {String} json string\n     */\n    toDatalessJSON: function (propertiesToInclude) {\n      return this.toDatalessObject(propertiesToInclude);\n    },\n\n    /**\n     * Returns object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function (propertiesToInclude) {\n      return this._toObjectMethod('toObject', propertiesToInclude);\n    },\n\n    /**\n     * Returns dataless object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function (propertiesToInclude) {\n      return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n    },\n\n    /**\n     * @private\n     */\n    _toObjectMethod: function (methodName, propertiesToInclude) {\n\n      var clipPath = this.clipPath, data = {\n        version: fabric.version,\n        objects: this._toObjects(methodName, propertiesToInclude),\n      };\n      if (clipPath) {\n        data.clipPath = this._toObjectMethod(clipPath, methodName, propertiesToInclude);\n      }\n      extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));\n\n      fabric.util.populateWithProperties(this, data, propertiesToInclude);\n\n      return data;\n    },\n\n    /**\n     * @private\n     */\n    _toObjects: function(methodName, propertiesToInclude) {\n      return this._objects.filter(function(object) {\n        return !object.excludeFromExport;\n      }).map(function(instance) {\n        return this._toObject(instance, methodName, propertiesToInclude);\n      }, this);\n    },\n\n    /**\n     * @private\n     */\n    _toObject: function(instance, methodName, propertiesToInclude) {\n      var originalValue;\n\n      if (!this.includeDefaultValues) {\n        originalValue = instance.includeDefaultValues;\n        instance.includeDefaultValues = false;\n      }\n\n      var object = instance[methodName](propertiesToInclude);\n      if (!this.includeDefaultValues) {\n        instance.includeDefaultValues = originalValue;\n      }\n      return object;\n    },\n\n    /**\n     * @private\n     */\n    __serializeBgOverlay: function(methodName, propertiesToInclude) {\n      var data = { }, bgImage = this.backgroundImage, overlay = this.overlayImage;\n\n      if (this.backgroundColor) {\n        data.background = this.backgroundColor.toObject\n          ? this.backgroundColor.toObject(propertiesToInclude)\n          : this.backgroundColor;\n      }\n\n      if (this.overlayColor) {\n        data.overlay = this.overlayColor.toObject\n          ? this.overlayColor.toObject(propertiesToInclude)\n          : this.overlayColor;\n      }\n      if (bgImage && !bgImage.excludeFromExport) {\n        data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);\n      }\n      if (overlay && !overlay.excludeFromExport) {\n        data.overlayImage = this._toObject(overlay, methodName, propertiesToInclude);\n      }\n\n      return data;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n     * a zoomed canvas will then produce zoomed SVG output.\n     * @type Boolean\n     * @default\n     */\n    svgViewportTransformation: true,\n\n    /**\n     * Returns SVG representation of canvas\n     * @function\n     * @param {Object} [options] Options object for SVG output\n     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n     * @param {Object} [options.viewBox] SVG viewbox object\n     * @param {Number} [options.viewBox.x] x-cooridnate of viewbox\n     * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n     * @param {Number} [options.viewBox.width] Width of viewbox\n     * @param {Number} [options.viewBox.height] Height of viewbox\n     * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n     * @param {String} [options.width] desired width of svg with or without units\n     * @param {String} [options.height] desired height of svg with or without units\n     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n     * @return {String} SVG string\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n     * @example <caption>Normal SVG output</caption>\n     * var svg = canvas.toSVG();\n     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n     * var svg = canvas.toSVG({suppressPreamble: true});\n     * @example <caption>SVG output with viewBox attribute</caption>\n     * var svg = canvas.toSVG({\n     *   viewBox: {\n     *     x: 100,\n     *     y: 100,\n     *     width: 200,\n     *     height: 300\n     *   }\n     * });\n     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n     * @example <caption>Modify SVG output with reviver function</caption>\n     * var svg = canvas.toSVG(null, function(svg) {\n     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n     * });\n     */\n    toSVG: function(options, reviver) {\n      options || (options = { });\n      options.reviver = reviver;\n      var markup = [];\n\n      this._setSVGPreamble(markup, options);\n      this._setSVGHeader(markup, options);\n      if (this.clipPath) {\n        markup.push('<g clip-path=\"url(#' + this.clipPath.clipPathId + ')\" >\\n');\n      }\n      this._setSVGBgOverlayColor(markup, 'backgroundColor');\n      this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n      this._setSVGObjects(markup, reviver);\n      if (this.clipPath) {\n        markup.push('</g>\\n');\n      }\n      this._setSVGBgOverlayColor(markup, 'overlayColor');\n      this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n      markup.push('</svg>');\n\n      return markup.join('');\n    },\n\n    /**\n     * @private\n     */\n    _setSVGPreamble: function(markup, options) {\n      if (options.suppressPreamble) {\n        return;\n      }\n      markup.push(\n        '<?xml version=\"1.0\" encoding=\"', (options.encoding || 'UTF-8'), '\" standalone=\"no\" ?>\\n',\n        '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n        '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\n      );\n    },\n\n    /**\n     * @private\n     */\n    _setSVGHeader: function(markup, options) {\n      var width = options.width || this.width,\n          height = options.height || this.height,\n          vpt, viewBox = 'viewBox=\"0 0 ' + this.width + ' ' + this.height + '\" ',\n          NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\n      if (options.viewBox) {\n        viewBox = 'viewBox=\"' +\n                options.viewBox.x + ' ' +\n                options.viewBox.y + ' ' +\n                options.viewBox.width + ' ' +\n                options.viewBox.height + '\" ';\n      }\n      else {\n        if (this.svgViewportTransformation) {\n          vpt = this.viewportTransform;\n          viewBox = 'viewBox=\"' +\n                  toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\n                  toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + ' ' +\n                  toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\n                  toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '\" ';\n        }\n      }\n\n      markup.push(\n        '<svg ',\n        'xmlns=\"http://www.w3.org/2000/svg\" ',\n        'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n        'version=\"1.1\" ',\n        'width=\"', width, '\" ',\n        'height=\"', height, '\" ',\n        viewBox,\n        'xml:space=\"preserve\">\\n',\n        '<desc>Created with Fabric.js ', fabric.version, '</desc>\\n',\n        '<defs>\\n',\n        this.createSVGFontFacesMarkup(),\n        this.createSVGRefElementsMarkup(),\n        this.createSVGClipPathMarkup(options),\n        '</defs>\\n'\n      );\n    },\n\n    createSVGClipPathMarkup: function(options) {\n      var clipPath = this.clipPath;\n      if (clipPath) {\n        clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;\n        return  '<clipPath id=\"' + clipPath.clipPathId + '\" >\\n' +\n          this.clipPath.toClipPathSVG(options.reviver) +\n          '</clipPath>\\n';\n      }\n      return '';\n    },\n\n    /**\n     * Creates markup containing SVG referenced elements like patterns, gradients etc.\n     * @return {String}\n     */\n    createSVGRefElementsMarkup: function() {\n      var _this = this,\n          markup = ['backgroundColor', 'overlayColor'].map(function(prop) {\n            var fill = _this[prop];\n            if (fill && fill.toLive) {\n              return fill.toSVG(_this, false);\n            }\n          });\n      return markup.join('');\n    },\n\n    /**\n     * Creates markup containing SVG font faces,\n     * font URLs for font faces must be collected by developers\n     * and are not extracted from the DOM by fabricjs\n     * @param {Array} objects Array of fabric objects\n     * @return {String}\n     */\n    createSVGFontFacesMarkup: function() {\n      var markup = '', fontList = { }, obj, fontFamily,\n          style, row, rowIndex, _char, charIndex, i, len,\n          fontPaths = fabric.fontPaths, objects = this._objects;\n\n      for (i = 0, len = objects.length; i < len; i++) {\n        obj = objects[i];\n        fontFamily = obj.fontFamily;\n        if (obj.type.indexOf('text') === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {\n          continue;\n        }\n        fontList[fontFamily] = true;\n        if (!obj.styles) {\n          continue;\n        }\n        style = obj.styles;\n        for (rowIndex in style) {\n          row = style[rowIndex];\n          for (charIndex in row) {\n            _char = row[charIndex];\n            fontFamily = _char.fontFamily;\n            if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n              fontList[fontFamily] = true;\n            }\n          }\n        }\n      }\n\n      for (var j in fontList) {\n        markup += [\n          '\\t\\t@font-face {\\n',\n          '\\t\\t\\tfont-family: \\'', j, '\\';\\n',\n          '\\t\\t\\tsrc: url(\\'', fontPaths[j], '\\');\\n',\n          '\\t\\t}\\n'\n        ].join('');\n      }\n\n      if (markup) {\n        markup = [\n          '\\t<style type=\"text/css\">',\n          '<![CDATA[\\n',\n          markup,\n          ']]>',\n          '</style>\\n'\n        ].join('');\n      }\n\n      return markup;\n    },\n\n    /**\n     * @private\n     */\n    _setSVGObjects: function(markup, reviver) {\n      var instance, i, len, objects = this._objects;\n      for (i = 0, len = objects.length; i < len; i++) {\n        instance = objects[i];\n        if (instance.excludeFromExport) {\n          continue;\n        }\n        this._setSVGObject(markup, instance, reviver);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGObject: function(markup, instance, reviver) {\n      markup.push(instance.toSVG(reviver));\n    },\n\n    /**\n     * @private\n     */\n    _setSVGBgOverlayImage: function(markup, property, reviver) {\n      if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {\n        markup.push(this[property].toSVG(reviver));\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGBgOverlayColor: function(markup, property) {\n      var filler = this[property], vpt = this.viewportTransform, finalWidth = this.width / vpt[0],\n          finalHeight = this.height / vpt[3];\n      if (!filler) {\n        return;\n      }\n      if (filler.toLive) {\n        var repeat = filler.repeat;\n        markup.push(\n          '<rect transform=\"translate(', finalWidth / 2, ',', finalHeight / 2, ')\"',\n          ' x=\"', filler.offsetX - finalWidth / 2, '\" y=\"', filler.offsetY - finalHeight / 2, '\" ',\n          'width=\"',\n          (repeat === 'repeat-y' || repeat === 'no-repeat'\n            ? filler.source.width\n            : finalWidth ),\n          '\" height=\"',\n          (repeat === 'repeat-x' || repeat === 'no-repeat'\n            ? filler.source.height\n            : finalHeight),\n          '\" fill=\"url(#SVGID_' + filler.id + ')\"',\n          '></rect>\\n'\n        );\n      }\n      else {\n        markup.push(\n          '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n          'fill=\"', this[property], '\"',\n          '></rect>\\n'\n        );\n      }\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    sendToBack: function (object) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, objs;\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = objs.length; i--;) {\n          obj = objs[i];\n          removeFromArray(this._objects, obj);\n          this._objects.unshift(obj);\n        }\n      }\n      else {\n        removeFromArray(this._objects, object);\n        this._objects.unshift(object);\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    bringToFront: function (object) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, objs;\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = 0; i < objs.length; i++) {\n          obj = objs[i];\n          removeFromArray(this._objects, obj);\n          this._objects.push(obj);\n        }\n      }\n      else {\n        removeFromArray(this._objects, object);\n        this._objects.push(object);\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional paramter, intersecting allowes to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    sendBackwards: function (object, intersecting) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, idx, newIdx, objs, objsMoved = 0;\n\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = 0; i < objs.length; i++) {\n          obj = objs[i];\n          idx = this._objects.indexOf(obj);\n          if (idx > 0 + objsMoved) {\n            newIdx = idx - 1;\n            removeFromArray(this._objects, obj);\n            this._objects.splice(newIdx, 0, obj);\n          }\n          objsMoved++;\n        }\n      }\n      else {\n        idx = this._objects.indexOf(object);\n        if (idx !== 0) {\n          // if object is not on the bottom of stack\n          newIdx = this._findNewLowerIndex(object, idx, intersecting);\n          removeFromArray(this._objects, object);\n          this._objects.splice(newIdx, 0, object);\n        }\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _findNewLowerIndex: function(object, idx, intersecting) {\n      var newIdx, i;\n\n      if (intersecting) {\n        newIdx = idx;\n\n        // traverse down the stack looking for the nearest intersecting object\n        for (i = idx - 1; i >= 0; --i) {\n\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                               object.isContainedWithinObject(this._objects[i]) ||\n                               this._objects[i].isContainedWithinObject(object);\n\n          if (isIntersecting) {\n            newIdx = i;\n            break;\n          }\n        }\n      }\n      else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    },\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional paramter, intersecting allowes to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    bringForward: function (object, intersecting) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, idx, newIdx, objs, objsMoved = 0;\n\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = objs.length; i--;) {\n          obj = objs[i];\n          idx = this._objects.indexOf(obj);\n          if (idx < this._objects.length - 1 - objsMoved) {\n            newIdx = idx + 1;\n            removeFromArray(this._objects, obj);\n            this._objects.splice(newIdx, 0, obj);\n          }\n          objsMoved++;\n        }\n      }\n      else {\n        idx = this._objects.indexOf(object);\n        if (idx !== this._objects.length - 1) {\n          // if object is not on top of stack (last item in an array)\n          newIdx = this._findNewUpperIndex(object, idx, intersecting);\n          removeFromArray(this._objects, object);\n          this._objects.splice(newIdx, 0, object);\n        }\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _findNewUpperIndex: function(object, idx, intersecting) {\n      var newIdx, i, len;\n\n      if (intersecting) {\n        newIdx = idx;\n\n        // traverse up the stack looking for the nearest intersecting object\n        for (i = idx + 1, len = this._objects.length; i < len; ++i) {\n\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                               object.isContainedWithinObject(this._objects[i]) ||\n                               this._objects[i].isContainedWithinObject(object);\n\n          if (isIntersecting) {\n            newIdx = i;\n            break;\n          }\n        }\n      }\n      else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    },\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {Number} index Position to move to\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    moveTo: function (object, index) {\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      return this.renderOnAddRemove && this.requestRenderAll();\n    },\n\n    /**\n     * Clears a canvas element and dispose objects\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    dispose: function () {\n      // cancel eventually ongoing renders\n      if (this.isRendering) {\n        fabric.util.cancelAnimFrame(this.isRendering);\n        this.isRendering = 0;\n      }\n      this.forEachObject(function(object) {\n        object.dispose && object.dispose();\n      });\n      this._objects = [];\n      if (this.backgroundImage && this.backgroundImage.dispose) {\n        this.backgroundImage.dispose();\n      }\n      this.backgroundImage = null;\n      if (this.overlayImage && this.overlayImage.dispose) {\n        this.overlayImage.dispose();\n      }\n      this.overlayImage = null;\n      this._iTextInstances = null;\n      this.contextContainer = null;\n      fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);\n      this.lowerCanvasEl = undefined;\n      return this;\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @return {String} string representation of an instance\n     */\n    toString: function () {\n      return '#<fabric.Canvas (' + this.complexity() + '): ' +\n               '{ objects: ' + this._objects.length + ' }>';\n    }\n  });\n\n  extend(fabric.StaticCanvas.prototype, fabric.Observable);\n  extend(fabric.StaticCanvas.prototype, fabric.Collection);\n  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\n\n  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\n\n    /**\n     * @static\n     * @type String\n     * @default\n     */\n    EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\n\n    /**\n     * Provides a way to check support of some of the canvas methods\n     * (either those of HTMLCanvasElement itself, or rendering context)\n     *\n     * @param {String} methodName Method to check support for;\n     *                            Could be one of \"setLineDash\"\n     * @return {Boolean | null} `true` if method is supported (or at least exists),\n     *                          `null` if canvas element or context can not be initialized\n     */\n    supports: function (methodName) {\n      var el = createCanvasElement();\n\n      if (!el || !el.getContext) {\n        return null;\n      }\n\n      var ctx = el.getContext('2d');\n      if (!ctx) {\n        return null;\n      }\n\n      switch (methodName) {\n\n        case 'setLineDash':\n          return typeof ctx.setLineDash !== 'undefined';\n\n        default:\n          return null;\n      }\n    }\n  });\n\n  /**\n   * Returns JSON representation of canvas\n   * @function\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} JSON string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);\n   * @example <caption>JSON without default values</caption>\n   * canvas.includeDefaultValues = false;\n   * var json = canvas.toJSON();\n   */\n  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\n\n  if (fabric.isLikelyNode) {\n    fabric.StaticCanvas.prototype.createPNGStream = function() {\n      var impl = getNodeCanvas(this.lowerCanvasEl);\n      return impl && impl.createPNGStream();\n    };\n    fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\n      var impl = getNodeCanvas(this.lowerCanvasEl);\n      return impl && impl.createJPEGStream(opts);\n    };\n  }\n})();\n\n\n/**\n * BaseBrush class\n * @class fabric.BaseBrush\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nfabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\n\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color: 'rgb(0, 0, 0)',\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width: 1,\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type fabric.Shadow\n   * @default\n   */\n  shadow: null,\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: 'round',\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: 'round',\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit:         10,\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: null,\n\n  /**\n   * Sets shadow of an object\n   * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  setShadow: function(options) {\n    this.shadow = new fabric.Shadow(options);\n    return this;\n  },\n\n  /**\n   * Sets brush styles\n   * @private\n   */\n  _setBrushStyles: function() {\n    var ctx = this.canvas.contextTop;\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    if (fabric.StaticCanvas.supports('setLineDash')) {\n      ctx.setLineDash(this.strokeDashArray || []);\n    }\n  },\n\n  /**\n   * Sets the transformation on given context\n   * @param {RenderingContext2d} ctx context to render on\n   * @private\n   */\n  _saveAndTransform: function(ctx) {\n    var v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  },\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  _setShadow: function() {\n    if (!this.shadow) {\n      return;\n    }\n\n    var ctx = this.canvas.contextTop,\n        zoom = this.canvas.getZoom();\n\n    ctx.shadowColor = this.shadow.color;\n    ctx.shadowBlur = this.shadow.blur * zoom;\n    ctx.shadowOffsetX = this.shadow.offsetX * zoom;\n    ctx.shadowOffsetY = this.shadow.offsetY * zoom;\n  },\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  _resetShadow: function() {\n    var ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n});\n\n\n(function() {\n\n  /**\n   * PencilBrush class\n   * @class fabric.PencilBrush\n   * @extends fabric.BaseBrush\n   */\n  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\n\n    /**\n     * Constructor\n     * @param {fabric.Canvas} canvas\n     * @return {fabric.PencilBrush} Instance of a pencil brush\n     */\n    initialize: function(canvas) {\n      this.canvas = canvas;\n      this._points = [];\n    },\n\n    /**\n     * Invoked inside on mouse down and mouse move\n     * @param {Object} pointer\n     */\n    _drawSegment: function (ctx, p1, p2) {\n      var midPoint = p1.midPointFrom(p2);\n      ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n      return midPoint;\n    },\n\n    /**\n     * Inovoked on mouse down\n     * @param {Object} pointer\n     */\n    onMouseDown: function(pointer) {\n      this._prepareForDrawing(pointer);\n      // capture coordinates immediately\n      // this allows to draw dots (when movement never occurs)\n      this._captureDrawingPath(pointer);\n      this._render();\n    },\n\n    /**\n     * Inovoked on mouse move\n     * @param {Object} pointer\n     */\n    onMouseMove: function(pointer) {\n      if (this._captureDrawingPath(pointer) && this._points.length > 1) {\n        if (this.needsFullRender) {\n          // redraw curve\n          // clear top canvas\n          this.canvas.clearContext(this.canvas.contextTop);\n          this._render();\n        }\n        else {\n          var points = this._points, length = points.length, ctx = this.canvas.contextTop;\n          // draw the curve update\n          this._saveAndTransform(ctx);\n          if (this.oldEnd) {\n            ctx.beginPath();\n            ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n          }\n          this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);\n          ctx.stroke();\n          ctx.restore();\n        }\n      }\n    },\n\n    /**\n     * Invoked on mouse up\n     */\n    onMouseUp: function() {\n      this.oldEnd = undefined;\n      this._finalizeAndAddPath();\n    },\n\n    /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */\n    _prepareForDrawing: function(pointer) {\n\n      var p = new fabric.Point(pointer.x, pointer.y);\n\n      this._reset();\n      this._addPoint(p);\n      this.canvas.contextTop.moveTo(p.x, p.y);\n    },\n\n    /**\n     * @private\n     * @param {fabric.Point} point Point to be added to points array\n     */\n    _addPoint: function(point) {\n      if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {\n        return false;\n      }\n      this._points.push(point);\n      return true;\n    },\n\n    /**\n     * Clear points array and set contextTop canvas style.\n     * @private\n     */\n    _reset: function() {\n      this._points.length = 0;\n      this._setBrushStyles();\n      var color = new fabric.Color(this.color);\n      this.needsFullRender = (color.getAlpha() < 1);\n      this._setShadow();\n    },\n\n    /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */\n    _captureDrawingPath: function(pointer) {\n      var pointerPoint = new fabric.Point(pointer.x, pointer.y);\n      return this._addPoint(pointerPoint);\n    },\n\n    /**\n     * Draw a smooth path on the topCanvas using quadraticCurveTo\n     * @private\n     */\n    _render: function() {\n      var ctx  = this.canvas.contextTop, i, len,\n          p1 = this._points[0],\n          p2 = this._points[1];\n\n      this._saveAndTransform(ctx);\n      ctx.beginPath();\n      //if we only have 2 points in the path and they are the same\n      //it means that the user only clicked the canvas without moving the mouse\n      //then we should be drawing a dot. A path isn't drawn between two identical dots\n      //that's why we set them apart a bit\n      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n        var width = this.width / 1000;\n        p1 = new fabric.Point(p1.x, p1.y);\n        p2 = new fabric.Point(p2.x, p2.y);\n        p1.x -= width;\n        p2.x += width;\n      }\n      ctx.moveTo(p1.x, p1.y);\n\n      for (i = 1, len = this._points.length; i < len; i++) {\n        // we pick the point between pi + 1 & pi + 2 as the\n        // end point and p1 as our control point.\n        this._drawSegment(ctx, p1, p2);\n        p1 = this._points[i];\n        p2 = this._points[i + 1];\n      }\n      // Draw last line as a straight line while\n      // we wait for the next point to be able to calculate\n      // the bezier control point\n      ctx.lineTo(p1.x, p1.y);\n      ctx.stroke();\n      ctx.restore();\n    },\n\n    /**\n     * Converts points to SVG path\n     * @param {Array} points Array of points\n     * @return {String} SVG path\n     */\n    convertPointsToSVGPath: function(points) {\n      var path = [], i, width = this.width / 1000,\n          p1 = new fabric.Point(points[0].x, points[0].y),\n          p2 = new fabric.Point(points[1].x, points[1].y),\n          len = points.length, multSignX = 1, multSignY = 1, manyPoints = len > 2;\n\n      if (manyPoints) {\n        multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n        multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n      }\n      path.push('M ', p1.x - multSignX * width, ' ', p1.y - multSignY * width, ' ');\n      for (i = 1; i < len; i++) {\n        if (!p1.eq(p2)) {\n          var midPoint = p1.midPointFrom(p2);\n          // p1 is our bezier control point\n          // midpoint is our endpoint\n          // start point is p(i-1) value.\n          path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');\n        }\n        p1 = points[i];\n        if ((i + 1) < points.length) {\n          p2 = points[i + 1];\n        }\n      }\n      if (manyPoints) {\n        multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n        multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n      }\n      path.push('L ', p1.x + multSignX * width, ' ', p1.y + multSignY * width);\n      return path;\n    },\n\n    /**\n     * Creates fabric.Path object to add on canvas\n     * @param {String} pathData Path data\n     * @return {fabric.Path} Path to add on canvas\n     */\n    createPath: function(pathData) {\n      var path = new fabric.Path(pathData, {\n        fill: null,\n        stroke: this.color,\n        strokeWidth: this.width,\n        strokeLineCap: this.strokeLineCap,\n        strokeMiterLimit: this.strokeMiterLimit,\n        strokeLineJoin: this.strokeLineJoin,\n        strokeDashArray: this.strokeDashArray,\n      });\n      var position = new fabric.Point(path.left + path.width / 2, path.top + path.height / 2);\n      position = path.translateToGivenOrigin(position, 'center', 'center', path.originX, path.originY);\n      path.top = position.y;\n      path.left = position.x;\n      if (this.shadow) {\n        this.shadow.affectStroke = true;\n        path.setShadow(this.shadow);\n      }\n\n      return path;\n    },\n\n    /**\n     * On mouseup after drawing the path on contextTop canvas\n     * we use the points captured to create an new fabric path object\n     * and add it to the fabric canvas.\n     */\n    _finalizeAndAddPath: function() {\n      var ctx = this.canvas.contextTop;\n      ctx.closePath();\n\n      var pathData = this.convertPointsToSVGPath(this._points).join('');\n      if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {\n        // do not create 0 width/height paths, as they are\n        // rendered inconsistently across browsers\n        // Firefox 4, for example, renders a dot,\n        // whereas Chrome 10 renders nothing\n        this.canvas.requestRenderAll();\n        return;\n      }\n\n      var path = this.createPath(pathData);\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.canvas.add(path);\n      this.canvas.renderAll();\n      path.setCoords();\n      this._resetShadow();\n\n\n      // fire event 'path' created\n      this.canvas.fire('path:created', { path: path });\n    }\n  });\n})();\n\n\n/**\n * CircleBrush class\n * @class fabric.CircleBrush\n */\nfabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\n\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width: 10,\n\n  /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.CircleBrush} Instance of a circle brush\n   */\n  initialize: function(canvas) {\n    this.canvas = canvas;\n    this.points = [];\n  },\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Object} pointer\n   */\n  drawDot: function(pointer) {\n    var point = this.addPoint(pointer),\n        ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.restore();\n  },\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown: function(pointer) {\n    this.points.length = 0;\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  },\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render: function() {\n    var ctx  = this.canvas.contextTop, i, len,\n        points = this.points, point;\n    this._saveAndTransform(ctx);\n    for (i = 0, len = points.length; i < len; i++) {\n      point = points[i];\n      ctx.fillStyle = point.fill;\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n      ctx.closePath();\n      ctx.fill();\n    }\n    ctx.restore();\n  },\n\n  /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */\n  onMouseMove: function(pointer) {\n    this.drawDot(pointer);\n  },\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp: function() {\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;\n    this.canvas.renderOnAddRemove = false;\n\n    var circles = [];\n\n    for (i = 0, len = this.points.length; i < len; i++) {\n      var point = this.points[i],\n          circle = new fabric.Circle({\n            radius: point.radius,\n            left: point.x,\n            top: point.y,\n            originX: 'center',\n            originY: 'center',\n            fill: point.fill\n          });\n\n      this.shadow && circle.setShadow(this.shadow);\n\n      circles.push(circle);\n    }\n    var group = new fabric.Group(circles);\n    group.canvas = this.canvas;\n\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  },\n\n  /**\n   * @param {Object} pointer\n   * @return {fabric.Point} Just added pointer point\n   */\n  addPoint: function(pointer) {\n    var pointerPoint = new fabric.Point(pointer.x, pointer.y),\n\n        circleRadius = fabric.util.getRandomInt(\n          Math.max(0, this.width - 20), this.width + 20) / 2,\n\n        circleColor = new fabric.Color(this.color)\n          .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\n          .toRgba();\n\n    pointerPoint.radius = circleRadius;\n    pointerPoint.fill = circleColor;\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n});\n\n\n/**\n * SprayBrush class\n * @class fabric.SprayBrush\n */\nfabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\n\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width:              10,\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density:            20,\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth:           1,\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance:   1,\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity:        false,\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping:  true,\n\n  /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.SprayBrush} Instance of a spray brush\n   */\n  initialize: function(canvas) {\n    this.canvas = canvas;\n    this.sprayChunks = [];\n  },\n\n  /**\n   * Invoked on mouse down\n   * @param {Object} pointer\n   */\n  onMouseDown: function(pointer) {\n    this.sprayChunks.length = 0;\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.render(this.sprayChunkPoints);\n  },\n\n  /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */\n  onMouseMove: function(pointer) {\n    this.addSprayChunk(pointer);\n    this.render(this.sprayChunkPoints);\n  },\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp: function() {\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    var rects = [];\n\n    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n      var sprayChunk = this.sprayChunks[i];\n\n      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\n\n        var rect = new fabric.Rect({\n          width: sprayChunk[j].width,\n          height: sprayChunk[j].width,\n          left: sprayChunk[j].x + 1,\n          top: sprayChunk[j].y + 1,\n          originX: 'center',\n          originY: 'center',\n          fill: this.color\n        });\n        rects.push(rect);\n      }\n    }\n\n    if (this.optimizeOverlapping) {\n      rects = this._getOptimizedRects(rects);\n    }\n\n    var group = new fabric.Group(rects);\n    this.shadow && group.setShadow(this.shadow);\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  },\n\n  /**\n   * @private\n   * @param {Array} rects\n   */\n  _getOptimizedRects: function(rects) {\n\n    // avoid creating duplicate rects at the same coordinates\n    var uniqueRects = { }, key, i, len;\n\n    for (i = 0, len = rects.length; i < len; i++) {\n      key = rects[i].left + '' + rects[i].top;\n      if (!uniqueRects[key]) {\n        uniqueRects[key] = rects[i];\n      }\n    }\n    var uniqueRectsArray = [];\n    for (key in uniqueRects) {\n      uniqueRectsArray.push(uniqueRects[key]);\n    }\n\n    return uniqueRectsArray;\n  },\n\n  /**\n   * Render new chunk of spray brush\n   */\n  render: function(sprayChunk) {\n    var ctx = this.canvas.contextTop, i, len;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (i = 0, len = sprayChunk.length; i < len; i++) {\n      var point = sprayChunk[i];\n      if (typeof point.opacity !== 'undefined') {\n        ctx.globalAlpha = point.opacity;\n      }\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n    ctx.restore();\n  },\n\n  /**\n   * Render all spray chunks\n   */\n  _render: function() {\n    var ctx = this.canvas.contextTop, i, ilen;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n      this.render(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  },\n\n  /**\n   * @param {Object} pointer\n   */\n  addSprayChunk: function(pointer) {\n    this.sprayChunkPoints = [];\n\n    var x, y, width, radius = this.width / 2, i;\n\n    for (i = 0; i < this.density; i++) {\n\n      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\n      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\n\n      if (this.dotWidthVariance) {\n        width = fabric.util.getRandomInt(\n          // bottom clamp width to 1\n          Math.max(1, this.dotWidth - this.dotWidthVariance),\n          this.dotWidth + this.dotWidthVariance);\n      }\n      else {\n        width = this.dotWidth;\n      }\n\n      var point = new fabric.Point(x, y);\n      point.width = width;\n\n      if (this.randomOpacity) {\n        point.opacity = fabric.util.getRandomInt(0, 100) / 100;\n      }\n\n      this.sprayChunkPoints.push(point);\n    }\n\n    this.sprayChunks.push(this.sprayChunkPoints);\n  }\n});\n\n\n/**\n * PatternBrush class\n * @class fabric.PatternBrush\n * @extends fabric.BaseBrush\n */\nfabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\n\n  getPatternSrc: function() {\n\n    var dotWidth = 20,\n        dotDistance = 5,\n        patternCanvas = fabric.util.createCanvasElement(),\n        patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n\n    patternCtx.fillStyle = this.color;\n    patternCtx.beginPath();\n    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\n    patternCtx.closePath();\n    patternCtx.fill();\n\n    return patternCanvas;\n  },\n\n  getPatternSrcFunction: function() {\n    return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\n  },\n\n  /**\n   * Creates \"pattern\" instance property\n   */\n  getPattern: function() {\n    return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  },\n\n  /**\n   * Sets brush styles\n   */\n  _setBrushStyles: function() {\n    this.callSuper('_setBrushStyles');\n    this.canvas.contextTop.strokeStyle = this.getPattern();\n  },\n\n  /**\n   * Creates path\n   */\n  createPath: function(pathData) {\n    var path = this.callSuper('createPath', pathData),\n        topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new fabric.Pattern({\n      source: this.source || this.getPatternSrcFunction(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y\n    });\n    return path;\n  }\n});\n\n\n(function() {\n\n  var getPointer = fabric.util.getPointer,\n      degreesToRadians = fabric.util.degreesToRadians,\n      radiansToDegrees = fabric.util.radiansToDegrees,\n      atan2 = Math.atan2,\n      abs = Math.abs,\n      supportLineDash = fabric.StaticCanvas.supports('setLineDash'),\n\n      STROKE_OFFSET = 0.5;\n\n  /**\n   * Canvas class\n   * @class fabric.Canvas\n   * @extends fabric.StaticCanvas\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n   * @see {@link fabric.Canvas#initialize} for constructor definition\n   *\n   * @fires object:modified\n   * @fires object:rotated\n   * @fires object:scaled\n   * @fires object:moved\n   * @fires object:skewed\n   * @fires object:rotating\n   * @fires object:scaling\n   * @fires object:moving\n   * @fires object:skewing\n   * @fires object:selected this event is deprecated. use selection:created\n   *\n   * @fires before:transform\n   * @fires before:selection:cleared\n   * @fires selection:cleared\n   * @fires selection:updated\n   * @fires selection:created\n   *\n   * @fires path:created\n   * @fires mouse:down\n   * @fires mouse:move\n   * @fires mouse:up\n   * @fires mouse:down:before\n   * @fires mouse:move:before\n   * @fires mouse:up:before\n   * @fires mouse:over\n   * @fires mouse:out\n   * @fires mouse:dblclick\n   *\n   * @fires dragover\n   * @fires dragenter\n   * @fires dragleave\n   * @fires drop\n   *\n   */\n  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(el, options) {\n      options || (options = { });\n      this.renderAndResetBound = this.renderAndReset.bind(this);\n      this.requestRenderAllBound = this.requestRenderAll.bind(this);\n      this._initStatic(el, options);\n      this._initInteractive();\n      this._createCacheCanvas();\n    },\n\n    /**\n     * When true, objects can be transformed by one side (unproportionally)\n     * @type Boolean\n     * @default\n     */\n    uniScaleTransform:      false,\n\n    /**\n     * Indicates which key enable unproportional scaling\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled feature disabled.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    uniScaleKey:           'shiftKey',\n\n    /**\n     * When true, objects use center point as the origin of scale transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredScaling:        false,\n\n    /**\n     * When true, objects use center point as the origin of rotate transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredRotation:       false,\n\n    /**\n     * Indicates which key enable centered Transform\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled feature disabled.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    centeredKey:           'altKey',\n\n    /**\n     * Indicates which key enable alternate action on corner\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled feature disabled.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    altActionKey:           'shiftKey',\n\n    /**\n     * Indicates that canvas is interactive. This property should not be changed.\n     * @type Boolean\n     * @default\n     */\n    interactive:            true,\n\n    /**\n     * Indicates whether group selection should be enabled\n     * @type Boolean\n     * @default\n     */\n    selection:              true,\n\n    /**\n     * Indicates which key or keys enable multiple click selection\n     * Pass value as a string or array of strings\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or empty or containing any other string that is not a modifier key\n     * feature is disabled.\n     * @since 1.6.2\n     * @type String|Array\n     * @default\n     */\n    selectionKey:           'shiftKey',\n\n    /**\n     * Indicates which key enable alternative selection\n     * in case of target overlapping with active object\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * For a series of reason that come from the general expectations on how\n     * things should work, this feature works only for preserveObjectStacking true.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled.\n     * @since 1.6.5\n     * @type null|String\n     * @default\n     */\n    altSelectionKey:           null,\n\n    /**\n     * Color of selection\n     * @type String\n     * @default\n     */\n    selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\n\n    /**\n     * Default dash array pattern\n     * If not empty the selection border is dashed\n     * @type Array\n     */\n    selectionDashArray:     [],\n\n    /**\n     * Color of the border of selection (usually slightly darker than color of selection itself)\n     * @type String\n     * @default\n     */\n    selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\n\n    /**\n     * Width of a line used in object/group selection\n     * @type Number\n     * @default\n     */\n    selectionLineWidth:     1,\n\n    /**\n     * Select only shapes that are fully contained in the dragged selection rectangle.\n     * @type Boolean\n     * @default\n     */\n    selectionFullyContained: false,\n\n    /**\n     * Default cursor value used when hovering over an object on canvas\n     * @type String\n     * @default\n     */\n    hoverCursor:            'move',\n\n    /**\n     * Default cursor value used when moving an object on canvas\n     * @type String\n     * @default\n     */\n    moveCursor:             'move',\n\n    /**\n     * Default cursor value used for the entire canvas\n     * @type String\n     * @default\n     */\n    defaultCursor:          'default',\n\n    /**\n     * Cursor value used during free drawing\n     * @type String\n     * @default\n     */\n    freeDrawingCursor:      'crosshair',\n\n    /**\n     * Cursor value used for rotation point\n     * @type String\n     * @default\n     */\n    rotationCursor:         'crosshair',\n\n    /**\n     * Cursor value used for disabled elements ( corners with disabled action )\n     * @type String\n     * @since 2.0.0\n     * @default\n     */\n    notAllowedCursor:         'not-allowed',\n\n    /**\n     * Default element class that's given to wrapper (div) element of canvas\n     * @type String\n     * @default\n     */\n    containerClass:         'canvas-container',\n\n    /**\n     * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n     * @type Boolean\n     * @default\n     */\n    perPixelTargetFind:     false,\n\n    /**\n     * Number of pixels around target pixel to tolerate (consider active) during object detection\n     * @type Number\n     * @default\n     */\n    targetFindTolerance:    0,\n\n    /**\n     * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.\n     * @type Boolean\n     * @default\n     */\n    skipTargetFind:         false,\n\n    /**\n     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n     * After mousedown, mousemove creates a shape,\n     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n     * @type Boolean\n     * @default\n     */\n    isDrawingMode:          false,\n\n    /**\n     * Indicates whether objects should remain in current stack position when selected.\n     * When false objects are brought to top and rendered as part of the selection group\n     * @type Boolean\n     * @default\n     */\n    preserveObjectStacking: false,\n\n    /**\n     * Indicates the angle that an object will lock to while rotating.\n     * @type Number\n     * @since 1.6.7\n     * @default\n     */\n    snapAngle: 0,\n\n    /**\n     * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.\n     * When `null`, the snapThreshold will default to the snapAngle.\n     * @type null|Number\n     * @since 1.6.7\n     * @default\n     */\n    snapThreshold: null,\n\n    /**\n     * Indicates if the right click on canvas can output the context menu or not\n     * @type Boolean\n     * @since 1.6.5\n     * @default\n     */\n    stopContextMenu: false,\n\n    /**\n     * Indicates if the canvas can fire right click events\n     * @type Boolean\n     * @since 1.6.5\n     * @default\n     */\n    fireRightClick: false,\n\n    /**\n     * Indicates if the canvas can fire middle click events\n     * @type Boolean\n     * @since 1.7.8\n     * @default\n     */\n    fireMiddleClick: false,\n\n    /**\n     * @private\n     */\n    _initInteractive: function() {\n      this._currentTransform = null;\n      this._groupSelector = null;\n      this._initWrapperElement();\n      this._createUpperCanvas();\n      this._initEventListeners();\n\n      this._initRetinaScaling();\n\n      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\n\n      this.calcOffset();\n    },\n\n    /**\n     * Divides objects in two groups, one to render immediately\n     * and one to render as activeGroup.\n     * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n     */\n    _chooseObjectsToRender: function() {\n      var activeObjects = this.getActiveObjects(),\n          object, objsToRender, activeGroupObjects;\n\n      if (activeObjects.length > 0 && !this.preserveObjectStacking) {\n        objsToRender = [];\n        activeGroupObjects = [];\n        for (var i = 0, length = this._objects.length; i < length; i++) {\n          object = this._objects[i];\n          if (activeObjects.indexOf(object) === -1 ) {\n            objsToRender.push(object);\n          }\n          else {\n            activeGroupObjects.push(object);\n          }\n        }\n        if (activeObjects.length > 1) {\n          this._activeObject._objects = activeGroupObjects;\n        }\n        objsToRender.push.apply(objsToRender, activeGroupObjects);\n      }\n      else {\n        objsToRender = this._objects;\n      }\n      return objsToRender;\n    },\n\n    /**\n     * Renders both the top canvas and the secondary container canvas.\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAll: function () {\n      if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n        this.clearContext(this.contextTop);\n        this.contextTopDirty = false;\n      }\n      if (this.hasLostContext) {\n        this.renderTopLayer(this.contextTop);\n      }\n      var canvasToDrawOn = this.contextContainer;\n      this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());\n      return this;\n    },\n\n    renderTopLayer: function(ctx) {\n      ctx.save();\n      if (this.isDrawingMode && this._isCurrentlyDrawing) {\n        this.freeDrawingBrush && this.freeDrawingBrush._render();\n        this.contextTopDirty = true;\n      }\n      // we render the top context - last object\n      if (this.selection && this._groupSelector) {\n        this._drawSelection(ctx);\n        this.contextTopDirty = true;\n      }\n      ctx.restore();\n    },\n\n    /**\n     * Method to render only the top canvas.\n     * Also used to render the group selection box.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    renderTop: function () {\n      var ctx = this.contextTop;\n      this.clearContext(ctx);\n      this.renderTopLayer(ctx);\n      this.fire('after:render');\n      return this;\n    },\n\n    /**\n     * Resets the current transform to its original values and chooses the type of resizing based on the event\n     * @private\n     */\n    _resetCurrentTransform: function() {\n      var t = this._currentTransform;\n\n      t.target.set({\n        scaleX: t.original.scaleX,\n        scaleY: t.original.scaleY,\n        skewX: t.original.skewX,\n        skewY: t.original.skewY,\n        left: t.original.left,\n        top: t.original.top\n      });\n\n      if (this._shouldCenterTransform(t.target)) {\n        if (t.originX !== 'center') {\n          if (t.originX === 'right') {\n            t.mouseXSign = -1;\n          }\n          else {\n            t.mouseXSign = 1;\n          }\n        }\n        if (t.originY !== 'center') {\n          if (t.originY === 'bottom') {\n            t.mouseYSign = -1;\n          }\n          else {\n            t.mouseYSign = 1;\n          }\n        }\n\n        t.originX = 'center';\n        t.originY = 'center';\n      }\n      else {\n        t.originX = t.original.originX;\n        t.originY = t.original.originY;\n      }\n    },\n\n    /**\n     * Checks if point is contained within an area of given object\n     * @param {Event} e Event object\n     * @param {fabric.Object} target Object to test against\n     * @param {Object} [point] x,y object of point coordinates we want to check.\n     * @return {Boolean} true if point is contained within an area of given object\n     */\n    containsPoint: function (e, target, point) {\n      var ignoreZoom = true,\n          pointer = point || this.getPointer(e, ignoreZoom),\n          xy;\n\n      if (target.group && target.group === this._activeObject && target.group.type === 'activeSelection') {\n        xy = this._normalizePointer(target.group, pointer);\n      }\n      else {\n        xy = { x: pointer.x, y: pointer.y };\n      }\n      // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\n      // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\n      return (target.containsPoint(xy) || target._findTargetCorner(pointer));\n    },\n\n    /**\n     * @private\n     */\n    _normalizePointer: function (object, pointer) {\n      var m = object.calcTransformMatrix(),\n          invertedM = fabric.util.invertTransform(m),\n          vptPointer = this.restorePointerVpt(pointer);\n      return fabric.util.transformPoint(vptPointer, invertedM);\n    },\n\n    /**\n     * Returns true if object is transparent at a certain location\n     * @param {fabric.Object} target Object to check\n     * @param {Number} x Left coordinate\n     * @param {Number} y Top coordinate\n     * @return {Boolean}\n     */\n    isTargetTransparent: function (target, x, y) {\n      // in case the target is the activeObject, we cannot execute this optimization\n      // because we need to draw controls too.\n      if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {\n        var normalizedPointer = this._normalizePointer(target, {x: x, y: y}),\n            targetRelativeX = Math.max(target.cacheTranslationX + (normalizedPointer.x * target.zoomX), 0),\n            targetRelativeY = Math.max(target.cacheTranslationY + (normalizedPointer.y * target.zoomY), 0);\n\n        var isTransparent = fabric.util.isTransparent(\n          target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);\n\n        return isTransparent;\n      }\n\n      var ctx = this.contextCache,\n          originalColor = target.selectionBackgroundColor, v = this.viewportTransform;\n\n      target.selectionBackgroundColor = '';\n\n      this.clearContext(ctx);\n\n      ctx.save();\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      target.render(ctx);\n      ctx.restore();\n\n      target === this._activeObject && target._renderControls(ctx, {\n        hasBorders: false,\n        transparentCorners: false\n      }, {\n        hasBorders: false,\n      });\n\n      target.selectionBackgroundColor = originalColor;\n\n      var isTransparent = fabric.util.isTransparent(\n        ctx, x, y, this.targetFindTolerance);\n\n      return isTransparent;\n    },\n\n    /**\n     * takes an event and determins if selection key has been pressed\n     * @private\n     * @param {Event} e Event object\n     */\n    _isSelectionKeyPressed: function(e) {\n      var selectionKeyPressed = false;\n\n      if (Object.prototype.toString.call(this.selectionKey) === '[object Array]') {\n        selectionKeyPressed = !!this.selectionKey.find(function(key) { return e[key] === true; });\n      }\n      else {\n        selectionKeyPressed = e[this.selectionKey];\n      }\n\n      return selectionKeyPressed;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _shouldClearSelection: function (e, target) {\n      var activeObjects = this.getActiveObjects(),\n          activeObject = this._activeObject;\n\n      return (\n        !target\n        ||\n        (target &&\n          activeObject &&\n          activeObjects.length > 1 &&\n          activeObjects.indexOf(target) === -1 &&\n          activeObject !== target &&\n          !this._isSelectionKeyPressed(e))\n        ||\n        (target && !target.evented)\n        ||\n        (target &&\n          !target.selectable &&\n          activeObject &&\n          activeObject !== target)\n      );\n    },\n\n    /**\n     * centeredScaling from object can't override centeredScaling from canvas.\n     * this should be fixed, since object setting should take precedence over canvas.\n     * @private\n     * @param {fabric.Object} target\n     */\n    _shouldCenterTransform: function (target) {\n      if (!target) {\n        return;\n      }\n\n      var t = this._currentTransform,\n          centerTransform;\n\n      if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {\n        centerTransform = this.centeredScaling || target.centeredScaling;\n      }\n      else if (t.action === 'rotate') {\n        centerTransform = this.centeredRotation || target.centeredRotation;\n      }\n\n      return centerTransform ? !t.altKey : t.altKey;\n    },\n\n    /**\n     * @private\n     */\n    _getOriginFromCorner: function(target, corner) {\n      var origin = {\n        x: target.originX,\n        y: target.originY\n      };\n\n      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\n        origin.x = 'right';\n      }\n      else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\n        origin.x = 'left';\n      }\n\n      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\n        origin.y = 'bottom';\n      }\n      else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\n        origin.y = 'top';\n      }\n\n      return origin;\n    },\n\n    /**\n     * @private\n     */\n    _getActionFromCorner: function(alreadySelected, corner, e) {\n      if (!corner || !alreadySelected) {\n        return 'drag';\n      }\n\n      switch (corner) {\n        case 'mtr':\n          return 'rotate';\n        case 'ml':\n        case 'mr':\n          return e[this.altActionKey] ? 'skewY' : 'scaleX';\n        case 'mt':\n        case 'mb':\n          return e[this.altActionKey] ? 'skewX' : 'scaleY';\n        default:\n          return 'scale';\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _setupCurrentTransform: function (e, target, alreadySelected) {\n      if (!target) {\n        return;\n      }\n\n      var pointer = this.getPointer(e),\n          corner = target._findTargetCorner(this.getPointer(e, true)),\n          action = this._getActionFromCorner(alreadySelected, corner, e),\n          origin = this._getOriginFromCorner(target, corner);\n\n      this._currentTransform = {\n        target: target,\n        action: action,\n        corner: corner,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        // used by transation\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        lastX: pointer.x,\n        lastY: pointer.y,\n        // unsure they are usefull anymore.\n        // left: target.left,\n        // top: target.top,\n        theta: degreesToRadians(target.angle),\n        // end of unsure\n        width: target.width * target.scaleX,\n        mouseXSign: 1,\n        mouseYSign: 1,\n        shiftKey: e.shiftKey,\n        altKey: e[this.centeredKey],\n        original: fabric.util.saveObjectTransform(target),\n      };\n\n      this._currentTransform.original.originX = origin.x;\n      this._currentTransform.original.originY = origin.y;\n\n      this._resetCurrentTransform();\n      this._beforeTransform(e);\n    },\n\n    /**\n     * Translates object by \"setting\" its left/top\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     * @return {Boolean} true if the translation occurred\n     */\n    _translateObject: function (x, y) {\n      var transform = this._currentTransform,\n          target = transform.target,\n          newLeft = x - transform.offsetX,\n          newTop = y - transform.offsetY,\n          moveX = !target.get('lockMovementX') && target.left !== newLeft,\n          moveY = !target.get('lockMovementY') && target.top !== newTop;\n\n      moveX && target.set('left', newLeft);\n      moveY && target.set('top', newTop);\n      return moveX || moveY;\n    },\n\n    /**\n     * Check if we are increasing a positive skew or lower it,\n     * checking mouse direction and pressed corner.\n     * @private\n     */\n    _changeSkewTransformOrigin: function(mouseMove, t, by) {\n      var property = 'originX', origins = { 0: 'center' },\n          skew = t.target.skewX, originA = 'left', originB = 'right',\n          corner = t.corner === 'mt' || t.corner === 'ml' ? 1 : -1,\n          flipSign = 1;\n\n      mouseMove = mouseMove > 0 ? 1 : -1;\n      if (by === 'y') {\n        skew = t.target.skewY;\n        originA = 'top';\n        originB = 'bottom';\n        property = 'originY';\n      }\n      origins[-1] = originA;\n      origins[1] = originB;\n\n      t.target.flipX && (flipSign *= -1);\n      t.target.flipY && (flipSign *= -1);\n\n      if (skew === 0) {\n        t.skewSign = -corner * mouseMove * flipSign;\n        t[property] = origins[-mouseMove];\n      }\n      else {\n        skew = skew > 0 ? 1 : -1;\n        t.skewSign = skew;\n        t[property] = origins[skew * corner * flipSign];\n      }\n    },\n\n    /**\n     * Skew object by mouse events\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     * @param {String} by Either 'x' or 'y'\n     * @return {Boolean} true if the skewing occurred\n     */\n    _skewObject: function (x, y, by) {\n      var t = this._currentTransform,\n          target = t.target, skewed = false,\n          lockSkewingX = target.get('lockSkewingX'),\n          lockSkewingY = target.get('lockSkewingY');\n\n      if ((lockSkewingX && by === 'x') || (lockSkewingY && by === 'y')) {\n        return false;\n      }\n\n      // Get the constraint point\n      var center = target.getCenterPoint(),\n          actualMouseByCenter = target.toLocalPoint(new fabric.Point(x, y), 'center', 'center')[by],\n          lastMouseByCenter = target.toLocalPoint(new fabric.Point(t.lastX, t.lastY), 'center', 'center')[by],\n          actualMouseByOrigin, constraintPosition, dim = target._getTransformedDimensions();\n\n      this._changeSkewTransformOrigin(actualMouseByCenter - lastMouseByCenter, t, by);\n      actualMouseByOrigin = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY)[by];\n      constraintPosition = target.translateToOriginPoint(center, t.originX, t.originY);\n      // Actually skew the object\n      skewed = this._setObjectSkew(actualMouseByOrigin, t, by, dim);\n      t.lastX = x;\n      t.lastY = y;\n      // Make sure the constraints apply\n      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n      return skewed;\n    },\n\n    /**\n     * Set object skew\n     * @private\n     * @return {Boolean} true if the skewing occurred\n     */\n    _setObjectSkew: function(localMouse, transform, by, _dim) {\n      var target = transform.target, newValue, skewed = false,\n          skewSign = transform.skewSign, newDim, dimNoSkew,\n          otherBy, _otherBy, _by, newDimMouse, skewX, skewY;\n\n      if (by === 'x') {\n        otherBy = 'y';\n        _otherBy = 'Y';\n        _by = 'X';\n        skewX = 0;\n        skewY = target.skewY;\n      }\n      else {\n        otherBy = 'x';\n        _otherBy = 'X';\n        _by = 'Y';\n        skewX = target.skewX;\n        skewY = 0;\n      }\n\n      dimNoSkew = target._getTransformedDimensions(skewX, skewY);\n      newDimMouse = 2 * Math.abs(localMouse) - dimNoSkew[by];\n      if (newDimMouse <= 2) {\n        newValue = 0;\n      }\n      else {\n        newValue = skewSign * Math.atan((newDimMouse / target['scale' + _by]) /\n                                        (dimNoSkew[otherBy] / target['scale' + _otherBy]));\n        newValue = fabric.util.radiansToDegrees(newValue);\n      }\n      skewed = target['skew' + _by] !== newValue;\n      target.set('skew' + _by, newValue);\n      if (target['skew' + _otherBy] !== 0) {\n        newDim = target._getTransformedDimensions();\n        newValue = (_dim[otherBy] / newDim[otherBy]) * target['scale' + _otherBy];\n        target.set('scale' + _otherBy, newValue);\n      }\n      return skewed;\n    },\n\n    /**\n     * Scales object by invoking its scaleX/scaleY methods\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.\n     *                    When not provided, an object is scaled by both dimensions equally\n     * @return {Boolean} true if the scaling occurred\n     */\n    _scaleObject: function (x, y, by) {\n      var t = this._currentTransform,\n          target = t.target,\n          lockScalingX = target.lockScalingX,\n          lockScalingY = target.lockScalingY,\n          lockScalingFlip = target.lockScalingFlip;\n\n      if (lockScalingX && lockScalingY) {\n        return false;\n      }\n\n      // Get the constraint point\n      var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),\n          localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY),\n          dim = target._getTransformedDimensions(), scaled = false;\n\n      this._setLocalMouse(localMouse, t);\n\n      // Actually scale the object\n      scaled = this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip, dim);\n\n      // Make sure the constraints apply\n      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n      return scaled;\n    },\n\n    /**\n     * @private\n     * @return {Boolean} true if the scaling occurred\n     */\n    _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {\n      var target = transform.target, forbidScalingX = false, forbidScalingY = false, scaled = false,\n          scaleX = localMouse.x * target.scaleX / _dim.x,\n          scaleY = localMouse.y * target.scaleY / _dim.y,\n          changeX = target.scaleX !== scaleX,\n          changeY = target.scaleY !== scaleY;\n\n      if (lockScalingFlip && scaleX <= 0 && scaleX < target.scaleX) {\n        forbidScalingX = true;\n        localMouse.x = 0;\n      }\n\n      if (lockScalingFlip && scaleY <= 0 && scaleY < target.scaleY) {\n        forbidScalingY = true;\n        localMouse.y = 0;\n      }\n\n      if (by === 'equally' && !lockScalingX && !lockScalingY) {\n        scaled = this._scaleObjectEqually(localMouse, target, transform, _dim);\n      }\n      else if (!by) {\n        forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));\n        forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));\n      }\n      else if (by === 'x' && !target.get('lockUniScaling')) {\n        forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = changeX));\n      }\n      else if (by === 'y' && !target.get('lockUniScaling')) {\n        forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = changeY));\n      }\n      transform.newScaleX = scaleX;\n      transform.newScaleY = scaleY;\n      forbidScalingX || forbidScalingY || this._flipObject(transform, by);\n      return scaled;\n    },\n\n    /**\n     * @private\n     * @return {Boolean} true if the scaling occurred\n     */\n    _scaleObjectEqually: function(localMouse, target, transform, _dim) {\n\n      var dist = localMouse.y + localMouse.x,\n          lastDist = _dim.y * transform.original.scaleY / target.scaleY +\n                     _dim.x * transform.original.scaleX / target.scaleX,\n          scaled, signX = localMouse.x < 0 ? -1 : 1,\n          signY = localMouse.y < 0 ? -1 : 1, newScaleX, newScaleY;\n\n      // We use transform.scaleX/Y instead of target.scaleX/Y\n      // because the object may have a min scale and we'll loose the proportions\n      newScaleX = signX * Math.abs(transform.original.scaleX * dist / lastDist);\n      newScaleY = signY * Math.abs(transform.original.scaleY * dist / lastDist);\n      scaled = newScaleX !== target.scaleX || newScaleY !== target.scaleY;\n      target.set('scaleX', newScaleX);\n      target.set('scaleY', newScaleY);\n      return scaled;\n    },\n\n    /**\n     * @private\n     */\n    _flipObject: function(transform, by) {\n      if (transform.newScaleX < 0 && by !== 'y') {\n        if (transform.originX === 'left') {\n          transform.originX = 'right';\n        }\n        else if (transform.originX === 'right') {\n          transform.originX = 'left';\n        }\n      }\n\n      if (transform.newScaleY < 0 && by !== 'x') {\n        if (transform.originY === 'top') {\n          transform.originY = 'bottom';\n        }\n        else if (transform.originY === 'bottom') {\n          transform.originY = 'top';\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setLocalMouse: function(localMouse, t) {\n      var target = t.target, zoom = this.getZoom(),\n          padding = target.padding / zoom;\n\n      if (t.originX === 'right') {\n        localMouse.x *= -1;\n      }\n      else if (t.originX === 'center') {\n        localMouse.x *= t.mouseXSign * 2;\n        if (localMouse.x < 0) {\n          t.mouseXSign = -t.mouseXSign;\n        }\n      }\n\n      if (t.originY === 'bottom') {\n        localMouse.y *= -1;\n      }\n      else if (t.originY === 'center') {\n        localMouse.y *= t.mouseYSign * 2;\n        if (localMouse.y < 0) {\n          t.mouseYSign = -t.mouseYSign;\n        }\n      }\n\n      // adjust the mouse coordinates when dealing with padding\n      if (abs(localMouse.x) > padding) {\n        if (localMouse.x < 0) {\n          localMouse.x += padding;\n        }\n        else {\n          localMouse.x -= padding;\n        }\n      }\n      else { // mouse is within the padding, set to 0\n        localMouse.x = 0;\n      }\n\n      if (abs(localMouse.y) > padding) {\n        if (localMouse.y < 0) {\n          localMouse.y += padding;\n        }\n        else {\n          localMouse.y -= padding;\n        }\n      }\n      else {\n        localMouse.y = 0;\n      }\n    },\n\n    /**\n     * Rotates object by invoking its rotate method\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     * @return {Boolean} true if the rotation occurred\n     */\n    _rotateObject: function (x, y) {\n\n      var t = this._currentTransform,\n          target = t.target, constraintPosition,\n          constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);\n\n      if (target.lockRotation) {\n        return false;\n      }\n\n      var lastAngle = atan2(t.ey - constraintPosition.y, t.ex - constraintPosition.x),\n          curAngle = atan2(y - constraintPosition.y, x - constraintPosition.x),\n          angle = radiansToDegrees(curAngle - lastAngle + t.theta),\n          hasRotated = true;\n\n      if (target.snapAngle > 0) {\n        var snapAngle  = target.snapAngle,\n            snapThreshold  = target.snapThreshold || snapAngle,\n            rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n            leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n        if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n          angle = leftAngleLocked;\n        }\n        else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n          angle = rightAngleLocked;\n        }\n      }\n\n      // normalize angle to positive value\n      if (angle < 0) {\n        angle = 360 + angle;\n      }\n      angle %= 360;\n\n      if (target.angle === angle) {\n        hasRotated = false;\n      }\n      else {\n        // rotation only happen here\n        target.angle = angle;\n        // Make sure the constraints apply\n        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n      }\n\n      return hasRotated;\n    },\n\n    /**\n     * Set the cursor type of the canvas element\n     * @param {String} value Cursor type of the canvas element.\n     * @see http://www.w3.org/TR/css3-ui/#cursor\n     */\n    setCursor: function (value) {\n      this.upperCanvasEl.style.cursor = value;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx to draw the selection on\n     */\n    _drawSelection: function (ctx) {\n      var groupSelector = this._groupSelector,\n          left = groupSelector.left,\n          top = groupSelector.top,\n          aleft = abs(left),\n          atop = abs(top);\n\n      if (this.selectionColor) {\n        ctx.fillStyle = this.selectionColor;\n\n        ctx.fillRect(\n          groupSelector.ex - ((left > 0) ? 0 : -left),\n          groupSelector.ey - ((top > 0) ? 0 : -top),\n          aleft,\n          atop\n        );\n      }\n\n      if (!this.selectionLineWidth || !this.selectionBorderColor) {\n        return;\n      }\n      ctx.lineWidth = this.selectionLineWidth;\n      ctx.strokeStyle = this.selectionBorderColor;\n\n      // selection border\n      if (this.selectionDashArray.length > 1 && !supportLineDash) {\n\n        var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\n            py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop);\n\n        ctx.beginPath();\n\n        fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);\n\n        ctx.closePath();\n        ctx.stroke();\n      }\n      else {\n        fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);\n        ctx.strokeRect(\n          groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\n          groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),\n          aleft,\n          atop\n        );\n      }\n    },\n\n    /**\n     * Method that determines what object we are clicking on\n     * the skipGroup parameter is for internal use, is needed for shift+click action\n     * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n     * or the outside part of the corner.\n     * @param {Event} e mouse event\n     * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through\n     * @return {fabric.Object} the target found\n     */\n    findTarget: function (e, skipGroup) {\n      if (this.skipTargetFind) {\n        return;\n      }\n\n      var ignoreZoom = true,\n          pointer = this.getPointer(e, ignoreZoom),\n          activeObject = this._activeObject,\n          aObjects = this.getActiveObjects(),\n          activeTarget, activeTargetSubs;\n\n      // first check current group (if one exists)\n      // active group does not check sub targets like normal groups.\n      // if active group just exits.\n      this.targets = [];\n\n      if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {\n        return activeObject;\n      }\n      // if we hit the corner of an activeObject, let's return that.\n      if (aObjects.length === 1 && activeObject._findTargetCorner(pointer)) {\n        return activeObject;\n      }\n      if (aObjects.length === 1 &&\n        activeObject === this._searchPossibleTargets([activeObject], pointer)) {\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        }\n        else {\n          activeTarget = activeObject;\n          activeTargetSubs = this.targets;\n          this.targets = [];\n        }\n      }\n      var target = this._searchPossibleTargets(this._objects, pointer);\n      if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {\n        target = activeTarget;\n        this.targets = activeTargetSubs;\n      }\n      return target;\n    },\n\n    /**\n     * Checks point is inside the object.\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\n     * @param {fabric.Object} obj Object to test against\n     * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.\n     * @return {Boolean} true if point is contained within an area of given object\n     * @private\n     */\n    _checkTarget: function(pointer, obj, globalPointer) {\n      if (obj &&\n          obj.visible &&\n          obj.evented &&\n          this.containsPoint(null, obj, pointer)){\n        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\n          var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);\n          if (!isTransparent) {\n            return true;\n          }\n        }\n        else {\n          return true;\n        }\n      }\n    },\n\n    /**\n     * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n     * @param {Array} [objects] objects array to look into\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\n     * @return {fabric.Object} object that contains pointer\n     * @private\n     */\n    _searchPossibleTargets: function(objects, pointer) {\n      // Cache all targets where their bounding box contains point.\n      var target, i = objects.length, subTarget;\n      // Do not check for currently grouped objects, since we check the parent group itself.\n      // until we call this function specifically to search inside the activeGroup\n      while (i--) {\n        var objToCheck = objects[i];\n        var pointerToUse = objToCheck.group && objToCheck.group.type !== 'activeSelection' ?\n          this._normalizePointer(objToCheck.group, pointer) : pointer;\n        if (this._checkTarget(pointerToUse, objToCheck, pointer)) {\n          target = objects[i];\n          if (target.subTargetCheck && target instanceof fabric.Group) {\n            subTarget = this._searchPossibleTargets(target._objects, pointer);\n            subTarget && this.targets.push(subTarget);\n          }\n          break;\n        }\n      }\n      return target;\n    },\n\n    /**\n     * Returns pointer coordinates without the effect of the viewport\n     * @param {Object} pointer with \"x\" and \"y\" number values\n     * @return {Object} object with \"x\" and \"y\" number values\n     */\n    restorePointerVpt: function(pointer) {\n      return fabric.util.transformPoint(\n        pointer,\n        fabric.util.invertTransform(this.viewportTransform)\n      );\n    },\n\n    /**\n     * Returns pointer coordinates relative to canvas.\n     * Can return coordinates with or without viewportTransform.\n     * ignoreZoom false gives back coordinates that represent\n     * the point clicked on canvas element.\n     * ignoreZoom true gives back coordinates after being processed\n     * by the viewportTransform ( sort of coordinates of what is displayed\n     * on the canvas where you are clicking.\n     * ignoreZoom true = HTMLElement coordinates relative to top,left\n     * ignoreZoom false, default = fabric space coordinates, the same used for shape position\n     * To interact with your shapes top and left you want to use ignoreZoom true\n     * most of the time, while ignoreZoom false will give you coordinates\n     * compatible with the object.oCoords system.\n     * of the time.\n     * @param {Event} e\n     * @param {Boolean} ignoreZoom\n     * @return {Object} object with \"x\" and \"y\" number values\n     */\n    getPointer: function (e, ignoreZoom) {\n      // return cached values if we are in the event processing chain\n      if (this._absolutePointer && !ignoreZoom) {\n        return this._absolutePointer;\n      }\n      if (this._pointer && ignoreZoom) {\n        return this._pointer;\n      }\n\n      var pointer = getPointer(e),\n          upperCanvasEl = this.upperCanvasEl,\n          bounds = upperCanvasEl.getBoundingClientRect(),\n          boundsWidth = bounds.width || 0,\n          boundsHeight = bounds.height || 0,\n          cssScale;\n\n      if (!boundsWidth || !boundsHeight ) {\n        if ('top' in bounds && 'bottom' in bounds) {\n          boundsHeight = Math.abs( bounds.top - bounds.bottom );\n        }\n        if ('right' in bounds && 'left' in bounds) {\n          boundsWidth = Math.abs( bounds.right - bounds.left );\n        }\n      }\n\n      this.calcOffset();\n      pointer.x = pointer.x - this._offset.left;\n      pointer.y = pointer.y - this._offset.top;\n      if (!ignoreZoom) {\n        pointer = this.restorePointerVpt(pointer);\n      }\n\n      if (boundsWidth === 0 || boundsHeight === 0) {\n        // If bounds are not available (i.e. not visible), do not apply scale.\n        cssScale = { width: 1, height: 1 };\n      }\n      else {\n        cssScale = {\n          width: upperCanvasEl.width / boundsWidth,\n          height: upperCanvasEl.height / boundsHeight\n        };\n      }\n\n      return {\n        x: pointer.x * cssScale.width,\n        y: pointer.y * cssScale.height\n      };\n    },\n\n    /**\n     * @private\n     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\n     */\n    _createUpperCanvas: function () {\n      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, '');\n\n      // there is no need to create a new upperCanvas element if we have already one.\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl.className = '';\n      }\n      else {\n        this.upperCanvasEl = this._createCanvasElement();\n      }\n      fabric.util.addClass(this.upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\n\n      this.wrapperEl.appendChild(this.upperCanvasEl);\n\n      this._copyCanvasStyle(this.lowerCanvasEl, this.upperCanvasEl);\n      this._applyCanvasStyle(this.upperCanvasEl);\n      this.contextTop = this.upperCanvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _createCacheCanvas: function () {\n      this.cacheCanvasEl = this._createCanvasElement();\n      this.cacheCanvasEl.setAttribute('width', this.width);\n      this.cacheCanvasEl.setAttribute('height', this.height);\n      this.contextCache = this.cacheCanvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _initWrapperElement: function () {\n      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\n        'class': this.containerClass\n      });\n      fabric.util.setStyle(this.wrapperEl, {\n        width: this.width + 'px',\n        height: this.height + 'px',\n        position: 'relative'\n      });\n      fabric.util.makeElementUnselectable(this.wrapperEl);\n    },\n\n    /**\n     * @private\n     * @param {HTMLElement} element canvas element to apply styles on\n     */\n    _applyCanvasStyle: function (element) {\n      var width = this.width || element.width,\n          height = this.height || element.height;\n\n      fabric.util.setStyle(element, {\n        position: 'absolute',\n        width: width + 'px',\n        height: height + 'px',\n        left: 0,\n        top: 0,\n        'touch-action': this.allowTouchScrolling ? 'manipulation' : 'none'\n      });\n      element.width = width;\n      element.height = height;\n      fabric.util.makeElementUnselectable(element);\n    },\n\n    /**\n     * Copy the entire inline style from one element (fromEl) to another (toEl)\n     * @private\n     * @param {Element} fromEl Element style is copied from\n     * @param {Element} toEl Element copied style is applied to\n     */\n    _copyCanvasStyle: function (fromEl, toEl) {\n      toEl.style.cssText = fromEl.style.cssText;\n    },\n\n    /**\n     * Returns context of canvas where object selection is drawn\n     * @return {CanvasRenderingContext2D}\n     */\n    getSelectionContext: function() {\n      return this.contextTop;\n    },\n\n    /**\n     * Returns &lt;canvas> element on which object selection is drawn\n     * @return {HTMLCanvasElement}\n     */\n    getSelectionElement: function () {\n      return this.upperCanvasEl;\n    },\n\n    /**\n     * Returns currently active object\n     * @return {fabric.Object} active object\n     */\n    getActiveObject: function () {\n      return this._activeObject;\n    },\n\n    /**\n     * Returns an array with the current selected objects\n     * @return {fabric.Object} active object\n     */\n    getActiveObjects: function () {\n      var active = this._activeObject;\n      if (active) {\n        if (active.type === 'activeSelection' && active._objects) {\n          return active._objects.slice(0);\n        }\n        else {\n          return [active];\n        }\n      }\n      return [];\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was removed\n     */\n    _onObjectRemoved: function(obj) {\n      // removing active object should fire \"selection:cleared\" events\n      if (obj === this._activeObject) {\n        this.fire('before:selection:cleared', { target: obj });\n        this._discardActiveObject();\n        this.fire('selection:cleared', { target: obj });\n        obj.fire('deselected');\n      }\n      if (this._hoveredTarget === obj) {\n        this._hoveredTarget = null;\n      }\n      this.callSuper('_onObjectRemoved', obj);\n    },\n\n    /**\n     * @private\n     * Compares the old activeObject with the current one and fires correct events\n     * @param {fabric.Object} obj old activeObject\n     */\n    _fireSelectionEvents: function(oldObjects, e) {\n      var somethingChanged = false, objects = this.getActiveObjects(),\n          added = [], removed = [], opt = { e: e };\n      oldObjects.forEach(function(oldObject) {\n        if (objects.indexOf(oldObject) === -1) {\n          somethingChanged = true;\n          oldObject.fire('deselected', opt);\n          removed.push(oldObject);\n        }\n      });\n      objects.forEach(function(object) {\n        if (oldObjects.indexOf(object) === -1) {\n          somethingChanged = true;\n          object.fire('selected', opt);\n          added.push(object);\n        }\n      });\n      if (oldObjects.length > 0 && objects.length > 0) {\n        opt.selected = added;\n        opt.deselected = removed;\n        // added for backward compatibility\n        opt.updated = added[0] || removed[0];\n        opt.target = this._activeObject;\n        somethingChanged && this.fire('selection:updated', opt);\n      }\n      else if (objects.length > 0) {\n        // deprecated event\n        if (objects.length === 1) {\n          opt.target = added[0];\n          this.fire('object:selected', opt);\n        }\n        opt.selected = added;\n        // added for backward compatibility\n        opt.target = this._activeObject;\n        this.fire('selection:created', opt);\n      }\n      else if (oldObjects.length > 0) {\n        opt.deselected = removed;\n        this.fire('selection:cleared', opt);\n      }\n    },\n\n    /**\n     * Sets given object as the only active object on canvas\n     * @param {fabric.Object} object Object to set as an active one\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setActiveObject: function (object, e) {\n      var currentActives = this.getActiveObjects();\n      this._setActiveObject(object, e);\n      this._fireSelectionEvents(currentActives, e);\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {Object} object to set as active\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n     * @return {Boolean} true if the selection happened\n     */\n    _setActiveObject: function(object, e) {\n      if (this._activeObject === object) {\n        return false;\n      }\n      if (!this._discardActiveObject(e, object)) {\n        return false;\n      }\n      if (object.onSelect({ e: e })) {\n        return false;\n      }\n      this._activeObject = object;\n      return true;\n    },\n\n    /**\n     * @private\n     */\n    _discardActiveObject: function(e, object) {\n      var obj = this._activeObject;\n      if (obj) {\n        // onDeselect return TRUE to cancel selection;\n        if (obj.onDeselect({ e: e, object: object })) {\n          return false;\n        }\n        this._activeObject = null;\n      }\n      return true;\n    },\n\n    /**\n     * Discards currently active object and fire events. If the function is called by fabric\n     * as a consequence of a mouse event, the event is passed as a parameter and\n     * sent to the fire function for the custom events. When used as a method the\n     * e param does not have any application.\n     * @param {event} e\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    discardActiveObject: function (e) {\n      var currentActives = this.getActiveObjects();\n      if (currentActives.length) {\n        this.fire('before:selection:cleared', { target: currentActives[0], e: e });\n      }\n      this._discardActiveObject(e);\n      this._fireSelectionEvents(currentActives, e);\n      return this;\n    },\n\n    /**\n     * Clears a canvas element and removes all event listeners\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    dispose: function () {\n      var wrapper = this.wrapperEl;\n      this.removeListeners();\n      wrapper.removeChild(this.upperCanvasEl);\n      wrapper.removeChild(this.lowerCanvasEl);\n      this.contextCache = null;\n      this.contextTop = null;\n      ['upperCanvasEl', 'cacheCanvasEl'].forEach((function(element) {\n        fabric.util.cleanUpJsdomNode(this[element]);\n        this[element] = undefined;\n      }).bind(this));\n      if (wrapper.parentNode) {\n        wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);\n      }\n      delete this.wrapperEl;\n      fabric.StaticCanvas.prototype.dispose.call(this);\n      return this;\n    },\n\n    /**\n     * Clears all contexts (background, main, top) of an instance\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clear: function () {\n      // this.discardActiveGroup();\n      this.discardActiveObject();\n      this.clearContext(this.contextTop);\n      return this.callSuper('clear');\n    },\n\n    /**\n     * Draws objects' controls (borders/controls)\n     * @param {CanvasRenderingContext2D} ctx Context to render controls on\n     */\n    drawControls: function(ctx) {\n      var activeObject = this._activeObject;\n\n      if (activeObject) {\n        activeObject._renderControls(ctx);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _toObject: function(instance, methodName, propertiesToInclude) {\n      //If the object is part of the current selection group, it should\n      //be transformed appropriately\n      //i.e. it should be serialised as it would appear if the selection group\n      //were to be destroyed.\n      var originalProperties = this._realizeGroupTransformOnObject(instance),\n          object = this.callSuper('_toObject', instance, methodName, propertiesToInclude);\n      //Undo the damage we did by changing all of its properties\n      this._unwindGroupTransformOnObject(instance, originalProperties);\n      return object;\n    },\n\n    /**\n     * Realises an object's group transformation on it\n     * @private\n     * @param {fabric.Object} [instance] the object to transform (gets mutated)\n     * @returns the original values of instance which were changed\n     */\n    _realizeGroupTransformOnObject: function(instance) {\n      if (instance.group && instance.group.type === 'activeSelection' && this._activeObject === instance.group) {\n        var layoutProps = ['angle', 'flipX', 'flipY', 'left', 'scaleX', 'scaleY', 'skewX', 'skewY', 'top'];\n        //Copy all the positionally relevant properties across now\n        var originalValues = {};\n        layoutProps.forEach(function(prop) {\n          originalValues[prop] = instance[prop];\n        });\n        this._activeObject.realizeTransform(instance);\n        return originalValues;\n      }\n      else {\n        return null;\n      }\n    },\n\n    /**\n     * Restores the changed properties of instance\n     * @private\n     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\n     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\n     */\n    _unwindGroupTransformOnObject: function(instance, originalValues) {\n      if (originalValues) {\n        instance.set(originalValues);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGObject: function(markup, instance, reviver) {\n      //If the object is in a selection group, simulate what would happen to that\n      //object when the group is deselected\n      var originalProperties = this._realizeGroupTransformOnObject(instance);\n      this.callSuper('_setSVGObject', markup, instance, reviver);\n      this._unwindGroupTransformOnObject(instance, originalProperties);\n    },\n\n    setViewportTransform: function (vpt) {\n      if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {\n        this._activeObject.clearContextTop();\n      }\n      fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);\n    }\n  });\n\n  // copying static properties manually to work around Opera's bug,\n  // where \"prototype\" property is enumerable and overrides existing prototype\n  for (var prop in fabric.StaticCanvas) {\n    if (prop !== 'prototype') {\n      fabric.Canvas[prop] = fabric.StaticCanvas[prop];\n    }\n  }\n\n  if (fabric.isTouchSupported) {\n    /** @ignore */\n    fabric.Canvas.prototype._setCursorFromEvent = function() { };\n  }\n})();\n\n\n(function() {\n\n  var cursorOffset = {\n        mt: 0, // n\n        tr: 1, // ne\n        mr: 2, // e\n        br: 3, // se\n        mb: 4, // s\n        bl: 5, // sw\n        ml: 6, // w\n        tl: 7 // nw\n      },\n      addListener = fabric.util.addListener,\n      removeListener = fabric.util.removeListener,\n      RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1,\n      addEventOptions = { passive: false };\n\n  function checkClick(e, value) {\n    return 'which' in e ? e.which === value : e.button === value - 1;\n  }\n\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * Map of cursor style values for each of the object controls\n     * @private\n     */\n    cursorMap: [\n      'n-resize',\n      'ne-resize',\n      'e-resize',\n      'se-resize',\n      's-resize',\n      'sw-resize',\n      'w-resize',\n      'nw-resize'\n    ],\n\n    /**\n     * Adds mouse listeners to canvas\n     * @private\n     */\n    _initEventListeners: function () {\n      // in case we initialized the class twice. This should not happen normally\n      // but in some kind of applications where the canvas element may be changed\n      // this is a workaround to having double listeners.\n      this.removeListeners();\n      this._bindEvents();\n      this.addOrRemove(addListener, 'add');\n    },\n\n    addOrRemove: function(functor, eventjsFunctor) {\n      functor(fabric.window, 'resize', this._onResize);\n      functor(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n      functor(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\n      functor(this.upperCanvasEl, 'mouseout', this._onMouseOut);\n      functor(this.upperCanvasEl, 'mouseenter', this._onMouseEnter);\n      functor(this.upperCanvasEl, 'wheel', this._onMouseWheel);\n      functor(this.upperCanvasEl, 'contextmenu', this._onContextMenu);\n      functor(this.upperCanvasEl, 'dblclick', this._onDoubleClick);\n      functor(this.upperCanvasEl, 'touchstart', this._onMouseDown, addEventOptions);\n      functor(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\n      functor(this.upperCanvasEl, 'dragover', this._onDragOver);\n      functor(this.upperCanvasEl, 'dragenter', this._onDragEnter);\n      functor(this.upperCanvasEl, 'dragleave', this._onDragLeave);\n      functor(this.upperCanvasEl, 'drop', this._onDrop);\n      if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n        eventjs[eventjsFunctor](this.upperCanvasEl, 'gesture', this._onGesture);\n        eventjs[eventjsFunctor](this.upperCanvasEl, 'drag', this._onDrag);\n        eventjs[eventjsFunctor](this.upperCanvasEl, 'orientation', this._onOrientationChange);\n        eventjs[eventjsFunctor](this.upperCanvasEl, 'shake', this._onShake);\n        eventjs[eventjsFunctor](this.upperCanvasEl, 'longpress', this._onLongPress);\n      }\n    },\n\n    /**\n     * Removes all event listeners\n     */\n    removeListeners: function() {\n      this.addOrRemove(removeListener, 'remove');\n      // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n      removeListener(fabric.document, 'mouseup', this._onMouseUp);\n      removeListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\n      removeListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\n      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n    },\n\n    /**\n     * @private\n     */\n    _bindEvents: function() {\n      if (this.eventsBound) {\n        // for any reason we pass here twice we do not want to bind events twice.\n        return;\n      }\n      this._onMouseDown = this._onMouseDown.bind(this);\n      this._onMouseMove = this._onMouseMove.bind(this);\n      this._onMouseUp = this._onMouseUp.bind(this);\n      this._onResize = this._onResize.bind(this);\n      this._onGesture = this._onGesture.bind(this);\n      this._onDrag = this._onDrag.bind(this);\n      this._onShake = this._onShake.bind(this);\n      this._onLongPress = this._onLongPress.bind(this);\n      this._onOrientationChange = this._onOrientationChange.bind(this);\n      this._onMouseWheel = this._onMouseWheel.bind(this);\n      this._onMouseOut = this._onMouseOut.bind(this);\n      this._onMouseEnter = this._onMouseEnter.bind(this);\n      this._onContextMenu = this._onContextMenu.bind(this);\n      this._onDoubleClick = this._onDoubleClick.bind(this);\n      this._onDragOver = this._onDragOver.bind(this);\n      this._onDragEnter = this._simpleEventHandler.bind(this, 'dragenter');\n      this._onDragLeave = this._simpleEventHandler.bind(this, 'dragleave');\n      this._onDrop = this._simpleEventHandler.bind(this, 'drop');\n      this.eventsBound = true;\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js gesture\n     * @param {Event} [self] Inner Event object\n     */\n    _onGesture: function(e, self) {\n      this.__onTransformGesture && this.__onTransformGesture(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js drag\n     * @param {Event} [self] Inner Event object\n     */\n    _onDrag: function(e, self) {\n      this.__onDrag && this.__onDrag(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on wheel event\n     */\n    _onMouseWheel: function(e) {\n      this.__onMouseWheel(e);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseOut: function(e) {\n      var target = this._hoveredTarget;\n      this.fire('mouse:out', { target: target, e: e });\n      this._hoveredTarget = null;\n      target && target.fire('mouseout', { e: e });\n      if (this._iTextInstances) {\n        this._iTextInstances.forEach(function(obj) {\n          if (obj.isEditing) {\n            obj.hiddenTextarea.focus();\n          }\n        });\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseenter\n     */\n    _onMouseEnter: function(e) {\n      if (!this.findTarget(e)) {\n        this.fire('mouse:over', { target: null, e: e });\n        this._hoveredTarget = null;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js orientation change\n     * @param {Event} [self] Inner Event object\n     */\n    _onOrientationChange: function(e, self) {\n      this.__onOrientationChange && this.__onOrientationChange(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */\n    _onShake: function(e, self) {\n      this.__onShake && this.__onShake(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */\n    _onLongPress: function(e, self) {\n      this.__onLongPress && this.__onLongPress(e, self);\n    },\n\n    /**\n     * prevent default to allow drop event to be fired\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     */\n    _onDragOver: function(e) {\n      e.preventDefault();\n      var target = this._simpleEventHandler('dragover', e);\n      this._fireEnterLeaveEvents(target, e);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onContextMenu: function (e) {\n      if (this.stopContextMenu) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n      return false;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onDoubleClick: function (e) {\n      this._cacheTransformEventData(e);\n      this._handleEvent(e, 'dblclick');\n      this._resetTransformEventData(e);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseDown: function (e) {\n      this.__onMouseDown(e);\n      this._resetTransformEventData();\n      addListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\n      addListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n\n      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\n      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\n\n      if (e.type === 'touchstart') {\n        // Unbind mousedown to prevent double triggers from touch devices\n        removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n      }\n      else {\n        addListener(fabric.document, 'mouseup', this._onMouseUp);\n        addListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    _onMouseUp: function (e) {\n      this.__onMouseUp(e);\n      this._resetTransformEventData();\n      removeListener(fabric.document, 'mouseup', this._onMouseUp);\n      removeListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\n\n      removeListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\n      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n\n      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\n      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\n\n      if (e.type === 'touchend') {\n        // Wait 400ms before rebinding mousedown to prevent double triggers\n        // from touch devices\n        var _this = this;\n        setTimeout(function() {\n          addListener(_this.upperCanvasEl, 'mousedown', _this._onMouseDown);\n        }, 400);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _onMouseMove: function (e) {\n      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\n      this.__onMouseMove(e);\n    },\n\n    /**\n     * @private\n     */\n    _onResize: function () {\n      this.calcOffset();\n    },\n\n    /**\n     * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n     * @private\n     * @param {Object} target\n     */\n    _shouldRender: function(target) {\n      var activeObject = this._activeObject;\n\n      if (\n        !!activeObject !== !!target ||\n        (activeObject && target && (activeObject !== target))\n      ) {\n        // this covers: switch of target, from target to no target, selection of target\n        // multiSelection with key and mouse\n        return true;\n      }\n      else if (activeObject && activeObject.isEditing) {\n        // if we mouse up/down over a editing textbox a cursor change,\n        // there is no need to re render\n        return false;\n      }\n      return false;\n    },\n\n    /**\n     * Method that defines the actions when mouse is released on canvas.\n     * The method resets the currentTransform parameters, store the image corner\n     * position in the image object and render the canvas on top.\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    __onMouseUp: function (e) {\n      var target, transform = this._currentTransform,\n          groupSelector = this._groupSelector, shouldRender = false,\n          isClick = (!groupSelector || (groupSelector.left === 0 && groupSelector.top === 0));\n      this._cacheTransformEventData(e);\n      target = this._target;\n      this._handleEvent(e, 'up:before');\n      // if right/middle click just fire events and return\n      // target undefined will make the _handleEvent search the target\n      if (checkClick(e, RIGHT_CLICK)) {\n        if (this.fireRightClick) {\n          this._handleEvent(e, 'up', RIGHT_CLICK, isClick);\n        }\n        return;\n      }\n\n      if (checkClick(e, MIDDLE_CLICK)) {\n        if (this.fireMiddleClick) {\n          this._handleEvent(e, 'up', MIDDLE_CLICK, isClick);\n        }\n        this._resetTransformEventData();\n        return;\n      }\n\n      if (this.isDrawingMode && this._isCurrentlyDrawing) {\n        this._onMouseUpInDrawingMode(e);\n        return;\n      }\n\n      if (transform) {\n        this._finalizeCurrentTransform(e);\n        shouldRender = transform.actionPerformed;\n      }\n\n      if (!isClick) {\n        this._maybeGroupObjects(e);\n        shouldRender || (shouldRender = this._shouldRender(target));\n      }\n      if (target) {\n        target.isMoving = false;\n      }\n      this._setCursorFromEvent(e, target);\n      this._handleEvent(e, 'up', LEFT_CLICK, isClick);\n      this._groupSelector = null;\n      this._currentTransform = null;\n      // reset the target information about which corner is selected\n      target && (target.__corner = 0);\n      if (shouldRender) {\n        this.requestRenderAll();\n      }\n      else if (!isClick) {\n        this.renderTop();\n      }\n    },\n\n    /**\n     * @private\n     * Handle event firing for target and subtargets\n     * @param {Event} e event from mouse\n     * @param {String} eventType event to fire (up, down or move)\n     * @return {Fabric.Object} target return the the target found, for internal reasons.\n     */\n    _simpleEventHandler: function(eventType, e) {\n      var target = this.findTarget(e),\n          targets = this.targets,\n          options = {\n            e: e,\n            target: target,\n            subTargets: targets,\n          };\n      this.fire(eventType, options);\n      target && target.fire(eventType, options);\n      if (!targets) {\n        return target;\n      }\n      for (var i = 0; i < targets.length; i++) {\n        targets[i].fire(eventType, options);\n      }\n      return target;\n    },\n\n    /**\n     * @private\n     * Handle event firing for target and subtargets\n     * @param {Event} e event from mouse\n     * @param {String} eventType event to fire (up, down or move)\n     * @param {fabric.Object} targetObj receiving event\n     * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right\n     * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.\n     */\n    _handleEvent: function(e, eventType, button, isClick) {\n      var target = this._target,\n          targets = this.targets || [],\n          options = {\n            e: e,\n            target: target,\n            subTargets: targets,\n            button: button || LEFT_CLICK,\n            isClick: isClick || false,\n            pointer: this._pointer,\n            absolutePointer: this._absolutePointer,\n            transform: this._currentTransform\n          };\n      this.fire('mouse:' + eventType, options);\n      target && target.fire('mouse' + eventType, options);\n      for (var i = 0; i < targets.length; i++) {\n        targets[i].fire('mouse' + eventType, options);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n     */\n    _finalizeCurrentTransform: function(e) {\n\n      var transform = this._currentTransform,\n          target = transform.target,\n          eventName,\n          options = {\n            e: e,\n            target: target,\n            transform: transform,\n          };\n\n      if (target._scaling) {\n        target._scaling = false;\n      }\n\n      target.setCoords();\n\n      if (transform.actionPerformed || (this.stateful && target.hasStateChanged())) {\n        if (transform.actionPerformed) {\n          eventName = this._addEventOptions(options, transform);\n          this._fire(eventName, options);\n        }\n        this._fire('modified', options);\n      }\n    },\n\n    /**\n     * Mutate option object in order to add by property and give back the event name.\n     * @private\n     * @param {Object} options to mutate\n     * @param {Object} transform to inspect action from\n     */\n    _addEventOptions: function(options, transform) {\n      // we can probably add more details at low cost\n      // scale change, rotation changes, translation changes\n      var eventName, by;\n      switch (transform.action) {\n        case 'scaleX':\n          eventName = 'scaled';\n          by = 'x';\n          break;\n        case 'scaleY':\n          eventName = 'scaled';\n          by = 'y';\n          break;\n        case 'skewX':\n          eventName = 'skewed';\n          by = 'x';\n          break;\n        case 'skewY':\n          eventName = 'skewed';\n          by = 'y';\n          break;\n        case 'scale':\n          eventName = 'scaled';\n          by = 'equally';\n          break;\n        case 'rotate':\n          eventName = 'rotated';\n          break;\n        case 'drag':\n          eventName = 'moved';\n          break;\n      }\n      options.by = by;\n      return eventName;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseDownInDrawingMode: function(e) {\n      this._isCurrentlyDrawing = true;\n      if (this.getActiveObject()) {\n        this.discardActiveObject(e).requestRenderAll();\n      }\n      if (this.clipTo) {\n        fabric.util.clipContext(this, this.contextTop);\n      }\n      var pointer = this.getPointer(e);\n      this.freeDrawingBrush.onMouseDown(pointer);\n      this._handleEvent(e, 'down');\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _onMouseMoveInDrawingMode: function(e) {\n      if (this._isCurrentlyDrawing) {\n        var pointer = this.getPointer(e);\n        this.freeDrawingBrush.onMouseMove(pointer);\n      }\n      this.setCursor(this.freeDrawingCursor);\n      this._handleEvent(e, 'move');\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    _onMouseUpInDrawingMode: function(e) {\n      this._isCurrentlyDrawing = false;\n      if (this.clipTo) {\n        this.contextTop.restore();\n      }\n      this.freeDrawingBrush.onMouseUp();\n      this._handleEvent(e, 'up');\n    },\n\n    /**\n     * Method that defines the actions when mouse is clicked on canvas.\n     * The method inits the currentTransform parameters and renders all the\n     * canvas so the current image can be placed on the top canvas and the rest\n     * in on the container one.\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    __onMouseDown: function (e) {\n      this._cacheTransformEventData(e);\n      this._handleEvent(e, 'down:before');\n      var target = this._target;\n      // if right click just fire events\n      if (checkClick(e, RIGHT_CLICK)) {\n        if (this.fireRightClick) {\n          this._handleEvent(e, 'down', RIGHT_CLICK);\n        }\n        return;\n      }\n\n      if (checkClick(e, MIDDLE_CLICK)) {\n        if (this.fireMiddleClick) {\n          this._handleEvent(e, 'down', MIDDLE_CLICK);\n        }\n        return;\n      }\n\n      if (this.isDrawingMode) {\n        this._onMouseDownInDrawingMode(e);\n        return;\n      }\n\n      // ignore if some object is being transformed at this moment\n      if (this._currentTransform) {\n        return;\n      }\n\n      var pointer = this._pointer;\n      // save pointer for check in __onMouseUp event\n      this._previousPointer = pointer;\n      var shouldRender = this._shouldRender(target),\n          shouldGroup = this._shouldGroup(e, target);\n      if (this._shouldClearSelection(e, target)) {\n        this.discardActiveObject(e);\n      }\n      else if (shouldGroup) {\n        this._handleGrouping(e, target);\n        target = this._activeObject;\n      }\n\n      if (this.selection && (!target ||\n        (!target.selectable && !target.isEditing && target !== this._activeObject))) {\n        this._groupSelector = {\n          ex: pointer.x,\n          ey: pointer.y,\n          top: 0,\n          left: 0\n        };\n      }\n\n      if (target) {\n        var alreadySelected = target === this._activeObject;\n        if (target.selectable) {\n          this.setActiveObject(target, e);\n        }\n        if (target === this._activeObject && (target.__corner || !shouldGroup)) {\n          this._setupCurrentTransform(e, target, alreadySelected);\n        }\n      }\n      this._handleEvent(e, 'down');\n      // we must renderAll so that we update the visuals\n      (shouldRender || shouldGroup) && this.requestRenderAll();\n    },\n\n    /**\n     * reset cache form common information needed during event processing\n     * @private\n     */\n    _resetTransformEventData: function() {\n      this._target = null;\n      this._pointer = null;\n      this._absolutePointer = null;\n    },\n\n    /**\n     * Cache common information needed during event processing\n     * @private\n     * @param {Event} e Event object fired on event\n     */\n    _cacheTransformEventData: function(e) {\n      // reset in order to avoid stale caching\n      this._resetTransformEventData();\n      this._pointer = this.getPointer(e, true);\n      this._absolutePointer = this.restorePointerVpt(this._pointer);\n      this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;\n    },\n\n    /**\n     * @private\n     */\n    _beforeTransform: function(e) {\n      var t = this._currentTransform;\n      this.stateful && t.target.saveState();\n      this.fire('before:transform', {\n        e: e,\n        transform: t,\n      });\n      // determine if it's a drag or rotate case\n      if (t.corner) {\n        this.onBeforeScaleRotate(t.target);\n      }\n    },\n\n    /**\n     * Method that defines the actions when mouse is hovering the canvas.\n     * The currentTransform parameter will definde whether the user is rotating/scaling/translating\n     * an image or neither of them (only hovering). A group selection is also possible and would cancel\n     * all any other type of action.\n     * In case of an image transformation only the top canvas will be rendered.\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    __onMouseMove: function (e) {\n      this._handleEvent(e, 'move:before');\n      this._cacheTransformEventData(e);\n      var target, pointer;\n\n      if (this.isDrawingMode) {\n        this._onMouseMoveInDrawingMode(e);\n        return;\n      }\n      if (typeof e.touches !== 'undefined' && e.touches.length > 1) {\n        return;\n      }\n\n      var groupSelector = this._groupSelector;\n\n      // We initially clicked in an empty area, so we draw a box for multiple selection\n      if (groupSelector) {\n        pointer = this._pointer;\n\n        groupSelector.left = pointer.x - groupSelector.ex;\n        groupSelector.top = pointer.y - groupSelector.ey;\n\n        this.renderTop();\n      }\n      else if (!this._currentTransform) {\n        target = this.findTarget(e) || null;\n        this._setCursorFromEvent(e, target);\n        this._fireOverOutEvents(target, e);\n      }\n      else {\n        this._transformObject(e);\n      }\n      this._handleEvent(e, 'move');\n      this._resetTransformEventData();\n    },\n\n    /**\n     * Manage the mouseout, mouseover events for the fabric object on the canvas\n     * @param {Fabric.Object} target the target where the target from the mousemove event\n     * @param {Event} e Event object fired on mousemove\n     * @private\n     */\n    _fireOverOutEvents: function(target, e) {\n      this.fireSynteticInOutEvents(target, e, {\n        targetName: '_hoveredTarget',\n        canvasEvtOut: 'mouse:out',\n        evtOut: 'mouseout',\n        canvasEvtIn: 'mouse:over',\n        evtIn: 'mouseover',\n      });\n    },\n\n    /**\n     * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n     * @param {Fabric.Object} target the target where the target from the onDrag event\n     * @param {Event} e Event object fired on ondrag\n     * @private\n     */\n    _fireEnterLeaveEvents: function(target, e) {\n      this.fireSynteticInOutEvents(target, e, {\n        targetName: '_draggedoverTarget',\n        evtOut: 'dragleave',\n        evtIn: 'dragenter',\n      });\n    },\n\n    /**\n     * Manage the syntetic in/out events for the fabric objects on the canvas\n     * @param {Fabric.Object} target the target where the target from the supported events\n     * @param {Event} e Event object fired\n     * @param {Object} config configuration for the function to work\n     * @param {String} config.targetName property on the canvas where the old target is stored\n     * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n     * @param {String} config.evtOut name of the event to fire for out\n     * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n     * @param {String} config.evtIn name of the event to fire for in\n     * @private\n     */\n    fireSynteticInOutEvents: function(target, e, config) {\n      var inOpt, outOpt, oldTarget = this[config.targetName], outFires, inFires,\n          targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;\n      if (targetChanged) {\n        inOpt = { e: e, target: target, previousTarget: oldTarget };\n        outOpt = { e: e, target: oldTarget, nextTarget: target };\n        this[config.targetName] = target;\n      }\n      inFires = target && targetChanged;\n      outFires = oldTarget && targetChanged;\n      if (outFires) {\n        canvasEvtOut && this.fire(canvasEvtOut, outOpt);\n        oldTarget.fire(config.evtOut, outOpt);\n      }\n      if (inFires) {\n        canvasEvtIn && this.fire(canvasEvtIn, inOpt);\n        target.fire(config.evtIn, inOpt);\n      }\n    },\n\n    /**\n     * Method that defines actions when an Event Mouse Wheel\n     * @param {Event} e Event object fired on mouseup\n     */\n    __onMouseWheel: function(e) {\n      this._cacheTransformEventData(e);\n      this._handleEvent(e, 'wheel');\n      this._resetTransformEventData();\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event fired on mousemove\n     */\n    _transformObject: function(e) {\n      var pointer = this.getPointer(e),\n          transform = this._currentTransform;\n\n      transform.reset = false;\n      transform.target.isMoving = true;\n      transform.shiftKey = e.shiftKey;\n      transform.altKey = e[this.centeredKey];\n\n      this._beforeScaleTransform(e, transform);\n      this._performTransformAction(e, transform, pointer);\n\n      transform.actionPerformed && this.requestRenderAll();\n    },\n\n    /**\n     * @private\n     */\n    _performTransformAction: function(e, transform, pointer) {\n      var x = pointer.x,\n          y = pointer.y,\n          action = transform.action,\n          actionPerformed = false,\n          options = {\n            target: transform.target,\n            e: e,\n            transform: transform,\n            pointer: pointer\n          };\n\n      if (action === 'rotate') {\n        (actionPerformed = this._rotateObject(x, y)) && this._fire('rotating', options);\n      }\n      else if (action === 'scale') {\n        (actionPerformed = this._onScale(e, transform, x, y)) && this._fire('scaling', options);\n      }\n      else if (action === 'scaleX') {\n        (actionPerformed = this._scaleObject(x, y, 'x')) && this._fire('scaling', options);\n      }\n      else if (action === 'scaleY') {\n        (actionPerformed = this._scaleObject(x, y, 'y')) && this._fire('scaling', options);\n      }\n      else if (action === 'skewX') {\n        (actionPerformed = this._skewObject(x, y, 'x')) && this._fire('skewing', options);\n      }\n      else if (action === 'skewY') {\n        (actionPerformed = this._skewObject(x, y, 'y')) && this._fire('skewing', options);\n      }\n      else {\n        actionPerformed = this._translateObject(x, y);\n        if (actionPerformed) {\n          this._fire('moving', options);\n          this.setCursor(options.target.moveCursor || this.moveCursor);\n        }\n      }\n      transform.actionPerformed = transform.actionPerformed || actionPerformed;\n    },\n\n    /**\n     * @private\n     */\n    _fire: function(eventName, options) {\n      this.fire('object:' + eventName, options);\n      options.target.fire(eventName, options);\n    },\n\n    /**\n     * @private\n     */\n    _beforeScaleTransform: function(e, transform) {\n      if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {\n        var centerTransform = this._shouldCenterTransform(transform.target);\n\n        // Switch from a normal resize to center-based\n        if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||\n           // Switch from center-based resize to normal one\n           (!centerTransform && transform.originX === 'center' && transform.originY === 'center')\n        ) {\n          this._resetCurrentTransform();\n          transform.reset = true;\n        }\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {Object} transform current tranform\n     * @param {Number} x mouse position x from origin\n     * @param {Number} y mouse poistion y from origin\n     * @return {Boolean} true if the scaling occurred\n     */\n    _onScale: function(e, transform, x, y) {\n      if (this._isUniscalePossible(e, transform.target)) {\n        transform.currentAction = 'scale';\n        return this._scaleObject(x, y);\n      }\n      else {\n        // Switch from a normal resize to proportional\n        if (!transform.reset && transform.currentAction === 'scale') {\n          this._resetCurrentTransform();\n        }\n\n        transform.currentAction = 'scaleEqually';\n        return this._scaleObject(x, y, 'equally');\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target current target\n     * @return {Boolean} true if unproportional scaling is possible\n     */\n    _isUniscalePossible: function(e, target) {\n      return (e[this.uniScaleKey] || this.uniScaleTransform) && !target.get('lockUniScaling');\n    },\n\n    /**\n     * Sets the cursor depending on where the canvas is being hovered.\n     * Note: very buggy in Opera\n     * @param {Event} e Event object\n     * @param {Object} target Object that the mouse is hovering, if so.\n     */\n    _setCursorFromEvent: function (e, target) {\n      if (!target) {\n        this.setCursor(this.defaultCursor);\n        return false;\n      }\n\n      var hoverCursor = target.hoverCursor || this.hoverCursor,\n          activeSelection = this._activeObject && this._activeObject.type === 'activeSelection' ?\n            this._activeObject : null,\n          // only show proper corner when group selection is not active\n          corner = (!activeSelection || !activeSelection.contains(target))\n                    && target._findTargetCorner(this.getPointer(e, true));\n\n      if (!corner) {\n        this.setCursor(hoverCursor);\n      }\n      else {\n        this.setCursor(this.getCornerCursor(corner, target, e));\n      }\n    },\n\n    /**\n     * @private\n     */\n    getCornerCursor: function(corner, target, e) {\n      if (this.actionIsDisabled(corner, target, e)) {\n        return this.notAllowedCursor;\n      }\n      else if (corner in cursorOffset) {\n        return this._getRotatedCornerCursor(corner, target, e);\n      }\n      else if (corner === 'mtr' && target.hasRotatingPoint) {\n        return this.rotationCursor;\n      }\n      else {\n        return this.defaultCursor;\n      }\n    },\n\n    actionIsDisabled: function(corner, target, e) {\n      if (corner === 'mt' || corner === 'mb') {\n        return e[this.altActionKey] ? target.lockSkewingX : target.lockScalingY;\n      }\n      else if (corner === 'ml' || corner === 'mr') {\n        return e[this.altActionKey] ? target.lockSkewingY : target.lockScalingX;\n      }\n      else if (corner === 'mtr') {\n        return target.lockRotation;\n      }\n      else {\n        return this._isUniscalePossible(e, target) ?\n          target.lockScalingX && target.lockScalingY : target.lockScalingX || target.lockScalingY;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getRotatedCornerCursor: function(corner, target, e) {\n      var n = Math.round((target.angle % 360) / 45);\n\n      if (n < 0) {\n        n += 8; // full circle ahead\n      }\n      n += cursorOffset[corner];\n      if (e[this.altActionKey] && cursorOffset[corner] % 2 === 0) {\n        //if we are holding shift and we are on a mx corner...\n        n += 2;\n      }\n      // normalize n to be from 0 to 7\n      n %= 8;\n\n      return this.cursorMap[n];\n    }\n  });\n})();\n\n\n(function() {\n\n  var min = Math.min,\n      max = Math.max;\n\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     * @return {Boolean}\n     */\n    _shouldGroup: function(e, target) {\n      var activeObject = this._activeObject;\n      return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection &&\n            (activeObject !== target || activeObject.type === 'activeSelection') && !target.onSelect({ e: e });\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _handleGrouping: function (e, target) {\n      var activeObject = this._activeObject;\n      // avoid multi select when shift click on a corner\n      if (activeObject.__corner) {\n        return;\n      }\n      if (target === activeObject) {\n        // if it's a group, find target again, using activeGroup objects\n        target = this.findTarget(e, true);\n        // if even object is not found or we are on activeObjectCorner, bail out\n        if (!target || !target.selectable) {\n          return;\n        }\n      }\n      if (activeObject && activeObject.type === 'activeSelection') {\n        this._updateActiveSelection(target, e);\n      }\n      else {\n        this._createActiveSelection(target, e);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _updateActiveSelection: function(target, e) {\n      var activeSelection = this._activeObject,\n          currentActiveObjects = activeSelection._objects.slice(0);\n      if (activeSelection.contains(target)) {\n        activeSelection.removeWithUpdate(target);\n        this._hoveredTarget = target;\n        if (activeSelection.size() === 1) {\n          // activate last remaining object\n          this._setActiveObject(activeSelection.item(0), e);\n        }\n      }\n      else {\n        activeSelection.addWithUpdate(target);\n        this._hoveredTarget = activeSelection;\n      }\n      this._fireSelectionEvents(currentActiveObjects, e);\n    },\n\n    /**\n     * @private\n     */\n    _createActiveSelection: function(target, e) {\n      var currentActives = this.getActiveObjects(), group = this._createGroup(target);\n      this._hoveredTarget = group;\n      this._setActiveObject(group, e);\n      this._fireSelectionEvents(currentActives, e);\n    },\n\n    /**\n     * @private\n     * @param {Object} target\n     */\n    _createGroup: function(target) {\n      var objects = this._objects,\n          isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\n          groupObjects = isActiveLower\n            ? [this._activeObject, target]\n            : [target, this._activeObject];\n      this._activeObject.isEditing && this._activeObject.exitEditing();\n      return new fabric.ActiveSelection(groupObjects, {\n        canvas: this\n      });\n    },\n\n    /**\n     * @private\n     * @param {Event} e mouse event\n     */\n    _groupSelectedObjects: function (e) {\n\n      var group = this._collectObjects(e),\n          aGroup;\n\n      // do not create group for 1 element only\n      if (group.length === 1) {\n        this.setActiveObject(group[0], e);\n      }\n      else if (group.length > 1) {\n        aGroup = new fabric.ActiveSelection(group.reverse(), {\n          canvas: this\n        });\n        this.setActiveObject(aGroup, e);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _collectObjects: function(e) {\n      var group = [],\n          currentObject,\n          x1 = this._groupSelector.ex,\n          y1 = this._groupSelector.ey,\n          x2 = x1 + this._groupSelector.left,\n          y2 = y1 + this._groupSelector.top,\n          selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\n          selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\n          allowIntersect = !this.selectionFullyContained,\n          isClick = x1 === x2 && y1 === y2;\n      // we iterate reverse order to collect top first in case of click.\n      for (var i = this._objects.length; i--; ) {\n        currentObject = this._objects[i];\n\n        if (!currentObject || !currentObject.selectable || !currentObject.visible || currentObject.onSelect({ e: e })) {\n          continue;\n        }\n\n        if ((allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2)) ||\n            currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||\n            (allowIntersect && currentObject.containsPoint(selectionX1Y1)) ||\n            (allowIntersect && currentObject.containsPoint(selectionX2Y2))\n        ) {\n          group.push(currentObject);\n\n          // only add one object if it's a click\n          if (isClick) {\n            break;\n          }\n        }\n      }\n\n      return group;\n    },\n\n    /**\n     * @private\n     */\n    _maybeGroupObjects: function(e) {\n      if (this.selection && this._groupSelector) {\n        this._groupSelectedObjects(e);\n      }\n      this.setCursor(this.defaultCursor);\n      // clear selection and current transformation\n      this._groupSelector = null;\n    }\n  });\n\n})();\n\n\n(function () {\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n     * @param {Object} [options] Options object\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\n     * @example <caption>Generate jpeg dataURL with lower quality</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'jpeg',\n     *   quality: 0.8\n     * });\n     * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'png',\n     *   left: 100,\n     *   top: 100,\n     *   width: 200,\n     *   height: 200\n     * });\n     * @example <caption>Generate double scaled png dataURL</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'png',\n     *   multiplier: 2\n     * });\n     */\n    toDataURL: function (options) {\n      options || (options = { });\n\n      var format = options.format || 'png',\n          quality = options.quality || 1,\n          multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1),\n          canvasEl = this.toCanvasElement(multiplier, options);\n      return fabric.util.toDataURL(canvasEl, format, quality);\n    },\n\n    /**\n     * Create a new HTMLCanvas element painted with the current canvas content.\n     * No need to resize the actual one or repaint it.\n     * Will transfer object ownership to a new canvas, paint it, and set everything back.\n     * This is an intermediary step used to get to a dataUrl but also it is usefull to\n     * create quick image copies of a canvas without passing for the dataUrl string\n     * @param {Number} [multiplier] a zoom factor.\n     * @param {Object} [cropping] Cropping informations\n     * @param {Number} [cropping.left] Cropping left offset.\n     * @param {Number} [cropping.top] Cropping top offset.\n     * @param {Number} [cropping.width] Cropping width.\n     * @param {Number} [cropping.height] Cropping height.\n     */\n    toCanvasElement: function(multiplier, cropping) {\n      multiplier = multiplier || 1;\n      cropping = cropping || { };\n      var scaledWidth = (cropping.width || this.width) * multiplier,\n          scaledHeight = (cropping.height || this.height) * multiplier,\n          zoom = this.getZoom(),\n          originalWidth = this.width,\n          originalHeight = this.height,\n          newZoom = zoom * multiplier,\n          vp = this.viewportTransform,\n          translateX = (vp[4] - (cropping.left || 0)) * multiplier,\n          translateY = (vp[5] - (cropping.top || 0)) * multiplier,\n          originalInteractive = this.interactive,\n          originalContext = this.contextContainer,\n          newVp = [newZoom, 0, 0, newZoom, translateX, translateY],\n          canvasEl = fabric.util.createCanvasElement();\n      canvasEl.width = scaledWidth;\n      canvasEl.height = scaledHeight;\n      this.interactive = false;\n      this.viewportTransform = newVp;\n      this.width = scaledWidth;\n      this.height = scaledHeight;\n      this.calcViewportBoundaries();\n      this.contextContainer = canvasEl.getContext('2d');\n      // will be renderAllExport();\n      this.renderAll();\n      this.viewportTransform = vp;\n      this.width = originalWidth;\n      this.height = originalHeight;\n      this.calcViewportBoundaries();\n      this.contextContainer = originalContext;\n      this.interactive = originalInteractive;\n      return canvasEl;\n    },\n  });\n\n})();\n\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Populates canvas with data from the specified dataless JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}\n   * @deprecated since 1.2.2\n   * @param {String|Object} json JSON string or object\n   * @param {Function} callback Callback, invoked when json is parsed\n   *                            and corresponding objects (e.g: {@link fabric.Image})\n   *                            are initialized\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @return {fabric.Canvas} instance\n   * @chainable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   */\n  loadFromDatalessJSON: function (json, callback, reviver) {\n    return this.loadFromJSON(json, callback, reviver);\n  },\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   * @param {String|Object} json JSON string or object\n   * @param {Function} callback Callback, invoked when json is parsed\n   *                            and corresponding objects (e.g: {@link fabric.Image})\n   *                            are initialized\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @return {fabric.Canvas} instance\n   * @chainable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * });\n   */\n  loadFromJSON: function (json, callback, reviver) {\n    if (!json) {\n      return;\n    }\n\n    // serialize if it wasn't already\n    var serialized = (typeof json === 'string')\n      ? JSON.parse(json)\n      : fabric.util.object.clone(json);\n\n    var _this = this,\n        renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    this._enlivenObjects(serialized.objects, function (enlivenedObjects) {\n      _this.clear();\n      _this._setBgOverlay(serialized, function () {\n        enlivenedObjects.forEach(function(obj, index) {\n          // we splice the array just in case some custom classes restored from JSON\n          // will add more object to canvas at canvas init.\n          _this.insertAt(obj, index);\n        });\n        _this.renderOnAddRemove = renderOnAddRemove;\n        // remove parts i cannot set as options\n        delete serialized.objects;\n        delete serialized.backgroundImage;\n        delete serialized.overlayImage;\n        delete serialized.background;\n        delete serialized.overlay;\n        // this._initOptions does too many things to just\n        // call it. Normally loading an Object from JSON\n        // create the Object instance. Here the Canvas is\n        // already an instance and we are just loading things over it\n        _this._setOptions(serialized);\n        _this.renderAll();\n        callback && callback();\n      });\n    }, reviver);\n    return this;\n  },\n\n  /**\n   * @private\n   * @param {Object} serialized Object with background and overlay information\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n   */\n  _setBgOverlay: function(serialized, callback) {\n    var loaded = {\n      backgroundColor: false,\n      overlayColor: false,\n      backgroundImage: false,\n      overlayImage: false\n    };\n\n    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\n      callback && callback();\n      return;\n    }\n\n    var cbIfLoaded = function () {\n      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\n        callback && callback();\n      }\n    };\n\n    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\n    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\n    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\n    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\n  },\n\n  /**\n   * @private\n   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\n   * @param {(Object|String)} value Value to set\n   * @param {Object} loaded Set loaded property to true if property is set\n   * @param {Object} callback Callback function to invoke after property is set\n   */\n  __setBgOverlay: function(property, value, loaded, callback) {\n    var _this = this;\n\n    if (!value) {\n      loaded[property] = true;\n      callback && callback();\n      return;\n    }\n\n    if (property === 'backgroundImage' || property === 'overlayImage') {\n      fabric.util.enlivenObjects([value], function(enlivedObject){\n        _this[property] = enlivedObject[0];\n        loaded[property] = true;\n        callback && callback();\n      });\n    }\n    else {\n      this['set' + fabric.util.string.capitalize(property, true)](value, function() {\n        loaded[property] = true;\n        callback && callback();\n      });\n    }\n  },\n\n  /**\n   * @private\n   * @param {Array} objects\n   * @param {Function} callback\n   * @param {Function} [reviver]\n   */\n  _enlivenObjects: function (objects, callback, reviver) {\n    if (!objects || objects.length === 0) {\n      callback && callback([]);\n      return;\n    }\n\n    fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n      callback && callback(enlivenedObjects);\n    }, null, reviver);\n  },\n\n  /**\n   * @private\n   * @param {String} format\n   * @param {Function} callback\n   */\n  _toDataURL: function (format, callback) {\n    this.clone(function (clone) {\n      callback(clone.toDataURL(format));\n    });\n  },\n\n  /**\n   * @private\n   * @param {String} format\n   * @param {Number} multiplier\n   * @param {Function} callback\n   */\n  _toDataURLWithMultiplier: function (format, multiplier, callback) {\n    this.clone(function (clone) {\n      callback(clone.toDataURLWithMultiplier(format, multiplier));\n    });\n  },\n\n  /**\n   * Clones canvas instance\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   * @param {Array} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone: function (callback, properties) {\n    var data = JSON.stringify(this.toJSON(properties));\n    this.cloneWithoutData(function(clone) {\n      clone.loadFromJSON(data, function() {\n        callback && callback(clone);\n      });\n    });\n  },\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions, clipping properties, etc.\n   * but leaves data empty (so that you can populate it with your own)\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   */\n  cloneWithoutData: function(callback) {\n    var el = fabric.util.createCanvasElement();\n\n    el.width = this.width;\n    el.height = this.height;\n\n    var clone = new fabric.Canvas(el);\n    clone.clipTo = this.clipTo;\n    if (this.backgroundImage) {\n      clone.setBackgroundImage(this.backgroundImage.src, function() {\n        clone.renderAll();\n        callback && callback(clone);\n      });\n      clone.backgroundImageOpacity = this.backgroundImageOpacity;\n      clone.backgroundImageStretch = this.backgroundImageStretch;\n    }\n    else {\n      callback && callback(clone);\n    }\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone,\n      toFixed = fabric.util.toFixed,\n      capitalize = fabric.util.string.capitalize,\n      degreesToRadians = fabric.util.degreesToRadians,\n      supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),\n      objectCaching = !fabric.isLikelyNode,\n      ALIASING_LIMIT = 2;\n\n  if (fabric.Object) {\n    return;\n  }\n\n  /**\n   * Root object class from which all 2d shape classes inherit from\n   * @class fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n   * @see {@link fabric.Object#initialize} for constructor definition\n   *\n   * @fires added\n   * @fires removed\n   *\n   * @fires selected\n   * @fires deselected\n   * @fires modified\n   * @fires modified\n   * @fires moved\n   * @fires scaled\n   * @fires rotated\n   * @fires skewed\n   *\n   * @fires rotating\n   * @fires scaling\n   * @fires moving\n   * @fires skewing\n   *\n   * @fires mousedown\n   * @fires mouseup\n   * @fires mouseover\n   * @fires mouseout\n   * @fires mousewheel\n   * @fires mousedblclick\n   *\n   * @fires dragover\n   * @fires dragenter\n   * @fires dragleave\n   * @fires drop\n   */\n  fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Type of an object (rect, circle, path, etc.).\n     * Note that this property is meant to be read-only and not meant to be modified.\n     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\n     * @type String\n     * @default\n     */\n    type:                     'object',\n\n    /**\n     * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */\n    originX:                  'left',\n\n    /**\n     * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */\n    originY:                  'top',\n\n    /**\n     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}\n     * @type Number\n     * @default\n     */\n    top:                      0,\n\n    /**\n     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}\n     * @type Number\n     * @default\n     */\n    left:                     0,\n\n    /**\n     * Object width\n     * @type Number\n     * @default\n     */\n    width:                    0,\n\n    /**\n     * Object height\n     * @type Number\n     * @default\n     */\n    height:                   0,\n\n    /**\n     * Object scale factor (horizontal)\n     * @type Number\n     * @default\n     */\n    scaleX:                   1,\n\n    /**\n     * Object scale factor (vertical)\n     * @type Number\n     * @default\n     */\n    scaleY:                   1,\n\n    /**\n     * When true, an object is rendered as flipped horizontally\n     * @type Boolean\n     * @default\n     */\n    flipX:                    false,\n\n    /**\n     * When true, an object is rendered as flipped vertically\n     * @type Boolean\n     * @default\n     */\n    flipY:                    false,\n\n    /**\n     * Opacity of an object\n     * @type Number\n     * @default\n     */\n    opacity:                  1,\n\n    /**\n     * Angle of rotation of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    angle:                    0,\n\n    /**\n     * Angle of skew on x axes of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    skewX:                    0,\n\n    /**\n     * Angle of skew on y axes of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    skewY:                    0,\n\n    /**\n     * Size of object's controlling corners (in pixels)\n     * @type Number\n     * @default\n     */\n    cornerSize:               13,\n\n    /**\n     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\n     * @type Boolean\n     * @default\n     */\n    transparentCorners:       true,\n\n    /**\n     * Default cursor value used when hovering over this object on canvas\n     * @type String\n     * @default\n     */\n    hoverCursor:              null,\n\n    /**\n     * Default cursor value used when moving this object on canvas\n     * @type String\n     * @default\n     */\n    moveCursor:               null,\n\n    /**\n     * Padding between object and its controlling borders (in pixels)\n     * @type Number\n     * @default\n     */\n    padding:                  0,\n\n    /**\n     * Color of controlling borders of an object (when it's active)\n     * @type String\n     * @default\n     */\n    borderColor:              'rgba(102,153,255,0.75)',\n\n    /**\n     * Array specifying dash pattern of an object's borders (hasBorder must be true)\n     * @since 1.6.2\n     * @type Array\n     */\n    borderDashArray:          null,\n\n    /**\n     * Color of controlling corners of an object (when it's active)\n     * @type String\n     * @default\n     */\n    cornerColor:              'rgba(102,153,255,0.5)',\n\n    /**\n     * Color of controlling corners of an object (when it's active and transparentCorners false)\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    cornerStrokeColor:        null,\n\n    /**\n     * Specify style of control, 'rect' or 'circle'\n     * @since 1.6.2\n     * @type String\n     */\n    cornerStyle:          'rect',\n\n    /**\n     * Array specifying dash pattern of an object's control (hasBorder must be true)\n     * @since 1.6.2\n     * @type Array\n     */\n    cornerDashArray:          null,\n\n    /**\n     * When true, this object will use center point as the origin of transformation\n     * when being scaled via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredScaling:          false,\n\n    /**\n     * When true, this object will use center point as the origin of transformation\n     * when being rotated via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredRotation:         true,\n\n    /**\n     * Color of object's fill\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */\n    fill:                     'rgb(0,0,0)',\n\n    /**\n     * Fill rule used to fill an object\n     * accepted values are nonzero, evenodd\n     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\n     * @type String\n     * @default\n     */\n    fillRule:                 'nonzero',\n\n    /**\n     * Composite rule used for canvas globalCompositeOperation\n     * @type String\n     * @default\n     */\n    globalCompositeOperation: 'source-over',\n\n    /**\n     * Background color of an object.\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */\n    backgroundColor:          '',\n\n    /**\n     * Selection Background color of an object. colored layer behind the object when it is active.\n     * does not mix good with globalCompositeOperation methods.\n     * @type String\n     * @default\n     */\n    selectionBackgroundColor:          '',\n\n    /**\n     * When defined, an object is rendered via stroke and this property specifies its color\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */\n    stroke:                   null,\n\n    /**\n     * Width of a stroke used to render this object\n     * @type Number\n     * @default\n     */\n    strokeWidth:              1,\n\n    /**\n     * Array specifying dash pattern of an object's stroke (stroke must be defined)\n     * @type Array\n     */\n    strokeDashArray:          null,\n\n    /**\n     * Line offset of an object's stroke\n     * @type Number\n     * @default\n     */\n    strokeDashOffset: 0,\n\n    /**\n     * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\n     * @type String\n     * @default\n     */\n    strokeLineCap:            'butt',\n\n    /**\n     * Corner style of an object's stroke (one of \"bevil\", \"round\", \"miter\")\n     * @type String\n     * @default\n     */\n    strokeLineJoin:           'miter',\n\n    /**\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\n     * @type Number\n     * @default\n     */\n    strokeMiterLimit:         4,\n\n    /**\n     * Shadow object representing shadow of this shape\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow:                   null,\n\n    /**\n     * Opacity of object's controlling borders when object is active and moving\n     * @type Number\n     * @default\n     */\n    borderOpacityWhenMoving:  0.4,\n\n    /**\n     * Scale factor of object's controlling borders\n     * @type Number\n     * @default\n     */\n    borderScaleFactor:        1,\n\n    /**\n     * Transform matrix (similar to SVG's transform matrix)\n     * @type Array\n     */\n    transformMatrix:          null,\n\n    /**\n     * Minimum allowed scale value of an object\n     * @type Number\n     * @default\n     */\n    minScaleLimit:            0,\n\n    /**\n     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\n     * But events still fire on it.\n     * @type Boolean\n     * @default\n     */\n    selectable:               true,\n\n    /**\n     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\n     * @type Boolean\n     * @default\n     */\n    evented:                  true,\n\n    /**\n     * When set to `false`, an object is not rendered on canvas\n     * @type Boolean\n     * @default\n     */\n    visible:                  true,\n\n    /**\n     * When set to `false`, object's controls are not displayed and can not be used to manipulate object\n     * @type Boolean\n     * @default\n     */\n    hasControls:              true,\n\n    /**\n     * When set to `false`, object's controlling borders are not rendered\n     * @type Boolean\n     * @default\n     */\n    hasBorders:               true,\n\n    /**\n     * When set to `false`, object's controlling rotating point will not be visible or selectable\n     * @type Boolean\n     * @default\n     */\n    hasRotatingPoint:         true,\n\n    /**\n     * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)\n     * @type Number\n     * @default\n     */\n    rotatingPointOffset:      40,\n\n    /**\n     * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\n     * @type Boolean\n     * @default\n     */\n    perPixelTargetFind:       false,\n\n    /**\n     * When `false`, default object's values are not included in its serialization\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues:     true,\n\n    /**\n     * Function that determines clipping of an object (context is passed as a first argument).\n     * If you are using code minification, ctx argument can be minified/manglied you should use\n     * as a workaround `var ctx = arguments[0];` in the function;\n     * Note that context origin is at the object's center point (not left/top corner)\n     * @deprecated since 2.0.0\n     * @type Function\n     */\n    clipTo:                   null,\n\n    /**\n     * When `true`, object horizontal movement is locked\n     * @type Boolean\n     * @default\n     */\n    lockMovementX:            false,\n\n    /**\n     * When `true`, object vertical movement is locked\n     * @type Boolean\n     * @default\n     */\n    lockMovementY:            false,\n\n    /**\n     * When `true`, object rotation is locked\n     * @type Boolean\n     * @default\n     */\n    lockRotation:             false,\n\n    /**\n     * When `true`, object horizontal scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockScalingX:             false,\n\n    /**\n     * When `true`, object vertical scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockScalingY:             false,\n\n    /**\n     * When `true`, object non-uniform scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockUniScaling:           false,\n\n    /**\n     * When `true`, object horizontal skewing is locked\n     * @type Boolean\n     * @default\n     */\n    lockSkewingX:             false,\n\n    /**\n     * When `true`, object vertical skewing is locked\n     * @type Boolean\n     * @default\n     */\n    lockSkewingY:             false,\n\n    /**\n     * When `true`, object cannot be flipped by scaling into negative values\n     * @type Boolean\n     * @default\n     */\n    lockScalingFlip:          false,\n\n    /**\n     * When `true`, object is not exported in OBJECT/JSON\n     * since 1.6.3\n     * @type Boolean\n     * @default\n     */\n    excludeFromExport:        false,\n\n    /**\n     * When `true`, object is cached on an additional canvas.\n     * default to true\n     * since 1.7.0\n     * @type Boolean\n     * @default true\n     */\n    objectCaching:            objectCaching,\n\n    /**\n     * When `true`, object properties are checked for cache invalidation. In some particular\n     * situation you may want this to be disabled ( spray brush, very big, groups)\n     * or if your application does not allow you to modify properties for groups child you want\n     * to disable it for groups.\n     * default to false\n     * since 1.7.0\n     * @type Boolean\n     * @default false\n     */\n    statefullCache:            false,\n\n    /**\n     * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled\n     * too much and will be redrawn with correct details at the end of scaling.\n     * this setting is performance and application dependant.\n     * default to true\n     * since 1.7.0\n     * @type Boolean\n     * @default true\n     */\n    noScaleCache:              true,\n\n    /**\n     * When set to `true`, object's cache will be rerendered next render call.\n     * since 1.7.0\n     * @type Boolean\n     * @default true\n     */\n    dirty:                true,\n\n    /**\n     * keeps the value of the last hovered corner during mouse move.\n     * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n     * It should be private, but there is no harm in using it as\n     * a read-only property.\n     * @type number|string|any\n     * @default 0\n     */\n    __corner: 0,\n\n    /**\n     * Determines if the fill or the stroke is drawn first (one of \"fill\" or \"stroke\")\n     * @type String\n     * @default\n     */\n    paintFirst:           'fill',\n\n    /**\n     * List of properties to consider when checking if state\n     * of an object is changed (fabric.Object#hasStateChanged)\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: (\n      'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\n      'stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit ' +\n      'angle opacity fill globalCompositeOperation shadow clipTo visible backgroundColor ' +\n      'skewX skewY fillRule paintFirst clipPath'\n    ).split(' '),\n\n    /**\n     * List of properties to consider when checking if cache needs refresh\n     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\n     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n     * and refreshed at the next render\n     * @type Array\n     */\n    cacheProperties: (\n      'fill stroke strokeWidth strokeDashArray width height paintFirst' +\n      ' strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath'\n    ).split(' '),\n\n    /**\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n     * the clipPath object gets used when the object has rendered, and the context is placed in the center\n     * of the object cacheCanvas.\n     * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'\n     * @type fabric.Object\n     */\n    clipPath: undefined,\n\n    /**\n     * Meaningful ONLY when the object is used as clipPath.\n     * if true, the clipPath will make the object clip to the outside of the clipPath\n     * since 2.4.0\n     * @type boolean\n     * @default false\n     */\n    inverted: false,\n\n    /**\n     * Meaningful ONLY when the object is used as clipPath.\n     * if true, the clipPath will have its top and left relative to canvas, and will\n     * not be influenced by the object transform. This will make the clipPath relative\n     * to the canvas, but clipping just a particular object.\n     * WARNING this is beta, this feature may change or be renamed.\n     * since 2.4.0\n     * @type boolean\n     * @default false\n     */\n    absolutePositioned: false,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      if (options) {\n        this.setOptions(options);\n      }\n    },\n\n    /**\n     * Create a the canvas used to keep the cached copy of the object\n     * @private\n     */\n    _createCacheCanvas: function() {\n      this._cacheProperties = {};\n      this._cacheCanvas = fabric.util.createCanvasElement();\n      this._cacheContext = this._cacheCanvas.getContext('2d');\n      this._updateCacheCanvas();\n      // if canvas gets created, is empty, so dirty.\n      this.dirty = true;\n    },\n\n    /**\n     * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal\n     * and each side do not cross fabric.cacheSideLimit\n     * those numbers are configurable so that you can get as much detail as you want\n     * making bargain with performances.\n     * @param {Object} dims\n     * @param {Object} dims.width width of canvas\n     * @param {Object} dims.height height of canvas\n     * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */\n    _limitCacheSize: function(dims) {\n      var perfLimitSizeTotal = fabric.perfLimitSizeTotal,\n          width = dims.width, height = dims.height,\n          max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;\n      if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {\n        if (width < min) {\n          dims.width = min;\n        }\n        if (height < min) {\n          dims.height = min;\n        }\n        return dims;\n      }\n      var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal),\n          capValue = fabric.util.capValue,\n          x = capValue(min, limitedDims.x, max),\n          y = capValue(min, limitedDims.y, max);\n      if (width > x) {\n        dims.zoomX /= width / x;\n        dims.width = x;\n        dims.capped = true;\n      }\n      if (height > y) {\n        dims.zoomY /= height / y;\n        dims.height = y;\n        dims.capped = true;\n      }\n      return dims;\n    },\n\n    /**\n     * Return the dimension and the zoom level needed to create a cache canvas\n     * big enough to host the object to be cached.\n     * @private\n     * @return {Object}.x width of object to be cached\n     * @return {Object}.y height of object to be cached\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */\n    _getCacheCanvasDimensions: function() {\n      var objectScale = this.getTotalObjectScaling(),\n          dim = this._getNonTransformedDimensions(),\n          zoomX = objectScale.scaleX,\n          zoomY = objectScale.scaleY,\n          width = dim.x * zoomX,\n          height = dim.y * zoomY;\n      return {\n        // for sure this ALIASING_LIMIT is slightly crating problem\n        // in situation in wich the cache canvas gets an upper limit\n        width: width + ALIASING_LIMIT,\n        height: height + ALIASING_LIMIT,\n        zoomX: zoomX,\n        zoomY: zoomY,\n        x: dim.x,\n        y: dim.y\n      };\n    },\n\n    /**\n     * Update width and height of the canvas for cache\n     * returns true or false if canvas needed resize.\n     * @private\n     * @return {Boolean} true if the canvas has been resized\n     */\n    _updateCacheCanvas: function() {\n      var targetCanvas = this.canvas;\n      if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n        var target = targetCanvas._currentTransform.target,\n            action = targetCanvas._currentTransform.action;\n        if (this === target && action.slice && action.slice(0, 5) === 'scale') {\n          return false;\n        }\n      }\n      var canvas = this._cacheCanvas,\n          dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n          minCacheSize = fabric.minCacheSideLimit,\n          width = dims.width, height = dims.height, drawingWidth, drawingHeight,\n          zoomX = dims.zoomX, zoomY = dims.zoomY,\n          dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight,\n          zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY,\n          shouldRedraw = dimensionsChanged || zoomChanged,\n          additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;\n      if (dimensionsChanged) {\n        var canvasWidth = this._cacheCanvas.width,\n            canvasHeight = this._cacheCanvas.height,\n            sizeGrowing = width > canvasWidth || height > canvasHeight,\n            sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\n              canvasWidth > minCacheSize && canvasHeight > minCacheSize;\n        shouldResizeCanvas = sizeGrowing || sizeShrinking;\n        if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {\n          additionalWidth = width * 0.1;\n          additionalHeight = height * 0.1;\n        }\n      }\n      if (shouldRedraw) {\n        if (shouldResizeCanvas) {\n          canvas.width = Math.ceil(width + additionalWidth);\n          canvas.height = Math.ceil(height + additionalHeight);\n        }\n        else {\n          this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);\n          this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);\n        }\n        drawingWidth = dims.x * zoomX / 2;\n        drawingHeight = dims.y * zoomY / 2;\n        this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n        this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n        this.cacheWidth = width;\n        this.cacheHeight = height;\n        this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);\n        this._cacheContext.scale(zoomX, zoomY);\n        this.zoomX = zoomX;\n        this.zoomY = zoomY;\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Sets object's properties from options\n     * @param {Object} [options] Options object\n     */\n    setOptions: function(options) {\n      this._setOptions(options);\n      this._initGradient(options.fill, 'fill');\n      this._initGradient(options.stroke, 'stroke');\n      this._initClipping(options);\n      this._initPattern(options.fill, 'fill');\n      this._initPattern(options.stroke, 'stroke');\n    },\n\n    /**\n     * Transforms context when rendering an object\n     * @param {CanvasRenderingContext2D} ctx Context\n     */\n    transform: function(ctx) {\n      var m;\n      if (this.group && !this.group._transformDone) {\n        m = this.calcTransformMatrix();\n      }\n      else {\n        m = this.calcOwnMatrix();\n      }\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    },\n\n    /**\n     * Returns an object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\n          object = {\n            type:                     this.type,\n            version:                  fabric.version,\n            originX:                  this.originX,\n            originY:                  this.originY,\n            left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\n            top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\n            width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\n            height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\n            fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\n            stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\n            strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n            strokeDashArray:          this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,\n            strokeLineCap:            this.strokeLineCap,\n            strokeDashOffset:         this.strokeDashOffset,\n            strokeLineJoin:           this.strokeLineJoin,\n            strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n            scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n            scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n            angle:                    toFixed(this.angle, NUM_FRACTION_DIGITS),\n            flipX:                    this.flipX,\n            flipY:                    this.flipY,\n            opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\n            shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\n            visible:                  this.visible,\n            clipTo:                   this.clipTo && String(this.clipTo),\n            backgroundColor:          this.backgroundColor,\n            fillRule:                 this.fillRule,\n            paintFirst:               this.paintFirst,\n            globalCompositeOperation: this.globalCompositeOperation,\n            transformMatrix:          this.transformMatrix ? this.transformMatrix.concat() : null,\n            skewX:                    toFixed(this.skewX, NUM_FRACTION_DIGITS),\n            skewY:                    toFixed(this.skewY, NUM_FRACTION_DIGITS),\n          };\n\n      if (this.clipPath) {\n        object.clipPath = this.clipPath.toObject(propertiesToInclude);\n        object.clipPath.inverted = this.clipPath.inverted;\n        object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;\n      }\n\n      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n      if (!this.includeDefaultValues) {\n        object = this._removeDefaultValues(object);\n      }\n\n      return object;\n    },\n\n    /**\n     * Returns (dataless) object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      // will be overwritten by subclasses\n      return this.toObject(propertiesToInclude);\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     */\n    _removeDefaultValues: function(object) {\n      var prototype = fabric.util.getKlass(object.type).prototype,\n          stateProperties = prototype.stateProperties;\n      stateProperties.forEach(function(prop) {\n        if (object[prop] === prototype[prop]) {\n          delete object[prop];\n        }\n        var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&\n                      Object.prototype.toString.call(prototype[prop]) === '[object Array]';\n\n        // basically a check for [] === []\n        if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {\n          delete object[prop];\n        }\n      });\n\n      return object;\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.' + capitalize(this.type) + '>';\n    },\n\n    /**\n     * Return the object scale factor counting also the group scaling\n     * @return {Object} object with scaleX and scaleY properties\n     */\n    getObjectScaling: function() {\n      var scaleX = this.scaleX, scaleY = this.scaleY;\n      if (this.group) {\n        var scaling = this.group.getObjectScaling();\n        scaleX *= scaling.scaleX;\n        scaleY *= scaling.scaleY;\n      }\n      return { scaleX: scaleX, scaleY: scaleY };\n    },\n\n    /**\n     * Return the object scale factor counting also the group scaling, zoom and retina\n     * @return {Object} object with scaleX and scaleY properties\n     */\n    getTotalObjectScaling: function() {\n      var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;\n      if (this.canvas) {\n        var zoom = this.canvas.getZoom();\n        var retina = this.canvas.getRetinaScaling();\n        scaleX *= zoom * retina;\n        scaleY *= zoom * retina;\n      }\n      return { scaleX: scaleX, scaleY: scaleY };\n    },\n\n    /**\n     * Return the object opacity counting also the group property\n     * @return {Number}\n     */\n    getObjectOpacity: function() {\n      var opacity = this.opacity;\n      if (this.group) {\n        opacity *= this.group.getObjectOpacity();\n      }\n      return opacity;\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {*} value\n     * @return {fabric.Object} thisArg\n     */\n    _set: function(key, value) {\n      var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY'),\n          isChanged = this[key] !== value, groupNeedsUpdate = false;\n\n      if (shouldConstrainValue) {\n        value = this._constrainScale(value);\n      }\n      if (key === 'scaleX' && value < 0) {\n        this.flipX = !this.flipX;\n        value *= -1;\n      }\n      else if (key === 'scaleY' && value < 0) {\n        this.flipY = !this.flipY;\n        value *= -1;\n      }\n      else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\n        value = new fabric.Shadow(value);\n      }\n      else if (key === 'dirty' && this.group) {\n        this.group.set('dirty', value);\n      }\n\n      this[key] = value;\n\n      if (isChanged) {\n        groupNeedsUpdate = this.group && this.group.isOnACache();\n        if (this.cacheProperties.indexOf(key) > -1) {\n          this.dirty = true;\n          groupNeedsUpdate && this.group.set('dirty', true);\n        }\n        else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {\n          this.group.set('dirty', true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * This callback function is called by the parent group of an object every\n     * time a non-delegated property changes on the group. It is passed the key\n     * and value as parameters. Not adding in this function's signature to avoid\n     * Travis build error about unused variables.\n     */\n    setOnGroup: function() {\n      // implemented by sub-classes, as needed.\n    },\n\n    /**\n     * Retrieves viewportTransform from Object's canvas if possible\n     * @method getViewportTransform\n     * @memberOf fabric.Object.prototype\n     * @return {Array}\n     */\n    getViewportTransform: function() {\n      if (this.canvas && this.canvas.viewportTransform) {\n        return this.canvas.viewportTransform;\n      }\n      return fabric.iMatrix.concat();\n    },\n\n    /*\n     * @private\n     * return if the object would be visible in rendering\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean}\n     */\n    isNotVisible: function() {\n      return this.opacity === 0 ||\n        (this.width === 0 && this.height === 0 && this.strokeWidth === 0) ||\n        !this.visible;\n    },\n\n    /**\n     * Renders an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    render: function(ctx) {\n      // do not render if width/height are zeros or object is not visible\n      if (this.isNotVisible()) {\n        return;\n      }\n      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n        return;\n      }\n      ctx.save();\n      this._setupCompositeOperation(ctx);\n      this.drawSelectionBackground(ctx);\n      this.transform(ctx);\n      this._setOpacity(ctx);\n      this._setShadow(ctx, this);\n      if (this.transformMatrix) {\n        ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      this.clipTo && fabric.util.clipContext(this, ctx);\n      if (this.shouldCache()) {\n        this.renderCache();\n        this.drawCacheOnCanvas(ctx);\n      }\n      else {\n        this._removeCacheCanvas();\n        this.dirty = false;\n        this.drawObject(ctx);\n        if (this.objectCaching && this.statefullCache) {\n          this.saveState({ propertySet: 'cacheProperties' });\n        }\n      }\n      this.clipTo && ctx.restore();\n      ctx.restore();\n    },\n\n    renderCache: function(options) {\n      options = options || {};\n      if (!this._cacheCanvas) {\n        this._createCacheCanvas();\n      }\n      if (this.isCacheDirty()) {\n        this.statefullCache && this.saveState({ propertySet: 'cacheProperties' });\n        this.drawObject(this._cacheContext, options.forClipping);\n        this.dirty = false;\n      }\n    },\n\n    /**\n     * Remove cacheCanvas and its dimensions from the objects\n     */\n    _removeCacheCanvas: function() {\n      this._cacheCanvas = null;\n      this.cacheWidth = 0;\n      this.cacheHeight = 0;\n    },\n\n    /**\n     * When set to `true`, force the object to have its own cache, even if it is inside a group\n     * it may be needed when your object behave in a particular way on the cache and always needs\n     * its own isolated canvas to render correctly.\n     * Created to be overridden\n     * since 1.7.12\n     * @returns false\n     */\n    needsItsOwnCache: function() {\n      if (this.paintFirst === 'stroke' && typeof this.shadow === 'object') {\n        return true;\n      }\n      if (this.clipPath) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      this.ownCaching = this.objectCaching &&\n      (!this.group || this.needsItsOwnCache() || !this.group.isOnACache());\n      return this.ownCaching;\n    },\n\n    /**\n     * Check if this object or a child object will cast a shadow\n     * used by Group.shouldCache to know if child has a shadow recursively\n     * @return {Boolean}\n     */\n    willDrawShadow: function() {\n      return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\n    },\n\n    /**\n     * Execute the drawing operation for an object clipPath\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawClipPathOnCache: function(ctx) {\n      var path = this.clipPath;\n      ctx.save();\n      // DEBUG: uncomment this line, comment the following\n      // ctx.globalAlpha = 0.4\n      if (path.inverted) {\n        ctx.globalCompositeOperation = 'destination-out';\n      }\n      else {\n        ctx.globalCompositeOperation = 'destination-in';\n      }\n      //ctx.scale(1 / 2, 1 / 2);\n      if (path.absolutePositioned) {\n        var m = fabric.util.invertTransform(this.calcTransformMatrix());\n        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n      }\n      path.transform(ctx);\n      ctx.scale(1 / path.zoomX, 1 / path.zoomY);\n      ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\n      ctx.restore();\n    },\n\n    /**\n     * Execute the drawing operation for an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawObject: function(ctx, forClipping) {\n      var originalFill = this.fill, originalStroke = this.stroke;\n      if (forClipping) {\n        this.fill = 'black';\n        this.stroke = '';\n        this._setClippingProperties(ctx);\n      }\n      else {\n        this._renderBackground(ctx);\n        this._setStrokeStyles(ctx, this);\n        this._setFillStyles(ctx, this);\n      }\n      this._render(ctx);\n      this._drawClipPath(ctx);\n      this.fill = originalFill;\n      this.stroke = originalStroke;\n    },\n\n    _drawClipPath: function(ctx) {\n      var path = this.clipPath;\n      if (!path) { return; }\n      // needed to setup a couple of variables\n      // path canvas gets overridden with this one.\n      // TODO find a better solution?\n      path.canvas = this.canvas;\n      path.shouldCache();\n      path._transformDone = true;\n      path.renderCache({ forClipping: true });\n      this.drawClipPathOnCache(ctx);\n    },\n\n    /**\n     * Paint the cached copy of the object on the target context.\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawCacheOnCanvas: function(ctx) {\n      ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n      ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\n    },\n\n    /**\n     * Check if cache is dirty\n     * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n     * on parent canvas.\n     */\n    isCacheDirty: function(skipCanvas) {\n      if (this.isNotVisible()) {\n        return false;\n      }\n      if (this._cacheCanvas && !skipCanvas && this._updateCacheCanvas()) {\n        // in this case the context is already cleared.\n        return true;\n      }\n      else {\n        if (this.dirty ||\n          (this.clipPath && this.clipPath.absolutePositioned) ||\n          (this.statefullCache && this.hasStateChanged('cacheProperties'))\n        ) {\n          if (this._cacheCanvas && !skipCanvas) {\n            var width = this.cacheWidth / this.zoomX;\n            var height = this.cacheHeight / this.zoomY;\n            this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\n          }\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Draws a background for the object big as its untransformed dimensions\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderBackground: function(ctx) {\n      if (!this.backgroundColor) {\n        return;\n      }\n      var dim = this._getNonTransformedDimensions();\n      ctx.fillStyle = this.backgroundColor;\n\n      ctx.fillRect(\n        -dim.x / 2,\n        -dim.y / 2,\n        dim.x,\n        dim.y\n      );\n      // if there is background color no other shadows\n      // should be casted\n      this._removeShadow(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setOpacity: function(ctx) {\n      if (this.group && !this.group._transformDone) {\n        ctx.globalAlpha = this.getObjectOpacity();\n      }\n      else {\n        ctx.globalAlpha *= this.opacity;\n      }\n    },\n\n    _setStrokeStyles: function(ctx, decl) {\n      if (decl.stroke) {\n        ctx.lineWidth = decl.strokeWidth;\n        ctx.lineCap = decl.strokeLineCap;\n        ctx.lineDashOffset = decl.strokeDashOffset;\n        ctx.lineJoin = decl.strokeLineJoin;\n        ctx.miterLimit = decl.strokeMiterLimit;\n        ctx.strokeStyle = decl.stroke.toLive\n          ? decl.stroke.toLive(ctx, this)\n          : decl.stroke;\n      }\n    },\n\n    _setFillStyles: function(ctx, decl) {\n      if (decl.fill) {\n        ctx.fillStyle = decl.fill.toLive\n          ? decl.fill.toLive(ctx, this)\n          : decl.fill;\n      }\n    },\n\n    _setClippingProperties: function(ctx) {\n      ctx.globalAlpha = 1;\n      ctx.strokeStyle = 'transparent';\n      ctx.fillStyle = '#000000';\n    },\n\n    /**\n     * @private\n     * Sets line dash\n     * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n     * @param {Array} dashArray array representing dashes\n     * @param {Function} alternative function to call if browser does not support lineDash\n     */\n    _setLineDash: function(ctx, dashArray, alternative) {\n      if (!dashArray) {\n        return;\n      }\n      // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n      if (1 & dashArray.length) {\n        dashArray.push.apply(dashArray, dashArray);\n      }\n      if (supportsLineDash) {\n        ctx.setLineDash(dashArray);\n      }\n      else {\n        alternative && alternative(ctx);\n      }\n    },\n\n    /**\n     * Renders controls and borders for the object\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [styleOverride] properties to override the object style\n     */\n    _renderControls: function(ctx, styleOverride) {\n      var vpt = this.getViewportTransform(),\n          matrix = this.calcTransformMatrix(),\n          options, drawBorders, drawControls;\n      styleOverride = styleOverride || { };\n      drawBorders = typeof styleOverride.hasBorders !== 'undefined' ? styleOverride.hasBorders : this.hasBorders;\n      drawControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls;\n      matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);\n      options = fabric.util.qrDecompose(matrix);\n      ctx.save();\n      ctx.translate(options.translateX, options.translateY);\n      ctx.lineWidth = 1 * this.borderScaleFactor;\n      if (!this.group) {\n        ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      }\n      if (styleOverride.forActiveSelection) {\n        ctx.rotate(degreesToRadians(options.angle));\n        drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);\n      }\n      else {\n        ctx.rotate(degreesToRadians(this.angle));\n        drawBorders && this.drawBorders(ctx, styleOverride);\n      }\n      drawControls && this.drawControls(ctx, styleOverride);\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setShadow: function(ctx) {\n      if (!this.shadow) {\n        return;\n      }\n\n      var shadow = this.shadow, canvas = this.canvas,\n          multX = (canvas && canvas.viewportTransform[0]) || 1,\n          multY = (canvas && canvas.viewportTransform[3]) || 1,\n          scaling = this.getObjectScaling();\n      if (canvas && canvas._isRetinaScaling()) {\n        multX *= fabric.devicePixelRatio;\n        multY *= fabric.devicePixelRatio;\n      }\n      ctx.shadowColor = shadow.color;\n      ctx.shadowBlur = shadow.blur * fabric.browserShadowBlurConstant *\n        (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;\n      ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;\n      ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _removeShadow: function(ctx) {\n      if (!this.shadow) {\n        return;\n      }\n\n      ctx.shadowColor = '';\n      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} filler fabric.Pattern or fabric.Gradient\n     * @return {Object} offset.offsetX offset for text rendering\n     * @return {Object} offset.offsetY offset for text rendering\n     */\n    _applyPatternGradientTransform: function(ctx, filler) {\n      if (!filler || !filler.toLive) {\n        return { offsetX: 0, offsetY: 0 };\n      }\n      var t = filler.gradientTransform || filler.patternTransform;\n      var offsetX = -this.width / 2 + filler.offsetX || 0,\n          offsetY = -this.height / 2 + filler.offsetY || 0;\n      ctx.translate(offsetX, offsetY);\n      if (t) {\n        ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n      }\n      return { offsetX: offsetX, offsetY: offsetY };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderPaintInOrder: function(ctx) {\n      if (this.paintFirst === 'stroke') {\n        this._renderStroke(ctx);\n        this._renderFill(ctx);\n      }\n      else {\n        this._renderFill(ctx);\n        this._renderStroke(ctx);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderFill: function(ctx) {\n      if (!this.fill) {\n        return;\n      }\n\n      ctx.save();\n      this._applyPatternGradientTransform(ctx, this.fill);\n      if (this.fillRule === 'evenodd') {\n        ctx.fill('evenodd');\n      }\n      else {\n        ctx.fill();\n      }\n      ctx.restore();\n    },\n\n    _renderStroke: function(ctx) {\n      if (!this.stroke || this.strokeWidth === 0) {\n        return;\n      }\n\n      if (this.shadow && !this.shadow.affectStroke) {\n        this._removeShadow(ctx);\n      }\n\n      ctx.save();\n      this._setLineDash(ctx, this.strokeDashArray, this._renderDashedStroke);\n      this._applyPatternGradientTransform(ctx, this.stroke);\n      ctx.stroke();\n      ctx.restore();\n    },\n\n    /**\n     * This function is an helper for svg import. it returns the center of the object in the svg\n     * untransformed coordinates\n     * @private\n     * @return {Object} center point from element coordinates\n     */\n    _findCenterFromElement: function() {\n      return { x: this.left + this.width / 2, y: this.top + this.height / 2 };\n    },\n\n    /**\n     * This function is an helper for svg import. it decompose the transformMatrix\n     * and assign properties to object.\n     * untransformed coordinates\n     * @private\n     * @chainable\n     */\n    _assignTransformMatrixProps: function() {\n      if (this.transformMatrix) {\n        var options = fabric.util.qrDecompose(this.transformMatrix);\n        this.flipX = false;\n        this.flipY = false;\n        this.set('scaleX', options.scaleX);\n        this.set('scaleY', options.scaleY);\n        this.angle = options.angle;\n        this.skewX = options.skewX;\n        this.skewY = 0;\n      }\n    },\n\n    /**\n     * This function is an helper for svg import. it removes the transform matrix\n     * and set to object properties that fabricjs can handle\n     * @private\n     * @param {Object} preserveAspectRatioOptions\n     * @return {thisArg}\n     */\n    _removeTransformMatrix: function(preserveAspectRatioOptions) {\n      var center = this._findCenterFromElement();\n      if (this.transformMatrix) {\n        this._assignTransformMatrixProps();\n        center = fabric.util.transformPoint(center, this.transformMatrix);\n      }\n      this.transformMatrix = null;\n      if (preserveAspectRatioOptions) {\n        this.scaleX *= preserveAspectRatioOptions.scaleX;\n        this.scaleY *= preserveAspectRatioOptions.scaleY;\n        this.cropX = preserveAspectRatioOptions.cropX;\n        this.cropY = preserveAspectRatioOptions.cropY;\n        center.x += preserveAspectRatioOptions.offsetLeft;\n        center.y += preserveAspectRatioOptions.offsetTop;\n        this.width = preserveAspectRatioOptions.width;\n        this.height = preserveAspectRatioOptions.height;\n      }\n      this.setPositionByOrigin(center, 'center', 'center');\n    },\n\n    /**\n     * Clones an instance, using a callback method will work for every object.\n     * @param {Function} callback Callback is invoked with a clone as a first argument\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     */\n    clone: function(callback, propertiesToInclude) {\n      var objectForm = this.toObject(propertiesToInclude);\n      if (this.constructor.fromObject) {\n        this.constructor.fromObject(objectForm, callback);\n      }\n      else {\n        fabric.Object._fromObject('Object', objectForm, callback);\n      }\n    },\n\n    /**\n     * Creates an instance of fabric.Image out of an object\n     * could make use of both toDataUrl or toCanvasElement.\n     * @param {Function} callback callback, invoked with an instance as a first argument\n     * @param {Object} [options] for clone as image, passed to toDataURL\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {fabric.Object} thisArg\n     */\n    cloneAsImage: function(callback, options) {\n      var canvasEl = this.toCanvasElement(options);\n      if (callback) {\n        callback(new fabric.Image(canvasEl));\n      }\n      return this;\n    },\n\n    /**\n     * Converts an object into a HTMLCanvas element\n     * @param {Object} options Options object\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     */\n    toCanvasElement: function(options) {\n      options || (options = { });\n\n      var utils = fabric.util, origParams = utils.saveObjectTransform(this),\n          originalShadow = this.shadow, abs = Math.abs,\n          multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric.devicePixelRatio : 1);\n\n      if (options.withoutTransform) {\n        utils.resetObjectTransform(this);\n      }\n      if (options.withoutShadow) {\n        this.shadow = null;\n      }\n\n      var el = fabric.util.createCanvasElement(),\n          // skip canvas zoom and calculate with setCoords now.\n          boundingRect = this.getBoundingRect(true, true),\n          shadow = this.shadow, scaling,\n          shadowOffset = { x: 0, y: 0 }, shadowBlur;\n\n      if (shadow) {\n        shadowBlur = shadow.blur;\n        scaling = this.getObjectScaling();\n        shadowOffset.x = 2 * Math.round((abs(shadow.offsetX) + shadowBlur) * abs(scaling.scaleX));\n        shadowOffset.y = 2 * Math.round((abs(shadow.offsetY) + shadowBlur) * abs(scaling.scaleY));\n      }\n      el.width = boundingRect.width + shadowOffset.x;\n      el.height = boundingRect.height + shadowOffset.y;\n      el.width += el.width % 2 ? 2 - el.width % 2 : 0;\n      el.height += el.height % 2 ? 2 - el.height % 2 : 0;\n      var canvas = new fabric.StaticCanvas(el, {\n        enableRetinaScaling: false,\n        renderOnAddRemove: false,\n        skipOffscreen: false,\n      });\n      if (options.format === 'jpeg') {\n        canvas.backgroundColor = '#fff';\n      }\n      this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), 'center', 'center');\n\n      var originalCanvas = this.canvas;\n      canvas.add(this);\n      var canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n      this.shadow = originalShadow;\n      this.canvas = originalCanvas;\n      this.set(origParams).setCoords();\n      // canvas.dispose will call image.dispose that will nullify the elements\n      // since this canvas is a simple element for the process, we remove references\n      // to objects in this way in order to avoid object trashing.\n      canvas._objects = [];\n      canvas.dispose();\n      canvas = null;\n\n      return canvasEl;\n    },\n\n    /**\n     * Converts an object into a data-url-like string\n     * @param {Object} options Options object\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     */\n    toDataURL: function(options) {\n      options || (options = { });\n      return fabric.util.toDataURL(this.toCanvasElement(options), options.format || 'png', options.quality || 1);\n    },\n\n    /**\n     * Returns true if specified type is identical to the type of an instance\n     * @param {String} type Type to check against\n     * @return {Boolean}\n     */\n    isType: function(type) {\n      return this.type === type;\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance (is 1 unless subclassed)\n     */\n    complexity: function() {\n      return 1;\n    },\n\n    /**\n     * Returns a JSON representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} JSON\n     */\n    toJSON: function(propertiesToInclude) {\n      // delegate, not alias\n      return this.toObject(propertiesToInclude);\n    },\n\n    /**\n     * Sets gradient (fill or stroke) of an object\n     * <b>Backwards incompatibility note:</b> This method was named \"setGradientFill\" until v1.1.0\n     * @param {String} property Property name 'stroke' or 'fill'\n     * @param {Object} [options] Options object\n     * @param {String} [options.type] Type of gradient 'radial' or 'linear'\n     * @param {Number} [options.x1=0] x-coordinate of start point\n     * @param {Number} [options.y1=0] y-coordinate of start point\n     * @param {Number} [options.x2=0] x-coordinate of end point\n     * @param {Number} [options.y2=0] y-coordinate of end point\n     * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)\n     * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)\n     * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}\n     * @param {Object} [options.gradientTransform] transformMatrix for gradient\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}\n     * @example <caption>Set linear gradient</caption>\n     * object.setGradient('fill', {\n     *   type: 'linear',\n     *   x1: -object.width / 2,\n     *   y1: 0,\n     *   x2: object.width / 2,\n     *   y2: 0,\n     *   colorStops: {\n     *     0: 'red',\n     *     0.5: '#005555',\n     *     1: 'rgba(0,0,255,0.5)'\n     *   }\n     * });\n     * canvas.renderAll();\n     * @example <caption>Set radial gradient</caption>\n     * object.setGradient('fill', {\n     *   type: 'radial',\n     *   x1: 0,\n     *   y1: 0,\n     *   x2: 0,\n     *   y2: 0,\n     *   r1: object.width / 2,\n     *   r2: 10,\n     *   colorStops: {\n     *     0: 'red',\n     *     0.5: '#005555',\n     *     1: 'rgba(0,0,255,0.5)'\n     *   }\n     * });\n     * canvas.renderAll();\n     */\n    setGradient: function(property, options) {\n      options || (options = { });\n\n      var gradient = { colorStops: [] };\n\n      gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');\n      gradient.coords = {\n        x1: options.x1,\n        y1: options.y1,\n        x2: options.x2,\n        y2: options.y2\n      };\n\n      if (options.r1 || options.r2) {\n        gradient.coords.r1 = options.r1;\n        gradient.coords.r2 = options.r2;\n      }\n\n      gradient.gradientTransform = options.gradientTransform;\n      fabric.Gradient.prototype.addColorStop.call(gradient, options.colorStops);\n\n      return this.set(property, fabric.Gradient.forObject(this, gradient));\n    },\n\n    /**\n     * Sets pattern fill of an object\n     * @param {Object} options Options object\n     * @param {(String|HTMLImageElement)} options.source Pattern source\n     * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n     * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner\n     * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner\n     * @param {Function} [callback] Callback to invoke when image set as a pattern\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}\n     * @example <caption>Set pattern</caption>\n     * object.setPatternFill({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat'\n     * },canvas.renderAll.bind(canvas));\n     */\n    setPatternFill: function(options, callback) {\n      return this.set('fill', new fabric.Pattern(options, callback));\n    },\n\n    /**\n     * Sets {@link fabric.Object#shadow|shadow} of an object\n     * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n     * @param {String} [options.color=rgb(0,0,0)] Shadow color\n     * @param {Number} [options.blur=0] Shadow blur\n     * @param {Number} [options.offsetX=0] Shadow horizontal offset\n     * @param {Number} [options.offsetY=0] Shadow vertical offset\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}\n     * @example <caption>Set shadow with string notation</caption>\n     * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');\n     * canvas.renderAll();\n     * @example <caption>Set shadow with object notation</caption>\n     * object.setShadow({\n     *   color: 'red',\n     *   blur: 10,\n     *   offsetX: 20,\n     *   offsetY: 20\n     * });\n     * canvas.renderAll();\n     */\n    setShadow: function(options) {\n      return this.set('shadow', options ? new fabric.Shadow(options) : null);\n    },\n\n    /**\n     * Sets \"color\" of an instance (alias of `set('fill', &hellip;)`)\n     * @param {String} color Color value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setColor: function(color) {\n      this.set('fill', color);\n      return this;\n    },\n\n    /**\n     * Sets \"angle\" of an instance with centered rotation\n     * @param {Number} angle Angle value (in degrees)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    rotate: function(angle) {\n      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\n\n      if (shouldCenterOrigin) {\n        this._setOriginToCenter();\n      }\n\n      this.set('angle', angle);\n\n      if (shouldCenterOrigin) {\n        this._resetOrigin();\n      }\n\n      return this;\n    },\n\n    /**\n     * Centers object horizontally on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    centerH: function () {\n      this.canvas && this.canvas.centerObjectH(this);\n      return this;\n    },\n\n    /**\n     * Centers object horizontally on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    viewportCenterH: function () {\n      this.canvas && this.canvas.viewportCenterObjectH(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    centerV: function () {\n      this.canvas && this.canvas.centerObjectV(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    viewportCenterV: function () {\n      this.canvas && this.canvas.viewportCenterObjectV(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically and horizontally on canvas to which is was added last\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    center: function () {\n      this.canvas && this.canvas.centerObject(this);\n      return this;\n    },\n\n    /**\n     * Centers object on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    viewportCenter: function () {\n      this.canvas && this.canvas.viewportCenterObject(this);\n      return this;\n    },\n\n    /**\n     * Returns coordinates of a pointer relative to an object\n     * @param {Event} e Event to operate upon\n     * @param {Object} [pointer] Pointer to operate upon (instead of event)\n     * @return {Object} Coordinates of a pointer (x, y)\n     */\n    getLocalPointer: function(e, pointer) {\n      pointer = pointer || this.canvas.getPointer(e);\n      var pClicked = new fabric.Point(pointer.x, pointer.y),\n          objectLeftTop = this._getLeftTopCoords();\n      if (this.angle) {\n        pClicked = fabric.util.rotatePoint(\n          pClicked, objectLeftTop, degreesToRadians(-this.angle));\n      }\n      return {\n        x: pClicked.x - objectLeftTop.x,\n        y: pClicked.y - objectLeftTop.y\n      };\n    },\n\n    /**\n     * Sets canvas globalCompositeOperation for specific object\n     * custom composition operation for the particular object can be specified using globalCompositeOperation property\n     * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n     */\n    _setupCompositeOperation: function (ctx) {\n      if (this.globalCompositeOperation) {\n        ctx.globalCompositeOperation = this.globalCompositeOperation;\n      }\n    }\n  });\n\n  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);\n\n  extend(fabric.Object.prototype, fabric.Observable);\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   * @static\n   * @memberOf fabric.Object\n   * @constant\n   * @type Number\n   */\n  fabric.Object.NUM_FRACTION_DIGITS = 2;\n\n  fabric.Object._fromObject = function(className, object, callback, extraParam) {\n    var klass = fabric[className];\n    object = clone(object, true);\n    fabric.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {\n      if (typeof patterns[0] !== 'undefined') {\n        object.fill = patterns[0];\n      }\n      if (typeof patterns[1] !== 'undefined') {\n        object.stroke = patterns[1];\n      }\n      fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {\n        object.clipPath = enlivedProps[0];\n        var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);\n        callback && callback(instance);\n      });\n    });\n  };\n\n  /**\n   * Unique id used internally when creating SVG elements\n   * @static\n   * @memberOf fabric.Object\n   * @type Number\n   */\n  fabric.Object.__uid = 0;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians,\n      originXOffset = {\n        left: -0.5,\n        center: 0,\n        right: 0.5\n      },\n      originYOffset = {\n        top: -0.5,\n        center: 0,\n        bottom: 0.5\n      };\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\n      var x = point.x,\n          y = point.y,\n          offsetX, offsetY, dim;\n\n      if (typeof fromOriginX === 'string') {\n        fromOriginX = originXOffset[fromOriginX];\n      }\n      else {\n        fromOriginX -= 0.5;\n      }\n\n      if (typeof toOriginX === 'string') {\n        toOriginX = originXOffset[toOriginX];\n      }\n      else {\n        toOriginX -= 0.5;\n      }\n\n      offsetX = toOriginX - fromOriginX;\n\n      if (typeof fromOriginY === 'string') {\n        fromOriginY = originYOffset[fromOriginY];\n      }\n      else {\n        fromOriginY -= 0.5;\n      }\n\n      if (typeof toOriginY === 'string') {\n        toOriginY = originYOffset[toOriginY];\n      }\n      else {\n        toOriginY -= 0.5;\n      }\n\n      offsetY = toOriginY - fromOriginY;\n\n      if (offsetX || offsetY) {\n        dim = this._getTransformedDimensions();\n        x = point.x + offsetX * dim.x;\n        y = point.y + offsetY * dim.y;\n      }\n\n      return new fabric.Point(x, y);\n    },\n\n    /**\n     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToCenterPoint: function(point, originX, originY) {\n      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\n      if (this.angle) {\n        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\n      }\n      return p;\n    },\n\n    /**\n     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n     * @param {fabric.Point} center The point which corresponds to center of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToOriginPoint: function(center, originX, originY) {\n      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n      if (this.angle) {\n        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\n      }\n      return p;\n    },\n\n    /**\n     * Returns the real center coordinates of the object\n     * @return {fabric.Point}\n     */\n    getCenterPoint: function() {\n      var leftTop = new fabric.Point(this.left, this.top);\n      return this.translateToCenterPoint(leftTop, this.originX, this.originY);\n    },\n\n    /**\n     * Returns the coordinates of the object based on center coordinates\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @return {fabric.Point}\n     */\n    // getOriginPoint: function(center) {\n    //   return this.translateToOriginPoint(center, this.originX, this.originY);\n    // },\n\n    /**\n     * Returns the coordinates of the object as if it has a different origin\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    getPointByOrigin: function(originX, originY) {\n      var center = this.getCenterPoint();\n      return this.translateToOriginPoint(center, originX, originY);\n    },\n\n    /**\n     * Returns the point in local coordinates\n     * @param {fabric.Point} point The point relative to the global coordinate system\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    toLocalPoint: function(point, originX, originY) {\n      var center = this.getCenterPoint(),\n          p, p2;\n\n      if (typeof originX !== 'undefined' && typeof originY !== 'undefined' ) {\n        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n      }\n      else {\n        p = new fabric.Point(this.left, this.top);\n      }\n\n      p2 = new fabric.Point(point.x, point.y);\n      if (this.angle) {\n        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\n      }\n      return p2.subtractEquals(p);\n    },\n\n    /**\n     * Returns the point in global coordinates\n     * @param {fabric.Point} The point relative to the local coordinate system\n     * @return {fabric.Point}\n     */\n    // toGlobalPoint: function(point) {\n    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\n    // },\n\n    /**\n     * Sets the position of the object taking into consideration the object's origin\n     * @param {fabric.Point} pos The new position of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {void}\n     */\n    setPositionByOrigin: function(pos, originX, originY) {\n      var center = this.translateToCenterPoint(pos, originX, originY),\n          position = this.translateToOriginPoint(center, this.originX, this.originY);\n      this.set('left', position.x);\n      this.set('top', position.y);\n    },\n\n    /**\n     * @param {String} to One of 'left', 'center', 'right'\n     */\n    adjustPosition: function(to) {\n      var angle = degreesToRadians(this.angle),\n          hypotFull = this.getScaledWidth(),\n          xFull = fabric.util.cos(angle) * hypotFull,\n          yFull = fabric.util.sin(angle) * hypotFull,\n          offsetFrom, offsetTo;\n\n      //TODO: this function does not consider mixed situation like top, center.\n      if (typeof this.originX === 'string') {\n        offsetFrom = originXOffset[this.originX];\n      }\n      else {\n        offsetFrom = this.originX - 0.5;\n      }\n      if (typeof to === 'string') {\n        offsetTo = originXOffset[to];\n      }\n      else {\n        offsetTo = to - 0.5;\n      }\n      this.left += xFull * (offsetTo - offsetFrom);\n      this.top += yFull * (offsetTo - offsetFrom);\n      this.setCoords();\n      this.originX = to;\n    },\n\n    /**\n     * Sets the origin/position of the object to it's center point\n     * @private\n     * @return {void}\n     */\n    _setOriginToCenter: function() {\n      this._originalOriginX = this.originX;\n      this._originalOriginY = this.originY;\n\n      var center = this.getCenterPoint();\n\n      this.originX = 'center';\n      this.originY = 'center';\n\n      this.left = center.x;\n      this.top = center.y;\n    },\n\n    /**\n     * Resets the origin/position of the object to it's original origin\n     * @private\n     * @return {void}\n     */\n    _resetOrigin: function() {\n      var originPoint = this.translateToOriginPoint(\n        this.getCenterPoint(),\n        this._originalOriginX,\n        this._originalOriginY);\n\n      this.originX = this._originalOriginX;\n      this.originY = this._originalOriginY;\n\n      this.left = originPoint.x;\n      this.top = originPoint.y;\n\n      this._originalOriginX = null;\n      this._originalOriginY = null;\n    },\n\n    /**\n     * @private\n     */\n    _getLeftTopCoords: function() {\n      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\n    },\n  });\n\n})();\n\n\n(function() {\n\n  function getCoords(coords) {\n    return [\n      new fabric.Point(coords.tl.x, coords.tl.y),\n      new fabric.Point(coords.tr.x, coords.tr.y),\n      new fabric.Point(coords.br.x, coords.br.y),\n      new fabric.Point(coords.bl.x, coords.bl.y)\n    ];\n  }\n\n  var degreesToRadians = fabric.util.degreesToRadians,\n      multiplyMatrices = fabric.util.multiplyTransformMatrices,\n      transformPoint = fabric.util.transformPoint;\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Describe object's corner position in canvas element coordinates.\n     * properties are tl,mt,tr,ml,mr,bl,mb,br,mtr for the main controls.\n     * each property is an object with x, y and corner.\n     * The `corner` property contains in a similar manner the 4 points of the\n     * interactive area of the corner.\n     * The coordinates depends from this properties: width, height, scaleX, scaleY\n     * skewX, skewY, angle, strokeWidth, viewportTransform, top, left, padding.\n     * The coordinates get updated with @method setCoords.\n     * You can calculate them without updating with @method calcCoords;\n     * @memberOf fabric.Object.prototype\n     */\n    oCoords: null,\n\n    /**\n     * Describe object's corner position in canvas object absolute coordinates\n     * properties are tl,tr,bl,br and describe the four main corner.\n     * each property is an object with x, y, instance of Fabric.Point.\n     * The coordinates depends from this properties: width, height, scaleX, scaleY\n     * skewX, skewY, angle, strokeWidth, top, left.\n     * Those coordinates are usefull to understand where an object is. They get updated\n     * with oCoords but they do not need to be updated when zoom or panning change.\n     * The coordinates get updated with @method setCoords.\n     * You can calculate them without updating with @method calcCoords(true);\n     * @memberOf fabric.Object.prototype\n     */\n    aCoords: null,\n\n    /**\n     * storage for object transform matrix\n     */\n    ownMatrixCache: null,\n\n    /**\n     * storage for object full transform matrix\n     */\n    matrixCache: null,\n\n    /**\n     * return correct set of coordinates for intersection\n     */\n    getCoords: function(absolute, calculate) {\n      if (!this.oCoords) {\n        this.setCoords();\n      }\n      var coords = absolute ? this.aCoords : this.oCoords;\n      return getCoords(calculate ? this.calcCoords(absolute) : coords);\n    },\n\n    /**\n     * Checks if object intersects with an area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object intersects with an area formed by 2 points\n     */\n    intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {\n      var coords = this.getCoords(absolute, calculate),\n          intersection = fabric.Intersection.intersectPolygonRectangle(\n            coords,\n            pointTL,\n            pointBR\n          );\n      return intersection.status === 'Intersection';\n    },\n\n    /**\n     * Checks if object intersects with another object\n     * @param {Object} other Object to test\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object intersects with another object\n     */\n    intersectsWithObject: function(other, absolute, calculate) {\n      var intersection = fabric.Intersection.intersectPolygonPolygon(\n        this.getCoords(absolute, calculate),\n        other.getCoords(absolute, calculate)\n      );\n\n      return intersection.status === 'Intersection'\n        || other.isContainedWithinObject(this, absolute, calculate)\n        || this.isContainedWithinObject(other, absolute, calculate);\n    },\n\n    /**\n     * Checks if object is fully contained within area of another object\n     * @param {Object} other Object to test\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is fully contained within area of another object\n     */\n    isContainedWithinObject: function(other, absolute, calculate) {\n      var points = this.getCoords(absolute, calculate),\n          i = 0, lines = other._getImageLines(\n            calculate ? other.calcCoords(absolute) : absolute ? other.aCoords : other.oCoords\n          );\n      for (; i < 4; i++) {\n        if (!other.containsPoint(points[i], lines)) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Checks if object is fully contained within area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is fully contained within area formed by 2 points\n     */\n    isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {\n      var boundingRect = this.getBoundingRect(absolute, calculate);\n\n      return (\n        boundingRect.left >= pointTL.x &&\n        boundingRect.left + boundingRect.width <= pointBR.x &&\n        boundingRect.top >= pointTL.y &&\n        boundingRect.top + boundingRect.height <= pointBR.y\n      );\n    },\n\n    /**\n     * Checks if point is inside the object\n     * @param {fabric.Point} point Point to check against\n     * @param {Object} [lines] object returned from @method _getImageLines\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if point is inside the object\n     */\n    containsPoint: function(point, lines, absolute, calculate) {\n      var lines = lines || this._getImageLines(\n            calculate ? this.calcCoords(absolute) : absolute ? this.aCoords : this.oCoords\n          ),\n          xPoints = this._findCrossPoints(point, lines);\n\n      // if xPoints is odd then point is inside the object\n      return (xPoints !== 0 && xPoints % 2 === 1);\n    },\n\n    /**\n     * Checks if object is contained within the canvas with current viewportTransform\n     * the check is done stopping at first point that appears on screen\n     * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords\n     * @return {Boolean} true if object is fully or partially contained within canvas\n     */\n    isOnScreen: function(calculate) {\n      if (!this.canvas) {\n        return false;\n      }\n      var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n      var points = this.getCoords(true, calculate), point;\n      for (var i = 0; i < 4; i++) {\n        point = points[i];\n        if (point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y) {\n          return true;\n        }\n      }\n      // no points on screen, check intersection with absolute coordinates\n      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n        return true;\n      }\n      return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n    },\n\n    /**\n     * Checks if the object contains the midpoint between canvas extremities\n     * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen\n     * @private\n     * @param {Fabric.Point} pointTL Top Left point\n     * @param {Fabric.Point} pointBR Top Right point\n     * @param {Boolean} calculate use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if the objects containe the point\n     */\n    _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {\n      // worst case scenario the object is so big that contains the screen\n      var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };\n      if (this.containsPoint(centerPoint, null, true, calculate)) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Checks if object is partially contained within the canvas with current viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is partially contained within canvas\n     */\n    isPartiallyOnScreen: function(calculate) {\n      if (!this.canvas) {\n        return false;\n      }\n      var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n        return true;\n      }\n      return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n    },\n\n    /**\n     * Method that returns an object with the object edges in it, given the coordinates of the corners\n     * @private\n     * @param {Object} oCoords Coordinates of the object corners\n     */\n    _getImageLines: function(oCoords) {\n      return {\n        topline: {\n          o: oCoords.tl,\n          d: oCoords.tr\n        },\n        rightline: {\n          o: oCoords.tr,\n          d: oCoords.br\n        },\n        bottomline: {\n          o: oCoords.br,\n          d: oCoords.bl\n        },\n        leftline: {\n          o: oCoords.bl,\n          d: oCoords.tl\n        }\n      };\n    },\n\n    /**\n     * Helper method to determine how many cross points are between the 4 object edges\n     * and the horizontal line determined by a point on canvas\n     * @private\n     * @param {fabric.Point} point Point to check\n     * @param {Object} lines Coordinates of the object being evaluated\n     */\n    // remove yi, not used but left code here just in case.\n    _findCrossPoints: function(point, lines) {\n      var b1, b2, a1, a2, xi, // yi,\n          xcount = 0,\n          iLine;\n\n      for (var lineKey in lines) {\n        iLine = lines[lineKey];\n        // optimisation 1: line below point. no cross\n        if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\n          continue;\n        }\n        // optimisation 2: line above point. no cross\n        if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\n          continue;\n        }\n        // optimisation 3: vertical line case\n        if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\n          xi = iLine.o.x;\n          // yi = point.y;\n        }\n        // calculate the intersection point\n        else {\n          b1 = 0;\n          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\n          a1 = point.y - b1 * point.x;\n          a2 = iLine.o.y - b2 * iLine.o.x;\n\n          xi = -(a1 - a2) / (b1 - b2);\n          // yi = a1 + b1 * xi;\n        }\n        // dont count xi < point.x cases\n        if (xi >= point.x) {\n          xcount += 1;\n        }\n        // optimisation 4: specific for square images\n        if (xcount === 2) {\n          break;\n        }\n      }\n      return xcount;\n    },\n\n    /**\n     * Returns coordinates of object's bounding rectangle (left, top, width, height)\n     * the box is intented as aligned to axis of canvas.\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords\n     * @return {Object} Object with left, top, width, height properties\n     */\n    getBoundingRect: function(absolute, calculate) {\n      var coords = this.getCoords(absolute, calculate);\n      return fabric.util.makeBoundingBoxFromPoints(coords);\n    },\n\n    /**\n     * Returns width of an object bounding box counting transformations\n     * before 2.0 it was named getWidth();\n     * @return {Number} width value\n     */\n    getScaledWidth: function() {\n      return this._getTransformedDimensions().x;\n    },\n\n    /**\n     * Returns height of an object bounding box counting transformations\n     * before 2.0 it was named getHeight();\n     * @return {Number} height value\n     */\n    getScaledHeight: function() {\n      return this._getTransformedDimensions().y;\n    },\n\n    /**\n     * Makes sure the scale is valid and modifies it if necessary\n     * @private\n     * @param {Number} value\n     * @return {Number}\n     */\n    _constrainScale: function(value) {\n      if (Math.abs(value) < this.minScaleLimit) {\n        if (value < 0) {\n          return -this.minScaleLimit;\n        }\n        else {\n          return this.minScaleLimit;\n        }\n      }\n      else if (value === 0) {\n        return 0.0001;\n      }\n      return value;\n    },\n\n    /**\n     * Scales an object (equally by x and y)\n     * @param {Number} value Scale factor\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scale: function(value) {\n      this._set('scaleX', value);\n      this._set('scaleY', value);\n      return this.setCoords();\n    },\n\n    /**\n     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New width value\n     * @param {Boolean} absolute ignore viewport\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scaleToWidth: function(value, absolute) {\n      // adjust to bounding rect factor so that rotated shapes would fit as well\n      var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();\n      return this.scale(value / this.width / boundingRectFactor);\n    },\n\n    /**\n     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New height value\n     * @param {Boolean} absolute ignore viewport\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scaleToHeight: function(value, absolute) {\n      // adjust to bounding rect factor so that rotated shapes would fit as well\n      var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();\n      return this.scale(value / this.height / boundingRectFactor);\n    },\n\n    /**\n     * Calculate and returns the .coords of an object.\n     * @return {Object} Object with tl, tr, br, bl ....\n     * @chainable\n     */\n    calcCoords: function(absolute) {\n      var rotateMatrix = this._calcRotateMatrix(),\n          translateMatrix = this._calcTranslateMatrix(),\n          startMatrix = multiplyMatrices(translateMatrix, rotateMatrix),\n          vpt = this.getViewportTransform(),\n          finalMatrix = absolute ? startMatrix : multiplyMatrices(vpt, startMatrix),\n          dim = this._getTransformedDimensions(),\n          w = dim.x / 2, h = dim.y / 2,\n          tl = transformPoint({ x: -w, y: -h }, finalMatrix),\n          tr = transformPoint({ x: w, y: -h }, finalMatrix),\n          bl = transformPoint({ x: -w, y: h }, finalMatrix),\n          br = transformPoint({ x: w, y: h }, finalMatrix);\n      if (!absolute) {\n        var padding = this.padding, angle = degreesToRadians(this.angle),\n            cos = fabric.util.cos(angle), sin = fabric.util.sin(angle),\n            cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP,\n            cosPMinusSinP = cosP - sinP;\n        if (padding) {\n          tl.x -= cosPMinusSinP;\n          tl.y -= cosPSinP;\n          tr.x += cosPSinP;\n          tr.y -= cosPMinusSinP;\n          bl.x -= cosPSinP;\n          bl.y += cosPMinusSinP;\n          br.x += cosPMinusSinP;\n          br.y += cosPSinP;\n        }\n        var ml  = new fabric.Point((tl.x + bl.x) / 2, (tl.y + bl.y) / 2),\n            mt  = new fabric.Point((tr.x + tl.x) / 2, (tr.y + tl.y) / 2),\n            mr  = new fabric.Point((br.x + tr.x) / 2, (br.y + tr.y) / 2),\n            mb  = new fabric.Point((br.x + bl.x) / 2, (br.y + bl.y) / 2),\n            mtr = new fabric.Point(mt.x + sin * this.rotatingPointOffset, mt.y - cos * this.rotatingPointOffset);\n      }\n\n      // if (!absolute) {\n      //   var canvas = this.canvas;\n      //   setTimeout(function() {\n      //     canvas.contextTop.clearRect(0, 0, 700, 700);\n      //     canvas.contextTop.fillStyle = 'green';\n      //     canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);\n      //     canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);\n      //     canvas.contextTop.fillRect(br.x, br.y, 3, 3);\n      //     canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);\n      //     canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);\n      //     canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);\n      //     canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);\n      //     canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);\n      //     canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);\n      //   }, 50);\n      // }\n\n      var coords = {\n        // corners\n        tl: tl, tr: tr, br: br, bl: bl,\n      };\n      if (!absolute) {\n        // middle\n        coords.ml = ml;\n        coords.mt = mt;\n        coords.mr = mr;\n        coords.mb = mb;\n        // rotating point\n        coords.mtr = mtr;\n      }\n      return coords;\n    },\n\n    /**\n     * Sets corner position coordinates based on current angle, width and height.\n     * See {@link https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords|When-to-call-setCoords}\n     * @param {Boolean} [ignoreZoom] set oCoords with or without the viewport transform.\n     * @param {Boolean} [skipAbsolute] skip calculation of aCoords, usefull in setViewportTransform\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setCoords: function(ignoreZoom, skipAbsolute) {\n      this.oCoords = this.calcCoords(ignoreZoom);\n      if (!skipAbsolute) {\n        this.aCoords = this.calcCoords(true);\n      }\n\n      // set coordinates of the draggable boxes in the corners used to scale/rotate the image\n      ignoreZoom || (this._setCornerCoords && this._setCornerCoords());\n\n      return this;\n    },\n\n    /**\n     * calculate rotation matrix of an object\n     * @return {Array} rotation matrix for the object\n     */\n    _calcRotateMatrix: function() {\n      if (this.angle) {\n        var theta = degreesToRadians(this.angle), cos = fabric.util.cos(theta), sin = fabric.util.sin(theta);\n        return [cos, sin, -sin, cos, 0, 0];\n      }\n      return fabric.iMatrix.concat();\n    },\n\n    /**\n     * calculate the translation matrix for an object transform\n     * @return {Array} rotation matrix for the object\n     */\n    _calcTranslateMatrix: function() {\n      var center = this.getCenterPoint();\n      return [1, 0, 0, 1, center.x, center.y];\n    },\n\n    transformMatrixKey: function(skipGroup) {\n      var sep = '_', prefix = '';\n      if (!skipGroup && this.group) {\n        prefix = this.group.transformMatrixKey(skipGroup) + sep;\n      };\n      return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY +\n        sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY +\n        sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;\n    },\n\n    /**\n     * calculate trasform Matrix that represent current transformation from\n     * object properties.\n     * @param {Boolean} [skipGroup] return transformMatrix for object and not go upward with parents\n     * @return {Array} matrix Transform Matrix for the object\n     */\n    calcTransformMatrix: function(skipGroup) {\n      if (skipGroup) {\n        return this.calcOwnMatrix();\n      }\n      var key = this.transformMatrixKey(), cache = this.matrixCache || (this.matrixCache = {});\n      if (cache.key === key) {\n        return cache.value;\n      }\n      var matrix = this.calcOwnMatrix();\n      if (this.group) {\n        matrix = multiplyMatrices(this.group.calcTransformMatrix(), matrix);\n      }\n      cache.key = key;\n      cache.value = matrix;\n      return matrix;\n    },\n\n    calcOwnMatrix: function() {\n      var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});\n      if (cache.key === key) {\n        return cache.value;\n      }\n      var matrix = this._calcTranslateMatrix(),\n          rotateMatrix,\n          dimensionMatrix = this._calcDimensionsTransformMatrix(this.skewX, this.skewY, true);\n      if (this.angle) {\n        rotateMatrix = this._calcRotateMatrix();\n        matrix = multiplyMatrices(matrix, rotateMatrix);\n      }\n      matrix = multiplyMatrices(matrix, dimensionMatrix);\n      cache.key = key;\n      cache.value = matrix;\n      return matrix;\n    },\n\n    _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {\n      var skewMatrix,\n          scaleX = this.scaleX * (flipping && this.flipX ? -1 : 1),\n          scaleY = this.scaleY * (flipping && this.flipY ? -1 : 1),\n          scaleMatrix = [scaleX, 0, 0, scaleY, 0, 0];\n      if (skewX) {\n        skewMatrix = [1, 0, Math.tan(degreesToRadians(skewX)), 1];\n        scaleMatrix = multiplyMatrices(scaleMatrix, skewMatrix, true);\n      }\n      if (skewY) {\n        skewMatrix = [1, Math.tan(degreesToRadians(skewY)), 0, 1];\n        scaleMatrix = multiplyMatrices(scaleMatrix, skewMatrix, true);\n      }\n      return scaleMatrix;\n    },\n\n\n    /*\n     * Calculate object dimensions from its properties\n     * @private\n     * @return {Object} .x width dimension\n     * @return {Object} .y height dimension\n     */\n    _getNonTransformedDimensions: function() {\n      var strokeWidth = this.strokeWidth,\n          w = this.width + strokeWidth,\n          h = this.height + strokeWidth;\n      return { x: w, y: h };\n    },\n\n    /*\n     * Calculate object bounding boxdimensions from its properties scale, skew.\n     * @private\n     * @return {Object} .x width dimension\n     * @return {Object} .y height dimension\n     */\n    _getTransformedDimensions: function(skewX, skewY) {\n      if (typeof skewX === 'undefined') {\n        skewX = this.skewX;\n      }\n      if (typeof skewY === 'undefined') {\n        skewY = this.skewY;\n      }\n      var dimensions = this._getNonTransformedDimensions();\n      if (skewX === 0 && skewY === 0) {\n        return { x: dimensions.x * this.scaleX, y: dimensions.y * this.scaleY };\n      }\n      var dimX = dimensions.x / 2, dimY = dimensions.y / 2,\n          points = [\n            {\n              x: -dimX,\n              y: -dimY\n            },\n            {\n              x: dimX,\n              y: -dimY\n            },\n            {\n              x: -dimX,\n              y: dimY\n            },\n            {\n              x: dimX,\n              y: dimY\n            }],\n          i, transformMatrix = this._calcDimensionsTransformMatrix(skewX, skewY, false),\n          bbox;\n      for (i = 0; i < points.length; i++) {\n        points[i] = fabric.util.transformPoint(points[i], transformMatrix);\n      }\n      bbox = fabric.util.makeBoundingBoxFromPoints(points);\n      return { x: bbox.width, y: bbox.height };\n    },\n\n    /*\n     * Calculate object dimensions for controls. include padding and canvas zoom\n     * private\n     */\n    _calculateCurrentDimensions: function()  {\n      var vpt = this.getViewportTransform(),\n          dim = this._getTransformedDimensions(),\n          p = fabric.util.transformPoint(dim, vpt, true);\n\n      return p.scalarAdd(2 * this.padding);\n    },\n  });\n})();\n\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * Moves an object to the bottom of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  sendToBack: function() {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\n    }\n    else {\n      this.canvas.sendToBack(this);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object to the top of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  bringToFront: function() {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\n    }\n    else {\n      this.canvas.bringToFront(this);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object down in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  sendBackwards: function(intersecting) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\n    }\n    else {\n      this.canvas.sendBackwards(this, intersecting);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object up in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  bringForward: function(intersecting) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\n    }\n    else {\n      this.canvas.bringForward(this, intersecting);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object to specified level in stack of drawn objects\n   * @param {Number} index New position of object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  moveTo: function(index) {\n    if (this.group && this.group.type !== 'activeSelection') {\n      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\n    }\n    else {\n      this.canvas.moveTo(this, index);\n    }\n    return this;\n  }\n});\n\n\n/* _TO_SVG_START_ */\n(function() {\n  function getSvgColorString(prop, value) {\n    if (!value) {\n      return prop + ': none; ';\n    }\n    else if (value.toLive) {\n      return prop + ': url(#SVGID_' + value.id + '); ';\n    }\n    else {\n      var color = new fabric.Color(value),\n          str = prop + ': ' + color.toRgb() + '; ',\n          opacity = color.getAlpha();\n      if (opacity !== 1) {\n        //change the color in rgb + opacity\n        str += prop + '-opacity: ' + opacity.toString() + '; ';\n      }\n      return str;\n    }\n  }\n\n  var toFixed = fabric.util.toFixed;\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n    /**\n     * Returns styles-string for svg-export\n     * @param {Boolean} skipShadow a boolean to skip shadow filter output\n     * @return {String}\n     */\n    getSvgStyles: function(skipShadow) {\n\n      var fillRule = this.fillRule ? this.fillRule : 'nonzero',\n          strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n          strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',\n          strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\n          strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n          strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n          strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n          opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n          visibility = this.visible ? '' : ' visibility: hidden;',\n          filter = skipShadow ? '' : this.getSvgFilter(),\n          fill = getSvgColorString('fill', this.fill),\n          stroke = getSvgColorString('stroke', this.stroke);\n\n      return [\n        stroke,\n        'stroke-width: ', strokeWidth, '; ',\n        'stroke-dasharray: ', strokeDashArray, '; ',\n        'stroke-linecap: ', strokeLineCap, '; ',\n        'stroke-dashoffset: ', strokeDashOffset, '; ',\n        'stroke-linejoin: ', strokeLineJoin, '; ',\n        'stroke-miterlimit: ', strokeMiterLimit, '; ',\n        fill,\n        'fill-rule: ', fillRule, '; ',\n        'opacity: ', opacity, ';',\n        filter,\n        visibility\n      ].join('');\n    },\n\n    /**\n     * Returns styles-string for svg-export\n     * @param {Object} style the object from which to retrieve style properties\n     * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n     * @return {String}\n     */\n    getSvgSpanStyles: function(style, useWhiteSpace) {\n      var term = '; ';\n      var fontFamily = style.fontFamily ?\n        'font-family: ' + (((style.fontFamily.indexOf('\\'') === -1 && style.fontFamily.indexOf('\"') === -1) ?\n          '\\'' + style.fontFamily  + '\\'' : style.fontFamily)) + term : '';\n      var strokeWidth = style.strokeWidth ? 'stroke-width: ' + style.strokeWidth + term : '',\n          fontFamily = fontFamily,\n          fontSize = style.fontSize ? 'font-size: ' + style.fontSize + 'px' + term : '',\n          fontStyle = style.fontStyle ? 'font-style: ' + style.fontStyle + term : '',\n          fontWeight = style.fontWeight ? 'font-weight: ' + style.fontWeight + term : '',\n          fill = style.fill ? getSvgColorString('fill', style.fill) : '',\n          stroke = style.stroke ? getSvgColorString('stroke', style.stroke) : '',\n          textDecoration = this.getSvgTextDecoration(style),\n          deltaY = style.deltaY ? 'baseline-shift: ' + (-style.deltaY) + '; ' : '';\n      if (textDecoration) {\n        textDecoration = 'text-decoration: ' + textDecoration + term;\n      }\n\n      return [\n        stroke,\n        strokeWidth,\n        fontFamily,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        textDecoration,\n        fill,\n        deltaY,\n        useWhiteSpace ? 'white-space: pre; ' : ''\n      ].join('');\n    },\n\n    /**\n     * Returns text-decoration property for svg-export\n     * @param {Object} style the object from which to retrieve style properties\n     * @return {String}\n     */\n    getSvgTextDecoration: function(style) {\n      if ('overline' in style || 'underline' in style || 'linethrough' in style) {\n        return (style.overline ? 'overline ' : '') +\n          (style.underline ? 'underline ' : '') + (style.linethrough ? 'line-through ' : '');\n      }\n      return '';\n    },\n\n    /**\n     * Returns filter for svg shadow\n     * @return {String}\n     */\n    getSvgFilter: function() {\n      return this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';\n    },\n\n    /**\n     * Returns id attribute for svg output\n     * @return {String}\n     */\n    getSvgCommons: function() {\n      return [\n        this.id ? 'id=\"' + this.id + '\" ' : '',\n        this.clipPath ? 'clip-path=\"url(#' + this.clipPath.clipPathId + ')\" ' : '',\n      ].join('');\n    },\n\n    /**\n     * Returns transform-string for svg-export\n     * @param {Boolean} use the full transform or the single object one.\n     * @return {String}\n     */\n    getSvgTransform: function(full, additionalTransform) {\n      var transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n          svgTransform = transform.map(function(value) {\n            return toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);\n          }).join(' ');\n      return 'transform=\"matrix(' + svgTransform + ')' +\n        (additionalTransform || '') + this.getSvgTransformMatrix() + '\" ';\n    },\n\n    /**\n     * Returns transform-string for svg-export from the transform matrix of single elements\n     * @return {String}\n     */\n    getSvgTransformMatrix: function() {\n      return this.transformMatrix ? ' matrix(' + this.transformMatrix.join(' ') + ')' : '';\n    },\n\n    _setSVGBg: function(textBgRects) {\n      if (this.backgroundColor) {\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n        textBgRects.push(\n          '\\t\\t<rect ',\n          this._getFillAttributes(this.backgroundColor),\n          ' x=\"',\n          toFixed(-this.width / 2, NUM_FRACTION_DIGITS),\n          '\" y=\"',\n          toFixed(-this.height / 2, NUM_FRACTION_DIGITS),\n          '\" width=\"',\n          toFixed(this.width, NUM_FRACTION_DIGITS),\n          '\" height=\"',\n          toFixed(this.height, NUM_FRACTION_DIGITS),\n          '\"></rect>\\n');\n      }\n    },\n\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      return this._createBaseSVGMarkup(this._toSVG(), { reviver: reviver });\n    },\n\n    /**\n     * Returns svg clipPath representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toClipPathSVG: function(reviver) {\n      return '\\t' + this._createBaseClipPathSVGMarkup(this._toSVG(), { reviver: reviver });\n    },\n\n    /**\n     * @private\n     */\n    _createBaseClipPathSVGMarkup: function(objectMarkup, options) {\n      options = options || {};\n      var reviver = options.reviver,\n          additionalTransform = options.additionalTransform || '',\n          commonPieces = [\n            this.getSvgTransform(true, additionalTransform),\n            this.getSvgCommons(),\n          ].join(''),\n          // insert commons in the markup, style and svgCommons\n          index = objectMarkup.indexOf('COMMON_PARTS');\n      objectMarkup[index] = commonPieces;\n      return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\n    },\n\n    /**\n     * @private\n     */\n    _createBaseSVGMarkup: function(objectMarkup, options) {\n      options = options || {};\n      var noStyle = options.noStyle, withShadow = options.withShadow,\n          reviver = options.reviver,\n          styleInfo = noStyle ? '' : 'style=\"' + this.getSvgStyles() + '\" ',\n          shadowInfo = withShadow ? 'style=\"' + this.getSvgFilter() + '\" ' : '',\n          clipPath = this.clipPath,\n          absoluteClipPath = this.clipPath && this.clipPath.absolutePositioned,\n          commonPieces, markup = [], clipPathMarkup,\n          // insert commons in the markup, style and svgCommons\n          index = objectMarkup.indexOf('COMMON_PARTS'),\n          additionalTransform = options.additionalTransform;\n      if (clipPath) {\n        clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;\n        clipPathMarkup = '<clipPath id=\"' + clipPath.clipPathId + '\" >\\n' +\n          this.clipPath.toClipPathSVG(reviver) +\n          '</clipPath>\\n';\n      }\n      if (absoluteClipPath) {\n        markup.push(\n          '<g ', shadowInfo, this.getSvgCommons(), ' >\\n'\n        );\n      }\n      markup.push(\n        '<g ',\n        this.getSvgTransform(false),\n        !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\n        ' >\\n'\n      );\n      commonPieces = [\n        styleInfo,\n        noStyle ? '' : this.addPaintOrder(), ' ',\n        additionalTransform ? 'transform=\"' + additionalTransform + '\" ' : '',\n      ].join('');\n      objectMarkup[index] = commonPieces;\n      if (this.fill && this.fill.toLive) {\n        markup.push(this.fill.toSVG(this, false));\n      }\n      if (this.stroke && this.stroke.toLive) {\n        markup.push(this.stroke.toSVG(this, false));\n      }\n      if (this.shadow) {\n        markup.push(this.shadow.toSVG(this));\n      }\n      if (clipPath) {\n        markup.push(clipPathMarkup);\n      }\n      markup.push(objectMarkup.join(''));\n      markup.push('</g>\\n');\n      absoluteClipPath && markup.push('</g>\\n');\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n\n    addPaintOrder: function() {\n      return this.paintFirst !== 'fill' ? ' paint-order=\"' + this.paintFirst + '\" ' : '';\n    }\n  });\n})();\n/* _TO_SVG_END_ */\n\n\n(function() {\n\n  var extend = fabric.util.object.extend,\n      originalSet = 'stateProperties';\n\n  /*\n    Depends on `stateProperties`\n  */\n  function saveProps(origin, destination, props) {\n    var tmpObj = { }, deep = true;\n    props.forEach(function(prop) {\n      tmpObj[prop] = origin[prop];\n    });\n    extend(origin[destination], tmpObj, deep);\n  }\n\n  function _isEqual(origValue, currentValue, firstPass) {\n    if (origValue === currentValue) {\n      // if the objects are identical, return\n      return true;\n    }\n    else if (Array.isArray(origValue)) {\n      if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {\n        return false;\n      }\n      for (var i = 0, len = origValue.length; i < len; i++) {\n        if (!_isEqual(origValue[i], currentValue[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else if (origValue && typeof origValue === 'object') {\n      var keys = Object.keys(origValue), key;\n      if (!currentValue ||\n          typeof currentValue !== 'object' ||\n          (!firstPass && keys.length !== Object.keys(currentValue).length)\n      ) {\n        return false;\n      }\n      for (var i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        // since clipPath is in the statefull cache list and the clipPath objects\n        // would be iterated as an object, this would lead to possible infinite recursion\n        if (key === 'canvas') {\n          continue;\n        }\n        if (!_isEqual(origValue[key], currentValue[key])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Returns true if object state (one of its state properties) was changed\n     * @param {String} [propertySet] optional name for the set of property we want to save\n     * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\n     */\n    hasStateChanged: function(propertySet) {\n      propertySet = propertySet || originalSet;\n      var dashedPropertySet = '_' + propertySet;\n      if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {\n        return true;\n      }\n      return !_isEqual(this[dashedPropertySet], this, true);\n    },\n\n    /**\n     * Saves state of an object\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n     * @return {fabric.Object} thisArg\n     */\n    saveState: function(options) {\n      var propertySet = options && options.propertySet || originalSet,\n          destination = '_' + propertySet;\n      if (!this[destination]) {\n        return this.setupState(options);\n      }\n      saveProps(this, destination, this[propertySet]);\n      if (options && options.stateProperties) {\n        saveProps(this, destination, options.stateProperties);\n      }\n      return this;\n    },\n\n    /**\n     * Setups state of an object\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n     * @return {fabric.Object} thisArg\n     */\n    setupState: function(options) {\n      options = options || { };\n      var propertySet = options.propertySet || originalSet;\n      options.propertySet = propertySet;\n      this['_' + propertySet] = { };\n      this.saveState(options);\n      return this;\n    }\n  });\n})();\n\n\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians;\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * The object interactivity controls.\n     * @private\n     */\n    _controlsVisibility: null,\n\n    /**\n     * Determines which corner has been clicked\n     * @private\n     * @param {Object} pointer The pointer indicating the mouse position\n     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\n     */\n    _findTargetCorner: function(pointer) {\n      // objects in group, anykind, are not self modificable,\n      // must not return an hovered corner.\n      if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {\n        return false;\n      }\n\n      var ex = pointer.x,\n          ey = pointer.y,\n          xPoints,\n          lines;\n      this.__corner = 0;\n      for (var i in this.oCoords) {\n\n        if (!this.isControlVisible(i)) {\n          continue;\n        }\n\n        if (i === 'mtr' && !this.hasRotatingPoint) {\n          continue;\n        }\n\n        if (this.get('lockUniScaling') &&\n           (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {\n          continue;\n        }\n\n        lines = this._getImageLines(this.oCoords[i].corner);\n\n        // debugging\n\n        // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n\n        xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\n        if (xPoints !== 0 && xPoints % 2 === 1) {\n          this.__corner = i;\n          return i;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Sets the coordinates of the draggable boxes in the corners of\n     * the image used to scale/rotate it.\n     * @private\n     */\n    _setCornerCoords: function() {\n      var coords = this.oCoords,\n          newTheta = degreesToRadians(45 - this.angle),\n          /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */\n          /* 0.707106 stands for sqrt(2)/2 */\n          cornerHypotenuse = this.cornerSize * 0.707106,\n          cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta),\n          sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta),\n          x, y;\n\n      for (var point in coords) {\n        x = coords[point].x;\n        y = coords[point].y;\n        coords[point].corner = {\n          tl: {\n            x: x - sinHalfOffset,\n            y: y - cosHalfOffset\n          },\n          tr: {\n            x: x + cosHalfOffset,\n            y: y - sinHalfOffset\n          },\n          bl: {\n            x: x - cosHalfOffset,\n            y: y + sinHalfOffset\n          },\n          br: {\n            x: x + sinHalfOffset,\n            y: y + cosHalfOffset\n          }\n        };\n      }\n    },\n\n    /**\n     * Draws a colored layer behind the object, inside its selection borders.\n     * Requires public options: padding, selectionBackgroundColor\n     * this function is called when the context is transformed\n     * has checks to be skipped when the object is on a staticCanvas\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawSelectionBackground: function(ctx) {\n      if (!this.selectionBackgroundColor ||\n        (this.canvas && !this.canvas.interactive) ||\n        (this.canvas && this.canvas._activeObject !== this)\n      ) {\n        return this;\n      }\n      ctx.save();\n      var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(),\n          vpt = this.canvas.viewportTransform;\n      ctx.translate(center.x, center.y);\n      ctx.scale(1 / vpt[0], 1 / vpt[3]);\n      ctx.rotate(degreesToRadians(this.angle));\n      ctx.fillStyle = this.selectionBackgroundColor;\n      ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws borders of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: padding, borderColor\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawBorders: function(ctx, styleOverride) {\n      styleOverride = styleOverride || {};\n      var wh = this._calculateCurrentDimensions(),\n          strokeWidth = 1 / this.borderScaleFactor,\n          width = wh.x + strokeWidth,\n          height = wh.y + strokeWidth,\n          drawRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\n            styleOverride.hasRotatingPoint : this.hasRotatingPoint,\n          hasControls = typeof styleOverride.hasControls !== 'undefined' ?\n            styleOverride.hasControls : this.hasControls,\n          rotatingPointOffset = typeof styleOverride.rotatingPointOffset !== 'undefined' ?\n            styleOverride.rotatingPointOffset : this.rotatingPointOffset;\n\n      ctx.save();\n      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\n\n      ctx.strokeRect(\n        -width / 2,\n        -height / 2,\n        width,\n        height\n      );\n\n      if (drawRotatingPoint && this.isControlVisible('mtr') && hasControls) {\n\n        var rotateHeight = -height / 2;\n\n        ctx.beginPath();\n        ctx.moveTo(0, rotateHeight);\n        ctx.lineTo(0, rotateHeight - rotatingPointOffset);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws borders of an object's bounding box when it is inside a group.\n     * Requires public properties: width, height\n     * Requires public options: padding, borderColor\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {object} options object representing current object parameters\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawBordersInGroup: function(ctx, options, styleOverride) {\n      styleOverride = styleOverride || {};\n      var p = this._getNonTransformedDimensions(),\n          matrix = fabric.util.customTransformMatrix(options.scaleX, options.scaleY, options.skewX),\n          wh = fabric.util.transformPoint(p, matrix),\n          strokeWidth = 1 / this.borderScaleFactor,\n          width = wh.x + strokeWidth,\n          height = wh.y + strokeWidth;\n\n      ctx.save();\n      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\n      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n\n      ctx.strokeRect(\n        -width / 2,\n        -height / 2,\n        width,\n        height\n      );\n\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws corners of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: cornerSize, padding\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawControls: function(ctx, styleOverride) {\n      styleOverride = styleOverride || {};\n      var wh = this._calculateCurrentDimensions(),\n          width = wh.x,\n          height = wh.y,\n          scaleOffset = styleOverride.cornerSize || this.cornerSize,\n          left = -(width + scaleOffset) / 2,\n          top = -(height + scaleOffset) / 2,\n          transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?\n            styleOverride.transparentCorners : this.transparentCorners,\n          hasRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\n            styleOverride.hasRotatingPoint : this.hasRotatingPoint,\n          methodName = transparentCorners ? 'stroke' : 'fill';\n\n      ctx.save();\n      ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;\n      if (!this.transparentCorners) {\n        ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;\n      }\n      this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray, null);\n\n      // top-left\n      this._drawControl('tl', ctx, methodName,\n        left,\n        top, styleOverride);\n\n      // top-right\n      this._drawControl('tr', ctx, methodName,\n        left + width,\n        top, styleOverride);\n\n      // bottom-left\n      this._drawControl('bl', ctx, methodName,\n        left,\n        top + height, styleOverride);\n\n      // bottom-right\n      this._drawControl('br', ctx, methodName,\n        left + width,\n        top + height, styleOverride);\n\n      if (!this.get('lockUniScaling')) {\n\n        // middle-top\n        this._drawControl('mt', ctx, methodName,\n          left + width / 2,\n          top, styleOverride);\n\n        // middle-bottom\n        this._drawControl('mb', ctx, methodName,\n          left + width / 2,\n          top + height, styleOverride);\n\n        // middle-right\n        this._drawControl('mr', ctx, methodName,\n          left + width,\n          top + height / 2, styleOverride);\n\n        // middle-left\n        this._drawControl('ml', ctx, methodName,\n          left,\n          top + height / 2, styleOverride);\n      }\n\n      // middle-top-rotate\n      if (hasRotatingPoint) {\n        this._drawControl('mtr', ctx, methodName,\n          left + width / 2,\n          top - this.rotatingPointOffset, styleOverride);\n      }\n\n      ctx.restore();\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _drawControl: function(control, ctx, methodName, left, top, styleOverride) {\n      styleOverride = styleOverride || {};\n      if (!this.isControlVisible(control)) {\n        return;\n      }\n      var size = this.cornerSize, stroke = !this.transparentCorners && this.cornerStrokeColor;\n      switch (styleOverride.cornerStyle || this.cornerStyle) {\n        case 'circle':\n          ctx.beginPath();\n          ctx.arc(left + size / 2, top + size / 2, size / 2, 0, 2 * Math.PI, false);\n          ctx[methodName]();\n          if (stroke) {\n            ctx.stroke();\n          }\n          break;\n        default:\n          this.transparentCorners || ctx.clearRect(left, top, size, size);\n          ctx[methodName + 'Rect'](left, top, size, size);\n          if (stroke) {\n            ctx.strokeRect(left, top, size, size);\n          }\n      }\n    },\n\n    /**\n     * Returns true if the specified control is visible, false otherwise.\n     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @returns {Boolean} true if the specified control is visible, false otherwise\n     */\n    isControlVisible: function(controlName) {\n      return this._getControlsVisibility()[controlName];\n    },\n\n    /**\n     * Sets the visibility of the specified control.\n     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @param {Boolean} visible true to set the specified control visible, false otherwise\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setControlVisible: function(controlName, visible) {\n      this._getControlsVisibility()[controlName] = visible;\n      return this;\n    },\n\n    /**\n     * Sets the visibility state of object controls.\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\n     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\n     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\n     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\n     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\n     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\n     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\n     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setControlsVisibility: function(options) {\n      options || (options = { });\n\n      for (var p in options) {\n        this.setControlVisible(p, options[p]);\n      }\n      return this;\n    },\n\n    /**\n     * Returns the instance of the control visibility set for this object.\n     * @private\n     * @returns {Object}\n     */\n    _getControlsVisibility: function() {\n      if (!this._controlsVisibility) {\n        this._controlsVisibility = {\n          tl: true,\n          tr: true,\n          br: true,\n          bl: true,\n          ml: true,\n          mt: true,\n          mr: true,\n          mb: true,\n          mtr: true\n        };\n      }\n      return this._controlsVisibility;\n    },\n\n    /**\n     * This callback function is called every time _discardActiveObject or _setActiveObject\n     * try to to deselect this object. If the function returns true, the process is cancelled\n     * @param {Object} [options] options sent from the upper functions\n     * @param {Event} [options.e] event if the process is generated by an event\n     */\n    onDeselect: function() {\n      // implemented by sub-classes, as needed.\n    },\n\n\n    /**\n     * This callback function is called every time _discardActiveObject or _setActiveObject\n     * try to to select this object. If the function returns true, the process is cancelled\n     * @param {Object} [options] options sent from the upper functions\n     * @param {Event} [options.e] event if the process is generated by an event\n     */\n    onSelect: function() {\n      // implemented by sub-classes, as needed.\n    }\n  });\n})();\n\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Animation duration (in ms) for fx* methods\n   * @type Number\n   * @default\n   */\n  FX_DURATION: 500,\n\n  /**\n   * Centers object horizontally with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxCenterObjectH: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.left,\n      endValue: this.getCenter().left,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('left', value);\n        _this.requestRenderAll();\n        onChange();\n      },\n      onComplete: function() {\n        object.setCoords();\n        onComplete();\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * Centers object vertically with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxCenterObjectV: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.top,\n      endValue: this.getCenter().top,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('top', value);\n        _this.requestRenderAll();\n        onChange();\n      },\n      onComplete: function() {\n        object.setCoords();\n        onComplete();\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * Same as `fabric.Canvas#remove` but animated\n   * @param {fabric.Object} object Object to remove\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxRemove: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.opacity,\n      endValue: 0,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('opacity', value);\n        _this.requestRenderAll();\n        onChange();\n      },\n      onComplete: function () {\n        _this.remove(object);\n        onComplete();\n      }\n    });\n\n    return this;\n  }\n});\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n  /**\n   * Animates object's properties\n   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\n   * @param {Number|Object} value Value to animate property to (if string was given first) or options object\n   * @return {fabric.Object} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @chainable\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   *\n   * As string — one property\n   *\n   * object.animate('left', ...);\n   * object.animate('left', { duration: ... });\n   *\n   */\n  animate: function() {\n    if (arguments[0] && typeof arguments[0] === 'object') {\n      var propsToAnimate = [], prop, skipCallbacks;\n      for (prop in arguments[0]) {\n        propsToAnimate.push(prop);\n      }\n      for (var i = 0, len = propsToAnimate.length; i < len; i++) {\n        prop = propsToAnimate[i];\n        skipCallbacks = i !== len - 1;\n        this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);\n      }\n    }\n    else {\n      this._animate.apply(this, arguments);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   * @param {String} property Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\n   */\n  _animate: function(property, to, options, skipCallbacks) {\n    var _this = this, propPair;\n\n    to = to.toString();\n\n    if (!options) {\n      options = { };\n    }\n    else {\n      options = fabric.util.object.clone(options);\n    }\n\n    if (~property.indexOf('.')) {\n      propPair = property.split('.');\n    }\n\n    var currentValue = propPair\n      ? this.get(propPair[0])[propPair[1]]\n      : this.get(property);\n\n    if (!('from' in options)) {\n      options.from = currentValue;\n    }\n\n    if (~to.indexOf('=')) {\n      to = currentValue + parseFloat(to.replace('=', ''));\n    }\n    else {\n      to = parseFloat(to);\n    }\n\n    fabric.util.animate({\n      startValue: options.from,\n      endValue: to,\n      byValue: options.by,\n      easing: options.easing,\n      duration: options.duration,\n      abort: options.abort && function() {\n        return options.abort.call(_this);\n      },\n      onChange: function(value, valueProgress, timeProgress) {\n        if (propPair) {\n          _this[propPair[0]][propPair[1]] = value;\n        }\n        else {\n          _this.set(property, value);\n        }\n        if (skipCallbacks) {\n          return;\n        }\n        options.onChange && options.onChange(value, valueProgress, timeProgress);\n      },\n      onComplete: function(value, valueProgress, timeProgress) {\n        if (skipCallbacks) {\n          return;\n        }\n\n        _this.setCoords();\n        options.onComplete && options.onComplete(value, valueProgress, timeProgress);\n      }\n    });\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone,\n      coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },\n      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\n  if (fabric.Line) {\n    fabric.warn('fabric.Line is already defined');\n    return;\n  }\n\n  /**\n   * Line class\n   * @class fabric.Line\n   * @extends fabric.Object\n   * @see {@link fabric.Line#initialize} for constructor definition\n   */\n  fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'line',\n\n    /**\n     * x value or first line edge\n     * @type Number\n     * @default\n     */\n    x1: 0,\n\n    /**\n     * y value or first line edge\n     * @type Number\n     * @default\n     */\n    y1: 0,\n\n    /**\n     * x value or second line edge\n     * @type Number\n     * @default\n     */\n    x2: 0,\n\n    /**\n     * y value or second line edge\n     * @type Number\n     * @default\n     */\n    y2: 0,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('x1', 'x2', 'y1', 'y2'),\n\n    /**\n     * Constructor\n     * @param {Array} [points] Array of points\n     * @param {Object} [options] Options object\n     * @return {fabric.Line} thisArg\n     */\n    initialize: function(points, options) {\n      if (!points) {\n        points = [0, 0, 0, 0];\n      }\n\n      this.callSuper('initialize', options);\n\n      this.set('x1', points[0]);\n      this.set('y1', points[1]);\n      this.set('x2', points[2]);\n      this.set('y2', points[3]);\n\n      this._setWidthHeight(options);\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options\n     */\n    _setWidthHeight: function(options) {\n      options || (options = { });\n\n      this.width = Math.abs(this.x2 - this.x1);\n      this.height = Math.abs(this.y2 - this.y1);\n\n      this.left = 'left' in options\n        ? options.left\n        : this._getLeftToOriginX();\n\n      this.top = 'top' in options\n        ? options.top\n        : this._getTopToOriginY();\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {*} value\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n      if (typeof coordProps[key] !== 'undefined') {\n        this._setWidthHeight();\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.\n     */\n    _getLeftToOriginX: makeEdgeToOriginGetter(\n      { // property names\n        origin: 'originX',\n        axis1: 'x1',\n        axis2: 'x2',\n        dimension: 'width'\n      },\n      { // possible values of origin\n        nearest: 'left',\n        center: 'center',\n        farthest: 'right'\n      }\n    ),\n\n    /**\n     * @private\n     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.\n     */\n    _getTopToOriginY: makeEdgeToOriginGetter(\n      { // property names\n        origin: 'originY',\n        axis1: 'y1',\n        axis2: 'y2',\n        dimension: 'height'\n      },\n      { // possible values of origin\n        nearest: 'top',\n        center: 'center',\n        farthest: 'bottom'\n      }\n    ),\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      ctx.beginPath();\n\n      if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {\n        // move from center (of virtual box) to its left/top corner\n        // we can't assume x1, y1 is top left and x2, y2 is bottom right\n        var p = this.calcLinePoints();\n        ctx.moveTo(p.x1, p.y1);\n        ctx.lineTo(p.x2, p.y2);\n      }\n\n      ctx.lineWidth = this.strokeWidth;\n\n      // TODO: test this\n      // make sure setting \"fill\" changes color of a line\n      // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n      var origStrokeStyle = ctx.strokeStyle;\n      ctx.strokeStyle = this.stroke || ctx.fillStyle;\n      this.stroke && this._renderStroke(ctx);\n      ctx.strokeStyle = origStrokeStyle;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var p = this.calcLinePoints();\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /**\n     * This function is an helper for svg import. it returns the center of the object in the svg\n     * untransformed coordinates\n     * @private\n     * @return {Object} center point from element coordinates\n     */\n    _findCenterFromElement: function() {\n      return {\n        x: (this.x1 + this.x2) / 2,\n        y: (this.y1 + this.y2) / 2,\n      };\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @methd toObject\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());\n    },\n\n    /*\n     * Calculate object dimensions from its properties\n     * @private\n     */\n    _getNonTransformedDimensions: function() {\n      var dim = this.callSuper('_getNonTransformedDimensions');\n      if (this.strokeLineCap === 'butt') {\n        if (this.width === 0) {\n          dim.y -= this.strokeWidth;\n        }\n        if (this.height === 0) {\n          dim.x -= this.strokeWidth;\n        }\n      }\n      return dim;\n    },\n\n    /**\n     * Recalculates line points given width and height\n     * @private\n     */\n    calcLinePoints: function() {\n      var xMult = this.x1 <= this.x2 ? -1 : 1,\n          yMult = this.y1 <= this.y2 ? -1 : 1,\n          x1 = (xMult * this.width * 0.5),\n          y1 = (yMult * this.height * 0.5),\n          x2 = (xMult * this.width * -0.5),\n          y2 = (yMult * this.height * -0.5);\n\n      return {\n        x1: x1,\n        x2: x2,\n        y1: y1,\n        y2: y2\n      };\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var p = this.calcLinePoints();\n      return [\n        '<line ', 'COMMON_PARTS',\n        'x1=\"', p.x1,\n        '\" y1=\"', p.y1,\n        '\" x2=\"', p.x2,\n        '\" y2=\"', p.y2,\n        '\" />\\n'\n      ];\n    },\n    /* _TO_SVG_END_ */\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})\n   * @static\n   * @memberOf fabric.Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));\n\n  /**\n   * Returns fabric.Line instance from an SVG element\n   * @static\n   * @memberOf fabric.Line\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] callback function invoked after parsing\n   */\n  fabric.Line.fromElement = function(element, callback, options) {\n    options = options || { };\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),\n        points = [\n          parsedAttributes.x1 || 0,\n          parsedAttributes.y1 || 0,\n          parsedAttributes.x2 || 0,\n          parsedAttributes.y2 || 0\n        ];\n    callback(new fabric.Line(points, extend(parsedAttributes, options)));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Line instance from an object representation\n   * @static\n   * @memberOf fabric.Line\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] invoked with new instance as first argument\n   */\n  fabric.Line.fromObject = function(object, callback) {\n    function _callback(instance) {\n      delete instance.points;\n      callback && callback(instance);\n    };\n    var options = clone(object, true);\n    options.points = [object.x1, object.y1, object.x2, object.y2];\n    fabric.Object._fromObject('Line', options, _callback, 'points');\n  };\n\n  /**\n   * Produces a function that calculates distance from canvas edge to Line origin.\n   */\n  function makeEdgeToOriginGetter(propertyNames, originValues) {\n    var origin = propertyNames.origin,\n        axis1 = propertyNames.axis1,\n        axis2 = propertyNames.axis2,\n        dimension = propertyNames.dimension,\n        nearest = originValues.nearest,\n        center = originValues.center,\n        farthest = originValues.farthest;\n\n    return function() {\n      switch (this.get(origin)) {\n        case nearest:\n          return Math.min(this.get(axis1), this.get(axis2));\n        case center:\n          return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));\n        case farthest:\n          return Math.max(this.get(axis1), this.get(axis2));\n      }\n    };\n\n  }\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      pi = Math.PI;\n\n  if (fabric.Circle) {\n    fabric.warn('fabric.Circle is already defined.');\n    return;\n  }\n\n  /**\n   * Circle class\n   * @class fabric.Circle\n   * @extends fabric.Object\n   * @see {@link fabric.Circle#initialize} for constructor definition\n   */\n  fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'circle',\n\n    /**\n     * Radius of this circle\n     * @type Number\n     * @default\n     */\n    radius: 0,\n\n    /**\n     * Start angle of the circle, moving clockwise\n     * deprectated type, this should be in degree, this was an oversight.\n     * probably will change to degrees in next major version\n     * @type Number\n     * @default 0\n     */\n    startAngle: 0,\n\n    /**\n     * End angle of the circle\n     * deprectated type, this should be in degree, this was an oversight.\n     * probably will change to degrees in next major version\n     * @type Number\n     * @default 2Pi\n     */\n    endAngle: pi * 2,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('radius', 'startAngle', 'endAngle'),\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {*} value\n     * @return {fabric.Circle} thisArg\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n\n      if (key === 'radius') {\n        this.setRadius(value);\n      }\n\n      return this;\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return this.callSuper('toObject', ['radius', 'startAngle', 'endAngle'].concat(propertiesToInclude));\n    },\n\n    /* _TO_SVG_START_ */\n\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var svgString, x = 0, y = 0,\n          angle = (this.endAngle - this.startAngle) % ( 2 * pi);\n\n      if (angle === 0) {\n        svgString = [\n          '<circle ', 'COMMON_PARTS',\n          'cx=\"' + x + '\" cy=\"' + y + '\" ',\n          'r=\"', this.radius,\n          '\" />\\n'\n        ];\n      }\n      else {\n        var startX = fabric.util.cos(this.startAngle) * this.radius,\n            startY = fabric.util.sin(this.startAngle) * this.radius,\n            endX = fabric.util.cos(this.endAngle) * this.radius,\n            endY = fabric.util.sin(this.endAngle) * this.radius,\n            largeFlag = angle > pi ? '1' : '0';\n        svgString = [\n          '<path d=\"M ' + startX + ' ' + startY,\n          ' A ' + this.radius + ' ' + this.radius,\n          ' 0 ', +largeFlag + ' 1', ' ' + endX + ' ' + endY,\n          '\"', 'COMMON_PARTS', ' />\\n'\n        ];\n      }\n      return svgString;\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render on\n     */\n    _render: function(ctx) {\n      ctx.beginPath();\n      ctx.arc(\n        0,\n        0,\n        this.radius,\n        this.startAngle,\n        this.endAngle, false);\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * Returns horizontal radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRadiusX: function() {\n      return this.get('radius') * this.get('scaleX');\n    },\n\n    /**\n     * Returns vertical radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRadiusY: function() {\n      return this.get('radius') * this.get('scaleY');\n    },\n\n    /**\n     * Sets radius of an object (and updates width accordingly)\n     * @return {fabric.Circle} thisArg\n     */\n    setRadius: function(value) {\n      this.radius = value;\n      return this.set('width', value * 2).set('height', value * 2);\n    },\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})\n   * @static\n   * @memberOf fabric.Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));\n\n  /**\n   * Returns {@link fabric.Circle} instance from an SVG element\n   * @static\n   * @memberOf fabric.Circle\n   * @param {SVGElement} element Element to parse\n   * @param {Function} [callback] Options callback invoked after parsing is finished\n   * @param {Object} [options] Options object\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   */\n  fabric.Circle.fromElement = function(element, callback) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);\n\n    if (!isValidRadius(parsedAttributes)) {\n      throw new Error('value of `r` attribute is required and can not be negative');\n    }\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;\n    callback(new fabric.Circle(parsedAttributes));\n  };\n\n  /**\n   * @private\n   */\n  function isValidRadius(attributes) {\n    return (('radius' in attributes) && (attributes.radius >= 0));\n  }\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Circle} instance from an object representation\n   * @static\n   * @memberOf fabric.Circle\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] invoked with new instance as first argument\n   * @return {Object} Instance of fabric.Circle\n   */\n  fabric.Circle.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Circle', object, callback);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Triangle) {\n    fabric.warn('fabric.Triangle is already defined');\n    return;\n  }\n\n  /**\n   * Triangle class\n   * @class fabric.Triangle\n   * @extends fabric.Object\n   * @return {fabric.Triangle} thisArg\n   * @see {@link fabric.Triangle#initialize} for constructor definition\n   */\n  fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'triangle',\n\n    /**\n     * Width is set to 100 to compensate the old initialize code that was setting it to 100\n     * @type Number\n     * @default\n     */\n    width: 100,\n\n    /**\n     * Height is set to 100 to compensate the old initialize code that was setting it to 100\n     * @type Number\n     * @default\n     */\n    height: 100,\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      var widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2;\n\n      ctx.beginPath();\n      ctx.moveTo(-widthBy2, heightBy2);\n      ctx.lineTo(0, -heightBy2);\n      ctx.lineTo(widthBy2, heightBy2);\n      ctx.closePath();\n\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2;\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2,\n          points = [\n            -widthBy2 + ' ' + heightBy2,\n            '0 ' + -heightBy2,\n            widthBy2 + ' ' + heightBy2\n          ].join(',');\n      return [\n        '<polygon ', 'COMMON_PARTS',\n        'points=\"', points,\n        '\" />'\n      ];\n    },\n    /* _TO_SVG_END_ */\n  });\n\n  /**\n   * Returns {@link fabric.Triangle} instance from an object representation\n   * @static\n   * @memberOf fabric.Triangle\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] invoked with new instance as first argument\n   */\n  fabric.Triangle.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Triangle', object, callback);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      piBy2   = Math.PI * 2;\n\n  if (fabric.Ellipse) {\n    fabric.warn('fabric.Ellipse is already defined.');\n    return;\n  }\n\n  /**\n   * Ellipse class\n   * @class fabric.Ellipse\n   * @extends fabric.Object\n   * @return {fabric.Ellipse} thisArg\n   * @see {@link fabric.Ellipse#initialize} for constructor definition\n   */\n  fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'ellipse',\n\n    /**\n     * Horizontal radius\n     * @type Number\n     * @default\n     */\n    rx:   0,\n\n    /**\n     * Vertical radius\n     * @type Number\n     * @default\n     */\n    ry:   0,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {fabric.Ellipse} thisArg\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      this.set('rx', options && options.rx || 0);\n      this.set('ry', options && options.ry || 0);\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {*} value\n     * @return {fabric.Ellipse} thisArg\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n      switch (key) {\n\n        case 'rx':\n          this.rx = value;\n          this.set('width', value * 2);\n          break;\n\n        case 'ry':\n          this.ry = value;\n          this.set('height', value * 2);\n          break;\n\n      }\n      return this;\n    },\n\n    /**\n     * Returns horizontal radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRx: function() {\n      return this.get('rx') * this.get('scaleX');\n    },\n\n    /**\n     * Returns Vertical radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRy: function() {\n      return this.get('ry') * this.get('scaleY');\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      return [\n        '<ellipse ', 'COMMON_PARTS',\n        'cx=\"0\" cy=\"0\" ',\n        'rx=\"', this.rx,\n        '\" ry=\"', this.ry,\n        '\" />\\n'\n      ];\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render on\n     */\n    _render: function(ctx) {\n      ctx.beginPath();\n      ctx.save();\n      ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n      ctx.arc(\n        0,\n        0,\n        this.rx,\n        0,\n        piBy2,\n        false);\n      ctx.restore();\n      this._renderPaintInOrder(ctx);\n    },\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})\n   * @static\n   * @memberOf fabric.Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));\n\n  /**\n   * Returns {@link fabric.Ellipse} instance from an SVG element\n   * @static\n   * @memberOf fabric.Ellipse\n   * @param {SVGElement} element Element to parse\n   * @param {Function} [callback] Options callback invoked after parsing is finished\n   * @return {fabric.Ellipse}\n   */\n  fabric.Ellipse.fromElement = function(element, callback) {\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n    callback(new fabric.Ellipse(parsedAttributes));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Ellipse} instance from an object representation\n   * @static\n   * @memberOf fabric.Ellipse\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] invoked with new instance as first argument\n   * @return {fabric.Ellipse}\n   */\n  fabric.Ellipse.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Ellipse', object, callback);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  if (fabric.Rect) {\n    fabric.warn('fabric.Rect is already defined');\n    return;\n  }\n\n  /**\n   * Rectangle class\n   * @class fabric.Rect\n   * @extends fabric.Object\n   * @return {fabric.Rect} thisArg\n   * @see {@link fabric.Rect#initialize} for constructor definition\n   */\n  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\n\n    /**\n     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: fabric.Object.prototype.stateProperties.concat('rx', 'ry'),\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'rect',\n\n    /**\n     * Horizontal border radius\n     * @type Number\n     * @default\n     */\n    rx:   0,\n\n    /**\n     * Vertical border radius\n     * @type Number\n     * @default\n     */\n    ry:   0,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      this._initRxRy();\n    },\n\n    /**\n     * Initializes rx/ry attributes\n     * @private\n     */\n    _initRxRy: function() {\n      if (this.rx && !this.ry) {\n        this.ry = this.rx;\n      }\n      else if (this.ry && !this.rx) {\n        this.rx = this.ry;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n\n      // 1x1 case (used in spray brush) optimization was removed because\n      // with caching and higher zoom level this makes more damage than help\n\n      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\n          ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\n          w = this.width,\n          h = this.height,\n          x = -this.width / 2,\n          y = -this.height / 2,\n          isRounded = rx !== 0 || ry !== 0,\n          /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\n          k = 1 - 0.5522847498;\n      ctx.beginPath();\n\n      ctx.moveTo(x + rx, y);\n\n      ctx.lineTo(x + w - rx, y);\n      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\n\n      ctx.lineTo(x + w, y + h - ry);\n      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\n\n      ctx.lineTo(x + rx, y + h);\n      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\n\n      ctx.lineTo(x, y + ry);\n      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\n\n      ctx.closePath();\n\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var x = -this.width / 2,\n          y = -this.height / 2,\n          w = this.width,\n          h = this.height;\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var x = -this.width / 2, y = -this.height / 2;\n      return [\n        '<rect ', 'COMMON_PARTS',\n        'x=\"', x, '\" y=\"', y,\n        '\" rx=\"', this.rx, '\" ry=\"', this.ry,\n        '\" width=\"', this.width, '\" height=\"', this.height,\n        '\" />\\n'\n      ];\n    },\n    /* _TO_SVG_END_ */\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)\n   * @static\n   * @memberOf fabric.Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));\n\n  /**\n   * Returns {@link fabric.Rect} instance from an SVG element\n   * @static\n   * @memberOf fabric.Rect\n   * @param {SVGElement} element Element to parse\n   * @param {Function} callback callback function invoked after parsing\n   * @param {Object} [options] Options object\n   */\n  fabric.Rect.fromElement = function(element, callback, options) {\n    if (!element) {\n      return callback(null);\n    }\n    options = options || { };\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);\n\n    parsedAttributes.left = parsedAttributes.left || 0;\n    parsedAttributes.top  = parsedAttributes.top  || 0;\n    var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n    rect.visible = rect.visible && rect.width > 0 && rect.height > 0;\n    callback(rect);\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Rect} instance from an object representation\n   * @static\n   * @memberOf fabric.Rect\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created\n   */\n  fabric.Rect.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Rect', object, callback);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      toFixed = fabric.util.toFixed;\n\n  if (fabric.Polyline) {\n    fabric.warn('fabric.Polyline is already defined');\n    return;\n  }\n\n  /**\n   * Polyline class\n   * @class fabric.Polyline\n   * @extends fabric.Object\n   * @see {@link fabric.Polyline#initialize} for constructor definition\n   */\n  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'polyline',\n\n    /**\n     * Points array\n     * @type Array\n     * @default\n     */\n    points: null,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('points'),\n\n    /**\n     * Constructor\n     * @param {Array} points Array of points (where each point is an object with x and y)\n     * @param {Object} [options] Options object\n     * @return {fabric.Polyline} thisArg\n     * @example\n     * var poly = new fabric.Polyline([\n     *     { x: 10, y: 10 },\n     *     { x: 50, y: 30 },\n     *     { x: 40, y: 70 },\n     *     { x: 60, y: 50 },\n     *     { x: 100, y: 150 },\n     *     { x: 40, y: 100 }\n     *   ], {\n     *   stroke: 'red',\n     *   left: 100,\n     *   top: 100\n     * });\n     */\n    initialize: function(points, options) {\n      options = options || {};\n      this.points = points || [];\n      this.callSuper('initialize', options);\n      var calcDim = this._calcDimensions();\n      if (typeof options.left === 'undefined') {\n        this.left = calcDim.left;\n      }\n      if (typeof options.top === 'undefined') {\n        this.top = calcDim.top;\n      }\n      this.width = calcDim.width;\n      this.height = calcDim.height;\n      this.pathOffset = {\n        x: calcDim.left + this.width / 2,\n        y: calcDim.top + this.height / 2\n      };\n    },\n\n    /**\n     * Calculate the polygon min and max point from points array,\n     * returning an object with left, top, widht, height to measure the\n     * polygon size\n     * @return {Object} object.left X coordinate of the polygon leftmost point\n     * @return {Object} object.top Y coordinate of the polygon topmost point\n     * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point\n     * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point\n     * @private\n     */\n    _calcDimensions: function() {\n\n      var points = this.points,\n          minX = min(points, 'x') || 0,\n          minY = min(points, 'y') || 0,\n          maxX = max(points, 'x') || 0,\n          maxY = max(points, 'y') || 0,\n          width = (maxX - minX),\n          height = (maxY - minY);\n\n      return {\n        left: minX,\n        top: minY,\n        width: width,\n        height: height\n      };\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        points: this.points.concat()\n      });\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var points = [], diffX = this.pathOffset.x, diffY = this.pathOffset.y,\n          NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\n      for (var i = 0, len = this.points.length; i < len; i++) {\n        points.push(\n          toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS), ',',\n          toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS), ' '\n        );\n      }\n      return [\n        '<' + this.type + ' ', 'COMMON_PARTS',\n        'points=\"', points.join(''),\n        '\" />\\n'\n      ];\n    },\n    /* _TO_SVG_END_ */\n\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    commonRender: function(ctx) {\n      var point, len = this.points.length,\n          x = this.pathOffset.x,\n          y = this.pathOffset.y;\n\n      if (!len || isNaN(this.points[len - 1].y)) {\n        // do not draw if no points or odd points\n        // NaN comes from parseFloat of a empty string in parser\n        return false;\n      }\n      ctx.beginPath();\n      ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n      for (var i = 0; i < len; i++) {\n        point = this.points[i];\n        ctx.lineTo(point.x - x, point.y - y);\n      }\n      return true;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (!this.commonRender(ctx)) {\n        return;\n      }\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var p1, p2;\n\n      ctx.beginPath();\n      for (var i = 0, len = this.points.length; i < len; i++) {\n        p1 = this.points[i];\n        p2 = this.points[i + 1] || p1;\n        fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);\n      }\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.get('points').length;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})\n   * @static\n   * @memberOf fabric.Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\n  /**\n   * Returns fabric.Polyline instance from an SVG element\n   * @static\n   * @memberOf fabric.Polyline\n   * @param {SVGElement} element Element to parser\n   * @param {Function} callback callback function invoked after parsing\n   * @param {Object} [options] Options object\n   */\n  fabric.Polyline.fromElement = function(element, callback, options) {\n    if (!element) {\n      return callback(null);\n    }\n    options || (options = { });\n\n    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n        parsedAttributes = fabric.parseAttributes(element, fabric.Polyline.ATTRIBUTE_NAMES);\n\n    callback(new fabric.Polyline(points, fabric.util.object.extend(parsedAttributes, options)));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Polyline instance from an object representation\n   * @static\n   * @memberOf fabric.Polyline\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n   */\n  fabric.Polyline.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Polyline', object, callback, 'points');\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  if (fabric.Polygon) {\n    fabric.warn('fabric.Polygon is already defined');\n    return;\n  }\n\n  /**\n   * Polygon class\n   * @class fabric.Polygon\n   * @extends fabric.Polyline\n   * @see {@link fabric.Polygon#initialize} for constructor definition\n   */\n  fabric.Polygon = fabric.util.createClass(fabric.Polyline, /** @lends fabric.Polygon.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'polygon',\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (!this.commonRender(ctx)) {\n        return;\n      }\n      ctx.closePath();\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      this.callSuper('_renderDashedStroke', ctx);\n      ctx.closePath();\n    },\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)\n   * @static\n   * @memberOf fabric.Polygon\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement\n   */\n  fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\n  /**\n   * Returns {@link fabric.Polygon} instance from an SVG element\n   * @static\n   * @memberOf fabric.Polygon\n   * @param {SVGElement} element Element to parse\n   * @param {Function} callback callback function invoked after parsing\n   * @param {Object} [options] Options object\n   */\n  fabric.Polygon.fromElement = function(element, callback, options) {\n    if (!element) {\n      return callback(null);\n    }\n\n    options || (options = { });\n\n    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n        parsedAttributes = fabric.parseAttributes(element, fabric.Polygon.ATTRIBUTE_NAMES);\n\n    callback(new fabric.Polygon(points, extend(parsedAttributes, options)));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Polygon instance from an object representation\n   * @static\n   * @memberOf fabric.Polygon\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n   */\n  fabric.Polygon.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Polygon', object, callback, 'points');\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      extend = fabric.util.object.extend,\n      _toString = Object.prototype.toString,\n      drawArc = fabric.util.drawArc,\n      toFixed = fabric.util.toFixed,\n      commandLengths = {\n        m: 2,\n        l: 2,\n        h: 1,\n        v: 1,\n        c: 6,\n        s: 4,\n        q: 4,\n        t: 2,\n        a: 7\n      },\n      repeatedCommands = {\n        m: 'l',\n        M: 'L'\n      };\n\n  if (fabric.Path) {\n    fabric.warn('fabric.Path is already defined');\n    return;\n  }\n\n  /**\n   * Path class\n   * @class fabric.Path\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}\n   * @see {@link fabric.Path#initialize} for constructor definition\n   */\n  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'path',\n\n    /**\n     * Array of path points\n     * @type Array\n     * @default\n     */\n    path: null,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('path', 'fillRule'),\n\n    stateProperties: fabric.Object.prototype.stateProperties.concat('path'),\n\n    /**\n     * Constructor\n     * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n     * @param {Object} [options] Options object\n     * @return {fabric.Path} thisArg\n     */\n    initialize: function(path, options) {\n      options = options || { };\n      this.callSuper('initialize', options);\n\n      if (!path) {\n        path = [];\n      }\n\n      var fromArray = _toString.call(path) === '[object Array]';\n\n      this.path = fromArray\n        ? path\n        // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\n        : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\n\n      if (!this.path) {\n        return;\n      }\n\n      if (!fromArray) {\n        this.path = this._parsePath();\n      }\n\n      this._setPositionDimensions(options);\n    },\n\n    /**\n     * @private\n     * @param {Object} options Options object\n     */\n    _setPositionDimensions: function(options) {\n      var calcDim = this._parseDimensions();\n\n      this.width = calcDim.width;\n      this.height = calcDim.height;\n\n      if (typeof options.left === 'undefined') {\n        this.left = calcDim.left;\n      }\n\n      if (typeof options.top === 'undefined') {\n        this.top = calcDim.top;\n      }\n\n      this.pathOffset = this.pathOffset || {\n        x: calcDim.left + this.width / 2,\n        y: calcDim.top + this.height / 2\n      };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render path on\n     */\n    _renderPathCommands: function(ctx) {\n      var current, // current instruction\n          previous = null,\n          subpathStartX = 0,\n          subpathStartY = 0,\n          x = 0, // current x\n          y = 0, // current y\n          controlX = 0, // current control point x\n          controlY = 0, // current control point y\n          tempX,\n          tempY,\n          l = -this.pathOffset.x,\n          t = -this.pathOffset.y;\n\n      ctx.beginPath();\n\n      for (var i = 0, len = this.path.length; i < len; ++i) {\n\n        current = this.path[i];\n\n        switch (current[0]) { // first letter\n\n          case 'l': // lineto, relative\n            x += current[1];\n            y += current[2];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'L': // lineto, absolute\n            x = current[1];\n            y = current[2];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'h': // horizontal lineto, relative\n            x += current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'H': // horizontal lineto, absolute\n            x = current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'v': // vertical lineto, relative\n            y += current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'V': // verical lineto, absolute\n            y = current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'm': // moveTo, relative\n            x += current[1];\n            y += current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            ctx.moveTo(x + l, y + t);\n            break;\n\n          case 'M': // moveTo, absolute\n            x = current[1];\n            y = current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            ctx.moveTo(x + l, y + t);\n            break;\n\n          case 'c': // bezierCurveTo, relative\n            tempX = x + current[5];\n            tempY = y + current[6];\n            controlX = x + current[3];\n            controlY = y + current[4];\n            ctx.bezierCurveTo(\n              x + current[1] + l, // x1\n              y + current[2] + t, // y1\n              controlX + l, // x2\n              controlY + t, // y2\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'C': // bezierCurveTo, absolute\n            x = current[5];\n            y = current[6];\n            controlX = current[3];\n            controlY = current[4];\n            ctx.bezierCurveTo(\n              current[1] + l,\n              current[2] + t,\n              controlX + l,\n              controlY + t,\n              x + l,\n              y + t\n            );\n            break;\n\n          case 's': // shorthand cubic bezierCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            ctx.bezierCurveTo(\n              controlX + l,\n              controlY + t,\n              x + current[1] + l,\n              y + current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = x + current[1];\n            controlY = y + current[2];\n\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'S': // shorthand cubic bezierCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            ctx.bezierCurveTo(\n              controlX + l,\n              controlY + t,\n              current[1] + l,\n              current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = current[1];\n            controlY = current[2];\n\n            break;\n\n          case 'q': // quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            controlX = x + current[1];\n            controlY = y + current[2];\n\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'Q': // quadraticCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n\n            ctx.quadraticCurveTo(\n              current[1] + l,\n              current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            controlX = current[1];\n            controlY = current[2];\n            break;\n\n          case 't': // shorthand quadraticCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[1];\n            tempY = y + current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n\n            break;\n\n          case 'T':\n            tempX = current[1];\n            tempY = current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'a':\n            // TODO: optimize this\n            drawArc(ctx, x + l, y + t, [\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + x + l,\n              current[7] + y + t\n            ]);\n            x += current[6];\n            y += current[7];\n            break;\n\n          case 'A':\n            // TODO: optimize this\n            drawArc(ctx, x + l, y + t, [\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + l,\n              current[7] + t\n            ]);\n            x = current[6];\n            y = current[7];\n            break;\n\n          case 'z':\n          case 'Z':\n            x = subpathStartX;\n            y = subpathStartY;\n            ctx.closePath();\n            break;\n        }\n        previous = current;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render path on\n     */\n    _render: function(ctx) {\n      this._renderPathCommands(ctx);\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} string representation of an instance\n     */\n    toString: function() {\n      return '#<fabric.Path (' + this.complexity() +\n        '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var o = extend(this.callSuper('toObject', propertiesToInclude), {\n        path: this.path.map(function(item) { return item.slice(); }),\n        top: this.top,\n        left: this.left,\n      });\n      return o;\n    },\n\n    /**\n     * Returns dataless object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      var o = this.toObject(['sourcePath'].concat(propertiesToInclude));\n      if (o.sourcePath) {\n        delete o.path;\n      }\n      return o;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var path = this.path.map(function(path) {\n        return path.join(' ');\n      }).join(' ');\n      return [\n        '<path ', 'COMMON_PARTS',\n        'd=\"', path,\n        '\" stroke-linecap=\"round\" ',\n        '/>\\n'\n      ];\n    },\n\n    _getOffsetTransform: function() {\n      var digits = fabric.Object.NUM_FRACTION_DIGITS;\n      return ' translate(' + toFixed(-this.pathOffset.x, digits) + ', ' +\n          toFixed(-this.pathOffset.y, digits) + ')';\n    },\n\n    /**\n     * Returns svg clipPath representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toClipPathSVG: function(reviver) {\n      var additionalTransform = this._getOffsetTransform();\n      return '\\t' + this._createBaseClipPathSVGMarkup(\n        this._toSVG(), { reviver: reviver, additionalTransform: additionalTransform }\n      );\n    },\n\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var additionalTransform = this._getOffsetTransform();\n      return this._createBaseSVGMarkup(this._toSVG(), { reviver: reviver, additionalTransform: additionalTransform  });\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns number representation of an instance complexity\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.path.length;\n    },\n\n    /**\n     * @private\n     */\n    _parsePath: function() {\n      var result = [],\n          coords = [],\n          currentPath,\n          parsed,\n          re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/ig,\n          match,\n          coordsStr;\n\n      for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {\n        currentPath = this.path[i];\n\n        coordsStr = currentPath.slice(1).trim();\n        coords.length = 0;\n\n        while ((match = re.exec(coordsStr))) {\n          coords.push(match[0]);\n        }\n\n        coordsParsed = [currentPath.charAt(0)];\n\n        for (var j = 0, jlen = coords.length; j < jlen; j++) {\n          parsed = parseFloat(coords[j]);\n          if (!isNaN(parsed)) {\n            coordsParsed.push(parsed);\n          }\n        }\n\n        var command = coordsParsed[0],\n            commandLength = commandLengths[command.toLowerCase()],\n            repeatedCommand = repeatedCommands[command] || command;\n\n        if (coordsParsed.length - 1 > commandLength) {\n          for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\n            result.push([command].concat(coordsParsed.slice(k, k + commandLength)));\n            command = repeatedCommand;\n          }\n        }\n        else {\n          result.push(coordsParsed);\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * @private\n     */\n    _parseDimensions: function() {\n\n      var aX = [],\n          aY = [],\n          current, // current instruction\n          previous = null,\n          subpathStartX = 0,\n          subpathStartY = 0,\n          x = 0, // current x\n          y = 0, // current y\n          controlX = 0, // current control point x\n          controlY = 0, // current control point y\n          tempX,\n          tempY,\n          bounds;\n\n      for (var i = 0, len = this.path.length; i < len; ++i) {\n\n        current = this.path[i];\n\n        switch (current[0]) { // first letter\n\n          case 'l': // lineto, relative\n            x += current[1];\n            y += current[2];\n            bounds = [];\n            break;\n\n          case 'L': // lineto, absolute\n            x = current[1];\n            y = current[2];\n            bounds = [];\n            break;\n\n          case 'h': // horizontal lineto, relative\n            x += current[1];\n            bounds = [];\n            break;\n\n          case 'H': // horizontal lineto, absolute\n            x = current[1];\n            bounds = [];\n            break;\n\n          case 'v': // vertical lineto, relative\n            y += current[1];\n            bounds = [];\n            break;\n\n          case 'V': // verical lineto, absolute\n            y = current[1];\n            bounds = [];\n            break;\n\n          case 'm': // moveTo, relative\n            x += current[1];\n            y += current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            bounds = [];\n            break;\n\n          case 'M': // moveTo, absolute\n            x = current[1];\n            y = current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            bounds = [];\n            break;\n\n          case 'c': // bezierCurveTo, relative\n            tempX = x + current[5];\n            tempY = y + current[6];\n            controlX = x + current[3];\n            controlY = y + current[4];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              x + current[1], // x1\n              y + current[2], // y1\n              controlX, // x2\n              controlY, // y2\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'C': // bezierCurveTo, absolute\n            controlX = current[3];\n            controlY = current[4];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              current[1],\n              current[2],\n              controlX,\n              controlY,\n              current[5],\n              current[6]\n            );\n            x = current[5];\n            y = current[6];\n            break;\n\n          case 's': // shorthand cubic bezierCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              x + current[1],\n              y + current[2],\n              tempX,\n              tempY\n            );\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = x + current[1];\n            controlY = y + current[2];\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'S': // shorthand cubic bezierCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              current[1],\n              current[2],\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = current[1];\n            controlY = current[2];\n            break;\n\n          case 'q': // quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n            controlX = x + current[1];\n            controlY = y + current[2];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'Q': // quadraticCurveTo, absolute\n            controlX = current[1];\n            controlY = current[2];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              current[3],\n              current[4]\n            );\n            x = current[3];\n            y = current[4];\n            break;\n\n          case 't': // shorthand quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[1];\n            tempY = y + current[2];\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n\n            break;\n\n          case 'T':\n            tempX = current[1];\n            tempY = current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'a':\n            // TODO: optimize this\n            bounds = fabric.util.getBoundsOfArc(x, y,\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + x,\n              current[7] + y\n            );\n            x += current[6];\n            y += current[7];\n            break;\n\n          case 'A':\n            // TODO: optimize this\n            bounds = fabric.util.getBoundsOfArc(x, y,\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6],\n              current[7]\n            );\n            x = current[6];\n            y = current[7];\n            break;\n\n          case 'z':\n          case 'Z':\n            x = subpathStartX;\n            y = subpathStartY;\n            break;\n        }\n        previous = current;\n        bounds.forEach(function (point) {\n          aX.push(point.x);\n          aY.push(point.y);\n        });\n        aX.push(x);\n        aY.push(y);\n      }\n\n      var minX = min(aX) || 0,\n          minY = min(aY) || 0,\n          maxX = max(aX) || 0,\n          maxY = max(aY) || 0,\n          deltaX = maxX - minX,\n          deltaY = maxY - minY,\n\n          o = {\n            left: minX,\n            top: minY,\n            width: deltaX,\n            height: deltaY\n          };\n\n      return o;\n    }\n  });\n\n  /**\n   * Creates an instance of fabric.Path from an object\n   * @static\n   * @memberOf fabric.Path\n   * @param {Object} object\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n   */\n  fabric.Path.fromObject = function(object, callback) {\n    if (typeof object.sourcePath === 'string') {\n      var pathUrl = object.sourcePath;\n      fabric.loadSVGFromURL(pathUrl, function (elements) {\n        var path = elements[0];\n        path.setOptions(object);\n        callback && callback(path);\n      });\n    }\n    else {\n      fabric.Object._fromObject('Path', object, callback, 'path');\n    }\n  };\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)\n   * @static\n   * @memberOf fabric.Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);\n\n  /**\n   * Creates an instance of fabric.Path from an SVG <path> element\n   * @static\n   * @memberOf fabric.Path\n   * @param {SVGElement} element to parse\n   * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] Options callback invoked after parsing is finished\n   */\n  fabric.Path.fromElement = function(element, callback, options) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);\n    callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));\n  };\n  /* _FROM_SVG_END_ */\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      min = fabric.util.array.min,\n      max = fabric.util.array.max;\n\n  if (fabric.Group) {\n    return;\n  }\n\n  /**\n   * Group class\n   * @class fabric.Group\n   * @extends fabric.Object\n   * @mixes fabric.Collection\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\n   * @see {@link fabric.Group#initialize} for constructor definition\n   */\n  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'group',\n\n    /**\n     * Width of stroke\n     * @type Number\n     * @default\n     */\n    strokeWidth: 0,\n\n    /**\n     * Indicates if click events should also check for subtargets\n     * @type Boolean\n     * @default\n     */\n    subTargetCheck: false,\n\n    /**\n     * Groups are container, do not render anything on theyr own, ence no cache properties\n     * @type Array\n     * @default\n     */\n    cacheProperties: [],\n\n    /**\n     * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still\n     * available setting this boolean to true.\n     * @type Boolean\n     * @since 2.0.0\n     * @default\n     */\n    useSetOnGroup: false,\n\n    /**\n     * Constructor\n     * @param {Object} objects Group objects\n     * @param {Object} [options] Options object\n     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\n     * @return {Object} thisArg\n     */\n    initialize: function(objects, options, isAlreadyGrouped) {\n      options = options || {};\n      this._objects = [];\n      // if objects enclosed in a group have been grouped already,\n      // we cannot change properties of objects.\n      // Thus we need to set options to group without objects,\n      isAlreadyGrouped && this.callSuper('initialize', options);\n      this._objects = objects || [];\n      for (var i = this._objects.length; i--; ) {\n        this._objects[i].group = this;\n      }\n\n      if (!isAlreadyGrouped) {\n        var center = options && options.centerPoint;\n        // we want to set origins before calculating the bounding box.\n        // so that the topleft can be set with that in mind.\n        // if specific top and left are passed, are overwritten later\n        // with the callSuper('initialize', options)\n        if (options.originX !== undefined) {\n          this.originX = options.originX;\n        }\n        if (options.originY !== undefined) {\n          this.originY = options.originY;\n        }\n        // if coming from svg i do not want to calc bounds.\n        // i assume width and height are passed along options\n        center || this._calcBounds();\n        this._updateObjectsCoords(center);\n        delete options.centerPoint;\n        this.callSuper('initialize', options);\n      }\n      else {\n        this._updateObjectsACoords();\n      }\n\n      this.setCoords();\n    },\n\n    /**\n     * @private\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n     */\n    _updateObjectsACoords: function() {\n      var ignoreZoom = true, skipAbsolute = true;\n      for (var i = this._objects.length; i--; ){\n        this._objects[i].setCoords(ignoreZoom, skipAbsolute);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n     */\n    _updateObjectsCoords: function(center) {\n      var center = center || this.getCenterPoint();\n      for (var i = this._objects.length; i--; ){\n        this._updateObjectCoords(this._objects[i], center);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     * @param {fabric.Point} center, current center of group.\n     */\n    _updateObjectCoords: function(object, center) {\n      var objectLeft = object.left,\n          objectTop = object.top,\n          ignoreZoom = true, skipAbsolute = true;\n\n      object.set({\n        left: objectLeft - center.x,\n        top: objectTop - center.y\n      });\n      object.group = this;\n      object.setCoords(ignoreZoom, skipAbsolute);\n    },\n\n    /**\n     * Returns string represenation of a group\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.Group: (' + this.complexity() + ')>';\n    },\n\n    /**\n     * Adds an object to a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    addWithUpdate: function(object) {\n      this._restoreObjectsState();\n      fabric.util.resetObjectTransform(this);\n      if (object) {\n        this._objects.push(object);\n        object.group = this;\n        object._set('canvas', this.canvas);\n      }\n      this._calcBounds();\n      this._updateObjectsCoords();\n      this.setCoords();\n      this.dirty = true;\n      return this;\n    },\n\n    /**\n     * Removes an object from a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    removeWithUpdate: function(object) {\n      this._restoreObjectsState();\n      fabric.util.resetObjectTransform(this);\n\n      this.remove(object);\n      this._calcBounds();\n      this._updateObjectsCoords();\n      this.setCoords();\n      this.dirty = true;\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _onObjectAdded: function(object) {\n      this.dirty = true;\n      object.group = this;\n      object._set('canvas', this.canvas);\n    },\n\n    /**\n     * @private\n     */\n    _onObjectRemoved: function(object) {\n      this.dirty = true;\n      delete object.group;\n    },\n\n    /**\n     * @private\n     */\n    _set: function(key, value) {\n      var i = this._objects.length;\n      if (this.useSetOnGroup) {\n        while (i--) {\n          this._objects[i].setOnGroup(key, value);\n        }\n      }\n      if (key === 'canvas') {\n        while (i--) {\n          this._objects[i]._set(key, value);\n        }\n      }\n      fabric.Object.prototype._set.call(this, key, value);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var _includeDefaultValues = this.includeDefaultValues;\n      var objsToObject = this._objects.map(function(obj) {\n        var originalDefaults = obj.includeDefaultValues;\n        obj.includeDefaultValues = _includeDefaultValues;\n        var _obj = obj.toObject(propertiesToInclude);\n        obj.includeDefaultValues = originalDefaults;\n        return _obj;\n      });\n      var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);\n      obj.objects = objsToObject;\n      return obj;\n    },\n\n    /**\n     * Returns object representation of an instance, in dataless mode.\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      var objsToObject, sourcePath = this.sourcePath;\n      if (sourcePath) {\n        objsToObject = sourcePath;\n      }\n      else {\n        var _includeDefaultValues = this.includeDefaultValues;\n        objsToObject = this._objects.map(function(obj) {\n          var originalDefaults = obj.includeDefaultValues;\n          obj.includeDefaultValues = _includeDefaultValues;\n          var _obj = obj.toDatalessObject(propertiesToInclude);\n          obj.includeDefaultValues = originalDefaults;\n          return _obj;\n        });\n      }\n      var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);\n      obj.objects = objsToObject;\n      return obj;\n    },\n\n    /**\n     * Renders instance on a given context\n     * @param {CanvasRenderingContext2D} ctx context to render instance on\n     */\n    render: function(ctx) {\n      this._transformDone = true;\n      this.callSuper('render', ctx);\n      this._transformDone = false;\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      var ownCache = this.objectCaching && (!this.group || this.needsItsOwnCache() || !this.group.isOnACache());\n      this.ownCaching = ownCache;\n      if (ownCache) {\n        for (var i = 0, len = this._objects.length; i < len; i++) {\n          if (this._objects[i].willDrawShadow()) {\n            this.ownCaching = false;\n            return false;\n          }\n        }\n      }\n      return ownCache;\n    },\n\n    /**\n     * Check if this object or a child object will cast a shadow\n     * @return {Boolean}\n     */\n    willDrawShadow: function() {\n      if (this.shadow) {\n        return fabric.Object.prototype.willDrawShadow.call(this);\n      }\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Check if this group or its parent group are caching, recursively up\n     * @return {Boolean}\n     */\n    isOnACache: function() {\n      return this.ownCaching || (this.group && this.group.isOnACache());\n    },\n\n    /**\n     * Execute the drawing operation for an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawObject: function(ctx) {\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i].render(ctx);\n      }\n      this._drawClipPath(ctx);\n    },\n\n    /**\n     * Check if cache is dirty\n     */\n    isCacheDirty: function(skipCanvas) {\n      if (this.callSuper('isCacheDirty', skipCanvas)) {\n        return true;\n      }\n      if (!this.statefullCache) {\n        return false;\n      }\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        if (this._objects[i].isCacheDirty(true)) {\n          if (this._cacheCanvas) {\n            // if this group has not a cache canvas there is nothing to clean\n            var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;\n            this._cacheContext.clearRect(-x / 2, -y / 2, x, y);\n          }\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Retores original state of each of group objects (original state is that which was before group was created).\n     * @private\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    _restoreObjectsState: function() {\n      this._objects.forEach(this._restoreObjectState, this);\n      return this;\n    },\n\n    /**\n     * Realises the transform from this group onto the supplied object\n     * i.e. it tells you what would happen if the supplied object was in\n     * the group, and then the group was destroyed. It mutates the supplied\n     * object.\n     * @param {fabric.Object} object\n     * @return {fabric.Object} transformedObject\n     */\n    realizeTransform: function(object) {\n      var matrix = object.calcTransformMatrix(),\n          options = fabric.util.qrDecompose(matrix),\n          center = new fabric.Point(options.translateX, options.translateY);\n      object.flipX = false;\n      object.flipY = false;\n      object.set('scaleX', options.scaleX);\n      object.set('scaleY', options.scaleY);\n      object.skewX = options.skewX;\n      object.skewY = options.skewY;\n      object.angle = options.angle;\n      object.setPositionByOrigin(center, 'center', 'center');\n      return object;\n    },\n\n    /**\n     * Restores original state of a specified object in group\n     * @private\n     * @param {fabric.Object} object\n     * @return {fabric.Group} thisArg\n     */\n    _restoreObjectState: function(object) {\n      this.realizeTransform(object);\n      object.setCoords();\n      delete object.group;\n      return this;\n    },\n\n    /**\n     * Destroys a group (restoring state of its objects)\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    destroy: function() {\n      // when group is destroyed objects needs to get a repaint to be eventually\n      // displayed on canvas.\n      this._objects.forEach(function(object) {\n        object.set('dirty', true);\n      });\n      return this._restoreObjectsState();\n    },\n\n    /**\n     * make a group an active selection, remove the group from canvas\n     * the group has to be on canvas for this to work.\n     * @return {fabric.ActiveSelection} thisArg\n     * @chainable\n     */\n    toActiveSelection: function() {\n      if (!this.canvas) {\n        return;\n      }\n      var objects = this._objects, canvas = this.canvas;\n      this._objects = [];\n      var options = this.toObject();\n      delete options.objects;\n      var activeSelection = new fabric.ActiveSelection([]);\n      activeSelection.set(options);\n      activeSelection.type = 'activeSelection';\n      canvas.remove(this);\n      objects.forEach(function(object) {\n        object.group = activeSelection;\n        object.dirty = true;\n        canvas.add(object);\n      });\n      activeSelection.canvas = canvas;\n      activeSelection._objects = objects;\n      canvas._activeObject = activeSelection;\n      activeSelection.setCoords();\n      return activeSelection;\n    },\n\n    /**\n     * Destroys a group (restoring state of its objects)\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    ungroupOnCanvas: function() {\n      return this._restoreObjectsState();\n    },\n\n    /**\n     * Sets coordinates of all objects inside group\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    setObjectsCoords: function() {\n      var ignoreZoom = true, skipAbsolute = true;\n      this.forEachObject(function(object) {\n        object.setCoords(ignoreZoom, skipAbsolute);\n      });\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _calcBounds: function(onlyWidthHeight) {\n      var aX = [],\n          aY = [],\n          o, prop,\n          props = ['tr', 'br', 'bl', 'tl'],\n          i = 0, iLen = this._objects.length,\n          j, jLen = props.length,\n          ignoreZoom = true;\n\n      for ( ; i < iLen; ++i) {\n        o = this._objects[i];\n        o.setCoords(ignoreZoom);\n        for (j = 0; j < jLen; j++) {\n          prop = props[j];\n          aX.push(o.oCoords[prop].x);\n          aY.push(o.oCoords[prop].y);\n        }\n      }\n\n      this._getBounds(aX, aY, onlyWidthHeight);\n    },\n\n    /**\n     * @private\n     */\n    _getBounds: function(aX, aY, onlyWidthHeight) {\n      var minXY = new fabric.Point(min(aX), min(aY)),\n          maxXY = new fabric.Point(max(aX), max(aY)),\n          top = minXY.y || 0, left = minXY.x || 0,\n          width = (maxXY.x - minXY.x) || 0,\n          height = (maxXY.y - minXY.y) || 0;\n      this.width = width;\n      this.height = height;\n      if (!onlyWidthHeight) {\n        // the bounding box always finds the topleft most corner.\n        // whatever is the group origin, we set up here the left/top position.\n        this.setPositionByOrigin({ x: left, y: top }, 'left', 'top');\n      }\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var svgString = [];\n\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        svgString.push('\\t', this._objects[i].toSVG(reviver));\n      }\n\n      return this._createBaseSVGMarkup(\n        svgString,\n        { reviver: reviver, noStyle: true, withShadow: true });\n    },\n\n    /**\n     * Returns svg clipPath representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toClipPathSVG: function(reviver) {\n      var svgString = [];\n\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\n      }\n\n      return this._createBaseClipPathSVGMarkup(svgString, { reviver: reviver });\n    },\n    /* _TO_SVG_END_ */\n  });\n\n  /**\n   * Returns {@link fabric.Group} instance from an object representation\n   * @static\n   * @memberOf fabric.Group\n   * @param {Object} object Object to create a group from\n   * @param {Function} [callback] Callback to invoke when an group instance is created\n   */\n  fabric.Group.fromObject = function(object, callback) {\n    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n      fabric.util.enlivenObjects([object.clipPath], function(enlivedClipPath) {\n        var options = fabric.util.object.clone(object, true);\n        options.clipPath = enlivedClipPath[0];\n        delete options.objects;\n        callback && callback(new fabric.Group(enlivenedObjects, options, true));\n      });\n    });\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.ActiveSelection) {\n    return;\n  }\n\n  /**\n   * Group class\n   * @class fabric.ActiveSelection\n   * @extends fabric.Group\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\n   * @see {@link fabric.ActiveSelection#initialize} for constructor definition\n   */\n  fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'activeSelection',\n\n    /**\n     * Constructor\n     * @param {Object} objects ActiveSelection objects\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(objects, options) {\n      options = options || {};\n      this._objects = objects || [];\n      for (var i = this._objects.length; i--; ) {\n        this._objects[i].group = this;\n      }\n\n      if (options.originX) {\n        this.originX = options.originX;\n      }\n      if (options.originY) {\n        this.originY = options.originY;\n      }\n      this._calcBounds();\n      this._updateObjectsCoords();\n      fabric.Object.prototype.initialize.call(this, options);\n      this.setCoords();\n    },\n\n    /**\n     * Change te activeSelection to a normal group,\n     * High level function that automatically adds it to canvas as\n     * active object. no events fired.\n     * @since 2.0.0\n     * @return {fabric.Group}\n     */\n    toGroup: function() {\n      var objects = this._objects.concat();\n      this._objects = [];\n      var options = fabric.Object.prototype.toObject.call(this);\n      var newGroup = new fabric.Group([]);\n      delete options.type;\n      newGroup.set(options);\n      objects.forEach(function(object) {\n        object.canvas.remove(object);\n        object.group = newGroup;\n      });\n      newGroup._objects = objects;\n      if (!this.canvas) {\n        return newGroup;\n      }\n      var canvas = this.canvas;\n      canvas.add(newGroup);\n      canvas._activeObject = newGroup;\n      newGroup.setCoords();\n      return newGroup;\n    },\n\n    /**\n     * If returns true, deselection is cancelled.\n     * @since 2.0.0\n     * @return {Boolean} [cancel]\n     */\n    onDeselect: function() {\n      this.destroy();\n      return false;\n    },\n\n    /**\n     * Returns string representation of a group\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.ActiveSelection: (' + this.complexity() + ')>';\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      return false;\n    },\n\n    /**\n     * Check if this group or its parent group are caching, recursively up\n     * @return {Boolean}\n     */\n    isOnACache: function() {\n      return false;\n    },\n\n    /**\n     * Renders controls and borders for the object\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [styleOverride] properties to override the object style\n     * @param {Object} [childrenOverride] properties to override the children overrides\n     */\n    _renderControls: function(ctx, styleOverride, childrenOverride) {\n      ctx.save();\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      this.callSuper('_renderControls', ctx, styleOverride);\n      childrenOverride = childrenOverride || { };\n      if (typeof childrenOverride.hasControls === 'undefined') {\n        childrenOverride.hasControls = false;\n      }\n      if (typeof childrenOverride.hasRotatingPoint === 'undefined') {\n        childrenOverride.hasRotatingPoint = false;\n      }\n      childrenOverride.forActiveSelection = true;\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i]._renderControls(ctx, childrenOverride);\n      }\n      ctx.restore();\n    },\n  });\n\n  /**\n   * Returns {@link fabric.ActiveSelection} instance from an object representation\n   * @static\n   * @memberOf fabric.ActiveSelection\n   * @param {Object} object Object to create a group from\n   * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created\n   */\n  fabric.ActiveSelection.fromObject = function(object, callback) {\n    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n      delete object.objects;\n      callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));\n    });\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var extend = fabric.util.object.extend;\n\n  if (!global.fabric) {\n    global.fabric = { };\n  }\n\n  if (global.fabric.Image) {\n    fabric.warn('fabric.Image is already defined.');\n    return;\n  }\n\n  /**\n   * Image class\n   * @class fabric.Image\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n   * @see {@link fabric.Image#initialize} for constructor definition\n   */\n  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'image',\n\n    /**\n     * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\n     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n     * @type String\n     * @default\n     */\n    crossOrigin: '',\n\n    /**\n     * Width of a stroke.\n     * For image quality a stroke multiple of 2 gives better results.\n     * @type Number\n     * @default\n     */\n    strokeWidth: 0,\n\n    /**\n     * private\n     * contains last value of scaleX to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */\n    _lastScaleX: 1,\n\n    /**\n     * private\n     * contains last value of scaleY to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */\n    _lastScaleY: 1,\n\n    /**\n     * private\n     * contains last value of scaling applied by the apply filter chain\n     * @type Number\n     */\n    _filterScalingX: 1,\n\n    /**\n     * private\n     * contains last value of scaling applied by the apply filter chain\n     * @type Number\n     */\n    _filterScalingY: 1,\n\n    /**\n     * minimum scale factor under which any resizeFilter is triggered to resize the image\n     * 0 will disable the automatic resize. 1 will trigger automatically always.\n     * number bigger than 1 are not implemented yet.\n     * @type Number\n     */\n    minimumScaleTrigger: 0.5,\n\n    /**\n     * List of properties to consider when checking if\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: fabric.Object.prototype.stateProperties.concat('cropX', 'cropY'),\n\n    /**\n     * key used to retrieve the texture representing this image\n     * since 2.0.0\n     * @type String\n     * @default\n     */\n    cacheKey: '',\n\n    /**\n     * Image crop in pixels from original image size.\n     * since 2.0.0\n     * @type Number\n     * @default\n     */\n    cropX: 0,\n\n    /**\n     * Image crop in pixels from original image size.\n     * since 2.0.0\n     * @type Number\n     * @default\n     */\n    cropY: 0,\n\n    /**\n     * Constructor\n     * @param {HTMLImageElement | String} element Image element\n     * @param {Object} [options] Options object\n     * @param {function} [callback] callback function to call after eventual filters applied.\n     * @return {fabric.Image} thisArg\n     */\n    initialize: function(element, options) {\n      options || (options = { });\n      this.filters = [];\n      this.cacheKey = 'texture' + fabric.Object.__uid++;\n      this.callSuper('initialize', options);\n      this._initElement(element, options);\n    },\n\n    /**\n     * Returns image element which this instance if based on\n     * @return {HTMLImageElement} Image element\n     */\n    getElement: function() {\n      return this._element || {};\n    },\n\n    /**\n     * Sets image element for this instance to a specified one.\n     * If filters defined they are applied to new image.\n     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n     * @param {HTMLImageElement} element\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setElement: function(element, options) {\n      this.removeTexture(this.cacheKey);\n      this.removeTexture(this.cacheKey + '_filtered');\n      this._element = element;\n      this._originalElement = element;\n      this._initConfig(options);\n      if (this.filters.length !== 0) {\n        this.applyFilters();\n      }\n      // resizeFilters work on the already filtered copy.\n      // we need to apply resizeFilters AFTER normal filters.\n      // applyResizeFilters is run more often than normal fiters\n      // and is triggered by user interactions rather than dev code\n      if (this.resizeFilter) {\n        this.applyResizeFilters();\n      }\n      return this;\n    },\n\n    /**\n     * Delete a single texture if in webgl mode\n     */\n    removeTexture: function(key) {\n      var backend = fabric.filterBackend;\n      if (backend && backend.evictCachesForKey) {\n        backend.evictCachesForKey(key);\n      }\n    },\n\n    /**\n     * Delete textures, reference to elements and eventually JSDOM cleanup\n     */\n    dispose: function() {\n      this.removeTexture(this.cacheKey);\n      this.removeTexture(this.cacheKey + '_filtered');\n      this._cacheContext = undefined;\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'].forEach((function(element) {\n        fabric.util.cleanUpJsdomNode(this[element]);\n        this[element] = undefined;\n      }).bind(this));\n    },\n\n    /**\n     * Sets crossOrigin value (on an instance and corresponding image element)\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setCrossOrigin: function(value) {\n      this.crossOrigin = value;\n      this._element.crossOrigin = value;\n\n      return this;\n    },\n\n    /**\n     * Returns original size of an image\n     * @return {Object} Object with \"width\" and \"height\" properties\n     */\n    getOriginalSize: function() {\n      var element = this.getElement();\n      return {\n        width: element.naturalWidth || element.width,\n        height: element.naturalHeight || element.height\n      };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _stroke: function(ctx) {\n      if (!this.stroke || this.strokeWidth === 0) {\n        return;\n      }\n      var w = this.width / 2, h = this.height / 2;\n      ctx.beginPath();\n      ctx.moveTo(-w, -h);\n      ctx.lineTo(w, -h);\n      ctx.lineTo(w, h);\n      ctx.lineTo(-w, h);\n      ctx.lineTo(-w, -h);\n      ctx.closePath();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var x = -this.width / 2,\n          y = -this.height / 2,\n          w = this.width,\n          h = this.height;\n\n      ctx.save();\n      this._setStrokeStyles(ctx, this);\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var filters = [];\n\n      this.filters.forEach(function(filterObj) {\n        if (filterObj) {\n          filters.push(filterObj.toObject());\n        }\n      });\n      var object = extend(\n        this.callSuper(\n          'toObject',\n          ['crossOrigin', 'cropX', 'cropY'].concat(propertiesToInclude)\n        ), {\n          src: this.getSrc(),\n          filters: filters,\n        });\n      if (this.resizeFilter) {\n        object.resizeFilter = this.resizeFilter.toObject();\n      }\n      return object;\n    },\n\n    /**\n     * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,hight.\n     * @return {Boolean}\n     */\n    hasCrop: function() {\n      return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var svgString = [], imageMarkup = [], strokeSvg,\n          x = -this.width / 2, y = -this.height / 2, clipPath = '';\n      if (this.hasCrop()) {\n        var clipPathId = fabric.Object.__uid++;\n        svgString.push(\n          '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n          '\\t<rect x=\"' + x + '\" y=\"' + y + '\" width=\"' + this.width + '\" height=\"' + this.height + '\" />\\n',\n          '</clipPath>\\n'\n        );\n        clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n      }\n      imageMarkup.push('\\t<image ', 'COMMON_PARTS', 'xlink:href=\"', this.getSvgSrc(true),\n        '\" x=\"', x - this.cropX, '\" y=\"', y - this.cropY,\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n        '\" width=\"', this._element.width || this._element.naturalWidth,\n        '\" height=\"', this._element.height || this._element.height,\n        '\"', clipPath,\n        '></image>\\n');\n\n      if (this.stroke || this.strokeDashArray) {\n        var origFill = this.fill;\n        this.fill = null;\n        strokeSvg = [\n          '\\t<rect ',\n          'x=\"', x, '\" y=\"', y,\n          '\" width=\"', this.width, '\" height=\"', this.height,\n          '\" style=\"', this.getSvgStyles(),\n          '\"/>\\n'\n        ];\n        this.fill = origFill;\n      }\n      if (this.paintFirst !== 'fill') {\n        svgString = svgString.concat(strokeSvg, imageMarkup);\n      }\n      else {\n        svgString = svgString.concat(imageMarkup, strokeSvg);\n      }\n      return svgString;\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns source of an image\n     * @param {Boolean} filtered indicates if the src is needed for svg\n     * @return {String} Source of an image\n     */\n    getSrc: function(filtered) {\n      var element = filtered ? this._element : this._originalElement;\n      if (element) {\n        if (element.toDataURL) {\n          return element.toDataURL();\n        }\n        return element.src;\n      }\n      else {\n        return this.src || '';\n      }\n    },\n\n    /**\n     * Sets source of an image\n     * @param {String} src Source string (URL)\n     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setSrc: function(src, callback, options) {\n      fabric.util.loadImage(src, function(img) {\n        this.setElement(img, options);\n        this._setWidthHeight();\n        callback(this);\n      }, this, options && options.crossOrigin);\n      return this;\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} String representation of an instance\n     */\n    toString: function() {\n      return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\n    },\n\n    applyResizeFilters: function() {\n      var filter = this.resizeFilter,\n          minimumScale = this.minimumScaleTrigger,\n          objectScale = this.getTotalObjectScaling(),\n          scaleX = objectScale.scaleX,\n          scaleY = objectScale.scaleY,\n          elementToFilter = this._filteredEl || this._originalElement;\n      if (this.group) {\n        this.set('dirty', true);\n      }\n      if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n        this._element = elementToFilter;\n        this._filterScalingX = 1;\n        this._filterScalingY = 1;\n        this._lastScaleX = scaleX;\n        this._lastScaleY = scaleY;\n        return;\n      }\n      if (!fabric.filterBackend) {\n        fabric.filterBackend = fabric.initFilterBackend();\n      }\n      var canvasEl = fabric.util.createCanvasElement(),\n          cacheKey = this._filteredEl ? (this.cacheKey + '_filtered') : this.cacheKey,\n          sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;\n      canvasEl.width = sourceWidth;\n      canvasEl.height = sourceHeight;\n      this._element = canvasEl;\n      this._lastScaleX = filter.scaleX = scaleX;\n      this._lastScaleY = filter.scaleY = scaleY;\n      fabric.filterBackend.applyFilters(\n        [filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);\n      this._filterScalingX = canvasEl.width / this._originalElement.width;\n      this._filterScalingY = canvasEl.height / this._originalElement.height;\n    },\n\n    /**\n     * Applies filters assigned to this image (from \"filters\" array) or from filter param\n     * @method applyFilters\n     * @param {Array} filters to be applied\n     * @param {Boolean} forResizing specify if the filter operation is a resize operation\n     * @return {thisArg} return the fabric.Image object\n     * @chainable\n     */\n    applyFilters: function(filters) {\n\n      filters = filters || this.filters || [];\n      filters = filters.filter(function(filter) { return filter && !filter.isNeutralState(); });\n      this.set('dirty', true);\n\n      // needs to clear out or WEBGL will not resize correctly\n      this.removeTexture(this.cacheKey + '_filtered');\n\n      if (filters.length === 0) {\n        this._element = this._originalElement;\n        this._filteredEl = null;\n        this._filterScalingX = 1;\n        this._filterScalingY = 1;\n        return this;\n      }\n\n      var imgElement = this._originalElement,\n          sourceWidth = imgElement.naturalWidth || imgElement.width,\n          sourceHeight = imgElement.naturalHeight || imgElement.height;\n\n      if (this._element === this._originalElement) {\n        // if the element is the same we need to create a new element\n        var canvasEl = fabric.util.createCanvasElement();\n        canvasEl.width = sourceWidth;\n        canvasEl.height = sourceHeight;\n        this._element = canvasEl;\n        this._filteredEl = canvasEl;\n      }\n      else {\n        // clear the existing element to get new filter data\n        // also dereference the eventual resized _element\n        this._element = this._filteredEl;\n        this._filteredEl.getContext('2d').clearRect(0, 0, sourceWidth, sourceHeight);\n        // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n        this._lastScaleX = 1;\n        this._lastScaleY = 1;\n      }\n      if (!fabric.filterBackend) {\n        fabric.filterBackend = fabric.initFilterBackend();\n      }\n      fabric.filterBackend.applyFilters(\n        filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);\n      if (this._originalElement.width !== this._element.width ||\n        this._originalElement.height !== this._element.height) {\n        this._filterScalingX = this._element.width / this._originalElement.width;\n        this._filterScalingY = this._element.height / this._originalElement.height;\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n        this.applyResizeFilters();\n      }\n      this._stroke(ctx);\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * This is the special image version where we would like to avoid caching where possible.\n     * Essentially images do not benefit from caching. They may require caching, and in that\n     * case we do it. Also caching an image usually ends in a loss of details.\n     * A full performance audit should be done.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      this.ownCaching = this.objectCaching && this.needsItsOwnCache();\n      return this.ownCaching;\n    },\n\n    _renderFill: function(ctx) {\n      var elementToDraw = this._element,\n          w = this.width, h = this.height,\n          sW = Math.min(elementToDraw.naturalWidth || elementToDraw.width, w * this._filterScalingX),\n          sH = Math.min(elementToDraw.naturalHeight || elementToDraw.height, h * this._filterScalingY),\n          x = -w / 2, y = -h / 2,\n          sX = Math.max(0, this.cropX * this._filterScalingX),\n          sY = Math.max(0, this.cropY * this._filterScalingY);\n\n      elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, w, h);\n    },\n\n    /**\n     * @private, needed to check if image needs resize\n     */\n    _needsResize: function() {\n      var scale = this.getTotalObjectScaling();\n      return (scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY);\n    },\n\n    /**\n     * @private\n     */\n    _resetWidthHeight: function() {\n      this.set(this.getOriginalSize());\n    },\n\n    /**\n     * The Image class's initialization method. This method is automatically\n     * called by the constructor.\n     * @private\n     * @param {HTMLImageElement|String} element The element representing the image\n     * @param {Object} [options] Options object\n     */\n    _initElement: function(element, options) {\n      this.setElement(fabric.util.getById(element), options);\n      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initConfig: function(options) {\n      options || (options = { });\n      this.setOptions(options);\n      this._setWidthHeight(options);\n      if (this._element && this.crossOrigin) {\n        this._element.crossOrigin = this.crossOrigin;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Array} filters to be initialized\n     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\n     */\n    _initFilters: function(filters, callback) {\n      if (filters && filters.length) {\n        fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\n          callback && callback(enlivenedObjects);\n        }, 'fabric.Image.filters');\n      }\n      else {\n        callback && callback();\n      }\n    },\n\n    /**\n     * @private\n     * Set the width and the height of the image object, using the element or the\n     * options.\n     * @param {Object} [options] Object with width/height properties\n     */\n    _setWidthHeight: function(options) {\n      options || (options = { });\n      var el = this.getElement();\n      this.width = options.width || el.naturalWidth || el.width || 0;\n      this.height = options.height || el.naturalHeight || el.height || 0;\n    },\n\n    /**\n     * Calculate offset for center and scale factor for the image in order to respect\n     * the preserveAspectRatio attribute\n     * @private\n     * @return {Object}\n     */\n    parsePreserveAspectRatioAttribute: function() {\n      var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ''),\n          rWidth = this._element.width, rHeight = this._element.height,\n          scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0,\n          offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };\n      if (pAR && (pAR.alignX !== 'none' || pAR.alignY !== 'none')) {\n        if (pAR.meetOrSlice === 'meet') {\n          scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);\n          offset = (pWidth - rWidth * scaleX) / 2;\n          if (pAR.alignX === 'Min') {\n            offsetLeft = -offset;\n          }\n          if (pAR.alignX === 'Max') {\n            offsetLeft = offset;\n          }\n          offset = (pHeight - rHeight * scaleY) / 2;\n          if (pAR.alignY === 'Min') {\n            offsetTop = -offset;\n          }\n          if (pAR.alignY === 'Max') {\n            offsetTop = offset;\n          }\n        }\n        if (pAR.meetOrSlice === 'slice') {\n          scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);\n          offset = rWidth - pWidth / scaleX;\n          if (pAR.alignX === 'Mid') {\n            cropX = offset / 2;\n          }\n          if (pAR.alignX === 'Max') {\n            cropX = offset;\n          }\n          offset = rHeight - pHeight / scaleY;\n          if (pAR.alignY === 'Mid') {\n            cropY = offset / 2;\n          }\n          if (pAR.alignY === 'Max') {\n            cropY = offset;\n          }\n          rWidth = pWidth / scaleX;\n          rHeight = pHeight / scaleY;\n        }\n      }\n      else {\n        scaleX = pWidth / rWidth;\n        scaleY = pHeight / rHeight;\n      }\n      return {\n        width: rWidth,\n        height: rHeight,\n        scaleX: scaleX,\n        scaleY: scaleY,\n        offsetLeft: offsetLeft,\n        offsetTop: offsetTop,\n        cropX: cropX,\n        cropY: cropY\n      };\n    }\n  });\n\n  /**\n   * Default CSS class name for canvas\n   * @static\n   * @type String\n   * @default\n   */\n  fabric.Image.CSS_CANVAS = 'canvas-img';\n\n  /**\n   * Alias for getSrc\n   * @static\n   */\n  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\n\n  /**\n   * Creates an instance of fabric.Image from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} callback Callback to invoke when an image instance is created\n   */\n  fabric.Image.fromObject = function(_object, callback) {\n    var object = fabric.util.object.clone(_object);\n    fabric.util.loadImage(object.src, function(img, error) {\n      if (error) {\n        callback && callback(null, error);\n        return;\n      }\n      fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\n        object.filters = filters || [];\n        fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {\n          object.resizeFilter = resizeFilters[0];\n          fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {\n            object.clipPath = enlivedProps[0];\n            var image = new fabric.Image(img, object);\n            callback(image);\n          });\n        });\n      });\n    }, null, object.crossOrigin);\n  };\n\n  /**\n   * Creates an instance of fabric.Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)\n   * @param {Object} [imgOptions] Options object\n   */\n  fabric.Image.fromURL = function(url, callback, imgOptions) {\n    fabric.util.loadImage(url, function(img) {\n      callback && callback(new fabric.Image(img, imgOptions));\n    }, null, imgOptions && imgOptions.crossOrigin);\n  };\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  fabric.Image.ATTRIBUTE_NAMES =\n    fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href crossOrigin'.split(' '));\n\n  /**\n   * Returns {@link fabric.Image} instance from an SVG element\n   * @static\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} callback Callback to execute when fabric.Image object is created\n   * @return {fabric.Image} Instance of fabric.Image\n   */\n  fabric.Image.fromElement = function(element, callback, options) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES);\n    fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,\n      extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n  };\n  /* _FROM_SVG_END_ */\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * @private\n   * @return {Number} angle value\n   */\n  _getAngleValueForStraighten: function() {\n    var angle = this.angle % 360;\n    if (angle > 0) {\n      return Math.round((angle - 1) / 90) * 90;\n    }\n    return Math.round(angle / 90) * 90;\n  },\n\n  /**\n   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  straighten: function() {\n    this.rotate(this._getAngleValueForStraighten());\n    return this;\n  },\n\n  /**\n   * Same as {@link fabric.Object.prototype.straighten} but with animation\n   * @param {Object} callbacks Object with callback functions\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  fxStraighten: function(callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: this.get('angle'),\n      endValue: this._getAngleValueForStraighten(),\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        _this.rotate(value);\n        onChange();\n      },\n      onComplete: function() {\n        _this.setCoords();\n        onComplete();\n      },\n    });\n\n    return this;\n  }\n});\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Straightens object, then rerenders canvas\n   * @param {fabric.Object} object Object to straighten\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  straightenObject: function (object) {\n    object.straighten();\n    this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated\n   * @param {fabric.Object} object Object to straighten\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxStraightenObject: function (object) {\n    object.fxStraighten({\n      onChange: this.requestRenderAllBound\n    });\n    return this;\n  }\n});\n\n\n(function() {\n\n  'use strict';\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  function testPrecision(gl, precision){\n    var fragmentSource = 'precision ' + precision + ' float;\\nvoid main(){}';\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Indicate whether this filtering backend is supported by the user's browser.\n   * @param {Number} tileSize check if the tileSize is supported\n   * @returns {Boolean} Whether the user's browser supports WebGL.\n   */\n  fabric.isWebglSupported = function(tileSize) {\n    if (fabric.isLikelyNode) {\n      return false;\n    }\n    tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;\n    var canvas = document.createElement('canvas');\n    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    var isSupported = false;\n    // eslint-disable-next-line\n    if (gl) {\n      fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      isSupported = fabric.maxTextureSize >= tileSize;\n      var precisions = ['highp', 'mediump', 'lowp'];\n      for (var i = 0; i < 3; i++){\n        if (testPrecision(gl, precisions[i])){\n          fabric.webGlPrecision = precisions[i];\n          break;\n        };\n      }\n    }\n    this.isSupported = isSupported;\n    return isSupported;\n  };\n\n  fabric.WebglFilterBackend = WebglFilterBackend;\n\n  /**\n   * WebGL filter backend.\n   */\n  function WebglFilterBackend(options) {\n    if (options && options.tileSize) {\n      this.tileSize = options.tileSize;\n    }\n    this.setupGLContext(this.tileSize, this.tileSize);\n    this.captureGPUInfo();\n  };\n\n  WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {\n\n    tileSize: 2048,\n\n    /**\n     * Experimental. This object is a sort of repository of help layers used to avoid\n     * of recreating them during frequent filtering. If you are previewing a filter with\n     * a slider you problably do not want to create help layers every filter step.\n     * in this object there will be appended some canvases, created once, resized sometimes\n     * cleared never. Clearing is left to the developer.\n     **/\n    resources: {\n\n    },\n\n    /**\n     * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n     */\n    setupGLContext: function(width, height) {\n      this.dispose();\n      this.createWebGLCanvas(width, height);\n      // eslint-disable-next-line\n      this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n      this.chooseFastestCopyGLTo2DMethod(width, height);\n    },\n\n    /**\n     * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n     * putImageData is faster than drawImage for that specific operation.\n     */\n    chooseFastestCopyGLTo2DMethod: function(width, height) {\n      var canMeasurePerf = typeof window.performance !== 'undefined';\n      var canUseImageData;\n      try {\n        new ImageData(1, 1);\n        canUseImageData = true;\n      }\n      catch (e) {\n        canUseImageData = false;\n      }\n      // eslint-disable-next-line no-undef\n      var canUseArrayBuffer = typeof ArrayBuffer !== 'undefined';\n      // eslint-disable-next-line no-undef\n      var canUseUint8Clamped = typeof Uint8ClampedArray !== 'undefined';\n\n      if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {\n        return;\n      }\n\n      var targetCanvas = fabric.util.createCanvasElement();\n      // eslint-disable-next-line no-undef\n      var imageBuffer = new ArrayBuffer(width * height * 4);\n      var testContext = {\n        imageBuffer: imageBuffer,\n        destinationWidth: width,\n        destinationHeight: height,\n        targetCanvas: targetCanvas\n      };\n      var startTime, drawImageTime, putImageDataTime;\n      targetCanvas.width = width;\n      targetCanvas.height = height;\n\n      startTime = window.performance.now();\n      copyGLTo2DDrawImage.call(testContext, this.gl, testContext);\n      drawImageTime = window.performance.now() - startTime;\n\n      startTime = window.performance.now();\n      copyGLTo2DPutImageData.call(testContext, this.gl, testContext);\n      putImageDataTime = window.performance.now() - startTime;\n\n      if (drawImageTime > putImageDataTime) {\n        this.imageBuffer = imageBuffer;\n        this.copyGLTo2D = copyGLTo2DPutImageData;\n      }\n      else {\n        this.copyGLTo2D = copyGLTo2DDrawImage;\n      }\n    },\n\n    /**\n     * Create a canvas element and associated WebGL context and attaches them as\n     * class properties to the GLFilterBackend class.\n     */\n    createWebGLCanvas: function(width, height) {\n      var canvas = fabric.util.createCanvasElement();\n      canvas.width = width;\n      canvas.height = height;\n      var glOptions = {\n            alpha: true,\n            premultipliedAlpha: false,\n            depth: false,\n            stencil: false,\n            antialias: false\n          },\n          gl = canvas.getContext('webgl', glOptions);\n      if (!gl) {\n        gl = canvas.getContext('experimental-webgl', glOptions);\n      }\n      if (!gl) {\n        return;\n      }\n      gl.clearColor(0, 0, 0, 0);\n      // this canvas can fire webglcontextlost and webglcontextrestored\n      this.canvas = canvas;\n      this.gl = gl;\n    },\n\n    /**\n     * Attempts to apply the requested filters to the source provided, drawing the filtered output\n     * to the provided target canvas.\n     *\n     * @param {Array} filters The filters to apply.\n     * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.\n     * @param {Number} width The width of the source input.\n     * @param {Number} height The height of the source input.\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n     * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n     * omitted, caching will be skipped.\n     */\n    applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {\n      var gl = this.gl;\n      var cachedTexture;\n      if (cacheKey) {\n        cachedTexture = this.getCachedTexture(cacheKey, source);\n      }\n      var pipelineState = {\n        originalWidth: source.width || source.originalWidth,\n        originalHeight: source.height || source.originalHeight,\n        sourceWidth: width,\n        sourceHeight: height,\n        destinationWidth: width,\n        destinationHeight: height,\n        context: gl,\n        sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),\n        targetTexture: this.createTexture(gl, width, height),\n        originalTexture: cachedTexture ||\n          this.createTexture(gl, width, height, !cachedTexture && source),\n        passes: filters.length,\n        webgl: true,\n        aPosition: this.aPosition,\n        programCache: this.programCache,\n        pass: 0,\n        filterBackend: this,\n        targetCanvas: targetCanvas\n      };\n      var tempFbo = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n      filters.forEach(function(filter) { filter && filter.applyTo(pipelineState); });\n      resizeCanvasIfNeeded(pipelineState);\n      this.copyGLTo2D(gl, pipelineState);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n      gl.deleteTexture(pipelineState.sourceTexture);\n      gl.deleteTexture(pipelineState.targetTexture);\n      gl.deleteFramebuffer(tempFbo);\n      targetCanvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);\n      return pipelineState;\n    },\n\n    /**\n     * Detach event listeners, remove references, and clean up caches.\n     */\n    dispose: function() {\n      if (this.canvas) {\n        this.canvas = null;\n        this.gl = null;\n      }\n      this.clearWebGLCaches();\n    },\n\n    /**\n     * Wipe out WebGL-related caches.\n     */\n    clearWebGLCaches: function() {\n      this.programCache = {};\n      this.textureCache = {};\n    },\n\n    /**\n     * Create a WebGL texture object.\n     *\n     * Accepts specific dimensions to initialize the textuer to or a source image.\n     *\n     * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n     * @param {Number} width The width to initialize the texture at.\n     * @param {Number} height The height to initialize the texture.\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.\n     * @returns {WebGLTexture}\n     */\n    createTexture: function(gl, width, height, textureImageSource) {\n      var texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      if (textureImageSource) {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);\n      }\n      else {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      }\n      return texture;\n    },\n\n    /**\n     * Can be optionally used to get a texture from the cache array\n     *\n     * If an existing texture is not found, a new texture is created and cached.\n     *\n     * @param {String} uniqueId A cache key to use to find an existing texture.\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n     * texture cache entry if one does not already exist.\n     */\n    getCachedTexture: function(uniqueId, textureImageSource) {\n      if (this.textureCache[uniqueId]) {\n        return this.textureCache[uniqueId];\n      }\n      else {\n        var texture = this.createTexture(\n          this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);\n        this.textureCache[uniqueId] = texture;\n        return texture;\n      }\n    },\n\n    /**\n     * Clear out cached resources related to a source image that has been\n     * filtered previously.\n     *\n     * @param {String} cacheKey The cache key provided when the source image was filtered.\n     */\n    evictCachesForKey: function(cacheKey) {\n      if (this.textureCache[cacheKey]) {\n        this.gl.deleteTexture(this.textureCache[cacheKey]);\n        delete this.textureCache[cacheKey];\n      }\n    },\n\n    copyGLTo2D: copyGLTo2DDrawImage,\n\n    /**\n     * Attempt to extract GPU information strings from a WebGL context.\n     *\n     * Useful information when debugging or blacklisting specific GPUs.\n     *\n     * @returns {Object} A GPU info object with renderer and vendor strings.\n     */\n    captureGPUInfo: function() {\n      if (this.gpuInfo) {\n        return this.gpuInfo;\n      }\n      var gl = this.gl, gpuInfo = { renderer: '', vendor: '' };\n      if (!gl) {\n        return gpuInfo;\n      }\n      var ext = gl.getExtension('WEBGL_debug_renderer_info');\n      if (ext) {\n        var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n        var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n        if (renderer) {\n          gpuInfo.renderer = renderer.toLowerCase();\n        }\n        if (vendor) {\n          gpuInfo.vendor = vendor.toLowerCase();\n        }\n      }\n      this.gpuInfo = gpuInfo;\n      return gpuInfo;\n    },\n  };\n})();\n\nfunction resizeCanvasIfNeeded(pipelineState) {\n  var targetCanvas = pipelineState.targetCanvas,\n      width = targetCanvas.width, height = targetCanvas.height,\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n\n/**\n * Copy an input WebGL canvas on to an output 2D canvas.\n *\n * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n * desired output image appearing in the bottom-left corner of the WebGL canvas.\n *\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n * @param {Object} pipelineState The 2D target canvas to copy on to.\n */\nfunction copyGLTo2DDrawImage(gl, pipelineState) {\n  var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n  ctx.translate(0, targetCanvas.height); // move it down again\n  ctx.scale(1, -1); // vertical flip\n  // where is my image on the big glcanvas?\n  var sourceY = glCanvas.height - targetCanvas.height;\n  ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0,\n    targetCanvas.width, targetCanvas.height);\n}\n\n/**\n * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n *\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n * @param {Object} pipelineState The 2D target canvas to copy on to.\n */\nfunction copyGLTo2DPutImageData(gl, pipelineState) {\n  var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n\n  // eslint-disable-next-line no-undef\n  var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n  // eslint-disable-next-line no-undef\n  var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n  gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n  var imgData = new ImageData(u8Clamped, dWidth, dHeight);\n  ctx.putImageData(imgData, 0, 0);\n}\n\n\n(function() {\n\n  'use strict';\n\n  var noop = function() {};\n\n  fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;\n\n  /**\n   * Canvas 2D filter backend.\n   */\n  function Canvas2dFilterBackend() {};\n\n  Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {\n    evictCachesForKey: noop,\n    dispose: noop,\n    clearWebGLCaches: noop,\n\n    /**\n     * Experimental. This object is a sort of repository of help layers used to avoid\n     * of recreating them during frequent filtering. If you are previewing a filter with\n     * a slider you probably do not want to create help layers every filter step.\n     * in this object there will be appended some canvases, created once, resized sometimes\n     * cleared never. Clearing is left to the developer.\n     **/\n    resources: {\n\n    },\n\n    /**\n     * Apply a set of filters against a source image and draw the filtered output\n     * to the provided destination canvas.\n     *\n     * @param {EnhancedFilter} filters The filter to apply.\n     * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n     * @param {Number} sourceWidth The width of the source input.\n     * @param {Number} sourceHeight The height of the source input.\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n     */\n    applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {\n      var ctx = targetCanvas.getContext('2d');\n      ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n      var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n      var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n      var pipelineState = {\n        sourceWidth: sourceWidth,\n        sourceHeight: sourceHeight,\n        imageData: imageData,\n        originalEl: sourceElement,\n        originalImageData: originalImageData,\n        canvasEl: targetCanvas,\n        ctx: ctx,\n        filterBackend: this,\n      };\n      filters.forEach(function(filter) { filter.applyTo(pipelineState); });\n      if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {\n        targetCanvas.width = pipelineState.imageData.width;\n        targetCanvas.height = pipelineState.imageData.height;\n      }\n      ctx.putImageData(pipelineState.imageData, 0, 0);\n      return pipelineState;\n    },\n\n  };\n})();\n\n\n/**\n * @namespace fabric.Image.filters\n * @memberOf fabric.Image\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}\n * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n */\nfabric.Image = fabric.Image || { };\nfabric.Image.filters = fabric.Image.filters || { };\n\n/**\n * Root filter class from which all filter classes inherit from\n * @class fabric.Image.filters.BaseFilter\n * @memberOf fabric.Image.filters\n */\nfabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\n\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  type: 'BaseFilter',\n\n  /**\n   * Array of attributes to send with buffers. do not modify\n   * @private\n   */\n\n  vertexSource: 'attribute vec2 aPosition;\\n' +\n    'varying vec2 vTexCoord;\\n' +\n    'void main() {\\n' +\n      'vTexCoord = aPosition;\\n' +\n      'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\n    '}',\n\n  fragmentSource: 'precision highp float;\\n' +\n    'varying vec2 vTexCoord;\\n' +\n    'uniform sampler2D uTexture;\\n' +\n    'void main() {\\n' +\n      'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\n    '}',\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  initialize: function(options) {\n    if (options) {\n      this.setOptions(options);\n    }\n  },\n\n  /**\n   * Sets filter's properties from options\n   * @param {Object} [options] Options object\n   */\n  setOptions: function(options) {\n    for (var prop in options) {\n      this[prop] = options[prop];\n    }\n  },\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram: function(gl, fragmentSource, vertexSource) {\n    fragmentSource = fragmentSource || this.fragmentSource;\n    vertexSource = vertexSource || this.vertexSource;\n    if (fabric.webGlPrecision !== 'highp'){\n      fragmentSource = fragmentSource.replace(\n        /precision highp float/g,\n        'precision ' + fabric.webGlPrecision + ' float'\n      );\n    }\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new Error(\n        // eslint-disable-next-line prefer-template\n        'Vertex shader compile error for ' + this.type + ': ' +\n        gl.getShaderInfoLog(vertexShader)\n      );\n    }\n\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new Error(\n        // eslint-disable-next-line prefer-template\n        'Fragment shader compile error for ' + this.type + ': ' +\n        gl.getShaderInfoLog(fragmentShader)\n      );\n    }\n\n    var program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new Error(\n        // eslint-disable-next-line prefer-template\n        'Shader link error for \"${this.type}\" ' +\n        gl.getProgramInfoLog(program)\n      );\n    }\n\n    var attributeLocations = this.getAttributeLocations(gl, program);\n    var uniformLocations = this.getUniformLocations(gl, program) || { };\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n    return {\n      program: program,\n      attributeLocations: attributeLocations,\n      uniformLocations: uniformLocations\n    };\n  },\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations: function(gl, program) {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  },\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations: function (/* gl, program */) {\n    // in case i do not need any special uniform i need to return an empty object\n    return { };\n  },\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData: function(gl, attributeLocations, aPositionData) {\n    var attributeLocation = attributeLocations.aPosition;\n    var buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  },\n\n  _setupFrameBuffer: function(options) {\n    var gl = options.context, width, height;\n    if (options.passes > 1) {\n      width = options.destinationWidth;\n      height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(gl, width, height);\n      }\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,\n        options.targetTexture, 0);\n    }\n    else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  },\n\n  _swapTextures: function(options) {\n    options.passes--;\n    options.pass++;\n    var temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  },\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own verison ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  isNeutralState: function(/* options */) {\n    var main = this.mainParameter,\n        _class = fabric.Image.filters[this.type].prototype;\n    if (main) {\n      if (Array.isArray(_class[main])) {\n        for (var i = _class[main].length; i--;) {\n          if (this[main][i] !== _class[main][i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n      else {\n        return _class[main] === this[main];\n      }\n    }\n    else {\n      return false;\n    }\n  },\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo: function(options) {\n    if (options.webgl) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    }\n    else {\n      this.applyTo2d(options);\n    }\n  },\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  retrieveShader: function(options) {\n    if (!options.programCache.hasOwnProperty(this.type)) {\n      options.programCache[this.type] = this.createProgram(options.context);\n    }\n    return options.programCache[this.type];\n  },\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL: function(options) {\n    var gl = options.context;\n    var shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    }\n    else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  },\n\n  bindAdditionalTexture: function(gl, texture, textureUnit) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  },\n\n  unbindAdditionalTexture: function(gl, textureUnit) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  },\n\n  getMainParameter: function() {\n    return this[this.mainParameter];\n  },\n\n  setMainParameter: function(value) {\n    this[this.mainParameter] = value;\n  },\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData: function(/* gl, uniformLocations */) {\n    // Intentionally left blank.  Override me in subclasses.\n  },\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer: function(options) {\n    if (!options.helpLayer) {\n      var helpLayer = document.createElement('canvas');\n      helpLayer.width = options.sourceWidth;\n      helpLayer.height = options.sourceHeight;\n      options.helpLayer = helpLayer;\n    }\n  },\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject: function() {\n    var object = { type: this.type }, mainP = this.mainParameter;\n    if (mainP) {\n      object[mainP] = this[mainP];\n    }\n    return object;\n  },\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON: function() {\n    // delegate, not alias\n    return this.toObject();\n  }\n});\n\nfabric.Image.filters.BaseFilter.fromObject = function(object, callback) {\n  var filter = new fabric.Image.filters[object.type](object);\n  callback && callback(filter);\n  return filter;\n};\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Color Matrix filter class\n   * @class fabric.Image.filters.ColorMatrix\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}\n   * @example <caption>Kodachrome filter</caption>\n   * var filter = new fabric.Image.filters.ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'ColorMatrix',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'uniform mat4 uColorMatrix;\\n' +\n      'uniform vec4 uConstants;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'color *= uColorMatrix;\\n' +\n        'color += uConstants;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Colormatrix for pixels.\n     * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n     * outside the -1, 1 range.\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n     * @param {Array} matrix array of 20 numbers.\n     * @default\n     */\n    matrix: [\n      1, 0, 0, 0, 0,\n      0, 1, 0, 0, 0,\n      0, 0, 1, 0, 0,\n      0, 0, 0, 1, 0\n    ],\n\n    mainParameter: 'matrix',\n\n    /**\n     * Lock the colormatrix on the color part, skipping alpha, manly for non webgl scenario\n     * to save some calculation\n     */\n    colorsOnly: true,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      // create a new array instead mutating the prototype with push\n      this.matrix = this.matrix.slice(0);\n    },\n\n    /**\n     * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data,\n          iLen = data.length,\n          m = this.matrix,\n          r, g, b, a, i, colorsOnly = this.colorsOnly;\n\n      for (i = 0; i < iLen; i += 4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n        if (colorsOnly) {\n          data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n        }\n        else {\n          a = data[i + 3];\n          data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\n          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\n          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\n          data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),\n        uConstants: gl.getUniformLocation(program, 'uConstants'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var m = this.matrix,\n          matrix = [\n            m[0], m[1], m[2], m[3],\n            m[5], m[6], m[7], m[8],\n            m[10], m[11], m[12], m[13],\n            m[15], m[16], m[17], m[18]\n          ],\n          constants = [m[4], m[9], m[14], m[19]];\n      gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n      gl.uniform4fv(uniformLocations.uConstants, constants);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] function to invoke after filter creation\n   * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix\n   */\n  fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Brightness filter class\n   * @class fabric.Image.filters.Brightness\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Brightness({\n   *   brightness: 0.05\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Brightness',\n\n    /**\n     * Fragment source for the brightness program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uBrightness;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'color.rgb += uBrightness;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Brightness value, from -1 to 1.\n     * translated to -255 to 255 for 2d\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n     * @param {Number} brightness\n     * @default\n     */\n    brightness: 0,\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'brightness',\n\n    /**\n    * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n    *\n    * @param {Object} options\n    * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n    */\n    applyTo2d: function(options) {\n      if (this.brightness === 0) {\n        return;\n      }\n      var imageData = options.imageData,\n          data = imageData.data, i, len = data.length,\n          brightness = Math.round(this.brightness * 255);\n      for (i = 0; i < len; i += 4) {\n        data[i] = data[i] + brightness;\n        data[i + 1] = data[i + 1] + brightness;\n        data[i + 2] = data[i + 2] + brightness;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uBrightness: gl.getUniformLocation(program, 'uBrightness'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\n   */\n  fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n   * @class fabric.Image.filters.Convolute\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example <caption>Sharpen filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 0, -1,  0,\n   *            -1,  5, -1,\n   *             0, -1,  0 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Blur filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Emboss filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Emboss filter with opaqueness</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   opaque: true,\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Convolute',\n\n    /*\n     * Opaque value (true/false)\n     */\n    opaque: false,\n\n    /*\n     * matrix for the filter, max 9x9\n     */\n    matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n\n    /**\n     * Fragment source for the brightness program\n     */\n    fragmentSource: {\n      Convolute_3_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[9];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_3_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[9];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n      Convolute_5_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[25];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_5_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[25];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n      Convolute_7_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[49];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_7_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[49];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n      Convolute_9_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[81];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_9_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[81];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n    },\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Convolute.prototype\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.opaque=false] Opaque value (true/false)\n     * @param {Array} [options.matrix] Filter matrix\n     */\n\n\n    /**\n    * Retrieves the cached shader.\n    * @param {Object} options\n    * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n    * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n    */\n    retrieveShader: function(options) {\n      var size = Math.sqrt(this.matrix.length);\n      var cacheKey = this.type + '_' + size + '_' + (this.opaque ? 1 : 0);\n      var shaderSource = this.fragmentSource[cacheKey];\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    /**\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data,\n          weights = this.matrix,\n          side = Math.round(Math.sqrt(weights.length)),\n          halfSide = Math.floor(side / 2),\n          sw = imageData.width,\n          sh = imageData.height,\n          output = options.ctx.createImageData(sw, sh),\n          dst = output.data,\n          // go through the destination image pixels\n          alphaFac = this.opaque ? 1 : 0,\n          r, g, b, a, dstOff,\n          scx, scy, srcOff, wt,\n          x, y, cx, cy;\n\n      for (y = 0; y < sh; y++) {\n        for (x = 0; x < sw; x++) {\n          dstOff = (y * sw + x) * 4;\n          // calculate the weighed sum of the source image pixels that\n          // fall under the convolution matrix\n          r = 0; g = 0; b = 0; a = 0;\n\n          for (cy = 0; cy < side; cy++) {\n            for (cx = 0; cx < side; cx++) {\n              scy = y + cy - halfSide;\n              scx = x + cx - halfSide;\n\n              // eslint-disable-next-line max-depth\n              if (scy < 0 || scy > sh || scx < 0 || scx > sw) {\n                continue;\n              }\n\n              srcOff = (scy * sw + scx) * 4;\n              wt = weights[cy * side + cx];\n\n              r += data[srcOff] * wt;\n              g += data[srcOff + 1] * wt;\n              b += data[srcOff + 2] * wt;\n              // eslint-disable-next-line max-depth\n              if (!alphaFac) {\n                a += data[srcOff + 3] * wt;\n              }\n            }\n          }\n          dst[dstOff] = r;\n          dst[dstOff + 1] = g;\n          dst[dstOff + 2] = b;\n          if (!alphaFac) {\n            dst[dstOff + 3] = a;\n          }\n          else {\n            dst[dstOff + 3] = data[dstOff + 3];\n          }\n        }\n      }\n      options.imageData = output;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uMatrix: gl.getUniformLocation(program, 'uMatrix'),\n        uOpaque: gl.getUniformLocation(program, 'uOpaque'),\n        uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),\n        uSize: gl.getUniformLocation(program, 'uSize'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        opaque: this.opaque,\n        matrix: this.matrix\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\n   */\n  fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Grayscale image filter class\n   * @class fabric.Image.filters.Grayscale\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Grayscale();\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Grayscale',\n\n    fragmentSource: {\n      average: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'float average = (color.r + color.b + color.g) / 3.0;\\n' +\n          'gl_FragColor = vec4(average, average, average, color.a);\\n' +\n        '}',\n      lightness: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform int uMode;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\n          'float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n' +\n          'gl_FragColor = vec4(average, average, average, col.a);\\n' +\n        '}',\n      luminosity: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform int uMode;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\n          'float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n' +\n          'gl_FragColor = vec4(average, average, average, col.a);\\n' +\n        '}',\n    },\n\n\n    /**\n     * Grayscale mode, between 'average', 'lightness', 'luminosity'\n     * @param {String} type\n     * @default\n     */\n    mode: 'average',\n\n    mainParameter: 'mode',\n\n    /**\n     * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, i,\n          len = data.length, value,\n          mode = this.mode;\n      for (i = 0; i < len; i += 4) {\n        if (mode === 'average') {\n          value = (data[i] + data[i + 1] + data[i + 2]) / 3;\n        }\n        else if (mode === 'lightness') {\n          value = (Math.min(data[i], data[i + 1], data[i + 2]) +\n            Math.max(data[i], data[i + 1], data[i + 2])) / 2;\n        }\n        else if (mode === 'luminosity') {\n          value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\n        }\n        data[i] = value;\n        data[i + 1] = value;\n        data[i + 2] = value;\n      }\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var cacheKey = this.type + '_' + this.mode;\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        var shaderSource = this.fragmentSource[this.mode];\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uMode: gl.getUniformLocation(program, 'uMode'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      // default average mode.\n      var mode = 1;\n      gl.uniform1i(uniformLocations.uMode, mode);\n    },\n\n    /**\n     * Grayscale filter isNeutralState implementation\n     * The filter is never neutral\n     * on the image\n     **/\n    isNeutralState: function() {\n      return false;\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\n   */\n  fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Invert filter class\n   * @class fabric.Image.filters.Invert\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Invert();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Invert',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform int uInvert;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'if (uInvert == 1) {\\n' +\n          'gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n' +\n        '} else {\\n' +\n          'gl_FragColor = color;\\n' +\n        '}\\n' +\n      '}',\n\n    /**\n     * Filter invert. if false, does nothing\n     * @param {Boolean} invert\n     * @default\n     */\n    invert: true,\n\n    mainParameter: 'invert',\n\n    /**\n     * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, i,\n          len = data.length;\n      for (i = 0; i < len; i += 4) {\n        data[i] = 255 - data[i];\n        data[i + 1] = 255 - data[i + 1];\n        data[i + 2] = 255 - data[i + 2];\n      }\n    },\n\n    /**\n     * Invert filter isNeutralState implementation\n     * Used only in image applyFilters to discard filters that will not have an effect\n     * on the image\n     * @param {Object} options\n     **/\n    isNeutralState: function() {\n      return !this.invert;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uInvert: gl.getUniformLocation(program, 'uInvert'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1i(uniformLocations.uInvert, this.invert);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\n   */\n  fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Noise filter class\n   * @class fabric.Image.filters.Noise\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Noise({\n   *   noise: 700\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Noise',\n\n    /**\n     * Fragment source for the noise program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uStepH;\\n' +\n      'uniform float uNoise;\\n' +\n      'uniform float uSeed;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'float rand(vec2 co, float seed, float vScale) {\\n' +\n        'return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n' +\n      '}\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'noise',\n\n    /**\n     * Noise value, from\n     * @param {Number} noise\n     * @default\n     */\n    noise: 0,\n\n    /**\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      if (this.noise === 0) {\n        return;\n      }\n      var imageData = options.imageData,\n          data = imageData.data, i, len = data.length,\n          noise = this.noise, rand;\n\n      for (i = 0, len = data.length; i < len; i += 4) {\n\n        rand = (0.5 - Math.random()) * noise;\n\n        data[i] += rand;\n        data[i + 1] += rand;\n        data[i + 2] += rand;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uNoise: gl.getUniformLocation(program, 'uNoise'),\n        uSeed: gl.getUniformLocation(program, 'uSeed'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n      gl.uniform1f(uniformLocations.uSeed, Math.random());\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        noise: this.noise\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\n   */\n  fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Pixelate filter class\n   * @class fabric.Image.filters.Pixelate\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Pixelate({\n   *   blocksize: 8\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Pixelate',\n\n    blocksize: 4,\n\n    mainParameter: 'blocksize',\n\n    /**\n     * Fragment source for the Pixelate program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uBlocksize;\\n' +\n      'uniform float uStepW;\\n' +\n      'uniform float uStepH;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'float blockW = uBlocksize * uStepW;\\n' +\n        'float blockH = uBlocksize * uStepW;\\n' +\n        'int posX = int(vTexCoord.x / blockW);\\n' +\n        'int posY = int(vTexCoord.y / blockH);\\n' +\n        'float fposX = float(posX);\\n' +\n        'float fposY = float(posY);\\n' +\n        'vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n' +\n        'vec4 color = texture2D(uTexture, squareCoords);\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data,\n          iLen = imageData.height,\n          jLen = imageData.width,\n          index, i, j, r, g, b, a,\n          _i, _j, _iLen, _jLen;\n\n      for (i = 0; i < iLen; i += this.blocksize) {\n        for (j = 0; j < jLen; j += this.blocksize) {\n\n          index = (i * 4) * jLen + (j * 4);\n\n          r = data[index];\n          g = data[index + 1];\n          b = data[index + 2];\n          a = data[index + 3];\n\n          _iLen = Math.min(i + this.blocksize, iLen);\n          _jLen = Math.min(j + this.blocksize, jLen);\n          for (_i = i; _i < _iLen; _i++) {\n            for (_j = j; _j < _jLen; _j++) {\n              index = (_i * 4) * jLen + (_j * 4);\n              data[index] = r;\n              data[index + 1] = g;\n              data[index + 2] = b;\n              data[index + 3] = a;\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Indicate when the filter is not gonna apply changes to the image\n     **/\n    isNeutralState: function() {\n      return this.blocksize === 1;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),\n        uStepW: gl.getUniformLocation(program, 'uStepW'),\n        uStepH: gl.getUniformLocation(program, 'uStepH'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\n   */\n  fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Remove white filter class\n   * @class fabric.Image.filters.RemoveColor\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.RemoveColor({\n   *   threshold: 0.2,\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'RemoveColor',\n\n    /**\n     * Color to remove, in any format understood by fabric.Color.\n     * @param {String} type\n     * @default\n     */\n    color: '#FFFFFF',\n\n    /**\n     * Fragment source for the brightness program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec4 uLow;\\n' +\n      'uniform vec4 uHigh;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\n        'if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n' +\n          'gl_FragColor.a = 0.0;\\n' +\n        '}\\n' +\n      '}',\n\n    /**\n     * distance to actual color, as value up or down from each r,g,b\n     * between 0 and 1\n     **/\n    distance: 0.02,\n\n    /**\n     * For color to remove inside distance, use alpha channel for a smoother deletion\n     * NOT IMPLEMENTED YET\n     **/\n    useAlpha: false,\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.RemoveWhite.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.color=#RRGGBB] Threshold value\n     * @param {Number} [options.distance=10] Distance value\n     */\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, i,\n          distance = this.distance * 255,\n          r, g, b,\n          source = new fabric.Color(this.color).getSource(),\n          lowC = [\n            source[0] - distance,\n            source[1] - distance,\n            source[2] - distance,\n          ],\n          highC = [\n            source[0] + distance,\n            source[1] + distance,\n            source[2] + distance,\n          ];\n\n\n      for (i = 0; i < data.length; i += 4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        if (r > lowC[0] &&\n            g > lowC[1] &&\n            b > lowC[2] &&\n            r < highC[0] &&\n            g < highC[1] &&\n            b < highC[2]) {\n          data[i + 3] = 0;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uLow: gl.getUniformLocation(program, 'uLow'),\n        uHigh: gl.getUniformLocation(program, 'uHigh'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var source = new fabric.Color(this.color).getSource(),\n          distance = parseFloat(this.distance),\n          lowC = [\n            0 + source[0] / 255 - distance,\n            0 + source[1] / 255 - distance,\n            0 + source[2] / 255 - distance,\n            1\n          ],\n          highC = [\n            source[0] / 255 + distance,\n            source[1] / 255 + distance,\n            source[2] / 255 + distance,\n            1\n          ];\n      gl.uniform4fv(uniformLocations.uLow, lowC);\n      gl.uniform4fv(uniformLocations.uHigh, highC);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        color: this.color,\n        distance: this.distance\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite\n   */\n  fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  var matrices = {\n    Brownie: [\n      0.59970,0.34553,-0.27082,0,0.186,\n      -0.03770,0.86095,0.15059,0,-0.1449,\n      0.24113,-0.07441,0.44972,0,-0.02965,\n      0,0,0,1,0\n    ],\n    Vintage: [\n      0.62793,0.32021,-0.03965,0,0.03784,\n      0.02578,0.64411,0.03259,0,0.02926,\n      0.04660,-0.08512,0.52416,0,0.02023,\n      0,0,0,1,0\n    ],\n    Kodachrome: [\n      1.12855,-0.39673,-0.03992,0,0.24991,\n      -0.16404,1.08352,-0.05498,0,0.09698,\n      -0.16786,-0.56034,1.60148,0,0.13972,\n      0,0,0,1,0\n    ],\n    Technicolor: [\n      1.91252,-0.85453,-0.09155,0,0.04624,\n      -0.30878,1.76589,-0.10601,0,-0.27589,\n      -0.23110,-0.75018,1.84759,0,0.12137,\n      0,0,0,1,0\n    ],\n    Polaroid: [\n      1.438,-0.062,-0.062,0,0,\n      -0.122,1.378,-0.122,0,0,\n      -0.016,-0.016,1.483,0,0,\n      0,0,0,1,0\n    ],\n    Sepia: [\n      0.393, 0.769, 0.189, 0, 0,\n      0.349, 0.686, 0.168, 0, 0,\n      0.272, 0.534, 0.131, 0, 0,\n      0, 0, 0, 1, 0\n    ],\n    BlackWhite: [\n      1.5, 1.5, 1.5, 0, -1,\n      1.5, 1.5, 1.5, 0, -1,\n      1.5, 1.5, 1.5, 0, -1,\n      0, 0, 0, 1, 0,\n    ]\n  };\n\n  for (var key in matrices) {\n    filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: key,\n\n      /**\n       * Colormatrix for the effect\n       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n       * outside the -1, 1 range.\n       * @param {Array} matrix array of 20 numbers.\n       * @default\n       */\n      matrix: matrices[key],\n\n      /**\n       * Lock the matrix export for this kind of static, parameter less filters.\n       */\n      mainParameter: false,\n      /**\n       * Lock the colormatrix on the color part, skipping alpha\n       */\n      colorsOnly: true,\n\n    });\n    fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;\n  }\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n  'use strict';\n\n  var fabric = global.fabric,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Color Blend filter class\n   * @class fabric.Image.filter.BlendColor\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example\n   * var filter = new fabric.Image.filters.BlendColor({\n   *  color: '#000',\n   *  mode: 'multiply'\n   * });\n   *\n   * var filter = new fabric.Image.filters.BlendImage({\n   *  image: fabricImageObject,\n   *  mode: 'multiply',\n   *  alpha: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n\n  filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {\n    type: 'BlendColor',\n\n    /**\n     * Color to make the blend operation with. default to a reddish color since black or white\n     * gives always strong result.\n     **/\n    color: '#F95C63',\n\n    /**\n     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\n     * darken, lighten, overlay, exclusion, tint.\n     **/\n    mode: 'multiply',\n\n    /**\n     * alpha value. represent the strength of the blend color operation.\n     **/\n    alpha: 1,\n\n    /**\n     * Fragment source for the Multiply program\n     */\n    fragmentSource: {\n      multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n      screen: 'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n      add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n      diff: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n      subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n      lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n      darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n      exclusion: 'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n      overlay: 'if (uColor.r < 0.5) {\\n' +\n          'gl_FragColor.r *= 2.0 * uColor.r;\\n' +\n        '} else {\\n' +\n          'gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n' +\n        '}\\n' +\n        'if (uColor.g < 0.5) {\\n' +\n          'gl_FragColor.g *= 2.0 * uColor.g;\\n' +\n        '} else {\\n' +\n          'gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n' +\n        '}\\n' +\n        'if (uColor.b < 0.5) {\\n' +\n          'gl_FragColor.b *= 2.0 * uColor.b;\\n' +\n        '} else {\\n' +\n          'gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n' +\n        '}\\n',\n      tint: 'gl_FragColor.rgb *= (1.0 - uColor.a);\\n' +\n        'gl_FragColor.rgb += uColor.rgb;\\n',\n    },\n\n    /**\n     * build the fragment source for the filters, joining the common part with\n     * the specific one.\n     * @param {String} mode the mode of the filter, a key of this.fragmentSource\n     * @return {String} the source to be compiled\n     * @private\n     */\n    buildSource: function(mode) {\n      return 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform vec4 uColor;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'gl_FragColor = color;\\n' +\n          'if (color.a > 0.0) {\\n' +\n            this.fragmentSource[mode] +\n          '}\\n' +\n        '}';\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var cacheKey = this.type + '_' + this.mode, shaderSource;\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        shaderSource = this.buildSource(this.mode);\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    /**\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, iLen = data.length,\n          tr, tg, tb,\n          r, g, b,\n          source, alpha1 = 1 - this.alpha;\n\n      source = new fabric.Color(this.color).getSource();\n      tr = source[0] * this.alpha;\n      tg = source[1] * this.alpha;\n      tb = source[2] * this.alpha;\n\n      for (var i = 0; i < iLen; i += 4) {\n\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        switch (this.mode) {\n          case 'multiply':\n            data[i] = r * tr / 255;\n            data[i + 1] = g * tg / 255;\n            data[i + 2] = b * tb / 255;\n            break;\n          case 'screen':\n            data[i] = 255 - (255 - r) * (255 - tr) / 255;\n            data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;\n            data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;\n            break;\n          case 'add':\n            data[i] = r + tr;\n            data[i + 1] = g + tg;\n            data[i + 2] = b + tb;\n            break;\n          case 'diff':\n          case 'difference':\n            data[i] = Math.abs(r - tr);\n            data[i + 1] = Math.abs(g - tg);\n            data[i + 2] = Math.abs(b - tb);\n            break;\n          case 'subtract':\n            data[i] = r - tr;\n            data[i + 1] = g - tg;\n            data[i + 2] = b - tb;\n            break;\n          case 'darken':\n            data[i] = Math.min(r, tr);\n            data[i + 1] = Math.min(g, tg);\n            data[i + 2] = Math.min(b, tb);\n            break;\n          case 'lighten':\n            data[i] = Math.max(r, tr);\n            data[i + 1] = Math.max(g, tg);\n            data[i + 2] = Math.max(b, tb);\n            break;\n          case 'overlay':\n            data[i] = tr < 128 ? (2 * r * tr / 255) : (255 - 2 * (255 - r) * (255 - tr) / 255);\n            data[i + 1] = tg < 128 ? (2 * g * tg / 255) : (255 - 2 * (255 - g) * (255 - tg) / 255);\n            data[i + 2] = tb < 128 ? (2 * b * tb / 255) : (255 - 2 * (255 - b) * (255 - tb) / 255);\n            break;\n          case 'exclusion':\n            data[i] = tr + r - ((2 * tr * r) / 255);\n            data[i + 1] = tg + g - ((2 * tg * g) / 255);\n            data[i + 2] = tb + b - ((2 * tb * b) / 255);\n            break;\n          case 'tint':\n            data[i] = tr + r * alpha1;\n            data[i + 1] = tg + g * alpha1;\n            data[i + 2] = tb + b * alpha1;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uColor: gl.getUniformLocation(program, 'uColor'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var source = new fabric.Color(this.color).getSource();\n      source[0] = this.alpha * source[0] / 255;\n      source[1] = this.alpha * source[1] / 255;\n      source[2] = this.alpha * source[2] / 255;\n      source[3] = this.alpha;\n      gl.uniform4fv(uniformLocations.uColor, source);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        color: this.color,\n        mode: this.mode,\n        alpha: this.alpha\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor\n   */\n  fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n  'use strict';\n\n  var fabric = global.fabric,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Image Blend filter class\n   * @class fabric.Image.filter.BlendImage\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example\n   * var filter = new fabric.Image.filters.BlendColor({\n   *  color: '#000',\n   *  mode: 'multiply'\n   * });\n   *\n   * var filter = new fabric.Image.filters.BlendImage({\n   *  image: fabricImageObject,\n   *  mode: 'multiply',\n   *  alpha: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n\n  filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {\n    type: 'BlendImage',\n\n    /**\n     * Color to make the blend operation with. default to a reddish color since black or white\n     * gives always strong result.\n     **/\n    image: null,\n\n    /**\n     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\n     * darken, lighten, overlay, exclusion, tint.\n     **/\n    mode: 'multiply',\n\n    /**\n     * alpha value. represent the strength of the blend image operation.\n     * not implemented.\n     **/\n    alpha: 1,\n\n    vertexSource: 'attribute vec2 aPosition;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'varying vec2 vTexCoord2;\\n' +\n      'uniform mat3 uTransformMatrix;\\n' +\n      'void main() {\\n' +\n        'vTexCoord = aPosition;\\n' +\n        'vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n' +\n        'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\n      '}',\n\n    /**\n     * Fragment source for the Multiply program\n     */\n    fragmentSource: {\n      multiply: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform sampler2D uImage;\\n' +\n        'uniform vec4 uColor;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'varying vec2 vTexCoord2;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\n          'color.rgba *= color2.rgba;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      mask: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform sampler2D uImage;\\n' +\n        'uniform vec4 uColor;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'varying vec2 vTexCoord2;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\n          'color.a = color2.a;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var cacheKey = this.type + '_' + this.mode;\n      var shaderSource = this.fragmentSource[this.mode];\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    applyToWebGL: function(options) {\n      // load texture to blend.\n      var gl = options.context,\n          texture = this.createTexture(options.filterBackend, this.image);\n      this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);\n      this.callSuper('applyToWebGL', options);\n      this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n    },\n\n    createTexture: function(backend, image) {\n      return backend.getCachedTexture(image.cacheKey, image._element);\n    },\n\n    /**\n     * Calculate a transformMatrix to adapt the image to blend over\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    calculateMatrix: function() {\n      var image = this.image,\n          width = image._element.width,\n          height = image._element.height;\n      return [\n        1 / image.scaleX, 0, 0,\n        0, 1 / image.scaleY, 0,\n        -image.left / width, -image.top / height, 1\n      ];\n    },\n\n    /**\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          resources = options.filterBackend.resources,\n          data = imageData.data, iLen = data.length,\n          width = imageData.width,\n          height = imageData.height,\n          tr, tg, tb, ta,\n          r, g, b, a,\n          canvas1, context, image = this.image, blendData;\n\n      if (!resources.blendImage) {\n        resources.blendImage = fabric.util.createCanvasElement();\n      }\n      canvas1 = resources.blendImage;\n      context = canvas1.getContext('2d');\n      if (canvas1.width !== width || canvas1.height !== height) {\n        canvas1.width = width;\n        canvas1.height = height;\n      }\n      else {\n        context.clearRect(0, 0, width, height);\n      }\n      context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);\n      context.drawImage(image._element, 0, 0, width, height);\n      blendData = context.getImageData(0, 0, width, height).data;\n      for (var i = 0; i < iLen; i += 4) {\n\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n        a = data[i + 3];\n\n        tr = blendData[i];\n        tg = blendData[i + 1];\n        tb = blendData[i + 2];\n        ta = blendData[i + 3];\n\n        switch (this.mode) {\n          case 'multiply':\n            data[i] = r * tr / 255;\n            data[i + 1] = g * tg / 255;\n            data[i + 2] = b * tb / 255;\n            data[i + 3] = a * ta / 255;\n            break;\n          case 'mask':\n            data[i + 3] = ta;\n            break;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),\n        uImage: gl.getUniformLocation(program, 'uImage'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var matrix = this.calculateMatrix();\n      gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n      gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        image: this.image && this.image.toObject(),\n        mode: this.mode,\n        alpha: this.alpha\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} callback to be invoked after filter creation\n   * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage\n   */\n  fabric.Image.filters.BlendImage.fromObject = function(object, callback) {\n    fabric.Image.fromObject(object.image, function(image) {\n      var options = fabric.util.object.clone(object);\n      options.image = image;\n      callback(new fabric.Image.filters.BlendImage(options));\n    });\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,\n      sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin,\n      ceil = Math.ceil,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Resize image filter class\n   * @class fabric.Image.filters.Resize\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Resize();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Resize',\n\n    /**\n     * Resize type\n     * for webgl resizeType is just lanczos, for canvas2d can be:\n     * bilinear, hermite, sliceHack, lanczos.\n     * @param {String} resizeType\n     * @default\n     */\n    resizeType: 'hermite',\n\n    /**\n     * Scale factor for resizing, x axis\n     * @param {Number} scaleX\n     * @default\n     */\n    scaleX: 1,\n\n    /**\n     * Scale factor for resizing, y axis\n     * @param {Number} scaleY\n     * @default\n     */\n    scaleY: 1,\n\n    /**\n     * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n     * @param {Number} lanczosLobes\n     * @default\n     */\n    lanczosLobes: 3,\n\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uDelta: gl.getUniformLocation(program, 'uDelta'),\n        uTaps: gl.getUniformLocation(program, 'uTaps'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);\n      gl.uniform1fv(uniformLocations.uTaps, this.taps);\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var filterWindow = this.getFilterWindow(), cacheKey = this.type + '_' + filterWindow;\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        var fragmentShader = this.generateShader(filterWindow);\n        options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    getFilterWindow: function() {\n      var scale = this.tempScale;\n      return Math.ceil(this.lanczosLobes / scale);\n    },\n\n    getTaps: function() {\n      var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale,\n          filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);\n      for (var i = 1; i <= filterWindow; i++) {\n        taps[i - 1] = lobeFunction(i * scale);\n      }\n      return taps;\n    },\n\n    /**\n     * Generate vertex and shader sources from the necessary steps numbers\n     * @param {Number} filterWindow\n     */\n    generateShader: function(filterWindow) {\n      var offsets = new Array(filterWindow),\n          fragmentShader = this.fragmentSourceTOP, filterWindow;\n\n      for (var i = 1; i <= filterWindow; i++) {\n        offsets[i - 1] = i + '.0 * uDelta';\n      }\n\n      fragmentShader += 'uniform float uTaps[' + filterWindow + '];\\n';\n      fragmentShader += 'void main() {\\n';\n      fragmentShader += '  vec4 color = texture2D(uTexture, vTexCoord);\\n';\n      fragmentShader += '  float sum = 1.0;\\n';\n\n      offsets.forEach(function(offset, i) {\n        fragmentShader += '  color += texture2D(uTexture, vTexCoord + ' + offset + ') * uTaps[' + i + '];\\n';\n        fragmentShader += '  color += texture2D(uTexture, vTexCoord - ' + offset + ') * uTaps[' + i + '];\\n';\n        fragmentShader += '  sum += 2.0 * uTaps[' + i + '];\\n';\n      });\n      fragmentShader += '  gl_FragColor = color / sum;\\n';\n      fragmentShader += '}';\n      return fragmentShader;\n    },\n\n    fragmentSourceTOP: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec2 uDelta;\\n' +\n      'varying vec2 vTexCoord;\\n',\n\n    /**\n     * Apply the resize filter to the image\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be executed\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    applyTo: function(options) {\n      if (options.webgl) {\n        options.passes++;\n        this.width = options.sourceWidth;\n        this.horizontal = true;\n        this.dW = Math.round(this.width * this.scaleX);\n        this.dH = options.sourceHeight;\n        this.tempScale = this.dW / this.width;\n        this.taps = this.getTaps();\n        options.destinationWidth = this.dW;\n        this._setupFrameBuffer(options);\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n        options.sourceWidth = options.destinationWidth;\n\n        this.height = options.sourceHeight;\n        this.horizontal = false;\n        this.dH = Math.round(this.height * this.scaleY);\n        this.tempScale = this.dH / this.height;\n        this.taps = this.getTaps();\n        options.destinationHeight = this.dH;\n        this._setupFrameBuffer(options);\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n        options.sourceHeight = options.destinationHeight;\n      }\n      else {\n        this.applyTo2d(options);\n      }\n    },\n\n    isNeutralState: function() {\n      return this.scaleX === 1 && this.scaleY === 1;\n    },\n\n    lanczosCreate: function(lobes) {\n      return function(x) {\n        if (x >= lobes || x <= -lobes) {\n          return 0.0;\n        }\n        if (x < 1.19209290E-07 && x > -1.19209290E-07) {\n          return 1.0;\n        }\n        x *= Math.PI;\n        var xx = x / lobes;\n        return (sin(x) / x) * sin(xx) / xx;\n      };\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Resize.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          scaleX = this.scaleX,\n          scaleY = this.scaleY;\n\n      this.rcpScaleX = 1 / scaleX;\n      this.rcpScaleY = 1 / scaleY;\n\n      var oW = imageData.width, oH = imageData.height,\n          dW = round(oW * scaleX), dH = round(oH * scaleY),\n          newData;\n\n      if (this.resizeType === 'sliceHack') {\n        newData = this.sliceByTwo(options, oW, oH, dW, dH);\n      }\n      else if (this.resizeType === 'hermite') {\n        newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n      }\n      else if (this.resizeType === 'bilinear') {\n        newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n      }\n      else if (this.resizeType === 'lanczos') {\n        newData = this.lanczosResize(options, oW, oH, dW, dH);\n      }\n      options.imageData = newData;\n    },\n\n    /**\n     * Filter sliceByTwo\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    sliceByTwo: function(options, oW, oH, dW, dH) {\n      var imageData = options.imageData,\n          mult = 0.5, doneW = false, doneH = false, stepW = oW * mult,\n          stepH = oH * mult, resources = fabric.filterBackend.resources,\n          tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;\n      if (!resources.sliceByTwo) {\n        resources.sliceByTwo = document.createElement('canvas');\n      }\n      tmpCanvas = resources.sliceByTwo;\n      if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n        tmpCanvas.width = oW * 1.5;\n        tmpCanvas.height = oH;\n      }\n      ctx = tmpCanvas.getContext('2d');\n      ctx.clearRect(0, 0, oW * 1.5, oH);\n      ctx.putImageData(imageData, 0, 0);\n\n      dW = floor(dW);\n      dH = floor(dH);\n\n      while (!doneW || !doneH) {\n        oW = stepW;\n        oH = stepH;\n        if (dW < floor(stepW * mult)) {\n          stepW = floor(stepW * mult);\n        }\n        else {\n          stepW = dW;\n          doneW = true;\n        }\n        if (dH < floor(stepH * mult)) {\n          stepH = floor(stepH * mult);\n        }\n        else {\n          stepH = dH;\n          doneH = true;\n        }\n        ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n        sX = dX;\n        sY = dY;\n        dY += stepH;\n      }\n      return ctx.getImageData(sX, sY, dW, dH);\n    },\n\n    /**\n     * Filter lanczosResize\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    lanczosResize: function(options, oW, oH, dW, dH) {\n\n      function process(u) {\n        var v, i, weight, idx, a, red, green,\n            blue, alpha, fX, fY;\n        center.x = (u + 0.5) * ratioX;\n        icenter.x = floor(center.x);\n        for (v = 0; v < dH; v++) {\n          center.y = (v + 0.5) * ratioY;\n          icenter.y = floor(center.y);\n          a = 0; red = 0; green = 0; blue = 0; alpha = 0;\n          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n            if (i < 0 || i >= oW) {\n              continue;\n            }\n            fX = floor(1000 * abs(i - center.x));\n            if (!cacheLanc[fX]) {\n              cacheLanc[fX] = { };\n            }\n            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n              if (j < 0 || j >= oH) {\n                continue;\n              }\n              fY = floor(1000 * abs(j - center.y));\n              if (!cacheLanc[fX][fY]) {\n                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\n              }\n              weight = cacheLanc[fX][fY];\n              if (weight > 0) {\n                idx = (j * oW + i) * 4;\n                a += weight;\n                red += weight * srcData[idx];\n                green += weight * srcData[idx + 1];\n                blue += weight * srcData[idx + 2];\n                alpha += weight * srcData[idx + 3];\n              }\n            }\n          }\n          idx = (v * dW + u) * 4;\n          destData[idx] = red / a;\n          destData[idx + 1] = green / a;\n          destData[idx + 2] = blue / a;\n          destData[idx + 3] = alpha / a;\n        }\n\n        if (++u < dW) {\n          return process(u);\n        }\n        else {\n          return destImg;\n        }\n      }\n\n      var srcData = options.imageData.data,\n          destImg = options.ctx.createImageData(dW, dH),\n          destData = destImg.data,\n          lanczos = this.lanczosCreate(this.lanczosLobes),\n          ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\n          rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\n          range2X = ceil(ratioX * this.lanczosLobes / 2),\n          range2Y = ceil(ratioY * this.lanczosLobes / 2),\n          cacheLanc = { }, center = { }, icenter = { };\n\n      return process(0);\n    },\n\n    /**\n     * bilinearFiltering\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    bilinearFiltering: function(options, oW, oH, dW, dH) {\n      var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\n          color, offset = 0, origPix, ratioX = this.rcpScaleX,\n          ratioY = this.rcpScaleY,\n          w4 = 4 * (oW - 1), img = options.imageData,\n          pixels = img.data, destImage = options.ctx.createImageData(dW, dH),\n          destPixels = destImage.data;\n      for (i = 0; i < dH; i++) {\n        for (j = 0; j < dW; j++) {\n          x = floor(ratioX * j);\n          y = floor(ratioY * i);\n          xDiff = ratioX * j - x;\n          yDiff = ratioY * i - y;\n          origPix = 4 * (y * oW + x);\n\n          for (chnl = 0; chnl < 4; chnl++) {\n            a = pixels[origPix + chnl];\n            b = pixels[origPix + 4 + chnl];\n            c = pixels[origPix + w4 + chnl];\n            d = pixels[origPix + w4 + 4 + chnl];\n            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\n                    c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\n            destPixels[offset++] = color;\n          }\n        }\n      }\n      return destImage;\n    },\n\n    /**\n     * hermiteFastResize\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    hermiteFastResize: function(options, oW, oH, dW, dH) {\n      var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\n          ratioWHalf = ceil(ratioW / 2),\n          ratioHHalf = ceil(ratioH / 2),\n          img = options.imageData, data = img.data,\n          img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;\n      for (var j = 0; j < dH; j++) {\n        for (var i = 0; i < dW; i++) {\n          var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\n              gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\n          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\n                centerX = (i + 0.5) * ratioW, w0 = dy * dy;\n            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\n                  w = sqrt(w0 + dx * dx);\n              /* eslint-disable max-depth */\n              if (w > 1 && w < -1) {\n                continue;\n              }\n              //hermite filter\n              weight = 2 * w * w * w - 3 * w * w + 1;\n              if (weight > 0) {\n                dx = 4 * (xx + yy * oW);\n                //alpha\n                gxA += weight * data[dx + 3];\n                weightsAlpha += weight;\n                //colors\n                if (data[dx + 3] < 255) {\n                  weight = weight * data[dx + 3] / 250;\n                }\n                gxR += weight * data[dx];\n                gxG += weight * data[dx + 1];\n                gxB += weight * data[dx + 2];\n                weights += weight;\n              }\n              /* eslint-enable max-depth */\n            }\n          }\n          data2[x2] = gxR / weights;\n          data2[x2 + 1] = gxG / weights;\n          data2[x2 + 2] = gxB / weights;\n          data2[x2 + 3] = gxA / weightsAlpha;\n        }\n      }\n      return img2;\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        resizeType: this.resizeType,\n        lanczosLobes: this.lanczosLobes\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\n   */\n  fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Contrast filter class\n   * @class fabric.Image.filters.Contrast\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Contrast({\n   *   contrast: 40\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Contrast',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uContrast;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n' +\n        'color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    contrast: 0,\n\n    mainParameter: 'contrast',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Contrast.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)\n     */\n\n    /**\n      * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n      *\n      * @param {Object} options\n      * @param {ImageData} options.imageData The Uint8Array to be filtered.\n      */\n    applyTo2d: function(options) {\n      if (this.contrast === 0) {\n        return;\n      }\n      var imageData = options.imageData, i, len,\n          data = imageData.data, len = data.length,\n          contrast = Math.floor(this.contrast * 255),\n          contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));\n\n      for (i = 0; i < len; i += 4) {\n        data[i] = contrastF * (data[i] - 128) + 128;\n        data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n        data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uContrast: gl.getUniformLocation(program, 'uContrast'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uContrast, this.contrast);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast\n   */\n  fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Saturate filter class\n   * @class fabric.Image.filters.Saturation\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Saturation({\n   *   saturation: 100\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Saturation',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uSaturation;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'float rgMax = max(color.r, color.g);\\n' +\n        'float rgbMax = max(rgMax, color.b);\\n' +\n        'color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n' +\n        'color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n' +\n        'color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    saturation: 0,\n\n    mainParameter: 'saturation',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Saturate.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)\n     */\n\n    /**\n     * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      if (this.saturation === 0) {\n        return;\n      }\n      var imageData = options.imageData,\n          data = imageData.data, len = data.length,\n          adjust = -this.saturation, i, max;\n\n      for (i = 0; i < len; i += 4) {\n        max = Math.max(data[i], data[i + 1], data[i + 2]);\n        data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\n        data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\n        data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uSaturation: gl.getUniformLocation(program, 'uSaturation'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate\n   */\n  fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Blur filter class\n   * @class fabric.Image.filters.Blur\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Blur({\n   *   blur: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {\n\n    type: 'Blur',\n\n    /*\n'gl_FragColor = vec4(0.0);',\n'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',\n'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',\n'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',\n'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',\n'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',\n'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',\n'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',\n'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',\n'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',\n'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',\n'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',\n'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',\n'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',\n'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',\n'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',\n*/\n\n    /* eslint-disable max-len */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec2 uDelta;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'const float nSamples = 15.0;\\n' +\n      'vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n' +\n      'float random(vec3 scale) {\\n' +\n        /* use the fragment position for a different seed per-pixel */\n        'return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n' +\n      '}\\n' +\n      'void main() {\\n' +\n        'vec4 color = vec4(0.0);\\n' +\n        'float total = 0.0;\\n' +\n        'float offset = random(v3offset);\\n' +\n        'for (float t = -nSamples; t <= nSamples; t++) {\\n' +\n          'float percent = (t + offset - 0.5) / nSamples;\\n' +\n          'float weight = 1.0 - abs(percent);\\n' +\n          'color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n' +\n          'total += weight;\\n' +\n        '}\\n' +\n        'gl_FragColor = color / total;\\n' +\n      '}',\n    /* eslint-enable max-len */\n\n    /**\n     * blur value, in percentage of image dimensions.\n     * specific to keep the image blur constant at different resolutions\n     * range bewteen 0 and 1.\n     */\n    blur: 0,\n\n    mainParameter: 'blur',\n\n    applyTo: function(options) {\n      if (options.webgl) {\n        // this aspectRatio is used to give the same blur to vertical and horizontal\n        this.aspectRatio = options.sourceWidth / options.sourceHeight;\n        options.passes++;\n        this._setupFrameBuffer(options);\n        this.horizontal = true;\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n        this._setupFrameBuffer(options);\n        this.horizontal = false;\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n      }\n      else {\n        this.applyTo2d(options);\n      }\n    },\n\n    applyTo2d: function(options) {\n      // paint canvasEl with current image data.\n      //options.ctx.putImageData(options.imageData, 0, 0);\n      options.imageData = this.simpleBlur(options);\n    },\n\n    simpleBlur: function(options) {\n      var resources = options.filterBackend.resources, canvas1, canvas2,\n          width = options.imageData.width,\n          height = options.imageData.height;\n\n      if (!resources.blurLayer1) {\n        resources.blurLayer1 = fabric.util.createCanvasElement();\n        resources.blurLayer2 = fabric.util.createCanvasElement();\n      }\n      canvas1 = resources.blurLayer1;\n      canvas2 = resources.blurLayer2;\n      if (canvas1.width !== width || canvas1.height !== height) {\n        canvas2.width = canvas1.width = width;\n        canvas2.height = canvas1.height = height;\n      }\n      var ctx1 = canvas1.getContext('2d'),\n          ctx2 = canvas2.getContext('2d'),\n          nSamples = 15,\n          random, percent, j, i,\n          blur = this.blur * 0.06 * 0.5;\n\n      // load first canvas\n      ctx1.putImageData(options.imageData, 0, 0);\n      ctx2.clearRect(0, 0, width, height);\n\n      for (i = -nSamples; i <= nSamples; i++) {\n        random = (Math.random() - 0.5) / 4;\n        percent = i / nSamples;\n        j = blur * percent * width + random;\n        ctx2.globalAlpha = 1 - Math.abs(percent);\n        ctx2.drawImage(canvas1, j, random);\n        ctx1.drawImage(canvas2, 0, 0);\n        ctx2.globalAlpha = 1;\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n      }\n      for (i = -nSamples; i <= nSamples; i++) {\n        random = (Math.random() - 0.5) / 4;\n        percent = i / nSamples;\n        j = blur * percent * height + random;\n        ctx2.globalAlpha = 1 - Math.abs(percent);\n        ctx2.drawImage(canvas1, random, j);\n        ctx1.drawImage(canvas2, 0, 0);\n        ctx2.globalAlpha = 1;\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n      }\n      options.ctx.drawImage(canvas1, 0, 0);\n      var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);\n      ctx1.globalAlpha = 1;\n      ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\n      return newImageData;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        delta: gl.getUniformLocation(program, 'uDelta'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var delta = this.chooseRightDelta();\n      gl.uniform2fv(uniformLocations.delta, delta);\n    },\n\n    /**\n     * choose right value of image percentage to blur with\n     * @returns {Array} a numeric array with delta values\n     */\n    chooseRightDelta: function() {\n      var blurScale = 1, delta = [0, 0], blur;\n      if (this.horizontal) {\n        if (this.aspectRatio > 1) {\n          // image is wide, i want to shrink radius horizontal\n          blurScale = 1 / this.aspectRatio;\n        }\n      }\n      else {\n        if (this.aspectRatio < 1) {\n          // image is tall, i want to shrink radius vertical\n          blurScale = this.aspectRatio;\n        }\n      }\n      blur = blurScale * this.blur * 0.12;\n      if (this.horizontal) {\n        delta[0] = blur;\n      }\n      else {\n        delta[1] = blur;\n      }\n      return delta;\n    },\n  });\n\n  /**\n   * Deserialize a JSON definition of a BlurFilter into a concrete instance.\n   */\n  filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Gamma filter class\n   * @class fabric.Image.filters.Gamma\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Gamma({\n   *   brightness: 200\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Gamma',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec3 uGamma;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'vec3 correction = (1.0 / uGamma);\\n' +\n        'color.r = pow(color.r, correction.r);\\n' +\n        'color.g = pow(color.g, correction.g);\\n' +\n        'color.b = pow(color.b, correction.b);\\n' +\n        'gl_FragColor = color;\\n' +\n        'gl_FragColor.rgb *= color.a;\\n' +\n      '}',\n\n    /**\n     * Gamma array value, from 0.01 to 2.2.\n     * @param {Array} gamma\n     * @default\n     */\n    gamma: [1, 1, 1],\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'gamma',\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      this.gamma = [1, 1, 1];\n      filters.BaseFilter.prototype.initialize.call(this, options);\n    },\n\n    /**\n     * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData, data = imageData.data,\n          gamma = this.gamma, len = data.length,\n          rInv = 1 / gamma[0], gInv = 1 / gamma[1],\n          bInv = 1 / gamma[2], i;\n\n      if (!this.rVals) {\n        // eslint-disable-next-line\n        this.rVals = new Uint8Array(256);\n        // eslint-disable-next-line\n        this.gVals = new Uint8Array(256);\n        // eslint-disable-next-line\n        this.bVals = new Uint8Array(256);\n      }\n\n      // This is an optimization - pre-compute a look-up table for each color channel\n      // instead of performing these pow calls for each pixel in the image.\n      for (i = 0, len = 256; i < len; i++) {\n        this.rVals[i] = Math.pow(i / 255, rInv) * 255;\n        this.gVals[i] = Math.pow(i / 255, gInv) * 255;\n        this.bVals[i] = Math.pow(i / 255, bInv) * 255;\n      }\n      for (i = 0, len = data.length; i < len; i += 4) {\n        data[i] = this.rVals[data[i]];\n        data[i + 1] = this.gVals[data[i + 1]];\n        data[i + 2] = this.bVals[data[i + 2]];\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uGamma: gl.getUniformLocation(program, 'uGamma'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma\n   */\n  fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * A container class that knows how to apply a sequence of filters to an input image.\n   */\n  filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {\n\n    type: 'Composed',\n\n    /**\n     * A non sparse array of filters to apply\n     */\n    subFilters: [],\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      // create a new array instead mutating the prototype with push\n      this.subFilters = this.subFilters.slice(0);\n    },\n\n    /**\n     * Apply this container's filters to the input image provided.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be applied.\n     */\n    applyTo: function(options) {\n      options.passes += this.subFilters.length - 1;\n      this.subFilters.forEach(function(filter) {\n        filter.applyTo(options);\n      });\n    },\n\n    /**\n     * Serialize this filter into JSON.\n     *\n     * @returns {Object} A JSON representation of this filter.\n     */\n    toObject: function() {\n      return fabric.util.object.extend(this.callSuper('toObject'), {\n        subFilters: this.subFilters.map(function(filter) { return filter.toObject(); }),\n      });\n    },\n\n    isNeutralState: function() {\n      return !this.subFilters.some(function(filter) { return !filter.isNeutralState(); });\n    }\n  });\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   */\n  fabric.Image.filters.Composed.fromObject = function(object, callback) {\n    var filters = object.subFilters || [],\n        subFilters = filters.map(function(filter) {\n          return new fabric.Image.filters[filter.type](filter);\n        }),\n        instance = new fabric.Image.filters.Composed({ subFilters: subFilters });\n    callback && callback(instance);\n    return instance;\n  };\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * HueRotation filter class\n   * @class fabric.Image.filters.HueRotation\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.HueRotation({\n   *   rotation: -0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'HueRotation',\n\n    /**\n     * HueRotation value, from -1 to 1.\n     * the unit is radians\n     * @param {Number} myParameter\n     * @default\n     */\n    rotation: 0,\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'rotation',\n\n    calculateMatrix: function() {\n      var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad),\n          aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;\n      this.matrix = [\n        1, 0, 0, 0, 0,\n        0, 1, 0, 0, 0,\n        0, 0, 1, 0, 0,\n        0, 0, 0, 1, 0\n      ];\n      this.matrix[0] = cos + OneMinusCos / 3;\n      this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\n      this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\n      this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\n      this.matrix[6] = cos + aThird * OneMinusCos;\n      this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\n      this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\n      this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\n      this.matrix[12] = cos + aThird * OneMinusCos;\n    },\n\n    /**\n     * HueRotation isNeutralState implementation\n     * Used only in image applyFilters to discard filters that will not have an effect\n     * on the image\n     * @param {Object} options\n     **/\n    isNeutralState: function(options) {\n      this.calculateMatrix();\n      return filters.BaseFilter.prototype.isNeutralState.call(this, options);\n    },\n\n    /**\n     * Apply this filter to the input image data provided.\n     *\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be executed\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    applyTo: function(options) {\n      this.calculateMatrix();\n      filters.BaseFilter.prototype.applyTo.call(this, options);\n    },\n\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation\n   */\n  fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      clone = fabric.util.object.clone;\n\n  if (fabric.Text) {\n    fabric.warn('fabric.Text is already defined');\n    return;\n  }\n\n  /**\n   * Text class\n   * @class fabric.Text\n   * @extends fabric.Object\n   * @return {fabric.Text} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n   * @see {@link fabric.Text#initialize} for constructor definition\n   */\n  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\n\n    /**\n     * Properties which when set cause object to change dimensions\n     * @type Array\n     * @private\n     */\n    _dimensionAffectingProps: [\n      'fontSize',\n      'fontWeight',\n      'fontFamily',\n      'fontStyle',\n      'lineHeight',\n      'text',\n      'charSpacing',\n      'textAlign',\n      'styles',\n    ],\n\n    /**\n     * @private\n     */\n    _reNewline: /\\r?\\n/,\n\n    /**\n     * Use this regular expression to filter for whitespaces that is not a new line.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reSpacesAndTabs: /[ \\t\\r]/g,\n\n    /**\n     * Use this regular expression to filter for whitespace that is not a new line.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reSpaceAndTab: /[ \\t\\r]/,\n\n    /**\n     * Use this regular expression to filter consecutive groups of non spaces.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reWords: /\\S+/g,\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type:                 'text',\n\n    /**\n     * Font size (in pixels)\n     * @type Number\n     * @default\n     */\n    fontSize:             40,\n\n    /**\n     * Font weight (e.g. bold, normal, 400, 600, 800)\n     * @type {(Number|String)}\n     * @default\n     */\n    fontWeight:           'normal',\n\n    /**\n     * Font family\n     * @type String\n     * @default\n     */\n    fontFamily:           'Times New Roman',\n\n    /**\n     * Text decoration underline.\n     * @type Boolean\n     * @default\n     */\n    underline:       false,\n\n    /**\n     * Text decoration overline.\n     * @type Boolean\n     * @default\n     */\n    overline:       false,\n\n    /**\n     * Text decoration linethrough.\n     * @type Boolean\n     * @default\n     */\n    linethrough:       false,\n\n    /**\n     * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n     * \"justify-left\", \"justify-center\" or \"justify-right\".\n     * @type String\n     * @default\n     */\n    textAlign:            'left',\n\n    /**\n     * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n     * @type String\n     * @default\n     */\n    fontStyle:            'normal',\n\n    /**\n     * Line height\n     * @type Number\n     * @default\n     */\n    lineHeight:           1.16,\n\n    /**\n     * Superscript schema object (minimum overlap)\n     * @type {Object}\n     * @default\n     */\n    superscript: {\n      size:      0.60, // fontSize factor\n      baseline: -0.35  // baseline-shift factor (upwards)\n    },\n\n    /**\n     * Subscript schema object (minimum overlap)\n     * @type {Object}\n     * @default\n     */\n    subscript: {\n      size:      0.60, // fontSize factor\n      baseline:  0.11  // baseline-shift factor (downwards)\n    },\n\n    /**\n     * Background color of text lines\n     * @type String\n     * @default\n     */\n    textBackgroundColor:  '',\n\n    /**\n     * List of properties to consider when checking if\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: fabric.Object.prototype.stateProperties.concat('fontFamily',\n      'fontWeight',\n      'fontSize',\n      'text',\n      'underline',\n      'overline',\n      'linethrough',\n      'textAlign',\n      'fontStyle',\n      'lineHeight',\n      'textBackgroundColor',\n      'charSpacing',\n      'styles'),\n\n    /**\n     * List of properties to consider when checking if cache needs refresh\n     * @type Array\n     */\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('fontFamily',\n      'fontWeight',\n      'fontSize',\n      'text',\n      'underline',\n      'overline',\n      'linethrough',\n      'textAlign',\n      'fontStyle',\n      'lineHeight',\n      'textBackgroundColor',\n      'charSpacing',\n      'styles'),\n\n    /**\n     * When defined, an object is rendered via stroke and this property specifies its color.\n     * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\n     * @type String\n     * @default\n     */\n    stroke:               null,\n\n    /**\n     * Shadow object representing shadow of this shape.\n     * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow:               null,\n\n    /**\n     * @private\n     */\n    _fontSizeFraction: 0.222,\n\n    /**\n     * @private\n     */\n    offsets: {\n      underline: 0.10,\n      linethrough: -0.315,\n      overline: -0.88\n    },\n\n    /**\n     * Text Line proportion to font Size (in pixels)\n     * @type Number\n     * @default\n     */\n    _fontSizeMult:             1.13,\n\n    /**\n     * additional space between characters\n     * expressed in thousands of em unit\n     * @type Number\n     * @default\n     */\n    charSpacing:             0,\n\n    /**\n     * Object containing character styles - top-level properties -> line numbers,\n     * 2nd-level properties - charater numbers\n     * @type Object\n     * @default\n     */\n    styles: null,\n\n    /**\n     * Reference to a context to measure text char or couple of chars\n     * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas\n     * once created it will be referenced on fabric._measuringContext to avoide creating a canvas for every\n     * text object created.\n     * @type {CanvasRenderingContext2D}\n     * @default\n     */\n    _measuringContext: null,\n\n    /**\n     * Baseline shift, stlyes only, keep at 0 for the main text object\n     * @type {Number}\n     * @default\n     */\n    deltaY: 0,\n\n    /**\n     * Array of properties that define a style unit (of 'styles').\n     * @type {Array}\n     * @default\n     */\n    _styleProperties: [\n      'stroke',\n      'strokeWidth',\n      'fill',\n      'fontFamily',\n      'fontSize',\n      'fontWeight',\n      'fontStyle',\n      'underline',\n      'overline',\n      'linethrough',\n      'deltaY',\n      'textBackgroundColor',\n    ],\n\n    /**\n     * contains characters bounding boxes\n     */\n    __charBounds: [],\n\n    /**\n     * use this size when measuring text. To avoid IE11 rounding errors\n     * @type {Number}\n     * @default\n     * @readonly\n     * @private\n     */\n    CACHE_FONT_SIZE: 400,\n\n    /**\n     * contains the min text width to avoid getting 0\n     * @type {Number}\n     * @default\n     */\n    MIN_TEXT_WIDTH: 2,\n\n    /**\n     * Constructor\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Text} thisArg\n     */\n    initialize: function(text, options) {\n      this.styles = options ? (options.styles || { }) : { };\n      this.text = text;\n      this.__skipDimension = true;\n      this.callSuper('initialize', options);\n      this.__skipDimension = false;\n      this.initDimensions();\n      this.setCoords();\n      this.setupState({ propertySet: '_dimensionAffectingProps' });\n    },\n\n    /**\n     * Return a contex for measurement of text string.\n     * if created it gets stored for reuse\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Text} thisArg\n     */\n    getMeasuringContext: function() {\n      // if we did not return we have to measure something.\n      if (!fabric._measuringContext) {\n        fabric._measuringContext = this.canvas && this.canvas.contextCache ||\n          fabric.util.createCanvasElement().getContext('2d');\n      }\n      return fabric._measuringContext;\n    },\n\n    /**\n     * @private\n     * Divides text into lines of text and lines of graphemes.\n     */\n    _splitText: function() {\n      var newLines = this._splitTextIntoLines(this.text);\n      this.textLines = newLines.lines;\n      this._textLines = newLines.graphemeLines;\n      this._unwrappedTextLines = newLines._unwrappedLines;\n      this._text = newLines.graphemeText;\n      return newLines;\n    },\n\n    /**\n     * Initialize or update text dimensions.\n     * Updates this.width and this.height with the proper values.\n     * Does not return dimensions.\n     */\n    initDimensions: function() {\n      if (this.__skipDimension) {\n        return;\n      }\n      this._splitText();\n      this._clearCache();\n      this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      if (this.textAlign.indexOf('justify') !== -1) {\n        // once text is measured we need to make space fatter to make justified text.\n        this.enlargeSpaces();\n      }\n      this.height = this.calcTextHeight();\n      this.saveState({ propertySet: '_dimensionAffectingProps' });\n    },\n\n    /**\n     * Enlarge space boxes and shift the others\n     */\n    enlargeSpaces: function() {\n      var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        if (this.textAlign !== 'justify' && (i === len - 1 || this.isEndOfWrapping(i))) {\n          continue;\n        }\n        accumulatedSpace = 0;\n        line = this._textLines[i];\n        currentLineWidth = this.getLineWidth(i);\n        if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {\n          numberOfSpaces = spaces.length;\n          diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n          for (var j = 0, jlen = line.length; j <= jlen; j++) {\n            charBound = this.__charBounds[i][j];\n            if (this._reSpaceAndTab.test(line[j])) {\n              charBound.width += diffSpace;\n              charBound.kernedWidth += diffSpace;\n              charBound.left += accumulatedSpace;\n              accumulatedSpace += diffSpace;\n            }\n            else {\n              charBound.left += accumulatedSpace;\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Detect if the text line is ended with an hard break\n     * text and itext do not have wrapping, return false\n     * @return {Boolean}\n     */\n    isEndOfWrapping: function(lineIndex) {\n      return lineIndex === this._textLines.length - 1;\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} String representation of text object\n     */\n    toString: function() {\n      return '#<fabric.Text (' + this.complexity() +\n        '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\n    },\n\n    /**\n     * Return the dimension and the zoom level needed to create a cache canvas\n     * big enough to host the object to be cached.\n     * @private\n     * @param {Object} dim.x width of object to be cached\n     * @param {Object} dim.y height of object to be cached\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */\n    _getCacheCanvasDimensions: function() {\n      var dims = this.callSuper('_getCacheCanvasDimensions');\n      var fontSize = this.fontSize;\n      dims.width += fontSize * dims.zoomX;\n      dims.height += fontSize * dims.zoomY;\n      return dims;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      this._setTextStyles(ctx);\n      this._renderTextLinesBackground(ctx);\n      this._renderTextDecoration(ctx, 'underline');\n      this._renderText(ctx);\n      this._renderTextDecoration(ctx, 'overline');\n      this._renderTextDecoration(ctx, 'linethrough');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderText: function(ctx) {\n      if (this.paintFirst === 'stroke') {\n        this._renderTextStroke(ctx);\n        this._renderTextFill(ctx);\n      }\n      else {\n        this._renderTextFill(ctx);\n        this._renderTextStroke(ctx);\n      }\n    },\n\n    /**\n     * Set the font parameter of the context with the object properties or with charStyle\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [charStyle] object with font style properties\n     * @param {String} [charStyle.fontFamily] Font Family\n     * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n     * @param {String} [charStyle.fontWeight] Font weight\n     * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n     */\n    _setTextStyles: function(ctx, charStyle, forMeasuring) {\n      ctx.textBaseline = 'alphabetic';\n      ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n    },\n\n    /**\n     * calculate and return the text Width measuring each line.\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {Number} Maximum width of fabric.Text object\n     */\n    calcTextWidth: function() {\n      var maxWidth = this.getLineWidth(0);\n\n      for (var i = 1, len = this._textLines.length; i < len; i++) {\n        var currentLineWidth = this.getLineWidth(i);\n        if (currentLineWidth > maxWidth) {\n          maxWidth = currentLineWidth;\n        }\n      }\n      return maxWidth;\n    },\n\n    /**\n     * @private\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line Text to render\n     * @param {Number} left Left position of text\n     * @param {Number} top Top position of text\n     * @param {Number} lineIndex Index of a line in a text\n     */\n    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n      this._renderChars(method, ctx, line, left, top, lineIndex);\n    },\n\n    /**\n     * Renders the text background for lines, taking care of style\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextLinesBackground: function(ctx) {\n      if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n        return;\n      }\n      var lineTopOffset = 0, heightOfLine,\n          lineLeftOffset, originalFill = ctx.fillStyle,\n          line, lastColor,\n          leftOffset = this._getLeftOffset(),\n          topOffset = this._getTopOffset(),\n          boxStart = 0, boxWidth = 0, charBox, currentColor;\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        heightOfLine = this.getHeightOfLine(i);\n        if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor', i)) {\n          lineTopOffset += heightOfLine;\n          continue;\n        }\n        line = this._textLines[i];\n        lineLeftOffset = this._getLineLeftOffset(i);\n        boxWidth = 0;\n        boxStart = 0;\n        lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\n          charBox = this.__charBounds[i][j];\n          currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n          if (currentColor !== lastColor) {\n            ctx.fillStyle = lastColor;\n            lastColor && ctx.fillRect(\n              leftOffset + lineLeftOffset + boxStart,\n              topOffset + lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight\n            );\n            boxStart = charBox.left;\n            boxWidth = charBox.width;\n            lastColor = currentColor;\n          }\n          else {\n            boxWidth += charBox.kernedWidth;\n          }\n        }\n        if (currentColor) {\n          ctx.fillStyle = currentColor;\n          ctx.fillRect(\n            leftOffset + lineLeftOffset + boxStart,\n            topOffset + lineTopOffset,\n            boxWidth,\n            heightOfLine / this.lineHeight\n          );\n        }\n        lineTopOffset += heightOfLine;\n      }\n      ctx.fillStyle = originalFill;\n      // if there is text background color no\n      // other shadows should be casted\n      this._removeShadow(ctx);\n    },\n\n    /**\n     * @private\n     * @param {Object} decl style declaration for cache\n     * @param {String} decl.fontFamily fontFamily\n     * @param {String} decl.fontStyle fontStyle\n     * @param {String} decl.fontWeight fontWeight\n     * @return {Object} reference to cache\n     */\n    getFontCache: function(decl) {\n      var fontFamily = decl.fontFamily.toLowerCase();\n      if (!fabric.charWidthsCache[fontFamily]) {\n        fabric.charWidthsCache[fontFamily] = { };\n      }\n      var cache = fabric.charWidthsCache[fontFamily],\n          cacheProp = decl.fontStyle.toLowerCase() + '_' + (decl.fontWeight + '').toLowerCase();\n      if (!cache[cacheProp]) {\n        cache[cacheProp] = { };\n      }\n      return cache[cacheProp];\n    },\n\n    /**\n     * apply all the character style to canvas for rendering\n     * @private\n     * @param {String} _char\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} [decl]\n     */\n    _applyCharStyles: function(method, ctx, lineIndex, charIndex, styleDeclaration) {\n\n      this._setFillStyles(ctx, styleDeclaration);\n      this._setStrokeStyles(ctx, styleDeclaration);\n\n      ctx.font = this._getFontDeclaration(styleDeclaration);\n    },\n\n    /**\n     * measure and return the width of a single character.\n     * possibly overridden to accommodate different measure logic or\n     * to hook some external lib for character measurement\n     * @private\n     * @param {String} char to be measured\n     * @param {Object} charStyle style of char to be measured\n     * @param {String} [previousChar] previous char\n     * @param {Object} [prevCharStyle] style of previous char\n     */\n    _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {\n      // first i try to return from cache\n      var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle),\n          previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char,\n          stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth,\n          fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;\n\n      if (previousChar && fontCache[previousChar] !== undefined) {\n        previousWidth = fontCache[previousChar];\n      }\n      if (fontCache[_char] !== undefined) {\n        kernedWidth = width = fontCache[_char];\n      }\n      if (stylesAreEqual && fontCache[couple] !== undefined) {\n        coupleWidth = fontCache[couple];\n        kernedWidth = coupleWidth - previousWidth;\n      }\n      if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {\n        var ctx = this.getMeasuringContext();\n        // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n        this._setTextStyles(ctx, charStyle, true);\n      }\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        kernedWidth = coupleWidth - previousWidth;\n      }\n      return { width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };\n    },\n\n    /**\n     * Computes height of character at given position\n     * @param {Number} line the line number\n     * @param {Number} char the character number\n     * @return {Number} fontSize of the character\n     */\n    getHeightOfChar: function(line, char) {\n      return this.getValueOfPropertyAt(line, char, 'fontSize');\n    },\n\n    /**\n     * measure a text line measuring all characters.\n     * @param {Number} lineIndex line number\n     * @return {Number} Line width\n     */\n    measureLine: function(lineIndex) {\n      var lineInfo = this._measureLine(lineIndex);\n      if (this.charSpacing !== 0) {\n        lineInfo.width -= this._getWidthOfCharSpacing();\n      }\n      if (lineInfo.width < 0) {\n        lineInfo.width = 0;\n      }\n      return lineInfo;\n    },\n\n    /**\n     * measure every grapheme of a line, populating __charBounds\n     * @param {Number} lineIndex\n     * @return {Object} object.width total width of characters\n     * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs\n     */\n    _measureLine: function(lineIndex) {\n      var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme,\n          graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length);\n\n      this.__charBounds[lineIndex] = lineBounds;\n      for (i = 0; i < line.length; i++) {\n        grapheme = line[i];\n        graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n        lineBounds[i] = graphemeInfo;\n        width += graphemeInfo.kernedWidth;\n        prevGrapheme = grapheme;\n      }\n      // this latest bound box represent the last character of the line\n      // to simplify cursor handling in interactive mode.\n      lineBounds[i] = {\n        left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n        width: 0,\n        kernedWidth: 0,\n        height: this.fontSize\n      };\n      return { width: width, numOfSpaces: numOfSpaces };\n    },\n\n    /**\n     * Measure and return the info of a single grapheme.\n     * needs the the info of previous graphemes already filled\n     * @private\n     * @param {String} grapheme to be measured\n     * @param {Number} lineIndex index of the line where the char is\n     * @param {Number} charIndex position in the line\n     * @param {String} [prevGrapheme] character preceding the one to be measured\n     */\n    _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {\n      var style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n          prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : { },\n          info = this._measureChar(grapheme, style, prevGrapheme, prevStyle),\n          kernedWidth = info.kernedWidth,\n          width = info.width, charSpacing;\n\n      if (this.charSpacing !== 0) {\n        charSpacing = this._getWidthOfCharSpacing();\n        width += charSpacing;\n        kernedWidth += charSpacing;\n      }\n\n      var box = {\n        width: width,\n        left: 0,\n        height: style.fontSize,\n        kernedWidth: kernedWidth,\n        deltaY: style.deltaY,\n      };\n      if (charIndex > 0 && !skipLeft) {\n        var previousBox = this.__charBounds[lineIndex][charIndex - 1];\n        box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;\n      }\n      return box;\n    },\n\n    /**\n     * Calculate height of line at 'lineIndex'\n     * @param {Number} lineIndex index of line to calculate\n     * @return {Number}\n     */\n    getHeightOfLine: function(lineIndex) {\n      if (this.__lineHeights[lineIndex]) {\n        return this.__lineHeights[lineIndex];\n      }\n\n      var line = this._textLines[lineIndex],\n          // char 0 is measured before the line cycle because it nneds to char\n          // emptylines\n          maxHeight = this.getHeightOfChar(lineIndex, 0);\n      for (var i = 1, len = line.length; i < len; i++) {\n        maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n      }\n\n      return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\n    },\n\n    /**\n     * Calculate text box height\n     */\n    calcTextHeight: function() {\n      var lineHeight, height = 0;\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        lineHeight = this.getHeightOfLine(i);\n        height += (i === len - 1 ? lineHeight / this.lineHeight : lineHeight);\n      }\n      return height;\n    },\n\n    /**\n     * @private\n     * @return {Number} Left offset\n     */\n    _getLeftOffset: function() {\n      return -this.width / 2;\n    },\n\n    /**\n     * @private\n     * @return {Number} Top offset\n     */\n    _getTopOffset: function() {\n      return -this.height / 2;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     */\n    _renderTextCommon: function(ctx, method) {\n      ctx.save();\n      var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset(),\n          offsets = this._applyPatternGradientTransform(ctx, method === 'fillText' ? this.fill : this.stroke);\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        var heightOfLine = this.getHeightOfLine(i),\n            maxHeight = heightOfLine / this.lineHeight,\n            leftOffset = this._getLineLeftOffset(i);\n        this._renderTextLine(\n          method,\n          ctx,\n          this._textLines[i],\n          left + leftOffset - offsets.offsetX,\n          top + lineHeights + maxHeight - offsets.offsetY,\n          i\n        );\n        lineHeights += heightOfLine;\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextFill: function(ctx) {\n      if (!this.fill && !this.styleHas('fill')) {\n        return;\n      }\n\n      this._renderTextCommon(ctx, 'fillText');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextStroke: function(ctx) {\n      if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n        return;\n      }\n\n      if (this.shadow && !this.shadow.affectStroke) {\n        this._removeShadow(ctx);\n      }\n\n      ctx.save();\n      this._setLineDash(ctx, this.strokeDashArray);\n      ctx.beginPath();\n      this._renderTextCommon(ctx, 'strokeText');\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line Content of the line\n     * @param {Number} left\n     * @param {Number} top\n     * @param {Number} lineIndex\n     * @param {Number} charOffset\n     */\n    _renderChars: function(method, ctx, line, left, top, lineIndex) {\n      // set proper line offset\n      var lineHeight = this.getHeightOfLine(lineIndex),\n          isJustify = this.textAlign.indexOf('justify') !== -1,\n          actualStyle,\n          nextStyle,\n          charsToRender = '',\n          charBox,\n          boxWidth = 0,\n          timeToRender,\n          shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex);\n\n      ctx.save();\n      top -= lineHeight * this._fontSizeFraction / this.lineHeight;\n      if (shortCut) {\n        // render all the line in one pass without checking\n        this._renderChar(method, ctx, lineIndex, 0, this.textLines[lineIndex], left, top, lineHeight);\n        ctx.restore();\n        return;\n      }\n      for (var i = 0, len = line.length - 1; i <= len; i++) {\n        timeToRender = i === len || this.charSpacing;\n        charsToRender += line[i];\n        charBox = this.__charBounds[lineIndex][i];\n        if (boxWidth === 0) {\n          left += charBox.kernedWidth - charBox.width;\n          boxWidth += charBox.width;\n        }\n        else {\n          boxWidth += charBox.kernedWidth;\n        }\n        if (isJustify && !timeToRender) {\n          if (this._reSpaceAndTab.test(line[i])) {\n            timeToRender = true;\n          }\n        }\n        if (!timeToRender) {\n          // if we have charSpacing, we render char by char\n          actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n          nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n          timeToRender = this._hasStyleChanged(actualStyle, nextStyle);\n        }\n        if (timeToRender) {\n          this._renderChar(method, ctx, lineIndex, i, charsToRender, left, top, lineHeight);\n          charsToRender = '';\n          actualStyle = nextStyle;\n          left += boxWidth;\n          boxWidth = 0;\n        }\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {String} _char\n     * @param {Number} left Left coordinate\n     * @param {Number} top Top coordinate\n     * @param {Number} lineHeight Height of the line\n     */\n    _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {\n      var decl = this._getStyleDeclaration(lineIndex, charIndex),\n          fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n          shouldFill = method === 'fillText' && fullDecl.fill,\n          shouldStroke = method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n      if (!shouldStroke && !shouldFill) {\n        return;\n      }\n      decl && ctx.save();\n\n      this._applyCharStyles(method, ctx, lineIndex, charIndex, fullDecl);\n\n      if (decl && decl.textBackgroundColor) {\n        this._removeShadow(ctx);\n      }\n      if (decl && decl.deltaY) {\n        top += decl.deltaY;\n      }\n\n      shouldFill && ctx.fillText(_char, left, top);\n      shouldStroke && ctx.strokeText(_char, left, top);\n      decl && ctx.restore();\n    },\n\n    /**\n     * Turns the character into a 'superior figure' (i.e. 'superscript')\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */\n    setSuperscript: function(start, end) {\n      return this._setScript(start, end, this.superscript);\n    },\n\n    /**\n     * Turns the character into an 'inferior figure' (i.e. 'subscript')\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */\n    setSubscript: function(start, end) {\n      return this._setScript(start, end, this.subscript);\n    },\n\n    /**\n     * Applies 'schema' at given position\n     * @private\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @param {Number} schema\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */\n    _setScript: function(start, end, schema) {\n      var loc = this.get2DCursorLocation(start, true),\n          fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'fontSize'),\n          dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n          style = { fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline };\n      this.setSelectionStyles(style, start, end);\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {Object} prevStyle\n     * @param {Object} thisStyle\n     */\n    _hasStyleChanged: function(prevStyle, thisStyle) {\n      return prevStyle.fill !== thisStyle.fill ||\n              prevStyle.stroke !== thisStyle.stroke ||\n              prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n              prevStyle.fontSize !== thisStyle.fontSize ||\n              prevStyle.fontFamily !== thisStyle.fontFamily ||\n              prevStyle.fontWeight !== thisStyle.fontWeight ||\n              prevStyle.fontStyle !== thisStyle.fontStyle ||\n              prevStyle.deltaY !== thisStyle.deltaY;\n    },\n\n    /**\n     * @private\n     * @param {Object} prevStyle\n     * @param {Object} thisStyle\n     */\n    _hasStyleChangedForSvg: function(prevStyle, thisStyle) {\n      return this._hasStyleChanged(prevStyle, thisStyle) ||\n        prevStyle.overline !== thisStyle.overline ||\n        prevStyle.underline !== thisStyle.underline ||\n        prevStyle.linethrough !== thisStyle.linethrough;\n    },\n\n    /**\n     * @private\n     * @param {Number} lineIndex index text line\n     * @return {Number} Line left offset\n     */\n    _getLineLeftOffset: function(lineIndex) {\n      var lineWidth = this.getLineWidth(lineIndex);\n      if (this.textAlign === 'center') {\n        return (this.width - lineWidth) / 2;\n      }\n      if (this.textAlign === 'right') {\n        return this.width - lineWidth;\n      }\n      if (this.textAlign === 'justify-center' && this.isEndOfWrapping(lineIndex)) {\n        return (this.width - lineWidth) / 2;\n      }\n      if (this.textAlign === 'justify-right' && this.isEndOfWrapping(lineIndex)) {\n        return this.width - lineWidth;\n      }\n      return 0;\n    },\n\n    /**\n     * @private\n     */\n    _clearCache: function() {\n      this.__lineWidths = [];\n      this.__lineHeights = [];\n      this.__charBounds = [];\n    },\n\n    /**\n     * @private\n     */\n    _shouldClearDimensionCache: function() {\n      var shouldClear = this._forceClearCache;\n      shouldClear || (shouldClear = this.hasStateChanged('_dimensionAffectingProps'));\n      if (shouldClear) {\n        this.dirty = true;\n        this._forceClearCache = false;\n      }\n      return shouldClear;\n    },\n\n    /**\n     * Measure a single line given its index. Used to calculate the initial\n     * text bounding box. The values are calculated and stored in __lineWidths cache.\n     * @private\n     * @param {Number} lineIndex line number\n     * @return {Number} Line width\n     */\n    getLineWidth: function(lineIndex) {\n      if (this.__lineWidths[lineIndex]) {\n        return this.__lineWidths[lineIndex];\n      }\n\n      var width, line = this._textLines[lineIndex], lineInfo;\n\n      if (line === '') {\n        width = 0;\n      }\n      else {\n        lineInfo = this.measureLine(lineIndex);\n        width = lineInfo.width;\n      }\n      this.__lineWidths[lineIndex] = width;\n      return width;\n    },\n\n    _getWidthOfCharSpacing: function() {\n      if (this.charSpacing !== 0) {\n        return this.fontSize * this.charSpacing / 1000;\n      }\n      return 0;\n    },\n\n    /**\n     * Retrieves the value of property at given character position\n     * @param {Number} lineIndex the line number\n     * @param {Number} charIndex the charater number\n     * @param {String} property the property name\n     * @returns the value of 'property'\n     */\n    getValueOfPropertyAt: function(lineIndex, charIndex, property) {\n      var charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n      if (charStyle && typeof charStyle[property] !== 'undefined') {\n        return charStyle[property];\n      }\n      return this[property];\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextDecoration: function(ctx, type) {\n      if (!this[type] && !this.styleHas(type)) {\n        return;\n      }\n      var heightOfLine, size, _size,\n          lineLeftOffset, dy, _dy,\n          line, lastDecoration,\n          leftOffset = this._getLeftOffset(),\n          topOffset = this._getTopOffset(), top,\n          boxStart, boxWidth, charBox, currentDecoration,\n          maxHeight, currentFill, lastFill,\n          charSpacing = this._getWidthOfCharSpacing();\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        heightOfLine = this.getHeightOfLine(i);\n        if (!this[type] && !this.styleHas(type, i)) {\n          topOffset += heightOfLine;\n          continue;\n        }\n        line = this._textLines[i];\n        maxHeight = heightOfLine / this.lineHeight;\n        lineLeftOffset = this._getLineLeftOffset(i);\n        boxStart = 0;\n        boxWidth = 0;\n        lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n        lastFill = this.getValueOfPropertyAt(i, 0, 'fill');\n        top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n        size = this.getHeightOfChar(i, 0);\n        dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\n          charBox = this.__charBounds[i][j];\n          currentDecoration = this.getValueOfPropertyAt(i, j, type);\n          currentFill = this.getValueOfPropertyAt(i, j, 'fill');\n          _size = this.getHeightOfChar(i, j);\n          _dy = this.getValueOfPropertyAt(i, j, 'deltaY');\n          if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) &&\n              boxWidth > 0) {\n            ctx.fillStyle = lastFill;\n            lastDecoration && lastFill && ctx.fillRect(\n              leftOffset + lineLeftOffset + boxStart,\n              top + this.offsets[type] * size + dy,\n              boxWidth,\n              this.fontSize / 15\n            );\n            boxStart = charBox.left;\n            boxWidth = charBox.width;\n            lastDecoration = currentDecoration;\n            lastFill = currentFill;\n            size = _size;\n            dy = _dy;\n          }\n          else {\n            boxWidth += charBox.kernedWidth;\n          }\n        }\n        ctx.fillStyle = currentFill;\n        currentDecoration && currentFill && ctx.fillRect(\n          leftOffset + lineLeftOffset + boxStart,\n          top + this.offsets[type] * size + dy,\n          boxWidth - charSpacing,\n          this.fontSize / 15\n        );\n        topOffset += heightOfLine;\n      }\n      // if there is text background color no\n      // other shadows should be casted\n      this._removeShadow(ctx);\n    },\n\n    /**\n     * return font declaration string for canvas context\n     * @param {Object} [styleObject] object\n     * @returns {String} font declaration formatted for canvas context.\n     */\n    _getFontDeclaration: function(styleObject, forMeasuring) {\n      var style = styleObject || this, family = this.fontFamily,\n          fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;\n      var fontFamily = family === undefined ||\n      family.indexOf('\\'') > -1 ||\n      family.indexOf('\"') > -1 || fontIsGeneric\n        ? style.fontFamily : '\"' + style.fontFamily + '\"';\n      return [\n        // node-canvas needs \"weight style\", while browsers need \"style weight\"\n        (fabric.isLikelyNode ? style.fontWeight : style.fontStyle),\n        (fabric.isLikelyNode ? style.fontStyle : style.fontWeight),\n        forMeasuring ? this.CACHE_FONT_SIZE + 'px' : style.fontSize + 'px',\n        fontFamily\n      ].join(' ');\n    },\n\n    /**\n     * Renders text instance on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    render: function(ctx) {\n      // do not render if object is not visible\n      if (!this.visible) {\n        return;\n      }\n      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n        return;\n      }\n      if (this._shouldClearDimensionCache()) {\n        this.initDimensions();\n      }\n      this.callSuper('render', ctx);\n    },\n\n    /**\n     * Returns the text as an array of lines.\n     * @param {String} text text to split\n     * @returns {Array} Lines in the text\n     */\n    _splitTextIntoLines: function(text) {\n      var lines = text.split(this._reNewline),\n          newLines = new Array(lines.length),\n          newLine = ['\\n'],\n          newText = [];\n      for (var i = 0; i < lines.length; i++) {\n        newLines[i] = fabric.util.string.graphemeSplit(lines[i]);\n        newText = newText.concat(newLines[i], newLine);\n      }\n      newText.pop();\n      return { _unwrappedLines: newLines, lines: lines, graphemeText: newText, graphemeLines: newLines };\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var additionalProperties = [\n        'text',\n        'fontSize',\n        'fontWeight',\n        'fontFamily',\n        'fontStyle',\n        'lineHeight',\n        'underline',\n        'overline',\n        'linethrough',\n        'textAlign',\n        'textBackgroundColor',\n        'charSpacing',\n      ].concat(propertiesToInclude);\n      var obj = this.callSuper('toObject', additionalProperties);\n      obj.styles = clone(this.styles, true);\n      return obj;\n    },\n\n    /**\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    set: function(key, value) {\n      this.callSuper('set', key, value);\n      var needsDims = false;\n      if (typeof key === 'object') {\n        for (var _key in key) {\n          needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;\n        }\n      }\n      else {\n        needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;\n      }\n      if (needsDims) {\n        this.initDimensions();\n        this.setCoords();\n      }\n      return this;\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})\n   * @static\n   * @memberOf fabric.Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(\n    'x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor'.split(' '));\n\n  /**\n   * Default SVG font size\n   * @static\n   * @memberOf fabric.Text\n   */\n  fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;\n\n  /**\n   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf fabric.Text\n   * @param {SVGElement} element Element to parse\n   * @param {Function} callback callback function invoked after parsing\n   * @param {Object} [options] Options object\n   */\n  fabric.Text.fromElement = function(element, callback, options) {\n    if (!element) {\n      return callback(null);\n    }\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES),\n        parsedAnchor = parsedAttributes.textAnchor || 'left';\n    options = fabric.util.object.extend((options ? clone(options) : { }), parsedAttributes);\n\n    options.top = options.top || 0;\n    options.left = options.left || 0;\n    if (parsedAttributes.textDecoration) {\n      var textDecoration = parsedAttributes.textDecoration;\n      if (textDecoration.indexOf('underline') !== -1) {\n        options.underline = true;\n      }\n      if (textDecoration.indexOf('overline') !== -1) {\n        options.overline = true;\n      }\n      if (textDecoration.indexOf('line-through') !== -1) {\n        options.linethrough = true;\n      }\n      delete options.textDecoration;\n    }\n    if ('dx' in parsedAttributes) {\n      options.left += parsedAttributes.dx;\n    }\n    if ('dy' in parsedAttributes) {\n      options.top += parsedAttributes.dy;\n    }\n    if (!('fontSize' in options)) {\n      options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n    }\n\n    var textContent = '';\n\n    // The XML is not properly parsed in IE9 so a workaround to get\n    // textContent is through firstChild.data. Another workaround would be\n    // to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)\n    if (!('textContent' in element)) {\n      if ('firstChild' in element && element.firstChild !== null) {\n        if ('data' in element.firstChild && element.firstChild.data !== null) {\n          textContent = element.firstChild.data;\n        }\n      }\n    }\n    else {\n      textContent = element.textContent;\n    }\n\n    textContent = textContent.replace(/^\\s+|\\s+$|\\n+/g, '').replace(/\\s+/g, ' ');\n    var originalStrokeWidth = options.strokeWidth;\n    options.strokeWidth = 0;\n\n    var text = new fabric.Text(textContent, options),\n        textHeightScaleFactor = text.getScaledHeight() / text.height,\n        lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height,\n        scaledDiff = lineHeightDiff * textHeightScaleFactor,\n        textHeight = text.getScaledHeight() + scaledDiff,\n        offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (parsedAnchor === 'center') {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (parsedAnchor === 'right') {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,\n      strokeWidth: typeof originalStrokeWidth !== 'undefined' ? originalStrokeWidth : 1,\n    });\n    callback(text);\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Text instance from an object representation\n   * @static\n   * @memberOf fabric.Text\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created\n   */\n  fabric.Text.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Text', object, callback, 'text');\n  };\n\n  fabric.Text.genericFonts = ['sans-serif', 'serif', 'cursive', 'fantasy', 'monospace'];\n\n  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n  fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\n    /**\n     * Returns true if object has no styling or no styling in a line\n     * @param {Number} lineIndex , lineIndex is on wrapped lines.\n     * @return {Boolean}\n     */\n    isEmptyStyles: function(lineIndex) {\n      if (!this.styles) {\n        return true;\n      }\n      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n        return true;\n      }\n      var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\n      for (var p1 in obj) {\n        for (var p2 in obj[p1]) {\n          // eslint-disable-next-line no-unused-vars\n          for (var p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Returns true if object has a style property or has it ina specified line\n     * @param {Number} lineIndex\n     * @return {Boolean}\n     */\n    styleHas: function(property, lineIndex) {\n      if (!this.styles || !property || property === '') {\n        return false;\n      }\n      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n        return false;\n      }\n      var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\n      // eslint-disable-next-line\n      for (var p1 in obj) {\n        // eslint-disable-next-line\n        for (var p2 in obj[p1]) {\n          if (typeof obj[p1][p2][property] !== 'undefined') {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Check if characters in a text have a value for a property\n     * whose value matches the textbox's value for that property.  If so,\n     * the character-level property is deleted.  If the character\n     * has no other properties, then it is also deleted.  Finally,\n     * if the line containing that character has no other characters\n     * then it also is deleted.\n     *\n     * @param {string} property The property to compare between characters and text.\n     */\n    cleanStyle: function(property) {\n      if (!this.styles || !property || property === '') {\n        return false;\n      }\n      var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue,\n          allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;\n      // eslint-disable-next-line\n      for (var p1 in obj) {\n        letterCount = 0;\n        // eslint-disable-next-line\n        for (var p2 in obj[p1]) {\n          var styleObject = obj[p1][p2],\n              stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);\n\n          stylesCount++;\n\n          if (stylePropertyHasBeenSet) {\n            if (!stylePropertyValue) {\n              stylePropertyValue = styleObject[property];\n            }\n            else if (styleObject[property] !== stylePropertyValue) {\n              allStyleObjectPropertiesMatch = false;\n            }\n\n            if (styleObject[property] === this[property]) {\n              delete styleObject[property];\n            }\n          }\n          else {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (Object.keys(styleObject).length !== 0) {\n            letterCount++;\n          }\n          else {\n            delete obj[p1][p2];\n          }\n        }\n\n        if (letterCount === 0) {\n          delete obj[p1];\n        }\n      }\n      // if every grapheme has the same style set then\n      // delete those styles and set it on the parent\n      for (var i = 0; i < this._textLines.length; i++) {\n        graphemeCount += this._textLines[i].length;\n      }\n      if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n        this[property] = stylePropertyValue;\n        this.removeStyle(property);\n      }\n    },\n\n    /**\n     * Remove a style property or properties from all individual character styles\n     * in a text object.  Deletes the character style object if it contains no other style\n     * props.  Deletes a line style object if it contains no other character styles.\n     *\n     * @param {String} props The property to remove from character styles.\n     */\n    removeStyle: function(property) {\n      if (!this.styles || !property || property === '') {\n        return;\n      }\n      var obj = this.styles, line, lineNum, charNum;\n      for (lineNum in obj) {\n        line = obj[lineNum];\n        for (charNum in line) {\n          delete line[charNum][property];\n          if (Object.keys(line[charNum]).length === 0) {\n            delete line[charNum];\n          }\n        }\n        if (Object.keys(line).length === 0) {\n          delete obj[lineNum];\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _extendStyles: function(index, styles) {\n      var loc = this.get2DCursorLocation(index);\n\n      if (!this._getLineStyle(loc.lineIndex)) {\n        this._setLineStyle(loc.lineIndex, {});\n      }\n\n      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\n        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\n      }\n\n      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\n    },\n\n    /**\n     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n     * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. usefull to manage styles.\n     */\n    get2DCursorLocation: function(selectionStart, skipWrapping) {\n      if (typeof selectionStart === 'undefined') {\n        selectionStart = this.selectionStart;\n      }\n      var lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n      var len = lines.length;\n      for (var i = 0; i < len; i++) {\n        if (selectionStart <= lines[i].length) {\n          return {\n            lineIndex: i,\n            charIndex: selectionStart\n          };\n        }\n        selectionStart -= lines[i].length + 1;\n      }\n      return {\n        lineIndex: i - 1,\n        charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart\n      };\n    },\n\n    /**\n     * Gets style of a current selection/cursor (at the start position)\n     * if startIndex or endIndex are not provided, slectionStart or selectionEnd will be used.\n     * @param {Number} [startIndex] Start index to get styles at\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n     * @param {Boolean} [complete] get full style or not\n     * @return {Array} styles an array with one, zero or more Style objects\n     */\n    getSelectionStyles: function(startIndex, endIndex, complete) {\n      if (typeof startIndex === 'undefined') {\n        startIndex = this.selectionStart || 0;\n      }\n      if (typeof endIndex === 'undefined') {\n        endIndex = this.selectionEnd || startIndex;\n      }\n      var styles = [];\n      for (var i = startIndex; i < endIndex; i++) {\n        styles.push(this.getStyleAtPosition(i, complete));\n      }\n      return styles;\n    },\n\n    /**\n     * Gets style of a current selection/cursor position\n     * @param {Number} position  to get styles at\n     * @param {Boolean} [complete] full style if true\n     * @return {Object} style Style object at a specified index\n     * @private\n     */\n    getStyleAtPosition: function(position, complete) {\n      var loc = this.get2DCursorLocation(position),\n          style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) :\n            this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\n      return style || {};\n    },\n\n    /**\n     * Sets style of a current selection, if no selection exist, do not set anything.\n     * @param {Object} [styles] Styles object\n     * @param {Number} [startIndex] Start index to get styles at\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    setSelectionStyles: function(styles, startIndex, endIndex) {\n      if (typeof startIndex === 'undefined') {\n        startIndex = this.selectionStart || 0;\n      }\n      if (typeof endIndex === 'undefined') {\n        endIndex = this.selectionEnd || startIndex;\n      }\n      for (var i = startIndex; i < endIndex; i++) {\n        this._extendStyles(i, styles);\n      }\n      /* not included in _extendStyles to avoid clearing cache more than once */\n      this._forceClearCache = true;\n      return this;\n    },\n\n    /**\n     * get the reference, not a clone, of the style object for a given character\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @return {Object} style object\n     */\n    _getStyleDeclaration: function(lineIndex, charIndex) {\n      var lineStyle = this.styles && this.styles[lineIndex];\n      if (!lineStyle) {\n        return null;\n      }\n      return lineStyle[charIndex];\n    },\n\n    /**\n     * return a new object that contains all the style property for a character\n     * the object returned is newly created\n     * @param {Number} lineIndex of the line where the character is\n     * @param {Number} charIndex position of the character on the line\n     * @return {Object} style object\n     */\n    getCompleteStyleDeclaration: function(lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex) || { },\n          styleObject = { }, prop;\n      for (var i = 0; i < this._styleProperties.length; i++) {\n        prop = this._styleProperties[i];\n        styleObject[prop] = typeof style[prop] === 'undefined' ? this[prop] : style[prop];\n      }\n      return styleObject;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} style\n     * @private\n     */\n    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n      this.styles[lineIndex][charIndex] = style;\n    },\n\n    /**\n     *\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n      delete this.styles[lineIndex][charIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _getLineStyle: function(lineIndex) {\n      return this.styles[lineIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Object} style\n     * @private\n     */\n    _setLineStyle: function(lineIndex, style) {\n      this.styles[lineIndex] = style;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _deleteLineStyle: function(lineIndex) {\n      delete this.styles[lineIndex];\n    }\n  });\n})();\n\n\n(function() {\n\n  function parseDecoration(object) {\n    if (object.textDecoration) {\n      object.textDecoration.indexOf('underline') > -1 && (object.underline = true);\n      object.textDecoration.indexOf('line-through') > -1 && (object.linethrough = true);\n      object.textDecoration.indexOf('overline') > -1 && (object.overline = true);\n      delete object.textDecoration;\n    }\n  }\n\n  /**\n   * IText class (introduced in <b>v1.4</b>) Events are also fired with \"text:\"\n   * prefix when observing canvas.\n   * @class fabric.IText\n   * @extends fabric.Text\n   * @mixes fabric.Observable\n   *\n   * @fires changed\n   * @fires selection:changed\n   * @fires editing:entered\n   * @fires editing:exited\n   *\n   * @return {fabric.IText} thisArg\n   * @see {@link fabric.IText#initialize} for constructor definition\n   *\n   * <p>Supported key combinations:</p>\n   * <pre>\n   *   Move cursor:                    left, right, up, down\n   *   Select character:               shift + left, shift + right\n   *   Select text vertically:         shift + up, shift + down\n   *   Move cursor by word:            alt + left, alt + right\n   *   Select words:                   shift + alt + left, shift + alt + right\n   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n   *   Jump to start/end of text:      cmd + up, cmd + down\n   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n   *   Delete character:               backspace\n   *   Delete word:                    alt + backspace\n   *   Delete line:                    cmd + backspace\n   *   Forward delete:                 delete\n   *   Copy text:                      ctrl/cmd + c\n   *   Paste text:                     ctrl/cmd + v\n   *   Cut text:                       ctrl/cmd + x\n   *   Select entire text:             ctrl/cmd + a\n   *   Quit editing                    tab or esc\n   * </pre>\n   *\n   * <p>Supported mouse/touch combination</p>\n   * <pre>\n   *   Position cursor:                click/touch\n   *   Create selection:               click/touch & drag\n   *   Create selection:               click & shift + click\n   *   Select word:                    double click\n   *   Select line:                    triple click\n   * </pre>\n   */\n  fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'i-text',\n\n    /**\n     * Index where text selection starts (or where cursor is when there is no selection)\n     * @type Number\n     * @default\n     */\n    selectionStart: 0,\n\n    /**\n     * Index where text selection ends\n     * @type Number\n     * @default\n     */\n    selectionEnd: 0,\n\n    /**\n     * Color of text selection\n     * @type String\n     * @default\n     */\n    selectionColor: 'rgba(17,119,255,0.3)',\n\n    /**\n     * Indicates whether text is in editing mode\n     * @type Boolean\n     * @default\n     */\n    isEditing: false,\n\n    /**\n     * Indicates whether a text can be edited\n     * @type Boolean\n     * @default\n     */\n    editable: true,\n\n    /**\n     * Border color of text object while it's in editing mode\n     * @type String\n     * @default\n     */\n    editingBorderColor: 'rgba(102,153,255,0.25)',\n\n    /**\n     * Width of cursor (in px)\n     * @type Number\n     * @default\n     */\n    cursorWidth: 2,\n\n    /**\n     * Color of default cursor (when not overwritten by character style)\n     * @type String\n     * @default\n     */\n    cursorColor: '#333',\n\n    /**\n     * Delay between cursor blink (in ms)\n     * @type Number\n     * @default\n     */\n    cursorDelay: 1000,\n\n    /**\n     * Duration of cursor fadein (in ms)\n     * @type Number\n     * @default\n     */\n    cursorDuration: 600,\n\n    /**\n     * Indicates whether internal text char widths can be cached\n     * @type Boolean\n     * @default\n     */\n    caching: true,\n\n    /**\n     * @private\n     */\n    _reSpace: /\\s|\\n/,\n\n    /**\n     * @private\n     */\n    _currentCursorOpacity: 0,\n\n    /**\n     * @private\n     */\n    _selectionDirection: null,\n\n    /**\n     * @private\n     */\n    _abortCursorAnimation: false,\n\n    /**\n     * @private\n     */\n    __widthOfSpace: [],\n\n    /**\n     * Helps determining when the text is in composition, so that the cursor\n     * rendering is altered.\n     */\n    inCompositionMode: false,\n\n    /**\n     * Constructor\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.IText} thisArg\n     */\n    initialize: function(text, options) {\n      this.callSuper('initialize', text, options);\n      this.initBehavior();\n    },\n\n    /**\n     * Sets selection start (left boundary of a selection)\n     * @param {Number} index Index to set selection start to\n     */\n    setSelectionStart: function(index) {\n      index = Math.max(index, 0);\n      this._updateAndFire('selectionStart', index);\n    },\n\n    /**\n     * Sets selection end (right boundary of a selection)\n     * @param {Number} index Index to set selection end to\n     */\n    setSelectionEnd: function(index) {\n      index = Math.min(index, this.text.length);\n      this._updateAndFire('selectionEnd', index);\n    },\n\n    /**\n     * @private\n     * @param {String} property 'selectionStart' or 'selectionEnd'\n     * @param {Number} index new position of property\n     */\n    _updateAndFire: function(property, index) {\n      if (this[property] !== index) {\n        this._fireSelectionChanged();\n        this[property] = index;\n      }\n      this._updateTextarea();\n    },\n\n    /**\n     * Fires the even of selection changed\n     * @private\n     */\n    _fireSelectionChanged: function() {\n      this.fire('selection:changed');\n      this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n    },\n\n    /**\n     * Initialize text dimensions. Render all text on given context\n     * or on a offscreen canvas to get the text width with measureText.\n     * Updates this.width and this.height with the proper values.\n     * Does not return dimensions.\n     * @private\n     */\n    initDimensions: function() {\n      this.isEditing && this.initDelayedCursor();\n      this.clearContextTop();\n      this.callSuper('initDimensions');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    render: function(ctx) {\n      this.clearContextTop();\n      this.callSuper('render', ctx);\n      // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n      // the correct position but not at every cursor animation.\n      this.cursorOffsetCache = { };\n      this.renderCursorOrSelection();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      this.callSuper('_render', ctx);\n    },\n\n    /**\n     * Prepare and clean the contextTop\n     */\n    clearContextTop: function(skipRestore) {\n      if (!this.isEditing) {\n        return;\n      }\n      if (this.canvas && this.canvas.contextTop) {\n        var ctx = this.canvas.contextTop, v = this.canvas.viewportTransform;\n        ctx.save();\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n        this.transform(ctx);\n        this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);\n        this._clearTextArea(ctx);\n        skipRestore || ctx.restore();\n      }\n    },\n\n    /**\n     * Renders cursor or selection (depending on what exists)\n     */\n    renderCursorOrSelection: function() {\n      if (!this.isEditing || !this.canvas) {\n        return;\n      }\n      var boundaries = this._getCursorBoundaries(), ctx;\n      if (this.canvas && this.canvas.contextTop) {\n        ctx = this.canvas.contextTop;\n        this.clearContextTop(true);\n      }\n      else {\n        ctx = this.canvas.contextContainer;\n        ctx.save();\n      }\n      if (this.selectionStart === this.selectionEnd) {\n        this.renderCursor(boundaries, ctx);\n      }\n      else {\n        this.renderSelection(boundaries, ctx);\n      }\n      ctx.restore();\n    },\n\n    _clearTextArea: function(ctx) {\n      // we add 4 pixel, to be sure to do not leave any pixel out\n      var width = this.width + 4, height = this.height + 4;\n      ctx.clearRect(-width / 2, -height / 2, width, height);\n    },\n\n    /**\n     * Returns cursor boundaries (left, top, leftOffset, topOffset)\n     * @private\n     * @param {Array} chars Array of characters\n     * @param {String} typeOfBoundaries\n     */\n    _getCursorBoundaries: function(position) {\n\n      // left/top are left/top of entire text box\n      // leftOffset/topOffset are offset from that left/top point of a text box\n\n      if (typeof position === 'undefined') {\n        position = this.selectionStart;\n      }\n\n      var left = this._getLeftOffset(),\n          top = this._getTopOffset(),\n          offsets = this._getCursorBoundariesOffsets(position);\n\n      return {\n        left: left,\n        top: top,\n        leftOffset: offsets.left,\n        topOffset: offsets.top\n      };\n    },\n\n    /**\n     * @private\n     */\n    _getCursorBoundariesOffsets: function(position) {\n      if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n        return this.cursorOffsetCache;\n      }\n      var lineLeftOffset,\n          lineIndex,\n          charIndex,\n          topOffset = 0,\n          leftOffset = 0,\n          boundaries,\n          cursorPosition = this.get2DCursorLocation(position);\n      charIndex = cursorPosition.charIndex;\n      lineIndex = cursorPosition.lineIndex;\n      for (var i = 0; i < lineIndex; i++) {\n        topOffset += this.getHeightOfLine(i);\n      }\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n      var bound = this.__charBounds[lineIndex][charIndex];\n      bound && (leftOffset = bound.left);\n      if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {\n        leftOffset -= this._getWidthOfCharSpacing();\n      }\n      boundaries = {\n        top: topOffset,\n        left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n      };\n      this.cursorOffsetCache = boundaries;\n      return this.cursorOffsetCache;\n    },\n\n    /**\n     * Renders cursor\n     * @param {Object} boundaries\n     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n     */\n    renderCursor: function(boundaries, ctx) {\n      var cursorLocation = this.get2DCursorLocation(),\n          lineIndex = cursorLocation.lineIndex,\n          charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n          charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n          multiplier = this.scaleX * this.canvas.getZoom(),\n          cursorWidth = this.cursorWidth / multiplier,\n          topOffset = boundaries.topOffset,\n          dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY');\n\n      topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight\n        - charHeight * (1 - this._fontSizeFraction);\n\n      if (this.inCompositionMode) {\n        this.renderSelection(boundaries, ctx);\n      }\n\n      ctx.fillStyle = this.getValueOfPropertyAt(lineIndex, charIndex, 'fill');\n      ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;\n      ctx.fillRect(\n        boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n        topOffset + boundaries.top + dy,\n        cursorWidth,\n        charHeight);\n    },\n\n    /**\n     * Renders text selection\n     * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n     */\n    renderSelection: function(boundaries, ctx) {\n\n      var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,\n          selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd,\n          isJustify = this.textAlign.indexOf('justify') !== -1,\n          start = this.get2DCursorLocation(selectionStart),\n          end = this.get2DCursorLocation(selectionEnd),\n          startLine = start.lineIndex,\n          endLine = end.lineIndex,\n          startChar = start.charIndex < 0 ? 0 : start.charIndex,\n          endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n      for (var i = startLine; i <= endLine; i++) {\n        var lineOffset = this._getLineLeftOffset(i) || 0,\n            lineHeight = this.getHeightOfLine(i),\n            realLineHeight = 0, boxStart = 0, boxEnd = 0;\n\n        if (i === startLine) {\n          boxStart = this.__charBounds[startLine][startChar].left;\n        }\n        if (i >= startLine && i < endLine) {\n          boxEnd = isJustify && !this.isEndOfWrapping(i) ? this.width : this.getLineWidth(i) || 5; // WTF is this 5?\n        }\n        else if (i === endLine) {\n          if (endChar === 0) {\n            boxEnd = this.__charBounds[endLine][endChar].left;\n          }\n          else {\n            var charSpacing = this._getWidthOfCharSpacing();\n            boxEnd = this.__charBounds[endLine][endChar - 1].left\n              + this.__charBounds[endLine][endChar - 1].width - charSpacing;\n          }\n        }\n        realLineHeight = lineHeight;\n        if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n          lineHeight /= this.lineHeight;\n        }\n        if (this.inCompositionMode) {\n          ctx.fillStyle = this.compositionColor || 'black';\n          ctx.fillRect(\n            boundaries.left + lineOffset + boxStart,\n            boundaries.top + boundaries.topOffset + lineHeight,\n            boxEnd - boxStart,\n            1);\n        }\n        else {\n          ctx.fillStyle = this.selectionColor;\n          ctx.fillRect(\n            boundaries.left + lineOffset + boxStart,\n            boundaries.top + boundaries.topOffset,\n            boxEnd - boxStart,\n            lineHeight);\n        }\n\n\n        boundaries.topOffset += realLineHeight;\n      }\n    },\n\n    /**\n     * High level function to know the height of the cursor.\n     * the currentChar is the one that precedes the cursor\n     * Returns fontSize of char at the current cursor\n     * @return {Number} Character font size\n     */\n    getCurrentCharFontSize: function() {\n      var cp = this._getCurrentCharIndex();\n      return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n    },\n\n    /**\n     * High level function to know the color of the cursor.\n     * the currentChar is the one that precedes the cursor\n     * Returns color (fill) of char at the current cursor\n     * @return {String} Character color (fill)\n     */\n    getCurrentCharColor: function() {\n      var cp = this._getCurrentCharIndex();\n      return this.getValueOfPropertyAt(cp.l, cp.c, 'fill');\n    },\n\n    /**\n     * Returns the cursor position for the getCurrent.. functions\n     * @private\n     */\n    _getCurrentCharIndex: function() {\n      var cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n          charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n      return { l: cursorPosition.lineIndex, c: charIndex };\n    }\n  });\n\n  /**\n   * Returns fabric.IText instance from an object representation\n   * @static\n   * @memberOf fabric.IText\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] invoked with new instance as argument\n   */\n  fabric.IText.fromObject = function(object, callback) {\n    parseDecoration(object);\n    if (object.styles) {\n      for (var i in object.styles) {\n        for (var j in object.styles[i]) {\n          parseDecoration(object.styles[i][j]);\n        }\n      }\n    }\n    fabric.Object._fromObject('IText', object, callback, 'text');\n  };\n})();\n\n\n(function() {\n\n  var clone = fabric.util.object.clone;\n\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * Initializes all the interactive behavior of IText\n     */\n    initBehavior: function() {\n      this.initAddedHandler();\n      this.initRemovedHandler();\n      this.initCursorSelectionHandlers();\n      this.initDoubleClickSimulation();\n      this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\n    },\n\n    onDeselect: function() {\n      this.isEditing && this.exitEditing();\n      this.selected = false;\n    },\n\n    /**\n     * Initializes \"added\" event handler\n     */\n    initAddedHandler: function() {\n      var _this = this;\n      this.on('added', function() {\n        var canvas = _this.canvas;\n        if (canvas) {\n          if (!canvas._hasITextHandlers) {\n            canvas._hasITextHandlers = true;\n            _this._initCanvasHandlers(canvas);\n          }\n          canvas._iTextInstances = canvas._iTextInstances || [];\n          canvas._iTextInstances.push(_this);\n        }\n      });\n    },\n\n    initRemovedHandler: function() {\n      var _this = this;\n      this.on('removed', function() {\n        var canvas = _this.canvas;\n        if (canvas) {\n          canvas._iTextInstances = canvas._iTextInstances || [];\n          fabric.util.removeFromArray(canvas._iTextInstances, _this);\n          if (canvas._iTextInstances.length === 0) {\n            canvas._hasITextHandlers = false;\n            _this._removeCanvasHandlers(canvas);\n          }\n        }\n      });\n    },\n\n    /**\n     * register canvas event to manage exiting on other instances\n     * @private\n     */\n    _initCanvasHandlers: function(canvas) {\n      canvas._mouseUpITextHandler = function() {\n        if (canvas._iTextInstances) {\n          canvas._iTextInstances.forEach(function(obj) {\n            obj.__isMousedown = false;\n          });\n        }\n      };\n      canvas.on('mouse:up', canvas._mouseUpITextHandler);\n    },\n\n    /**\n     * remove canvas event to manage exiting on other instances\n     * @private\n     */\n    _removeCanvasHandlers: function(canvas) {\n      canvas.off('mouse:up', canvas._mouseUpITextHandler);\n    },\n\n    /**\n     * @private\n     */\n    _tick: function() {\n      this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');\n    },\n\n    /**\n     * @private\n     */\n    _animateCursor: function(obj, targetOpacity, duration, completeMethod) {\n\n      var tickState;\n\n      tickState = {\n        isAborted: false,\n        abort: function() {\n          this.isAborted = true;\n        },\n      };\n\n      obj.animate('_currentCursorOpacity', targetOpacity, {\n        duration: duration,\n        onComplete: function() {\n          if (!tickState.isAborted) {\n            obj[completeMethod]();\n          }\n        },\n        onChange: function() {\n          // we do not want to animate a selection, only cursor\n          if (obj.canvas && obj.selectionStart === obj.selectionEnd) {\n            obj.renderCursorOrSelection();\n          }\n        },\n        abort: function() {\n          return tickState.isAborted;\n        }\n      });\n      return tickState;\n    },\n\n    /**\n     * @private\n     */\n    _onTickComplete: function() {\n\n      var _this = this;\n\n      if (this._cursorTimeout1) {\n        clearTimeout(this._cursorTimeout1);\n      }\n      this._cursorTimeout1 = setTimeout(function() {\n        _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');\n      }, 100);\n    },\n\n    /**\n     * Initializes delayed cursor\n     */\n    initDelayedCursor: function(restart) {\n      var _this = this,\n          delay = restart ? 0 : this.cursorDelay;\n\n      this.abortCursorAnimation();\n      this._currentCursorOpacity = 1;\n      this._cursorTimeout2 = setTimeout(function() {\n        _this._tick();\n      }, delay);\n    },\n\n    /**\n     * Aborts cursor animation and clears all timeouts\n     */\n    abortCursorAnimation: function() {\n      var shouldClear = this._currentTickState || this._currentTickCompleteState,\n          canvas = this.canvas;\n      this._currentTickState && this._currentTickState.abort();\n      this._currentTickCompleteState && this._currentTickCompleteState.abort();\n\n      clearTimeout(this._cursorTimeout1);\n      clearTimeout(this._cursorTimeout2);\n\n      this._currentCursorOpacity = 0;\n      // to clear just itext area we need to transform the context\n      // it may not be worth it\n      if (shouldClear && canvas) {\n        canvas.clearContext(canvas.contextTop || canvas.contextContainer);\n      }\n\n    },\n\n    /**\n     * Selects entire text\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    selectAll: function() {\n      this.selectionStart = 0;\n      this.selectionEnd = this._text.length;\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      return this;\n    },\n\n    /**\n     * Returns selected text\n     * @return {String}\n     */\n    getSelectedText: function() {\n      return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n    },\n\n    /**\n     * Find new selection index representing start of current word according to current selection index\n     * @param {Number} startFrom Surrent selection index\n     * @return {Number} New selection index\n     */\n    findWordBoundaryLeft: function(startFrom) {\n      var offset = 0, index = startFrom - 1;\n\n      // remove space before cursor first\n      if (this._reSpace.test(this._text[index])) {\n        while (this._reSpace.test(this._text[index])) {\n          offset++;\n          index--;\n        }\n      }\n      while (/\\S/.test(this._text[index]) && index > -1) {\n        offset++;\n        index--;\n      }\n\n      return startFrom - offset;\n    },\n\n    /**\n     * Find new selection index representing end of current word according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findWordBoundaryRight: function(startFrom) {\n      var offset = 0, index = startFrom;\n\n      // remove space after cursor first\n      if (this._reSpace.test(this._text[index])) {\n        while (this._reSpace.test(this._text[index])) {\n          offset++;\n          index++;\n        }\n      }\n      while (/\\S/.test(this._text[index]) && index < this.text.length) {\n        offset++;\n        index++;\n      }\n\n      return startFrom + offset;\n    },\n\n    /**\n     * Find new selection index representing start of current line according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findLineBoundaryLeft: function(startFrom) {\n      var offset = 0, index = startFrom - 1;\n\n      while (!/\\n/.test(this._text[index]) && index > -1) {\n        offset++;\n        index--;\n      }\n\n      return startFrom - offset;\n    },\n\n    /**\n     * Find new selection index representing end of current line according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findLineBoundaryRight: function(startFrom) {\n      var offset = 0, index = startFrom;\n\n      while (!/\\n/.test(this._text[index]) && index < this.text.length) {\n        offset++;\n        index++;\n      }\n\n      return startFrom + offset;\n    },\n\n    /**\n     * Finds index corresponding to beginning or end of a word\n     * @param {Number} selectionStart Index of a character\n     * @param {Number} direction 1 or -1\n     * @return {Number} Index of the beginning or end of a word\n     */\n    searchWordBoundary: function(selectionStart, direction) {\n      var index     = this._reSpace.test(this.text.charAt(selectionStart)) ? selectionStart - 1 : selectionStart,\n          _char     = this.text.charAt(index),\n          reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\n      while (!reNonWord.test(_char) && index > 0 && index < this.text.length) {\n        index += direction;\n        _char = this.text.charAt(index);\n      }\n      if (reNonWord.test(_char) && _char !== '\\n') {\n        index += direction === 1 ? 0 : 1;\n      }\n      return index;\n    },\n\n    /**\n     * Selects a word based on the index\n     * @param {Number} selectionStart Index of a character\n     */\n    selectWord: function(selectionStart) {\n      selectionStart = selectionStart || this.selectionStart;\n      var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */\n          newSelectionEnd = this.searchWordBoundary(selectionStart, 1); /* search forward */\n\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = newSelectionEnd;\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    },\n\n    /**\n     * Selects a line based on the index\n     * @param {Number} selectionStart Index of a character\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    selectLine: function(selectionStart) {\n      selectionStart = selectionStart || this.selectionStart;\n      var newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n          newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = newSelectionEnd;\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      return this;\n    },\n\n    /**\n     * Enters editing state\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    enterEditing: function(e) {\n      if (this.isEditing || !this.editable) {\n        return;\n      }\n\n      if (this.canvas) {\n        this.canvas.calcOffset();\n        this.exitEditingOnOthers(this.canvas);\n      }\n\n      this.isEditing = true;\n\n      this.initHiddenTextarea(e);\n      this.hiddenTextarea.focus();\n      this.hiddenTextarea.value = this.text;\n      this._updateTextarea();\n      this._saveEditingProps();\n      this._setEditingProps();\n      this._textBeforeEdit = this.text;\n\n      this._tick();\n      this.fire('editing:entered');\n      this._fireSelectionChanged();\n      if (!this.canvas) {\n        return this;\n      }\n      this.canvas.fire('text:editing:entered', { target: this });\n      this.initMouseMoveHandler();\n      this.canvas.requestRenderAll();\n      return this;\n    },\n\n    exitEditingOnOthers: function(canvas) {\n      if (canvas._iTextInstances) {\n        canvas._iTextInstances.forEach(function(obj) {\n          obj.selected = false;\n          if (obj.isEditing) {\n            obj.exitEditing();\n          }\n        });\n      }\n    },\n\n    /**\n     * Initializes \"mousemove\" event handler\n     */\n    initMouseMoveHandler: function() {\n      this.canvas.on('mouse:move', this.mouseMoveHandler);\n    },\n\n    /**\n     * @private\n     */\n    mouseMoveHandler: function(options) {\n      if (!this.__isMousedown || !this.isEditing) {\n        return;\n      }\n\n      var newSelectionStart = this.getSelectionStartFromPointer(options.e),\n          currentStart = this.selectionStart,\n          currentEnd = this.selectionEnd;\n      if (\n        (newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd)\n        &&\n        (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n      ) {\n        return;\n      }\n      if (newSelectionStart > this.__selectionStartOnMouseDown) {\n        this.selectionStart = this.__selectionStartOnMouseDown;\n        this.selectionEnd = newSelectionStart;\n      }\n      else {\n        this.selectionStart = newSelectionStart;\n        this.selectionEnd = this.__selectionStartOnMouseDown;\n      }\n      if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {\n        this.restartCursorIfNeeded();\n        this._fireSelectionChanged();\n        this._updateTextarea();\n        this.renderCursorOrSelection();\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setEditingProps: function() {\n      this.hoverCursor = 'text';\n\n      if (this.canvas) {\n        this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n      }\n\n      this.borderColor = this.editingBorderColor;\n\n      this.hasControls = this.selectable = false;\n      this.lockMovementX = this.lockMovementY = true;\n    },\n\n    /**\n     * convert from textarea to grapheme indexes\n     */\n    fromStringToGraphemeSelection: function(start, end, text) {\n      var smallerTextStart = text.slice(0, start),\n          graphemeStart = fabric.util.string.graphemeSplit(smallerTextStart).length;\n      if (start === end) {\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n      }\n      var smallerTextEnd = text.slice(start, end),\n          graphemeEnd = fabric.util.string.graphemeSplit(smallerTextEnd).length;\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\n    },\n\n    /**\n     * convert from fabric to textarea values\n     */\n    fromGraphemeToStringSelection: function(start, end, _text) {\n      var smallerTextStart = _text.slice(0, start),\n          graphemeStart = smallerTextStart.join('').length;\n      if (start === end) {\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n      }\n      var smallerTextEnd = _text.slice(start, end),\n          graphemeEnd = smallerTextEnd.join('').length;\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\n    },\n\n    /**\n     * @private\n     */\n    _updateTextarea: function() {\n      this.cursorOffsetCache = { };\n      if (!this.hiddenTextarea) {\n        return;\n      }\n      if (!this.inCompositionMode) {\n        var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);\n        this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n        this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n      }\n      this.updateTextareaPosition();\n    },\n\n    /**\n     * @private\n     */\n    updateFromTextArea: function() {\n      if (!this.hiddenTextarea) {\n        return;\n      }\n      this.cursorOffsetCache = { };\n      this.text = this.hiddenTextarea.value;\n      if (this._shouldClearDimensionCache()) {\n        this.initDimensions();\n        this.setCoords();\n      }\n      var newSelection = this.fromStringToGraphemeSelection(\n        this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);\n      this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n      if (!this.inCompositionMode) {\n        this.selectionStart = newSelection.selectionStart;\n      }\n      this.updateTextareaPosition();\n    },\n\n    /**\n     * @private\n     */\n    updateTextareaPosition: function() {\n      if (this.selectionStart === this.selectionEnd) {\n        var style = this._calcTextareaPosition();\n        this.hiddenTextarea.style.left = style.left;\n        this.hiddenTextarea.style.top = style.top;\n      }\n    },\n\n    /**\n     * @private\n     * @return {Object} style contains style for hiddenTextarea\n     */\n    _calcTextareaPosition: function() {\n      if (!this.canvas) {\n        return { x: 1, y: 1 };\n      }\n      var desiredPostion = this.inCompositionMode ? this.compositionStart : this.selectionStart,\n          boundaries = this._getCursorBoundaries(desiredPostion),\n          cursorLocation = this.get2DCursorLocation(desiredPostion),\n          lineIndex = cursorLocation.lineIndex,\n          charIndex = cursorLocation.charIndex,\n          charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') * this.lineHeight,\n          leftOffset = boundaries.leftOffset,\n          m = this.calcTransformMatrix(),\n          p = {\n            x: boundaries.left + leftOffset,\n            y: boundaries.top + boundaries.topOffset + charHeight\n          },\n          upperCanvas = this.canvas.upperCanvasEl,\n          upperCanvasWidth = upperCanvas.width,\n          upperCanvasHeight = upperCanvas.height,\n          maxWidth = upperCanvasWidth - charHeight,\n          maxHeight = upperCanvasHeight - charHeight,\n          scaleX = upperCanvas.clientWidth / upperCanvasWidth,\n          scaleY = upperCanvas.clientHeight / upperCanvasHeight;\n\n      p = fabric.util.transformPoint(p, m);\n      p = fabric.util.transformPoint(p, this.canvas.viewportTransform);\n      p.x *= scaleX;\n      p.y *= scaleY;\n      if (p.x < 0) {\n        p.x = 0;\n      }\n      if (p.x > maxWidth) {\n        p.x = maxWidth;\n      }\n      if (p.y < 0) {\n        p.y = 0;\n      }\n      if (p.y > maxHeight) {\n        p.y = maxHeight;\n      }\n\n      // add canvas offset on document\n      p.x += this.canvas._offset.left;\n      p.y += this.canvas._offset.top;\n\n      return { left: p.x + 'px', top: p.y + 'px', fontSize: charHeight + 'px', charHeight: charHeight };\n    },\n\n    /**\n     * @private\n     */\n    _saveEditingProps: function() {\n      this._savedProps = {\n        hasControls: this.hasControls,\n        borderColor: this.borderColor,\n        lockMovementX: this.lockMovementX,\n        lockMovementY: this.lockMovementY,\n        hoverCursor: this.hoverCursor,\n        defaultCursor: this.canvas && this.canvas.defaultCursor,\n        moveCursor: this.canvas && this.canvas.moveCursor\n      };\n    },\n\n    /**\n     * @private\n     */\n    _restoreEditingProps: function() {\n      if (!this._savedProps) {\n        return;\n      }\n\n      this.hoverCursor = this._savedProps.hoverCursor;\n      this.hasControls = this._savedProps.hasControls;\n      this.borderColor = this._savedProps.borderColor;\n      this.lockMovementX = this._savedProps.lockMovementX;\n      this.lockMovementY = this._savedProps.lockMovementY;\n\n      if (this.canvas) {\n        this.canvas.defaultCursor = this._savedProps.defaultCursor;\n        this.canvas.moveCursor = this._savedProps.moveCursor;\n      }\n    },\n\n    /**\n     * Exits from editing state\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    exitEditing: function() {\n      var isTextChanged = (this._textBeforeEdit !== this.text);\n      this.selected = false;\n      this.isEditing = false;\n      this.selectable = true;\n\n      this.selectionEnd = this.selectionStart;\n\n      if (this.hiddenTextarea) {\n        this.hiddenTextarea.blur && this.hiddenTextarea.blur();\n        this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);\n        this.hiddenTextarea = null;\n      }\n\n      this.abortCursorAnimation();\n      this._restoreEditingProps();\n      this._currentCursorOpacity = 0;\n      if (this._shouldClearDimensionCache()) {\n        this.initDimensions();\n        this.setCoords();\n      }\n      this.fire('editing:exited');\n      isTextChanged && this.fire('modified');\n      if (this.canvas) {\n        this.canvas.off('mouse:move', this.mouseMoveHandler);\n        this.canvas.fire('text:editing:exited', { target: this });\n        isTextChanged && this.canvas.fire('object:modified', { target: this });\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _removeExtraneousStyles: function() {\n      for (var prop in this.styles) {\n        if (!this._textLines[prop]) {\n          delete this.styles[prop];\n        }\n      }\n    },\n\n    /**\n     * remove and reflow a style block from start to end.\n     * @param {Number} start linear start position for removal (included in removal)\n     * @param {Number} end linear end position for removal ( excluded from removal )\n     */\n    removeStyleFromTo: function(start, end) {\n      var cursorStart = this.get2DCursorLocation(start, true),\n          cursorEnd = this.get2DCursorLocation(end, true),\n          lineStart = cursorStart.lineIndex,\n          charStart = cursorStart.charIndex,\n          lineEnd = cursorEnd.lineIndex,\n          charEnd = cursorEnd.charIndex,\n          i, styleObj;\n      if (lineStart !== lineEnd) {\n        // step1 remove the trailing of lineStart\n        if (this.styles[lineStart]) {\n          for (i = charStart; i < this._unwrappedTextLines[lineStart].length; i++) {\n            delete this.styles[lineStart][i];\n          }\n        }\n        // step2 move the trailing of lineEnd to lineStart if needed\n        if (this.styles[lineEnd]) {\n          for (i = charEnd; i < this._unwrappedTextLines[lineEnd].length; i++) {\n            styleObj = this.styles[lineEnd][i];\n            if (styleObj) {\n              this.styles[lineStart] || (this.styles[lineStart] = { });\n              this.styles[lineStart][charStart + i - charEnd] = styleObj;\n            }\n          }\n        }\n        // step3 detects lines will be completely removed.\n        for (i = lineStart + 1; i <= lineEnd; i++) {\n          delete this.styles[i];\n        }\n        // step4 shift remaining lines.\n        this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n      }\n      else {\n        // remove and shift left on the same line\n        if (this.styles[lineStart]) {\n          styleObj = this.styles[lineStart];\n          var diff = charEnd - charStart, numericChar, _char;\n          for (i = charStart; i < charEnd; i++) {\n            delete styleObj[i];\n          }\n          for (_char in this.styles[lineStart]) {\n            numericChar = parseInt(_char, 10);\n            if (numericChar >= charEnd) {\n              styleObj[numericChar - diff] = styleObj[_char];\n              delete styleObj[_char];\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Shifts line styles up or down\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} offset Can any number?\n     */\n    shiftLineStyles: function(lineIndex, offset) {\n      // shift all line styles by offset upward or downward\n      // do not clone deep. we need new array, not new style objects\n      var clonedStyles = clone(this.styles);\n      for (var line in this.styles) {\n        var numericLine = parseInt(line, 10);\n        if (numericLine > lineIndex) {\n          this.styles[numericLine + offset] = clonedStyles[numericLine];\n          if (!clonedStyles[numericLine - offset]) {\n            delete this.styles[numericLine];\n          }\n        }\n      }\n    },\n\n    restartCursorIfNeeded: function() {\n      if (!this._currentTickState || this._currentTickState.isAborted\n        || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted\n      ) {\n        this.initDelayedCursor();\n      }\n    },\n\n    /**\n     * Inserts new style object\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Number} qty number of lines to add\n     * @param {Array} copiedStyle Array of objects styles\n     */\n    insertNewlineStyleObject: function(lineIndex, charIndex, qty, copiedStyle) {\n      var currentCharStyle,\n          newLineStyles = {},\n          somethingAdded = false;\n\n      qty || (qty = 1);\n      this.shiftLineStyles(lineIndex, qty);\n      if (this.styles[lineIndex]) {\n        currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];\n      }\n\n      // we clone styles of all chars\n      // after cursor onto the current line\n      for (var index in this.styles[lineIndex]) {\n        var numIndex = parseInt(index, 10);\n        if (numIndex >= charIndex) {\n          somethingAdded = true;\n          newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n          // remove lines from the previous line since they're on a new line now\n          delete this.styles[lineIndex][index];\n        }\n      }\n      if (somethingAdded) {\n        this.styles[lineIndex + qty] = newLineStyles;\n      }\n      else {\n        delete this.styles[lineIndex + qty];\n      }\n      // for the other lines\n      // we clone current char style onto the next (otherwise empty) line\n      while (qty > 1) {\n        qty--;\n        if (copiedStyle && copiedStyle[qty]) {\n          this.styles[lineIndex + qty] = { 0: clone(copiedStyle[qty]) };\n        }\n        else if (currentCharStyle) {\n          this.styles[lineIndex + qty] = { 0: clone(currentCharStyle) };\n        }\n        else {\n          delete this.styles[lineIndex + qty];\n        }\n      }\n      this._forceClearCache = true;\n    },\n\n    /**\n     * Inserts style object for a given line/char index\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Number} quantity number Style object to insert, if given\n     * @param {Array} copiedStyle array of style objecs\n     */\n    insertCharStyleObject: function(lineIndex, charIndex, quantity, copiedStyle) {\n      if (!this.styles) {\n        this.styles = {};\n      }\n      var currentLineStyles       = this.styles[lineIndex],\n          currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};\n\n      quantity || (quantity = 1);\n      // shift all char styles by quantity forward\n      // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n      for (var index in currentLineStylesCloned) {\n        var numericIndex = parseInt(index, 10);\n        if (numericIndex >= charIndex) {\n          currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];\n          // only delete the style if there was nothing moved there\n          if (!currentLineStylesCloned[numericIndex - quantity]) {\n            delete currentLineStyles[numericIndex];\n          }\n        }\n      }\n      this._forceClearCache = true;\n      if (copiedStyle) {\n        while (quantity--) {\n          if (!Object.keys(copiedStyle[quantity]).length) {\n            continue;\n          }\n          if (!this.styles[lineIndex]) {\n            this.styles[lineIndex] = {};\n          }\n          this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);\n        }\n        return;\n      }\n      if (!currentLineStyles) {\n        return;\n      }\n      var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n      while (newStyle && quantity--) {\n        this.styles[lineIndex][charIndex + quantity] = clone(newStyle);\n      }\n    },\n\n    /**\n     * Inserts style object(s)\n     * @param {Array} insertedText Characters at the location where style is inserted\n     * @param {Number} start cursor index for inserting style\n     * @param {Array} [copiedStyle] array of style objects to insert.\n     */\n    insertNewStyleBlock: function(insertedText, start, copiedStyle) {\n      var cursorLoc = this.get2DCursorLocation(start, true),\n          addedLines = [0], linesLenght = 0;\n      for (var i = 0; i < insertedText.length; i++) {\n        if (insertedText[i] === '\\n') {\n          linesLenght++;\n          addedLines[linesLenght] = 0;\n        }\n        else {\n          addedLines[linesLenght]++;\n        }\n      }\n      if (addedLines[0] > 0) {\n        this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);\n        copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n      }\n      linesLenght && this.insertNewlineStyleObject(\n        cursorLoc.lineIndex, cursorLoc.charIndex + addedLines[0], linesLenght);\n      for (var i = 1; i < linesLenght; i++) {\n        if (addedLines[i] > 0) {\n          this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\n        }\n        else if (copiedStyle) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n        copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n      }\n      // we use i outside the loop to get it like linesLength\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\n      }\n    },\n\n    /**\n     * Set the selectionStart and selectionEnd according to the ne postion of cursor\n     * mimic the key - mouse navigation when shift is pressed.\n     */\n    setSelectionStartEndWithShift: function(start, end, newSelection) {\n      if (newSelection <= start) {\n        if (end === start) {\n          this._selectionDirection = 'left';\n        }\n        else if (this._selectionDirection === 'right') {\n          this._selectionDirection = 'left';\n          this.selectionEnd = start;\n        }\n        this.selectionStart = newSelection;\n      }\n      else if (newSelection > start && newSelection < end) {\n        if (this._selectionDirection === 'right') {\n          this.selectionEnd = newSelection;\n        }\n        else {\n          this.selectionStart = newSelection;\n        }\n      }\n      else {\n        // newSelection is > selection start and end\n        if (end === start) {\n          this._selectionDirection = 'right';\n        }\n        else if (this._selectionDirection === 'left') {\n          this._selectionDirection = 'right';\n          this.selectionStart = end;\n        }\n        this.selectionEnd = newSelection;\n      }\n    },\n\n    setSelectionInBoundaries: function() {\n      var length = this.text.length;\n      if (this.selectionStart > length) {\n        this.selectionStart = length;\n      }\n      else if (this.selectionStart < 0) {\n        this.selectionStart = 0;\n      }\n      if (this.selectionEnd > length) {\n        this.selectionEnd = length;\n      }\n      else if (this.selectionEnd < 0) {\n        this.selectionEnd = 0;\n      }\n    }\n  });\n})();\n\n\nfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n  /**\n   * Initializes \"dbclick\" event handler\n   */\n  initDoubleClickSimulation: function() {\n\n    // for double click\n    this.__lastClickTime = +new Date();\n\n    // for triple click\n    this.__lastLastClickTime = +new Date();\n\n    this.__lastPointer = { };\n\n    this.on('mousedown', this.onMouseDown);\n  },\n\n  /**\n   * Default event handler to simulate triple click\n   * @private\n   */\n  onMouseDown: function(options) {\n    if (!this.canvas) {\n      return;\n    }\n    this.__newClickTime = +new Date();\n    var newPointer = options.pointer;\n    if (this.isTripleClick(newPointer)) {\n      this.fire('tripleclick', options);\n      this._stopEvent(options.e);\n    }\n    this.__lastLastClickTime = this.__lastClickTime;\n    this.__lastClickTime = this.__newClickTime;\n    this.__lastPointer = newPointer;\n    this.__lastIsEditing = this.isEditing;\n    this.__lastSelected = this.selected;\n  },\n\n  isTripleClick: function(newPointer) {\n    return this.__newClickTime - this.__lastClickTime < 500 &&\n        this.__lastClickTime - this.__lastLastClickTime < 500 &&\n        this.__lastPointer.x === newPointer.x &&\n        this.__lastPointer.y === newPointer.y;\n  },\n\n  /**\n   * @private\n   */\n  _stopEvent: function(e) {\n    e.preventDefault && e.preventDefault();\n    e.stopPropagation && e.stopPropagation();\n  },\n\n  /**\n   * Initializes event handlers related to cursor or selection\n   */\n  initCursorSelectionHandlers: function() {\n    this.initMousedownHandler();\n    this.initMouseupHandler();\n    this.initClicks();\n  },\n\n  /**\n   * Initializes double and triple click event handlers\n   */\n  initClicks: function() {\n    this.on('mousedblclick', function(options) {\n      this.selectWord(this.getSelectionStartFromPointer(options.e));\n    });\n    this.on('tripleclick', function(options) {\n      this.selectLine(this.getSelectionStartFromPointer(options.e));\n    });\n  },\n\n  /**\n   * Default event handler for the basic functionalities needed on _mouseDown\n   * can be overridden to do something different.\n   * Scope of this implementation is: find the click position, set selectionStart\n   * find selectionEnd, initialize the drawing of either cursor or selection area\n   */\n  _mouseDownHandler: function(options) {\n    if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\n      return;\n    }\n\n    this.__isMousedown = true;\n\n    if (this.selected) {\n      this.setCursorByClick(options.e);\n    }\n\n    if (this.isEditing) {\n      this.__selectionStartOnMouseDown = this.selectionStart;\n      if (this.selectionStart === this.selectionEnd) {\n        this.abortCursorAnimation();\n      }\n      this.renderCursorOrSelection();\n    }\n  },\n\n  /**\n   * Default event handler for the basic functionalities needed on mousedown:before\n   * can be overridden to do something different.\n   * Scope of this implementation is: verify the object is already selected when mousing down\n   */\n  _mouseDownHandlerBefore: function(options) {\n    if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\n      return;\n    }\n    if (this === this.canvas._activeObject) {\n      this.selected = true;\n    }\n  },\n\n  /**\n   * Initializes \"mousedown\" event handler\n   */\n  initMousedownHandler: function() {\n    this.on('mousedown', this._mouseDownHandler);\n    this.on('mousedown:before', this._mouseDownHandlerBefore);\n  },\n\n  /**\n   * Initializes \"mouseup\" event handler\n   */\n  initMouseupHandler: function() {\n    this.on('mouseup', this.mouseUpHandler);\n  },\n\n  /**\n   * standard hander for mouse up, overridable\n   * @private\n   */\n  mouseUpHandler: function(options) {\n    this.__isMousedown = false;\n    if (!this.editable || this.group ||\n      (options.transform && options.transform.actionPerformed) ||\n      (options.e.button && options.e.button !== 1)) {\n      return;\n    }\n\n    if (this.canvas) {\n      var currentActive = this.canvas._activeObject;\n      if (currentActive && currentActive !== this) {\n        // avoid running this logic when there is an active object\n        // this because is possible with shift click and fast clicks,\n        // to rapidly deselect and reselect this object and trigger an enterEdit\n        return;\n      }\n    }\n\n    if (this.__lastSelected && !this.__corner) {\n      this.selected = false;\n      this.__lastSelected = false;\n      this.enterEditing(options.e);\n      if (this.selectionStart === this.selectionEnd) {\n        this.initDelayedCursor(true);\n      }\n      else {\n        this.renderCursorOrSelection();\n      }\n    }\n    else {\n      this.selected = true;\n    }\n  },\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {Event} e Event object\n   */\n  setCursorByClick: function(e) {\n    var newSelection = this.getSelectionStartFromPointer(e),\n        start = this.selectionStart, end = this.selectionEnd;\n    if (e.shiftKey) {\n      this.setSelectionStartEndWithShift(start, end, newSelection);\n    }\n    else {\n      this.selectionStart = newSelection;\n      this.selectionEnd = newSelection;\n    }\n    if (this.isEditing) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  },\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {Event} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer: function(e) {\n    var mouseOffset = this.getLocalPointer(e),\n        prevWidth = 0,\n        width = 0,\n        height = 0,\n        charIndex = 0,\n        lineIndex = 0,\n        lineLeftOffset,\n        line;\n\n    for (var i = 0, len = this._textLines.length; i < len; i++) {\n      if (height <= mouseOffset.y) {\n        height += this.getHeightOfLine(i) * this.scaleY;\n        lineIndex = i;\n        if (i > 0) {\n          charIndex += this._textLines[i - 1].length + 1;\n        }\n      }\n      else {\n        break;\n      }\n    }\n    lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    width = lineLeftOffset * this.scaleX;\n    line = this._textLines[lineIndex];\n    for (var j = 0, jlen = line.length; j < jlen; j++) {\n      prevWidth = width;\n      // i removed something about flipX here, check.\n      width += this.__charBounds[lineIndex][j].kernedWidth * this.scaleX;\n      if (width <= mouseOffset.x) {\n        charIndex++;\n      }\n      else {\n        break;\n      }\n    }\n    return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, charIndex, jlen);\n  },\n\n  /**\n   * @private\n   */\n  _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {\n    // we need Math.abs because when width is after the last char, the offset is given as 1, while is 0\n    var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,\n        distanceBtwNextCharAndCursor = width - mouseOffset.x,\n        offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ||\n          distanceBtwNextCharAndCursor < 0 ? 0 : 1,\n        newSelectionStart = index + offset;\n    // if object is horizontally flipped, mirror cursor location from the end\n    if (this.flipX) {\n      newSelectionStart = jlen - newSelectionStart;\n    }\n\n    if (newSelectionStart > this._text.length) {\n      newSelectionStart = this._text.length;\n    }\n\n    return newSelectionStart;\n  }\n});\n\n\nfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea: function() {\n    this.hiddenTextarea = fabric.document.createElement('textarea');\n    this.hiddenTextarea.setAttribute('autocapitalize', 'off');\n    this.hiddenTextarea.setAttribute('autocorrect', 'off');\n    this.hiddenTextarea.setAttribute('autocomplete', 'off');\n    this.hiddenTextarea.setAttribute('spellcheck', 'false');\n    this.hiddenTextarea.setAttribute('data-fabric-hiddentextarea', '');\n    this.hiddenTextarea.setAttribute('wrap', 'off');\n    var style = this._calcTextareaPosition();\n    // line-height: 1px; was removed from the style to fix this:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n    this.hiddenTextarea.style.cssText = 'position: absolute; top: ' + style.top +\n    '; left: ' + style.left + '; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px;' +\n    ' paddingｰtop: ' + style.fontSize + ';';\n    fabric.document.body.appendChild(this.hiddenTextarea);\n\n    fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'keyup', this.onKeyUp.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'cut', this.copy.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'compositionstart', this.onCompositionStart.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'compositionupdate', this.onCompositionUpdate.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'compositionend', this.onCompositionEnd.bind(this));\n\n    if (!this._clickHandlerInitialized && this.canvas) {\n      fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));\n      this._clickHandlerInitialized = true;\n    }\n  },\n\n  /**\n   * For functionalities on keyDown\n   * Map a special key to a function of the instance/prototype\n   * If you need different behaviour for ESC or TAB or arrows, you have to change\n   * this map setting the name of a function that you build on the fabric.Itext or\n   * your prototype.\n   * the map change will affect all Instances unless you need for only some text Instances\n   * in that case you have to clone this object and assign your Instance.\n   * this.keysMap = fabric.util.object.clone(this.keysMap);\n   * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]\n   */\n  keysMap: {\n    9:  'exitEditing',\n    27: 'exitEditing',\n    33: 'moveCursorUp',\n    34: 'moveCursorDown',\n    35: 'moveCursorRight',\n    36: 'moveCursorLeft',\n    37: 'moveCursorLeft',\n    38: 'moveCursorUp',\n    39: 'moveCursorRight',\n    40: 'moveCursorDown',\n  },\n\n  /**\n   * For functionalities on keyUp + ctrl || cmd\n   */\n  ctrlKeysMapUp: {\n    67: 'copy',\n    88: 'cut'\n  },\n\n  /**\n   * For functionalities on keyDown + ctrl || cmd\n   */\n  ctrlKeysMapDown: {\n    65: 'selectAll'\n  },\n\n  onClick: function() {\n    // No need to trigger click event here, focus is enough to have the keyboard appear on Android\n    this.hiddenTextarea && this.hiddenTextarea.focus();\n  },\n\n  /**\n   * Handles keyup event\n   * @param {Event} e Event object\n   */\n  onKeyDown: function(e) {\n    if (!this.isEditing || this.inCompositionMode) {\n      return;\n    }\n    if (e.keyCode in this.keysMap) {\n      this[this.keysMap[e.keyCode]](e);\n    }\n    else if ((e.keyCode in this.ctrlKeysMapDown) && (e.ctrlKey || e.metaKey)) {\n      this[this.ctrlKeysMapDown[e.keyCode]](e);\n    }\n    else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    if (e.keyCode >= 33 && e.keyCode <= 40) {\n      // if i press an arrow key just update selection\n      this.clearContextTop();\n      this.renderCursorOrSelection();\n    }\n    else {\n      this.canvas && this.canvas.requestRenderAll();\n    }\n  },\n\n  /**\n   * Handles keyup event\n   * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n   * if a copy/cut event fired, keyup is dismissed\n   * @param {Event} e Event object\n   */\n  onKeyUp: function(e) {\n    if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n      this._copyDone = false;\n      return;\n    }\n    if ((e.keyCode in this.ctrlKeysMapUp) && (e.ctrlKey || e.metaKey)) {\n      this[this.ctrlKeysMapUp[e.keyCode]](e);\n    }\n    else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.requestRenderAll();\n  },\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput: function(e) {\n    var fromPaste = this.fromPaste;\n    this.fromPaste = false;\n    e && e.stopPropagation();\n    if (!this.isEditing) {\n      return;\n    }\n    // decisions about style changes.\n    var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,\n        charCount = this._text.length,\n        nextCharCount = nextText.length,\n        removedText, insertedText,\n        charDiff = nextCharCount - charCount;\n    if (this.hiddenTextarea.value === '') {\n      this.styles = { };\n      this.updateFromTextArea();\n      this.fire('changed');\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this });\n        this.canvas.requestRenderAll();\n      }\n      return;\n    }\n\n    var textareaSelection = this.fromStringToGraphemeSelection(\n      this.hiddenTextarea.selectionStart,\n      this.hiddenTextarea.selectionEnd,\n      this.hiddenTextarea.value\n    );\n    var backDelete = this.selectionStart > textareaSelection.selectionStart;\n\n    if (this.selectionStart !== this.selectionEnd) {\n      removedText = this._text.slice(this.selectionStart, this.selectionEnd);\n      charDiff += this.selectionEnd - this.selectionStart;\n    }\n    else if (nextCharCount < charCount) {\n      if (backDelete) {\n        removedText = this._text.slice(this.selectionEnd + charDiff, this.selectionEnd);\n      }\n      else {\n        removedText = this._text.slice(this.selectionStart, this.selectionStart - charDiff);\n      }\n    }\n    insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);\n    if (removedText && removedText.length) {\n      if (this.selectionStart !== this.selectionEnd) {\n        this.removeStyleFromTo(this.selectionStart, this.selectionEnd);\n      }\n      else if (backDelete) {\n        // detect differencies between forwardDelete and backDelete\n        this.removeStyleFromTo(this.selectionEnd - removedText.length, this.selectionEnd);\n      }\n      else {\n        this.removeStyleFromTo(this.selectionEnd, this.selectionEnd + removedText.length);\n      }\n    }\n    if (insertedText.length) {\n      if (fromPaste && insertedText.join('') === fabric.copiedText) {\n        this.insertNewStyleBlock(insertedText, this.selectionStart, fabric.copiedTextStyle);\n      }\n      else {\n        this.insertNewStyleBlock(insertedText, this.selectionStart);\n      }\n    }\n    this.updateFromTextArea();\n    this.fire('changed');\n    if (this.canvas) {\n      this.canvas.fire('text:changed', { target: this });\n      this.canvas.requestRenderAll();\n    }\n  },\n  /**\n   * Composition start\n   */\n  onCompositionStart: function() {\n    this.inCompositionMode = true;\n  },\n\n  /**\n   * Composition end\n   */\n  onCompositionEnd: function() {\n    this.inCompositionMode = false;\n  },\n\n  // /**\n  //  * Composition update\n  //  */\n  onCompositionUpdate: function(e) {\n    this.compositionStart = e.target.selectionStart;\n    this.compositionEnd = e.target.selectionEnd;\n    this.updateTextareaPosition();\n  },\n\n  /**\n   * Copies selected text\n   * @param {Event} e Event object\n   */\n  copy: function() {\n    if (this.selectionStart === this.selectionEnd) {\n      //do not cut-copy if no selection\n      return;\n    }\n\n    fabric.copiedText = this.getSelectedText();\n    fabric.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);\n    this._copyDone = true;\n  },\n\n  /**\n   * Pastes text\n   * @param {Event} e Event object\n   */\n  paste: function() {\n    this.fromPaste = true;\n  },\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @return {Object} Clipboard data object\n   */\n  _getClipboardData: function(e) {\n    return (e && e.clipboardData) || fabric.window.clipboardData;\n  },\n\n  /**\n   * Finds the width in pixels before the cursor on the same line\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {Number} widthBeforeCursor width before cursor\n   */\n  _getWidthBeforeCursor: function(lineIndex, charIndex) {\n    var widthBeforeCursor = this._getLineLeftOffset(lineIndex), bound;\n\n    if (charIndex > 0) {\n      bound = this.__charBounds[lineIndex][charIndex - 1];\n      widthBeforeCursor += bound.left + bound.width;\n    }\n    return widthBeforeCursor;\n  },\n\n  /**\n   * Gets start offset of a selection\n   * @param {Event} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset: function(e, isRight) {\n    var selectionProp = this._getSelectionForOffset(e, isRight),\n        cursorLocation = this.get2DCursorLocation(selectionProp),\n        lineIndex = cursorLocation.lineIndex;\n    // if on last line, down cursor goes to end of line\n    if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {\n      // move to the end of a text\n      return this._text.length - selectionProp;\n    }\n    var charIndex = cursorLocation.charIndex,\n        widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n        indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n        textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n    return textAfterCursor.length + indexOnOtherLine + 2;\n  },\n\n  /**\n   * private\n   * Helps finding if the offset should be counted from Start or End\n   * @param {Event} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  _getSelectionForOffset: function(e, isRight) {\n    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n      return this.selectionEnd;\n    }\n    else {\n      return this.selectionStart;\n    }\n  },\n\n  /**\n   * @param {Event} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset: function(e, isRight) {\n    var selectionProp = this._getSelectionForOffset(e, isRight),\n        cursorLocation = this.get2DCursorLocation(selectionProp),\n        lineIndex = cursorLocation.lineIndex;\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      // if on first line, up cursor goes to start of line\n      return -selectionProp;\n    }\n    var charIndex = cursorLocation.charIndex,\n        widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n        indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n        textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex);\n    // return a negative offset\n    return -this._textLines[lineIndex - 1].length + indexOnOtherLine - textBeforeCursor.length;\n  },\n\n  /**\n   * for a given width it founds the matching character.\n   * @private\n   */\n  _getIndexOnLine: function(lineIndex, width) {\n\n    var line = this._textLines[lineIndex],\n        lineLeftOffset = this._getLineLeftOffset(lineIndex),\n        widthOfCharsOnLine = lineLeftOffset,\n        indexOnLine = 0, charWidth, foundMatch;\n\n    for (var j = 0, jlen = line.length; j < jlen; j++) {\n      charWidth = this.__charBounds[lineIndex][j].width;\n      widthOfCharsOnLine += charWidth;\n      if (widthOfCharsOnLine > width) {\n        foundMatch = true;\n        var leftEdge = widthOfCharsOnLine - charWidth,\n            rightEdge = widthOfCharsOnLine,\n            offsetFromLeftEdge = Math.abs(leftEdge - width),\n            offsetFromRightEdge = Math.abs(rightEdge - width);\n\n        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnLine = line.length - 1;\n    }\n\n    return indexOnLine;\n  },\n\n\n  /**\n   * Moves cursor down\n   * @param {Event} e Event object\n   */\n  moveCursorDown: function(e) {\n    if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\n      return;\n    }\n    this._moveCursorUpOrDown('Down', e);\n  },\n\n  /**\n   * Moves cursor up\n   * @param {Event} e Event object\n   */\n  moveCursorUp: function(e) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorUpOrDown('Up', e);\n  },\n\n  /**\n   * Moves cursor up or down, fires the events\n   * @param {String} direction 'Up' or 'Down'\n   * @param {Event} e Event object\n   */\n  _moveCursorUpOrDown: function(direction, e) {\n    // getUpCursorOffset\n    // getDownCursorOffset\n    var action = 'get' + direction + 'CursorOffset',\n        offset = this[action](e, this._selectionDirection === 'right');\n    if (e.shiftKey) {\n      this.moveCursorWithShift(offset);\n    }\n    else {\n      this.moveCursorWithoutShift(offset);\n    }\n    if (offset !== 0) {\n      this.setSelectionInBoundaries();\n      this.abortCursorAnimation();\n      this._currentCursorOpacity = 1;\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  },\n\n  /**\n   * Moves cursor with shift\n   * @param {Number} offset\n   */\n  moveCursorWithShift: function(offset) {\n    var newSelection = this._selectionDirection === 'left'\n      ? this.selectionStart + offset\n      : this.selectionEnd + offset;\n    this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);\n    return offset !== 0;\n  },\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorWithoutShift: function(offset) {\n    if (offset < 0) {\n      this.selectionStart += offset;\n      this.selectionEnd = this.selectionStart;\n    }\n    else {\n      this.selectionEnd += offset;\n      this.selectionStart = this.selectionEnd;\n    }\n    return offset !== 0;\n  },\n\n  /**\n   * Moves cursor left\n   * @param {Event} e Event object\n   */\n  moveCursorLeft: function(e) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Left', e);\n  },\n\n  /**\n   * @private\n   * @return {Boolean} true if a change happened\n   */\n  _move: function(e, prop, direction) {\n    var newValue;\n    if (e.altKey) {\n      newValue = this['findWordBoundary' + direction](this[prop]);\n    }\n    else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {\n      newValue = this['findLineBoundary' + direction](this[prop]);\n    }\n    else {\n      this[prop] += direction === 'Left' ? -1 : 1;\n      return true;\n    }\n    if (typeof newValue !== undefined && this[prop] !== newValue) {\n      this[prop] = newValue;\n      return true;\n    }\n  },\n\n  /**\n   * @private\n   */\n  _moveLeft: function(e, prop) {\n    return this._move(e, prop, 'Left');\n  },\n\n  /**\n   * @private\n   */\n  _moveRight: function(e, prop) {\n    return this._move(e, prop, 'Right');\n  },\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {Event} e\n   */\n  moveCursorLeftWithoutShift: function(e) {\n    var change = true;\n    this._selectionDirection = 'left';\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {\n      change = this._moveLeft(e, 'selectionStart');\n\n    }\n    this.selectionEnd = this.selectionStart;\n    return change;\n  },\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {Event} e\n   */\n  moveCursorLeftWithShift: function(e) {\n    if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {\n      return this._moveLeft(e, 'selectionEnd');\n    }\n    else if (this.selectionStart !== 0){\n      this._selectionDirection = 'left';\n      return this._moveLeft(e, 'selectionStart');\n    }\n  },\n\n  /**\n   * Moves cursor right\n   * @param {Event} e Event object\n   */\n  moveCursorRight: function(e) {\n    if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Right', e);\n  },\n\n  /**\n   * Moves cursor right or Left, fires event\n   * @param {String} direction 'Left', 'Right'\n   * @param {Event} e Event object\n   */\n  _moveCursorLeftOrRight: function(direction, e) {\n    var actionName = 'moveCursor' + direction + 'With';\n    this._currentCursorOpacity = 1;\n\n    if (e.shiftKey) {\n      actionName += 'Shift';\n    }\n    else {\n      actionName += 'outShift';\n    }\n    if (this[actionName](e)) {\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  },\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {Event} e\n   */\n  moveCursorRightWithShift: function(e) {\n    if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {\n      return this._moveRight(e, 'selectionStart');\n    }\n    else if (this.selectionEnd !== this._text.length) {\n      this._selectionDirection = 'right';\n      return this._moveRight(e, 'selectionEnd');\n    }\n  },\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {Event} e Event object\n   */\n  moveCursorRightWithoutShift: function(e) {\n    var changed = true;\n    this._selectionDirection = 'right';\n\n    if (this.selectionStart === this.selectionEnd) {\n      changed = this._moveRight(e, 'selectionStart');\n      this.selectionEnd = this.selectionStart;\n    }\n    else {\n      this.selectionStart = this.selectionEnd;\n    }\n    return changed;\n  },\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars: function(start, end) {\n    if (typeof end === 'undefined') {\n      end = start + 1;\n    }\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    if (this._shouldClearDimensionCache()) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    this._removeExtraneousStyles();\n  },\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars: function(text, style, start, end) {\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    var graphemes = fabric.util.string.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    if (this._shouldClearDimensionCache()) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    this._removeExtraneousStyles();\n  },\n\n});\n\n\n/* _TO_SVG_START_ */\n(function() {\n  var toFixed = fabric.util.toFixed,\n      multipleSpacesRegex = /  +/g;\n\n  fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\n\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var offsets = this._getSVGLeftTopOffsets(),\n          textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft),\n          internalMarkup = this._wrapSVGTextAndBg(textAndBg);\n      return this._createBaseSVGMarkup(\n        internalMarkup, { reviver: reviver, noStyle: true, withShadow: true });\n    },\n\n    /**\n     * @private\n     */\n    _getSVGLeftTopOffsets: function() {\n      return {\n        textLeft: -this.width / 2,\n        textTop: -this.height / 2,\n        lineTop: this.getHeightOfLine(0)\n      };\n    },\n\n    /**\n     * @private\n     */\n    _wrapSVGTextAndBg: function(textAndBg) {\n      var noShadow = true,\n          textDecoration = this.getSvgTextDecoration(this);\n      return [\n        textAndBg.textBgRects.join(''),\n        '\\t\\t<text xml:space=\"preserve\" ',\n        (this.fontFamily ? 'font-family=\"' + this.fontFamily.replace(/\"/g, '\\'') + '\" ' : ''),\n        (this.fontSize ? 'font-size=\"' + this.fontSize + '\" ' : ''),\n        (this.fontStyle ? 'font-style=\"' + this.fontStyle + '\" ' : ''),\n        (this.fontWeight ? 'font-weight=\"' + this.fontWeight + '\" ' : ''),\n        (textDecoration ? 'text-decoration=\"' + textDecoration + '\" ' : ''),\n        'style=\"', this.getSvgStyles(noShadow), '\"', this.addPaintOrder(), ' >',\n        textAndBg.textSpans.join(''),\n        '</text>\\n'\n      ];\n    },\n\n    /**\n     * @private\n     * @param {Number} textTopOffset Text top offset\n     * @param {Number} textLeftOffset Text left offset\n     * @return {Object}\n     */\n    _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {\n      var textSpans = [],\n          textBgRects = [],\n          height = textTopOffset, lineOffset;\n      // bounding-box background\n      this._setSVGBg(textBgRects);\n\n      // text and text-background\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        lineOffset = this._getLineLeftOffset(i);\n        if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n          this._setSVGTextLineBg(textBgRects, i, textLeftOffset + lineOffset, height);\n        }\n        this._setSVGTextLineText(textSpans, i, textLeftOffset + lineOffset, height);\n        height += this.getHeightOfLine(i);\n      }\n\n      return {\n        textSpans: textSpans,\n        textBgRects: textBgRects\n      };\n    },\n\n    /**\n     * @private\n     */\n    _createTextCharSpan: function(_char, styleDecl, left, top) {\n      var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex),\n          styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace),\n          fillStyles = styleProps ? 'style=\"' + styleProps + '\"' : '',\n          dy = styleDecl.deltaY, dySpan = '',\n          NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n      if (dy) {\n        dySpan = ' dy=\"' + toFixed(dy, NUM_FRACTION_DIGITS) + '\" ';\n      }\n      return [\n        '<tspan x=\"', toFixed(left, NUM_FRACTION_DIGITS), '\" y=\"',\n        toFixed(top, NUM_FRACTION_DIGITS), '\" ', dySpan,\n        fillStyles, '>',\n        fabric.util.string.escapeXml(_char),\n        '</tspan>'\n      ].join('');\n    },\n\n    _setSVGTextLineText: function(textSpans, lineIndex, textLeftOffset, textTopOffset) {\n      // set proper line offset\n      var lineHeight = this.getHeightOfLine(lineIndex),\n          isJustify = this.textAlign.indexOf('justify') !== -1,\n          actualStyle,\n          nextStyle,\n          charsToRender = '',\n          charBox, style,\n          boxWidth = 0,\n          line = this._textLines[lineIndex],\n          timeToRender;\n\n      textTopOffset += lineHeight * (1 - this._fontSizeFraction) / this.lineHeight;\n      for (var i = 0, len = line.length - 1; i <= len; i++) {\n        timeToRender = i === len || this.charSpacing;\n        charsToRender += line[i];\n        charBox = this.__charBounds[lineIndex][i];\n        if (boxWidth === 0) {\n          textLeftOffset += charBox.kernedWidth - charBox.width;\n          boxWidth += charBox.width;\n        }\n        else {\n          boxWidth += charBox.kernedWidth;\n        }\n        if (isJustify && !timeToRender) {\n          if (this._reSpaceAndTab.test(line[i])) {\n            timeToRender = true;\n          }\n        }\n        if (!timeToRender) {\n          // if we have charSpacing, we render char by char\n          actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n          nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n          timeToRender = this._hasStyleChangedForSvg(actualStyle, nextStyle);\n        }\n        if (timeToRender) {\n          style = this._getStyleDeclaration(lineIndex, i) || { };\n          textSpans.push(this._createTextCharSpan(charsToRender, style, textLeftOffset, textTopOffset));\n          charsToRender = '';\n          actualStyle = nextStyle;\n          textLeftOffset += boxWidth;\n          boxWidth = 0;\n        }\n      }\n    },\n\n    _pushTextBgRect: function(textBgRects, color, left, top, width, height) {\n      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n      textBgRects.push(\n        '\\t\\t<rect ',\n        this._getFillAttributes(color),\n        ' x=\"',\n        toFixed(left, NUM_FRACTION_DIGITS),\n        '\" y=\"',\n        toFixed(top, NUM_FRACTION_DIGITS),\n        '\" width=\"',\n        toFixed(width, NUM_FRACTION_DIGITS),\n        '\" height=\"',\n        toFixed(height, NUM_FRACTION_DIGITS),\n        '\"></rect>\\n');\n    },\n\n    _setSVGTextLineBg: function(textBgRects, i, leftOffset, textTopOffset) {\n      var line = this._textLines[i],\n          heightOfLine = this.getHeightOfLine(i) / this.lineHeight,\n          boxWidth = 0,\n          boxStart = 0,\n          charBox, currentColor,\n          lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\n        charBox = this.__charBounds[i][j];\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (currentColor !== lastColor) {\n          lastColor && this._pushTextBgRect(textBgRects, lastColor, leftOffset + boxStart,\n            textTopOffset, boxWidth, heightOfLine);\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        }\n        else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      currentColor && this._pushTextBgRect(textBgRects, currentColor, leftOffset + boxStart,\n        textTopOffset, boxWidth, heightOfLine);\n    },\n\n    /**\n     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n     * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n     *\n     * @private\n     * @param {*} value\n     * @return {String}\n     */\n    _getFillAttributes: function(value) {\n      var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';\n      if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {\n        return 'fill=\"' + value + '\"';\n      }\n      return 'opacity=\"' + fillColor.getAlpha() + '\" fill=\"' + fillColor.setAlpha(1).toRgb() + '\"';\n    },\n\n    /**\n     * @private\n     */\n    _getSVGLineTopOffset: function(lineIndex) {\n      var lineTopOffset = 0, lastHeight = 0;\n      for (var j = 0; j < lineIndex; j++) {\n        lineTopOffset += this.getHeightOfLine(j);\n      }\n      lastHeight = this.getHeightOfLine(j);\n      return {\n        lineTop: lineTopOffset,\n        offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)\n      };\n    },\n\n    /**\n     * Returns styles-string for svg-export\n     * @param {Boolean} skipShadow a boolean to skip shadow filter output\n     * @return {String}\n     */\n    getSvgStyles: function(skipShadow) {\n      var svgStyle = fabric.Object.prototype.getSvgStyles.call(this, skipShadow);\n      return svgStyle + ' white-space: pre;';\n    },\n  });\n})();\n/* _TO_SVG_END_ */\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = {});\n\n  /**\n   * Textbox class, based on IText, allows the user to resize the text rectangle\n   * and wraps lines automatically. Textboxes have their Y scaling locked, the\n   * user can only change width. Height is adjusted automatically based on the\n   * wrapping of lines.\n   * @class fabric.Textbox\n   * @extends fabric.IText\n   * @mixes fabric.Observable\n   * @return {fabric.Textbox} thisArg\n   * @see {@link fabric.Textbox#initialize} for constructor definition\n   */\n  fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'textbox',\n\n    /**\n     * Minimum width of textbox, in pixels.\n     * @type Number\n     * @default\n     */\n    minWidth: 20,\n\n    /**\n     * Minimum calculated width of a textbox, in pixels.\n     * fixed to 2 so that an empty textbox cannot go to 0\n     * and is still selectable without text.\n     * @type Number\n     * @default\n     */\n    dynamicMinWidth: 2,\n\n    /**\n     * Cached array of text wrapping.\n     * @type Array\n     */\n    __cachedLines: null,\n\n    /**\n     * Override standard Object class values\n     */\n    lockScalingFlip: true,\n\n    /**\n     * Override standard Object class values\n     * Textbox needs this on false\n     */\n    noScaleCache: false,\n\n    /**\n     * Properties which when set cause object to change dimensions\n     * @type Object\n     * @private\n     */\n    _dimensionAffectingProps: fabric.Text.prototype._dimensionAffectingProps.concat('width'),\n\n    /**\n     * Use this regular expression to split strings in breakable lines\n     * @private\n     */\n    _wordJoiners: /[ \\t\\r\\u200B\\u200C]/,\n\n    /**\n     * Use this boolean property in order to split strings that have no white space concept.\n     * this is a cheap way to help with chinese/japaense\n     * @type Boolean\n     * @since 2.6.0\n     */\n    splitByGrapheme: false,\n\n    /**\n     * Unlike superclass's version of this function, Textbox does not update\n     * its width.\n     * @private\n     * @override\n     */\n    initDimensions: function() {\n      if (this.__skipDimension) {\n        return;\n      }\n      this.isEditing && this.initDelayedCursor();\n      this.clearContextTop();\n      this._clearCache();\n      // clear dynamicMinWidth as it will be different after we re-wrap line\n      this.dynamicMinWidth = 0;\n      // wrap lines\n      this._styleMap = this._generateStyleMap(this._splitText());\n      // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n      if (this.dynamicMinWidth > this.width) {\n        this._set('width', this.dynamicMinWidth);\n      }\n      if (this.textAlign.indexOf('justify') !== -1) {\n        // once text is measured we need to make space fatter to make justified text.\n        this.enlargeSpaces();\n      }\n      // clear cache and re-calculate height\n      this.height = this.calcTextHeight();\n      this.saveState({ propertySet: '_dimensionAffectingProps' });\n    },\n\n    /**\n     * Generate an object that translates the style object so that it is\n     * broken up by visual lines (new lines and automatic wrapping).\n     * The original text styles object is broken up by actual lines (new lines only),\n     * which is only sufficient for Text / IText\n     * @private\n     */\n    _generateStyleMap: function(textInfo) {\n      var realLineCount     = 0,\n          realLineCharCount = 0,\n          charCount         = 0,\n          map               = {};\n\n      for (var i = 0; i < textInfo.graphemeLines.length; i++) {\n        if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n          realLineCharCount = 0;\n          charCount++;\n          realLineCount++;\n        }\n        else if (this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i > 0) {\n          // this case deals with space's that are removed from end of lines when wrapping\n          realLineCharCount++;\n          charCount++;\n        }\n\n        map[i] = { line: realLineCount, offset: realLineCharCount };\n\n        charCount += textInfo.graphemeLines[i].length;\n        realLineCharCount += textInfo.graphemeLines[i].length;\n      }\n\n      return map;\n    },\n\n    /**\n     * Returns true if object has a style property or has it ina specified line\n     * @param {Number} lineIndex\n     * @return {Boolean}\n     */\n    styleHas: function(property, lineIndex) {\n      if (this._styleMap && !this.isWrapping) {\n        var map = this._styleMap[lineIndex];\n        if (map) {\n          lineIndex = map.line;\n        }\n      }\n      return fabric.Text.prototype.styleHas.call(this, property, lineIndex);\n    },\n\n    /**\n     * Returns true if object has no styling or no styling in a line\n     * @param {Number} lineIndex , lineIndex is on wrapped lines.\n     * @return {Boolean}\n     */\n    isEmptyStyles: function(lineIndex) {\n      var offset = 0, nextLineIndex = lineIndex + 1, nextOffset, obj, shouldLimit = false;\n      var map = this._styleMap[lineIndex];\n      var mapNextLine = this._styleMap[lineIndex + 1];\n      if (map) {\n        lineIndex = map.line;\n        offset = map.offset;\n      }\n      if (mapNextLine) {\n        nextLineIndex = mapNextLine.line;\n        shouldLimit = nextLineIndex === lineIndex;\n        nextOffset = mapNextLine.offset;\n      }\n      obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\n      for (var p1 in obj) {\n        for (var p2 in obj[p1]) {\n          if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {\n            // eslint-disable-next-line no-unused-vars\n            for (var p3 in obj[p1][p2]) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _getStyleDeclaration: function(lineIndex, charIndex) {\n      if (this._styleMap && !this.isWrapping) {\n        var map = this._styleMap[lineIndex];\n        if (!map) {\n          return null;\n        }\n        lineIndex = map.line;\n        charIndex = map.offset + charIndex;\n      }\n      return this.callSuper('_getStyleDeclaration', lineIndex, charIndex);\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} style\n     * @private\n     */\n    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      this.styles[lineIndex][charIndex] = style;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      delete this.styles[lineIndex][charIndex];\n    },\n\n    /**\n    * probably broken need a fix\n     * @param {Number} lineIndex\n     * @private\n     */\n    _getLineStyle: function(lineIndex) {\n      var map = this._styleMap[lineIndex];\n      return this.styles[map.line];\n    },\n\n    /**\n     * probably broken need a fix\n     * @param {Number} lineIndex\n     * @param {Object} style\n     * @private\n     */\n    _setLineStyle: function(lineIndex, style) {\n      var map = this._styleMap[lineIndex];\n      this.styles[map.line] = style;\n    },\n\n    /**\n     * probably broken need a fix\n     * @param {Number} lineIndex\n     * @private\n     */\n    _deleteLineStyle: function(lineIndex) {\n      var map = this._styleMap[lineIndex];\n      delete this.styles[map.line];\n    },\n\n    /**\n     * Wraps text using the 'width' property of Textbox. First this function\n     * splits text on newlines, so we preserve newlines entered by the user.\n     * Then it wraps each line using the width of the Textbox by calling\n     * _wrapLine().\n     * @param {Array} lines The string array of text that is split into lines\n     * @param {Number} desiredWidth width you want to wrap to\n     * @returns {Array} Array of lines\n     */\n    _wrapText: function(lines, desiredWidth) {\n      var wrapped = [], i;\n      this.isWrapping = true;\n      for (i = 0; i < lines.length; i++) {\n        wrapped = wrapped.concat(this._wrapLine(lines[i], i, desiredWidth));\n      }\n      this.isWrapping = false;\n      return wrapped;\n    },\n\n    /**\n     * Helper function to measure a string of text, given its lineIndex and charIndex offset\n     * it gets called when charBounds are not available yet.\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {String} text\n     * @param {number} lineIndex\n     * @param {number} charOffset\n     * @returns {number}\n     * @private\n     */\n    _measureWord: function(word, lineIndex, charOffset) {\n      var width = 0, prevGrapheme, skipLeft = true;\n      charOffset = charOffset || 0;\n      for (var i = 0, len = word.length; i < len; i++) {\n        var box = this._getGraphemeBox(word[i], lineIndex, i + charOffset, prevGrapheme, skipLeft);\n        width += box.kernedWidth;\n        prevGrapheme = word[i];\n      }\n      return width;\n    },\n\n    /**\n     * Wraps a line of text using the width of the Textbox and a context.\n     * @param {Array} line The grapheme array that represent the line\n     * @param {Number} lineIndex\n     * @param {Number} desiredWidth width you want to wrap the line to\n     * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n     * @returns {Array} Array of line(s) into which the given text is wrapped\n     * to.\n     */\n    _wrapLine: function(_line, lineIndex, desiredWidth, reservedSpace) {\n      var lineWidth = 0,\n          splitByGrapheme = this.splitByGrapheme,\n          graphemeLines = [],\n          line = [],\n          // spaces in different languges?\n          words = splitByGrapheme ? fabric.util.string.graphemeSplit(_line) : _line.split(this._wordJoiners),\n          word = '',\n          offset = 0,\n          infix = splitByGrapheme ? '' : ' ',\n          wordWidth = 0,\n          infixWidth = 0,\n          largestWordWidth = 0,\n          lineJustStarted = true,\n          additionalSpace = splitByGrapheme ? 0 : this._getWidthOfCharSpacing(),\n          reservedSpace = reservedSpace || 0;\n\n      desiredWidth -= reservedSpace;\n      for (var i = 0; i < words.length; i++) {\n        // i would avoid resplitting the graphemes\n        word = fabric.util.string.graphemeSplit(words[i]);\n        wordWidth = this._measureWord(word, lineIndex, offset);\n        offset += word.length;\n\n        lineWidth += infixWidth + wordWidth - additionalSpace;\n\n        if (lineWidth >= desiredWidth && !lineJustStarted) {\n          graphemeLines.push(line);\n          line = [];\n          lineWidth = wordWidth;\n          lineJustStarted = true;\n        }\n        else {\n          lineWidth += additionalSpace;\n        }\n\n        if (!lineJustStarted) {\n          line.push(infix);\n        }\n        line = line.concat(word);\n\n        infixWidth = this._measureWord([infix], lineIndex, offset);\n        offset++;\n        lineJustStarted = false;\n        // keep track of largest word\n        if (wordWidth > largestWordWidth) {\n          largestWordWidth = wordWidth;\n        }\n      }\n\n      i && graphemeLines.push(line);\n\n      if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n        this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n      }\n\n      return graphemeLines;\n    },\n\n    /**\n     * Detect if the text line is ended with an hard break\n     * text and itext do not have wrapping, return false\n     * @param {Number} lineIndex text to split\n     * @return {Boolean}\n     */\n    isEndOfWrapping: function(lineIndex) {\n      if (!this._styleMap[lineIndex + 1]) {\n        // is last line, return true;\n        return true;\n      }\n      if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n        // this is last line before a line break, return true;\n        return true;\n      }\n      return false;\n    },\n\n    /**\n    * Gets lines of text to render in the Textbox. This function calculates\n    * text wrapping on the fly every time it is called.\n    * @param {String} text text to split\n    * @returns {Array} Array of lines in the Textbox.\n    * @override\n    */\n    _splitTextIntoLines: function(text) {\n      var newText = fabric.Text.prototype._splitTextIntoLines.call(this, text),\n          graphemeLines = this._wrapText(newText.lines, this.width),\n          lines = new Array(graphemeLines.length);\n\n      for (var i = 0; i < graphemeLines.length; i++) {\n        lines[i] = graphemeLines[i].join('');\n      }\n      newText.lines = lines;\n      newText.graphemeLines = graphemeLines;\n      return newText;\n    },\n\n    getMinWidth: function() {\n      return Math.max(this.minWidth, this.dynamicMinWidth);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @method toObject\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return this.callSuper('toObject', ['minWidth', 'splitByGrapheme'].concat(propertiesToInclude));\n    }\n  });\n\n  /**\n   * Returns fabric.Textbox instance from an object representation\n   * @static\n   * @memberOf fabric.Textbox\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Textbox instance is created\n   */\n  fabric.Textbox.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Textbox', object, callback, 'text');\n  };\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  /**\n   * Override _setObjectScale and add Textbox specific resizing behavior. Resizing\n   * a Textbox doesn't scale text, it only changes width and makes text wrap automatically.\n   */\n  var setObjectScaleOverridden = fabric.Canvas.prototype._setObjectScale;\n\n  fabric.Canvas.prototype._setObjectScale = function(localMouse, transform,\n    lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {\n\n    var t = transform.target, scaled,\n        scaleX = localMouse.x * t.scaleX / _dim.x,\n        scaleY = localMouse.y * t.scaleY / _dim.y;\n    if (by === 'x' && t instanceof fabric.Textbox) {\n      var tw = t._getTransformedDimensions().x;\n      var w = t.width * (localMouse.x / tw);\n      transform.newScaleX = scaleX;\n      transform.newScaleY = scaleY;\n      if (w >= t.getMinWidth()) {\n        scaled = w !== t.width;\n        t.set('width', w);\n        return scaled;\n      }\n    }\n    else {\n      return setObjectScaleOverridden.call(fabric.Canvas.prototype, localMouse, transform,\n        lockScalingX, lockScalingY, by, lockScalingFlip, _dim);\n    }\n  };\n\n  fabric.util.object.extend(fabric.Textbox.prototype, /** @lends fabric.IText.prototype */ {\n    /**\n     * @private\n     */\n    _removeExtraneousStyles: function() {\n      for (var prop in this._styleMap) {\n        if (!this._textLines[prop]) {\n          delete this.styles[this._styleMap[prop].line];\n        }\n      }\n    },\n\n  });\n})();\n\n"]}