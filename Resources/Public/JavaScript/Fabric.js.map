{"version":3,"sources":["fabric.js"],"names":["fabric","version","resizeCanvasIfNeeded","pipelineState","targetCanvas","width","height","dWidth","destinationWidth","dHeight","destinationHeight","copyGLTo2DDrawImage","gl","glCanvas","canvas","ctx","getContext","translate","scale","sourceY","drawImage","copyGLTo2DPutImageData","numBytes","u8","Uint8Array","this","imageBuffer","u8Clamped","Uint8ClampedArray","readPixels","RGBA","UNSIGNED_BYTE","imgData","ImageData","putImageData","exports","define","amd","document","window","require","jsdom","decodeURIComponent","features","FetchExternalResources","jsdomImplForWrapper","implForWrapper","nodeCanvas","Canvas","defaultView","DOMParser","isTouchSupported","navigator","maxTouchPoints","isLikelyNode","Buffer","SHARED_ATTRIBUTES","DPI","reNum","fontPaths","iMatrix","canvasModule","perfLimitSizeTotal","maxCacheSideLimit","minCacheSideLimit","charWidthsCache","textureSize","enableGLFiltering","devicePixelRatio","webkitDevicePixelRatio","mozDevicePixelRatio","browserShadowBlurConstant","arcToSegmentsCache","boundsOfCurveCache","cachesBoundsOfCurve","initFilterBackend","isWebglSupported","console","log","maxTextureSize","WebglFilterBackend","tileSize","Canvas2dFilterBackend","_removeEventListener","eventName","handler","__eventListeners","eventListener","indexOf","util","array","fill","observe","arguments","length","prop","on","push","stopObserving","call","_typeof","fire","options","listenersForEvent","i","len","filter","value","Observable","off","trigger","Collection","_objects","add","apply","_onObjectAdded","renderOnAddRemove","requestRenderAll","insertAt","object","index","nonSplicing","objects","splice","remove","somethingRemoved","_onObjectRemoved","forEachObject","callback","context","getObjects","type","concat","o","item","isEmpty","size","contains","complexity","reduce","memo","current","CommonMethods","_setOptions","set","_initGradient","filler","property","colorStops","Gradient","_initPattern","source","Pattern","_initClipping","clipTo","functionBody","getFunctionBody","Function","_setObject","obj","_set","key","get","toggle","global","sqrt","Math","atan2","pow","abs","PiBy180","PI","PiBy2","cos","angle","sin","sign","removeFromArray","idx","getRandomInt","min","max","floor","random","degreesToRadians","degrees","radiansToDegrees","radians","rotatePoint","point","origin","subtractEquals","v","rotateVector","Point","x","y","addEquals","vector","transformPoint","p","t","ignoreOffset","makeBoundingBoxFromPoints","points","xPoints","minX","yPoints","minY","left","top","invertTransform","a","r","toFixed","number","fractionDigits","parseFloat","Number","parseUnit","fontSize","unit","exec","Text","DEFAULT_SVG_FONT_SIZE","falseFunction","getKlass","namespace","string","camelize","charAt","toUpperCase","slice","resolveNamespace","getSvgAttributes","attributes","parts","split","loadImage","url","crossOrigin","img","createImage","onLoadCallback","onload","onerror","src","substring","loadImageInDom","div","createElement","style","position","appendChild","querySelector","parentNode","removeChild","enlivenObjects","reviver","onLoaded","numLoadedObjects","numTotalObjects","enlivenedObjects","forEach","fromObject","error","enlivenPatterns","patterns","numLoadedPatterns","numPatterns","enlivenedPatterns","pattern","groupSVGElements","elements","path","centerPoint","Group","sourcePath","populateWithProperties","destination","properties","Object","prototype","toString","drawDashedLine","x2","y2","da","dx","dy","rot","dc","di","draw","save","moveTo","rotate","restore","createCanvasElement","copyCanvasElement","newCanvas","toDataURL","canvasEl","format","quality","clipContext","receiver","beginPath","clip","multiplyTransformMatrices","b","is2x2","qrDecompose","denom","scaleX","scaleY","skewX","skewY","translateX","translateY","customTransformMatrix","skewMatrixX","tan","scaleMatrix","resetObjectTransform","target","flipX","flipY","saveObjectTransform","fn","String","match","isTransparent","tolerance","_isTransparent","imageData","getImageData","l","data","parsePreserveAspectRatioAttribute","attribute","align","meetOrSlice","aspectRatioAttrs","pop","alignX","alignY","clearFabricFontCache","fontFamily","toLowerCase","limitDimsByArea","ar","maximumArea","roughWidth","perfLimitSizeY","capValue","findScaleToFit","findScaleToCover","_join","Array","join","arcToSegments","toX","toY","rx","ry","large","sweep","rotateX","argsString","th","sinTh","cosTh","fromX","fromY","px","py","rx2","ry2","py2","px2","pl","root","s","cx","cy","cx1","cy1","mTheta","calcVectorAngle","dtheta","th2","th3","mT","costh2","sinth2","costh3","sinth3","segments","ceil","result","mDelta","ux","uy","vx","vy","ta","tb","getBoundsOfCurve","x0","y0","x1","y1","x3","y3","c","t1","t2","b2ac","sqrtb2ac","tvalues","bounds","mt","j","jlen","drawArc","fx","fy","coords","segs","segsNorm","bezierCurveTo","getBoundsOfArc","tx","ty","bound","find","byProperty","condition","k","invoke","method","args","value1","value2","extend","deep","Element","hasOwnProperty","clone","getWholeChar","str","code","charCodeAt","isNaN","next","prev","replace","character","capitalize","firstLetterOnly","escapeXml","graphemeSplit","textstring","chr","graphemes","emptyFunction","IS_DONTENUM_BUGGY","addMethods","klass","parent","superclass","constructor","returnValue","valueOf","Subclass","callSuper","methodName","parentMethod","_this","superClassMethod","createClass","initialize","shift","subclasses","areHostMethods","methodNames","test","getElement","setElement","uid","getUniqueId","element","__uniqueID","createListener","wrappedHandler","e","event","addListener","removeListener","shouldUseAddListenerRemoveListener","documentElement","shouldUseAttachEventDetachEvent","listeners","handlers","addEventListener","removeEventListener","listener","attachEvent","detachEvent","existingHandler","handlersForEvent","pointerX","clientX","pointerY","clientY","_getPointer","pageProp","clientProp","pointer","eventTouchProp","getPointer","srcElement","scroll","getScrollLeftTop","parseEl","supportsOpacity","opacity","supportsFilters","reOpacity","setOpacity","es","currentStyle","hasLayout","zoom","setStyle","styles","elementStyle","cssText","styleFloat","_slice","sliceCanConvertNodelists","getElementStyle","selectProp","toArray","arrayLike","childNodes","err","makeElement","tagName","el","className","htmlFor","setAttribute","docElement","body","scrollLeft","scrollTop","host","nodeType","arr","getComputedStyle","attr","undefined","makeElementUnselectable","onselectstart","unselectable","makeElementSelectable","getScript","headEl","getElementsByTagName","scriptEl","loading","onreadystatechange","readyState","getById","id","getElementById","addClass","wrapElement","wrapper","replaceChild","getElementOffset","docElem","scrollLeftTop","doc","ownerDocument","box","offset","offsetAttributes","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","parseInt","getBoundingClientRect","clientLeft","clientTop","getNodeCanvas","impl","_canvas","_image","cleanUpJsdomNode","_currentSrc","_attributes","_classList","emptyFn","request","param","onComplete","xhr","XMLHttpRequest","parameters","open","setRequestHeader","send","warn","noop","_requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","_cancelAnimFrame","cancelAnimationFrame","clearTimeout","requestAnimFrame","animate","timestamp","time","start","Date","duration","finish","onChange","abort","easing","d","startValue","endValue","byValue","onStart","tick","ticktime","currentTime","timePerc","valuePerc","cancelAnimFrame","animateColor","fromColor","toColor","startColor","Color","getSource","endColor","begin","end","pos","color","posValue","colorEasing","normalize","asin","elastic","opts","easeInBounce","easeOutBounce","ease","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInOutBounce","attributesMap","display","visibility","transform","fill-opacity","fill-rule","font-family","font-size","font-style","font-weight","letter-spacing","paint-order","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-decoration","text-anchor","clip-path","clip-rule","colorAttributes","stroke","normalizeValue","parentAttributes","parsed","isArray","map","transformMatrix","parseTransformAttribute","visible","fillIndex","strokeIndex","getSvgRegex","RegExp","_getMultipleNodes","nodeNames","nodeName","nodeList","nodeArray","elementMatchesRule","selectors","firstMatching","parentMatching","selectorMatches","selector","doesSomeParentMatch","matcher","classNames","getAttribute","elementById","node","nodelist","svgValidTagNamesRegEx","svgViewBoxElementsRegEx","svgInvalidAncestorsRegEx","svgValidParentsRegEx","cssRules","gradientDefs","clipPaths","skewMatrix","matrix","commaWsp","reTransformList","reTransform","attributeValue","matrices","multiplierX","multiplierY","m","operation","combinedMatrix","reViewBoxAttrValue","applyViewboxTransform","viewBoxWidth","viewBoxHeight","viewBoxAttr","widthAttr","heightAttr","preserveAspectRatio","missingViewBox","missingDimAttr","toBeParsed","parsedDim","translateMatrix","widthDiff","heightDiff","viewboxTransform","firstChild","recursivelyParseGradientsXlink","gradient","xlinkAttr","referencedGradient","substr","hasAttribute","children","referenceClone","cloneNode","removeAttribute","parseSVGDocument","parsingOptions","attrs","xlink","el2","currentTrans","oldLength","el3","nodeValue","parseUseDirectives","svgUid","__uid","descendants","selectNodes","hasAncestorWithNodeName","getGradientDefs","getCSSRules","parseElements","instances","reFontDeclaration","parseFontDeclaration","oStyle","fontStyle","fontWeight","lineHeight","elList","parseAttributes","parentFontSize","ownAttributes","rule","getGlobalStylesForElement","parseStyleAttribute","normalizedAttr","normalizedValue","normalizedStyle","font","mergedAttrs","setAlpha","getAlpha","toRgba","_setStrokeFillOpacity","ElementsParser","parse","chunk","pair","trim","parseStyleObject","parsePointsAttribute","parsedPoints","allRules","styleContents","textContent","text","ruleObj","propertyValuePairs","_rule","loadSVGFromURL","xml","responseXML","ActiveXObject","responseText","async","loadXML","results","_options","allElements","loadSVGFromString","parser","parseFromString","regexUrl","proto","numElements","createObjects","createObject","findTag","fromElement","createCallback","checkIfDone","resolveGradient","Image","_originalElement","_removeTransformMatrix","resolveClipPath","extractPropertyDefinition","storage","lastIndex","gradientDef","createClipPathCallback","container","_newObj","fillRule","clipRule","objTransformInv","gTransform","clipPath","calcTransformMatrix","setPositionByOrigin","that","scalarAdd","scalar","scalarAddEquals","subtract","scalarSubtract","scalarSubtractEquals","multiply","multiplyEquals","divide","divideEquals","eq","lt","lte","gt","gte","lerp","distanceFrom","midPointFrom","setXY","setX","setY","setFromPoint","swap","Intersection","status","appendPoint","appendPoints","intersectLineLine","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","intersectLinePolygon","inter","intersectPolygonPolygon","points1","points2","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","_tryParsingColor","setSource","hue2rgb","q","colorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","_rgbToHsl","g","h","round","_source","toRgb","toHsl","hsl","toHsla","toHex","toHexa","alpha","toGrayscale","average","currentAlpha","toBlackWhite","threshold","overlayWith","otherColor","otherSource","reRGBa","reHSLa","reHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","fromRgb","fromSource","fromRgba","fromHsl","fromHsla","fromHex","isShortNotation","isRGBa","oColor","getColorStop","colorAlpha","keyValuePairs","_convertPercentUnitsToValues","gradientUnits","propValue","addFactor","multFactor","ellipseMatrix","scaleFactor","offsetX","offsetY","gradientTransform","addColorStop","toObject","propertiesToInclude","toSVG","markup","commonAttributes","needsSwap","sort","pathOffset","reverse","minRadius","percentageShift","colorStop","toLive","createLinearGradient","createRadialGradient","instance","colorStopEls","forObject","repeat","patternTransform","setOptions","NUM_FRACTION_DIGITS","patternSource","patternWidth","patternHeight","patternOffsetX","patternOffsetY","patternImgSrc","complete","naturalWidth","naturalHeight","createPattern","Shadow","blur","affectStroke","includeDefaultValues","_parseShadow","shadow","shadowStr","offsetsAndBlur","reOffsetsAndBlur","fBoxX","fBoxY","StaticCanvas","CANVAS_INIT_ERROR","Error","renderAndResetBound","renderAndReset","bind","requestRenderAllBound","_initStatic","backgroundColor","backgroundImage","overlayColor","overlayImage","stateful","controlsAboveOverlay","allowTouchScrolling","imageSmoothingEnabled","viewportTransform","backgroundVpt","overlayVpt","onBeforeScaleRotate","enableRetinaScaling","vptCoords","skipOffscreen","cb","_createLowerCanvas","_initOptions","_setImageSmoothing","interactive","_initRetinaScaling","setOverlayImage","setBackgroundImage","setBackgroundColor","setOverlayColor","calcOffset","_isRetinaScaling","getRetinaScaling","lowerCanvasEl","contextContainer","_offset","image","__setBgOverlayImage","__setBgOverlayColor","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","_createCanvasElement","_applyCanvasStyle","getWidth","getHeight","setWidth","setDimensions","setHeight","dimensions","cssValue","cssOnly","_setBackstoreDimension","hasLostContext","backstoreOnly","_setCssDimension","_isCurrentlyDrawing","freeDrawingBrush","_setBrushStyles","upperCanvasEl","cacheCanvasEl","wrapperEl","getZoom","setViewportTransform","vpt","activeObject","_activeObject","group","setCoords","calcViewportBoundaries","zoomToPoint","before","after","setZoom","absolutePan","relativePan","setupState","clearContext","clearRect","clear","_hasITextHandlers","_mouseUpITextHandler","_iTextInstances","renderAll","canvasToDrawOn","renderCanvas","isRendering","iVpt","tl","br","tr","bl","cancelRequestedRender","_renderBackground","_renderObjects","drawControls","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","globalCompositeOperation","zoomX","zoomY","_cacheCanvas","cacheTranslationX","cacheTranslationY","render","_renderBackgroundOrOverlay","fillStyle","fillRect","getCenter","centerObjectH","_centerObject","getCenterPoint","centerObjectV","centerObject","center","viewportCenterObject","vpCenter","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","toDatalessJSON","toDatalessObject","_toObjectMethod","_toObjects","__serializeBgOverlay","excludeFromExport","_toObject","originalValue","bgImage","overlay","background","svgViewportTransformation","_setSVGPreamble","_setSVGHeader","clipPathId","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","createSVGClipPathMarkup","toClipPathSVG","row","rowIndex","charIndex","fontList","_setSVGObject","finalWidth","finalHeight","sendToBack","objs","activeSelection","unshift","bringToFront","sendBackwards","intersecting","newIdx","objsMoved","_findNewLowerIndex","intersectsWithObject","isContainedWithinObject","bringForward","_findNewUpperIndex","dispose","DataURLExporter","EMPTY_JSON","supports","setLineDash","toJSON","createPNGStream","createJPEGStream","BaseBrush","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeDashArray","setShadow","contextTop","strokeStyle","lineWidth","lineCap","miterLimit","lineJoin","_saveAndTransform","_setShadow","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","_resetShadow","PencilBrush","_points","_drawSegment","p1","p2","midPoint","quadraticCurveTo","onMouseDown","_prepareForDrawing","_captureDrawingPath","_render","onMouseMove","needsFullRender","oldEnd","onMouseUp","_finalizeAndAddPath","_reset","_addPoint","pointerPoint","lineTo","convertPointsToSVGPath","multSignX","multSignY","manyPoints","createPath","pathData","Path","strokeWidth","translateToGivenOrigin","originX","originY","closePath","CircleBrush","drawDot","addPoint","arc","radius","originalRenderOnAddRemove","circles","circle","Circle","circleRadius","circleColor","SprayBrush","density","dotWidth","dotWidthVariance","randomOpacity","optimizeOverlapping","sprayChunks","addSprayChunk","sprayChunkPoints","rects","ilen","sprayChunk","rect","Rect","_getOptimizedRects","uniqueRects","uniqueRectsArray","globalAlpha","PatternBrush","getPatternSrc","patternCanvas","patternCtx","getPatternSrcFunction","getPattern","topLeft","_getLeftTopCoords","supportLineDash","_initInteractive","_createCacheCanvas","uniScaleTransform","uniScaleKey","centeredScaling","centeredRotation","centeredKey","altActionKey","selection","selectionKey","altSelectionKey","selectionColor","selectionDashArray","selectionBorderColor","selectionLineWidth","selectionFullyContained","hoverCursor","moveCursor","defaultCursor","freeDrawingCursor","rotationCursor","notAllowedCursor","containerClass","perPixelTargetFind","targetFindTolerance","skipTargetFind","isDrawingMode","preserveObjectStacking","snapAngle","snapThreshold","stopContextMenu","fireRightClick","fireMiddleClick","_currentTransform","_groupSelector","_initWrapperElement","_createUpperCanvas","_initEventListeners","_chooseObjectsToRender","objsToRender","activeGroupObjects","activeObjects","getActiveObjects","contextTopDirty","renderTopLayer","_drawSelection","renderTop","_resetCurrentTransform","original","_shouldCenterTransform","mouseXSign","mouseYSign","containsPoint","xy","_normalizePointer","_findTargetCorner","invertedM","vptPointer","restorePointerVpt","isTargetTransparent","normalizedPointer","targetRelativeX","targetRelativeY","_cacheContext","contextCache","originalColor","selectionBackgroundColor","_renderControls","hasBorders","transparentCorners","_isSelectionKeyPressed","_shouldClearSelection","evented","selectable","centerTransform","action","altKey","_getOriginFromCorner","corner","_getActionFromCorner","alreadySelected","_setupCurrentTransform","ex","ey","lastX","lastY","theta","shiftKey","_beforeTransform","_translateObject","newLeft","newTop","moveX","moveY","_changeSkewTransformOrigin","mouseMove","by","origins","0","skew","originA","originB","flipSign","skewSign","_skewObject","skewed","lockSkewingX","lockSkewingY","actualMouseByOrigin","constraintPosition","actualMouseByCenter","toLocalPoint","lastMouseByCenter","dim","_getTransformedDimensions","translateToOriginPoint","_setObjectSkew","localMouse","_dim","newValue","newDim","dimNoSkew","otherBy","_otherBy","_by","newDimMouse","atan","_scaleObject","lockScalingX","lockScalingY","lockScalingFlip","scaled","_setLocalMouse","_setObjectScale","forbidScalingX","forbidScalingY","changeX","changeY","_scaleObjectEqually","newScaleX","newScaleY","_flipObject","dist","lastDist","signX","signY","padding","_rotateObject","lockRotation","lastAngle","curAngle","hasRotated","rightAngleLocked","leftAngleLocked","setCursor","cursor","groupSelector","aleft","atop","_setLineDash","strokeRect","findTarget","skipGroup","activeTarget","activeTargetSubs","aObjects","targets","_searchPossibleTargets","_checkTarget","globalPointer","isEditing","subTarget","objToCheck","pointerToUse","subTargetCheck","ignoreZoom","_absolutePointer","_pointer","cssScale","boundsWidth","boundsHeight","bottom","right","lowerCanvasClass","_copyCanvasStyle","class","touch-action","fromEl","toEl","getSelectionContext","getSelectionElement","getActiveObject","active","_discardActiveObject","_hoveredTarget","_fireSelectionEvents","oldObjects","somethingChanged","added","removed","opt","oldObject","selected","deselected","updated","setActiveObject","currentActives","_setActiveObject","onSelect","onDeselect","discardActiveObject","removeListeners","originalProperties","_realizeGroupTransformOnObject","_unwindGroupTransformOnObject","originalValues","realizeTransform","clearContextTop","_setCursorFromEvent","cursorOffset","mr","mb","ml","addEventOptions","passive","checkClick","which","button","cursorMap","_bindEvents","addOrRemove","functor","eventjsFunctor","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onDoubleClick","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","eventjs","_onGesture","_onDrag","_onOrientationChange","_onShake","_onLongPress","_onMouseUp","eventsBound","_simpleEventHandler","self","__onTransformGesture","__onDrag","__onMouseWheel","hiddenTextarea","focus","__onOrientationChange","__onShake","__onLongPress","preventDefault","_fireEnterLeaveEvents","stopPropagation","_cacheTransformEventData","_handleEvent","_resetTransformEventData","__onMouseDown","__onMouseUp","__onMouseMove","_shouldRender","shouldRender","isClick","_target","_onMouseUpInDrawingMode","_finalizeCurrentTransform","actionPerformed","_maybeGroupObjects","isMoving","__corner","eventType","subTargets","absolutePointer","_scaling","hasStateChanged","_addEventOptions","_fire","_onMouseDownInDrawingMode","_onMouseMoveInDrawingMode","_previousPointer","shouldGroup","_shouldGroup","_handleGrouping","saveState","touches","_transformObject","_fireOverOutEvents","fireSynteticInOutEvents","targetName","canvasEvtOut","evtOut","canvasEvtIn","evtIn","config","inOpt","outOpt","inFires","oldTarget","targetChanged","previousTarget","nextTarget","reset","_beforeScaleTransform","_performTransformAction","_onScale","_isUniscalePossible","currentAction","getCornerCursor","actionIsDisabled","_getRotatedCornerCursor","hasRotatingPoint","n","_updateActiveSelection","_createActiveSelection","currentActiveObjects","removeWithUpdate","addWithUpdate","_createGroup","groupObjects","exitEditing","ActiveSelection","_groupSelectedObjects","aGroup","_collectObjects","currentObject","selectionX1Y1","selectionX2Y2","allowIntersect","intersectsWithRect","isContainedWithinRect","multiplier","toCanvasElement","cropping","scaledWidth","scaledHeight","originalWidth","originalHeight","newZoom","vp","originalInteractive","originalContext","newVp","loadFromDatalessJSON","json","loadFromJSON","serialized","JSON","_enlivenObjects","_setBgOverlay","loaded","cbIfLoaded","__setBgOverlay","enlivedObject","_toDataURL","_toDataURLWithMultiplier","toDataURLWithMultiplier","stringify","cloneWithoutData","backgroundImageOpacity","backgroundImageStretch","supportsLineDash","objectCaching","cornerSize","borderColor","borderDashArray","cornerColor","cornerStrokeColor","cornerStyle","cornerDashArray","strokeDashOffset","borderOpacityWhenMoving","borderScaleFactor","minScaleLimit","hasControls","rotatingPointOffset","lockMovementX","lockMovementY","lockUniScaling","statefullCache","noScaleCache","dirty","paintFirst","stateProperties","cacheProperties","inverted","absolutePositioned","_cacheProperties","_updateCacheCanvas","_limitCacheSize","dims","limitedDims","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","_getNonTransformedDimensions","drawingWidth","drawingHeight","minCacheSize","dimensionsChanged","cacheWidth","cacheHeight","zoomChanged","shouldRedraw","additionalWidth","additionalHeight","shouldResizeCanvas","canvasWidth","canvasHeight","sizeGrowing","setTransform","calcOwnMatrix","_removeDefaultValues","getObjectScaling","scaling","retina","getObjectOpacity","shouldConstrainValue","isChanged","groupNeedsUpdate","_constrainScale","isOnACache","setOnGroup","getViewportTransform","isNotVisible","isOnScreen","_setupCompositeOperation","drawSelectionBackground","_setOpacity","drawCacheOnCanvas","_removeCacheCanvas","drawObject","propertySet","isCacheDirty","needsItsOwnCache","ownCaching","willDrawShadow","drawClipPathOnCache","originalFill","originalStroke","_setClippingProperties","_setStrokeStyles","_setFillStyles","_drawClipPath","skipCanvas","_removeShadow","decl","lineDashOffset","dashArray","alternative","styleOverride","drawBorders","forActiveSelection","drawBordersInGroup","multX","multY","_applyPatternGradientTransform","_renderPaintInOrder","_renderStroke","_renderFill","_renderDashedStroke","_findCenterFromElement","_assignTransformMatrixProps","preserveAspectRatioOptions","cropX","cropY","offsetLeft","offsetTop","objectForm","_fromObject","cloneAsImage","utils","origParams","originalShadow","withoutTransform","withoutShadow","boundingRect","getBoundingRect","shadowOffset","originalCanvas","isType","setGradient","setPatternFill","setColor","shouldCenterOrigin","_setOriginToCenter","_resetOrigin","centerH","viewportCenterH","centerV","viewportCenterV","viewportCenter","getLocalPointer","pClicked","objectLeftTop","createAccessors","extraParam","enlivedProps","originXOffset","originYOffset","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","leftTop","getPointByOrigin","adjustPosition","to","offsetFrom","offsetTo","hypotFull","getScaledWidth","xFull","yFull","_originalOriginX","_originalOriginY","originPoint","multiplyMatrices","oCoords","aCoords","ownMatrixCache","matrixCache","getCoords","absolute","calculate","calcCoords","pointTL","pointBR","other","lines","_getImageLines","_findCrossPoints","_containsCenterOfCanvas","isPartiallyOnScreen","topline","rightline","bottomline","leftline","iLine","xcount","lineKey","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","rotateMatrix","_calcRotateMatrix","_calcTranslateMatrix","startMatrix","finalMatrix","w","cosP","sinP","cosPSinP","cosPMinusSinP","mtr","skipAbsolute","_setCornerCoords","transformMatrixKey","sep","prefix","cache","dimensionMatrix","_calcDimensionsTransformMatrix","flipping","bbox","dimX","dimY","_calculateCurrentDimensions","getSvgColorString","getSvgStyles","skipShadow","getSvgFilter","getSvgSpanStyles","useWhiteSpace","term","textDecoration","getSvgTextDecoration","deltaY","overline","underline","linethrough","getSvgCommons","getSvgTransform","full","additionalTransform","getSvgTransformMatrix","_setSVGBg","textBgRects","_getFillAttributes","_createBaseSVGMarkup","_toSVG","_createBaseClipPathSVGMarkup","objectMarkup","commonPieces","clipPathMarkup","noStyle","withShadow","styleInfo","shadowInfo","absoluteClipPath","addPaintOrder","originalSet","saveProps","props","tmpObj","dashedPropertySet","keys","_isEqual","origValue","currentValue","firstPass","_controlsVisibility","isControlVisible","newTheta","cornerHypotenuse","cosHalfOffset","sinHalfOffset","wh","drawRotatingPoint","rotateHeight","scaleOffset","_drawControl","control","controlName","_getControlsVisibility","setControlVisible","setControlsVisibility","FX_DURATION","fxCenterObjectH","callbacks","empty","fxCenterObjectV","fxRemove","skipCallbacks","propsToAnimate","_animate","propPair","from","valueProgress","timeProgress","coordProps","makeEdgeToOriginGetter","propertyNames","originValues","axis1","axis2","dimension","nearest","farthest","Line","_setWidthHeight","_getLeftToOriginX","_getTopToOriginY","calcLinePoints","origStrokeStyle","xMult","yMult","ATTRIBUTE_NAMES","parsedAttributes","pi","startAngle","endAngle","setRadius","svgString","startX","startY","endX","endY","largeFlag","getRadiusX","getRadiusY","Triangle","widthBy2","heightBy2","piBy2","Ellipse","getRx","getRy","_initRxRy","isRounded","Polyline","calcDim","_calcDimensions","diffX","diffY","commonRender","Polygon","_toString","commandLengths","repeatedCommands","M","fromArray","_parsePath","_setPositionDimensions","_parseDimensions","_renderPathCommands","tempX","tempY","previous","subpathStartX","subpathStartY","controlX","controlY","_getOffsetTransform","digits","currentPath","coordsStr","coordsParsed","re","command","commandLength","repeatedCommand","klen","aX","aY","pathUrl","useSetOnGroup","isAlreadyGrouped","_updateObjectsACoords","_calcBounds","_updateObjectsCoords","_updateObjectCoords","objectLeft","objectTop","_restoreObjectsState","_includeDefaultValues","objsToObject","originalDefaults","_obj","ownCache","_restoreObjectState","destroy","toActiveSelection","ungroupOnCanvas","setObjectsCoords","onlyWidthHeight","iLen","jLen","_getBounds","minXY","maxXY","enlivedClipPath","toGroup","newGroup","childrenOverride","_lastScaleX","_lastScaleY","_filterScalingX","_filterScalingY","minimumScaleTrigger","cacheKey","filters","_initElement","_element","removeTexture","_initConfig","applyFilters","resizeFilter","applyResizeFilters","backend","filterBackend","evictCachesForKey","setCrossOrigin","getOriginalSize","_stroke","filterObj","getSrc","hasCrop","strokeSvg","imageMarkup","getSvgSrc","origFill","filtered","setSrc","minimumScale","elementToFilter","_filteredEl","sourceWidth","sourceHeight","isNeutralState","imgElement","_needsResize","elementToDraw","sW","sH","sX","sY","_resetWidthHeight","CSS_CANVAS","_initFilters","pAR","rWidth","rHeight","pWidth","pHeight","_object","resizeFilters","fromURL","imgOptions","_getAngleValueForStraighten","straighten","fxStraighten","straightenObject","fxStraightenObject","setupGLContext","captureGPUInfo","fragmentSource","fragmentShader","isSupported","getParameter","MAX_TEXTURE_SIZE","precisions","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","webGlPrecision","resources","createWebGLCanvas","aPosition","Float32Array","chooseFastestCopyGLTo2DMethod","canUseImageData","canMeasurePerf","performance","canUseArrayBuffer","ArrayBuffer","canUseUint8Clamped","startTime","drawImageTime","putImageDataTime","testContext","now","copyGLTo2D","glOptions","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","applyTo","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","textureImageSource","texture","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","uniqueId","gpuInfo","renderer","vendor","ext","getExtension","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","sourceElement","originalEl","originalImageData","BaseFilter","vertexSource","createProgram","vertexShader","VERTEX_SHADER","getShaderInfoLog","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributeLocations","getAttributeLocations","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","getAttribLocation","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","_swapTextures","temp","main","mainParameter","_class","applyToWebGL","applyTo2d","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","getMainParameter","setMainParameter","createHelpLayer","helpLayer","mainP","ColorMatrix","colorsOnly","uColorMatrix","uConstants","constants","uniformMatrix4fv","uniform4fv","Brightness","brightness","uBrightness","Convolute","opaque","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","dstOff","scx","scy","srcOff","wt","weights","side","halfSide","sw","sh","output","createImageData","dst","alphaFac","uMatrix","uOpaque","uHalfSize","uSize","uniform1fv","Grayscale","lightness","luminosity","mode","uMode","uniform1i","Invert","invert","uInvert","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","_iLen","_jLen","uBlocksize","RemoveColor","distance","useAlpha","lowC","highC","uLow","uHigh","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","BlendColor","screen","diff","lighten","darken","exclusion","tint","buildSource","tg","alpha1","uColor","BlendImage","mask","TEXTURE1","calculateMatrix","canvas1","blendData","blendImage","uTransformMatrix","uImage","uniformMatrix3fv","Resize","resizeType","lanczosLobes","uDelta","uTaps","uniform2fv","horizontal","taps","filterWindow","getFilterWindow","generateShader","tempScale","getTaps","lobeFunction","lanczosCreate","offsets","fragmentSourceTOP","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","newData","oW","oH","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","tmpCanvas","doneW","doneH","stepW","stepH","dX","dY","srcData","destImg","destData","lanczos","ratioX","ratioY","rcpRatioX","rcpRatioY","range2X","range2Y","cacheLanc","icenter","process","u","weight","fX","fY","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","centerY","yy","centerX","w0","Contrast","contrast","contrastF","uContrast","Saturation","saturation","adjust","uSaturation","Blur","aspectRatio","simpleBlur","canvas2","blurLayer1","blurLayer2","percent","ctx1","ctx2","newImageData","delta","chooseRightDelta","blurScale","Gamma","gamma","rInv","gInv","bInv","rVals","gVals","bVals","uGamma","uniform3fv","Composed","subFilters","some","HueRotation","rotation","rad","aThirdSqtSin","OneMinusCos","_dimensionAffectingProps","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","textAlign","superscript","baseline","subscript","textBackgroundColor","_fontSizeFraction","_fontSizeMult","charSpacing","_measuringContext","_styleProperties","__charBounds","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","__skipDimension","initDimensions","getMeasuringContext","_splitText","newLines","_splitTextIntoLines","textLines","_textLines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","enlargeSpaces","calcTextHeight","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","line","charBound","spaces","isEndOfWrapping","getLineWidth","kernedWidth","lineIndex","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderText","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","styleHas","heightOfLine","lineLeftOffset","lastColor","charBox","currentColor","lineTopOffset","leftOffset","_getLeftOffset","topOffset","_getTopOffset","boxStart","boxWidth","getHeightOfLine","_getLineLeftOffset","getValueOfPropertyAt","getFontCache","cacheProp","_applyCharStyles","styleDeclaration","_measureChar","_char","previousChar","prevCharStyle","coupleWidth","previousWidth","fontCache","couple","stylesAreEqual","fontMultiplier","measureText","getHeightOfChar","char","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","grapheme","prevGrapheme","graphemeInfo","lineBounds","_getGraphemeBox","numOfSpaces","skipLeft","getCompleteStyleDeclaration","prevStyle","info","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isEmptyStyles","actualStyle","nextStyle","timeToRender","isJustify","charsToRender","shortCut","_renderChar","_hasStyleChanged","_getStyleDeclaration","fullDecl","shouldFill","shouldStroke","fillText","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","get2DCursorLocation","setSelectionStyles","thisStyle","_hasStyleChangedForSvg","__lineWidths","_shouldClearDimensionCache","shouldClear","_forceClearCache","_size","_dy","lastDecoration","currentDecoration","currentFill","lastFill","styleObject","family","fontIsGeneric","genericFonts","newLine","newText","additionalProperties","needsDims","_key","parsedAnchor","textAnchor","originalStrokeWidth","textHeightScaleFactor","scaledDiff","textHeight","offX","p3","cleanStyle","letterCount","stylePropertyValue","stylesCount","allStyleObjectPropertiesMatch","graphemeCount","removeStyle","lineNum","charNum","_extendStyles","_getLineStyle","_setLineStyle","_setStyleDeclaration","selectionStart","skipWrapping","getSelectionStyles","startIndex","endIndex","selectionEnd","getStyleAtPosition","lineStyle","_deleteStyleDeclaration","_deleteLineStyle","parseDecoration","IText","editable","editingBorderColor","cursorColor","cursorDelay","cursorDuration","caching","_reSpace","_currentCursorOpacity","_selectionDirection","_abortCursorAnimation","__widthOfSpace","inCompositionMode","initBehavior","setSelectionStart","_updateAndFire","setSelectionEnd","_fireSelectionChanged","_updateTextarea","initDelayedCursor","cursorOffsetCache","renderCursorOrSelection","skipRestore","_clearTextArea","boundaries","_getCursorBoundaries","renderCursor","renderSelection","_getCursorBoundariesOffsets","cursorPosition","cursorLocation","charHeight","__isMousedown","startLine","endLine","startChar","endChar","realLineHeight","lineOffset","boxEnd","compositionColor","getCurrentCharFontSize","cp","_getCurrentCharIndex","getCurrentCharColor","initAddedHandler","initRemovedHandler","initCursorSelectionHandlers","initDoubleClickSimulation","mouseMoveHandler","_initCanvasHandlers","_removeCanvasHandlers","_tick","_currentTickState","_animateCursor","targetOpacity","completeMethod","tickState","isAborted","_onTickComplete","_cursorTimeout1","_currentTickCompleteState","restart","delay","abortCursorAnimation","_cursorTimeout2","selectAll","getSelectedText","findWordBoundaryLeft","startFrom","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","direction","reNonWord","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditing","exitEditingOnOthers","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","initMouseMoveHandler","getSelectionStartFromPointer","currentStart","currentEnd","__selectionStartOnMouseDown","restartCursorIfNeeded","fromStringToGraphemeSelection","smallerTextStart","graphemeStart","smallerTextEnd","fromGraphemeToStringSelection","newSelection","updateTextareaPosition","updateFromTextArea","_calcTextareaPosition","desiredPostion","compositionStart","upperCanvas","upperCanvasWidth","upperCanvasHeight","clientWidth","clientHeight","_savedProps","_restoreEditingProps","isTextChanged","_removeExtraneousStyles","removeStyleFromTo","styleObj","cursorStart","cursorEnd","lineStart","charStart","lineEnd","charEnd","shiftLineStyles","numericChar","clonedStyles","numericLine","insertNewlineStyleObject","qty","copiedStyle","currentCharStyle","newLineStyles","somethingAdded","numIndex","insertCharStyleObject","quantity","currentLineStyles","currentLineStylesCloned","numericIndex","newStyle","insertNewStyleBlock","insertedText","cursorLoc","addedLines","linesLenght","setSelectionStartEndWithShift","setSelectionInBoundaries","__lastClickTime","__lastLastClickTime","__lastPointer","__newClickTime","newPointer","isTripleClick","_stopEvent","__lastIsEditing","__lastSelected","initMousedownHandler","initMouseupHandler","initClicks","_mouseDownHandler","setCursorByClick","_mouseDownHandlerBefore","mouseUpHandler","currentActive","mouseOffset","prevWidth","_getNewSelectionStartFromOffset","distanceBtwLastCharAndCursor","distanceBtwNextCharAndCursor","onKeyDown","onKeyUp","onInput","copy","paste","onCompositionStart","onCompositionUpdate","onCompositionEnd","_clickHandlerInitialized","onClick","keysMap","9","27","33","34","35","36","37","38","39","40","ctrlKeysMapUp","67","88","ctrlKeysMapDown","65","keyCode","ctrlKey","metaKey","stopImmediatePropagation","_copyDone","fromPaste","removedText","nextText","charCount","nextCharCount","charDiff","textareaSelection","backDelete","copiedText","copiedTextStyle","compositionEnd","_getClipboardData","clipboardData","_getWidthBeforeCursor","widthBeforeCursor","getDownCursorOffset","isRight","selectionProp","_getSelectionForOffset","indexOnOtherLine","_getIndexOnLine","getUpCursorOffset","textBeforeCursor","charWidth","foundMatch","widthOfCharsOnLine","indexOnLine","leftEdge","rightEdge","offsetFromLeftEdge","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","_moveLeft","_moveRight","moveCursorLeftWithoutShift","change","moveCursorLeftWithShift","moveCursorRight","actionName","moveCursorRightWithShift","moveCursorRightWithoutShift","changed","removeChars","insertChars","multipleSpacesRegex","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","internalMarkup","_wrapSVGTextAndBg","lineTop","textSpans","textTopOffset","textLeftOffset","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","styleDecl","shouldUseWhitespace","styleProps","fillStyles","dySpan","_pushTextBgRect","fillColor","_getSVGLineTopOffset","lastHeight","Textbox","minWidth","dynamicMinWidth","__cachedLines","_wordJoiners","splitByGrapheme","_styleMap","_generateStyleMap","textInfo","realLineCount","realLineCharCount","isWrapping","nextOffset","shouldLimit","mapNextLine","_wrapText","desiredWidth","wrapped","_wrapLine","_measureWord","word","charOffset","_line","reservedSpace","words","infix","wordWidth","infixWidth","largestWordWidth","lineJustStarted","additionalSpace","getMinWidth","setObjectScaleOverridden","tw"],"mappings":"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","file":"Fabric.js","sourcesContent":["/* build: `node build.js modules=ALL exclude=gestures,accessors requirejs minifier=uglifyjs` */\n/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */\n\nvar fabric = fabric || { version: '2.6.0' };\nif (typeof exports !== 'undefined') {\n  exports.fabric = fabric;\n}\n/* _AMD_START_ */\nelse if (typeof define === 'function' && define.amd) {\n  define([], function() { return fabric; });\n}\n/* _AMD_END_ */\nif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n  fabric.document = document;\n  fabric.window = window;\n}\nelse {\n  // assume we're running under node.js when document/window are not present\n  fabric.document = require('jsdom')\n    .jsdom(\n      decodeURIComponent('%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E'),\n      { features: {\n        FetchExternalResources: ['img']\n      }\n      });\n  fabric.jsdomImplForWrapper = require('jsdom/lib/jsdom/living/generated/utils').implForWrapper;\n  fabric.nodeCanvas = require('jsdom/lib/jsdom/utils').Canvas;\n  fabric.window = fabric.document.defaultView;\n  DOMParser = require('xmldom').DOMParser;\n}\n\n/**\n * True when in environment that supports touch events\n * @type boolean\n */\nfabric.isTouchSupported = 'ontouchstart' in fabric.window || 'ontouchstart' in fabric.document ||\n  (fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0);\n\n/**\n * True when in environment that's probably Node.js\n * @type boolean\n */\nfabric.isLikelyNode = typeof Buffer !== 'undefined' &&\n                      typeof window === 'undefined';\n\n/* _FROM_SVG_START_ */\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nfabric.SHARED_ATTRIBUTES = [\n  'display',\n  'transform',\n  'fill', 'fill-opacity', 'fill-rule',\n  'opacity',\n  'stroke', 'stroke-dasharray', 'stroke-linecap', 'stroke-dashoffset',\n  'stroke-linejoin', 'stroke-miterlimit',\n  'stroke-opacity', 'stroke-width',\n  'id', 'paint-order',\n  'instantiated_by_use', 'clip-path'\n];\n/* _FROM_SVG_END_ */\n\n/**\n * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n */\nfabric.DPI = 96;\nfabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:e[-+]?\\\\d+)?)';\nfabric.fontPaths = { };\nfabric.iMatrix = [1, 0, 0, 1, 0, 0];\nfabric.canvasModule = 'canvas';\n\n/**\n * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n * @since 1.7.14\n * @type Number\n * @default\n */\nfabric.perfLimitSizeTotal = 2097152;\n\n/**\n * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n * @since 1.7.14\n * @type Number\n * @default\n */\nfabric.maxCacheSideLimit = 4096;\n\n/**\n * Lowest pixel limit for cache canvases, set at 256PX\n * @since 1.7.14\n * @type Number\n * @default\n */\nfabric.minCacheSideLimit = 256;\n\n/**\n * Cache Object for widths of chars in text rendering.\n */\nfabric.charWidthsCache = { };\n\n/**\n * if webgl is enabled and available, textureSize will determine the size\n * of the canvas backend\n * @since 2.0.0\n * @type Number\n * @default\n */\nfabric.textureSize = 2048;\n\n/**\n * Enable webgl for filtering picture is available\n * A filtering backend will be initialized, this will both take memory and\n * time since a default 2048x2048 canvas will be created for the gl context\n * @since 2.0.0\n * @type Boolean\n * @default\n */\nfabric.enableGLFiltering = true;\n\n/**\n * Device Pixel Ratio\n * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n */\nfabric.devicePixelRatio = fabric.window.devicePixelRatio ||\n                          fabric.window.webkitDevicePixelRatio ||\n                          fabric.window.mozDevicePixelRatio ||\n                          1;\n/**\n * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n * which is unitless and not rendered equally across browsers.\n *\n * Values that work quite well (as of October 2017) are:\n * - Chrome: 1.5\n * - Edge: 1.75\n * - Firefox: 0.9\n * - Safari: 0.95\n *\n * @since 2.0.0\n * @type Number\n * @default 1\n */\nfabric.browserShadowBlurConstant = 1;\n\n/**\n * This object contains the result of arc to beizer conversion for faster retrieving if the same arc needs to be converted again.\n * It was an internal variable, is accessible since version 2.3.4\n */\nfabric.arcToSegmentsCache = { };\n\n/**\n * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n * you do not get any speed benefit and you get a big object in memory.\n * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n * can eventually clear it.\n * It was an internal variable, is accessible since version 2.3.4\n */\nfabric.boundsOfCurveCache = { };\n\n/**\n * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n * @default true\n */\nfabric.cachesBoundsOfCurve = true;\n\nfabric.initFilterBackend = function() {\n  if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {\n    console.log('max texture size: ' + fabric.maxTextureSize);\n    return (new fabric.WebglFilterBackend({ tileSize: fabric.textureSize }));\n  }\n  else if (fabric.Canvas2dFilterBackend) {\n    return (new fabric.Canvas2dFilterBackend());\n  }\n};\n\n\nif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)\n  window.fabric = fabric;\n}\n\n\n(function() {\n\n  /**\n   * @private\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  function _removeEventListener(eventName, handler) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n    var eventListener = this.__eventListeners[eventName];\n    if (handler) {\n      eventListener[eventListener.indexOf(handler)] = false;\n    }\n    else {\n      fabric.util.array.fill(eventListener, false);\n    }\n  }\n\n  /**\n   * Observes specified event\n   * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)\n   * @memberOf fabric.Observable\n   * @alias on\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function observe(eventName, handler) {\n    if (!this.__eventListeners) {\n      this.__eventListeners = { };\n    }\n    // one object with key/value pairs was passed\n    if (arguments.length === 1) {\n      for (var prop in eventName) {\n        this.on(prop, eventName[prop]);\n      }\n    }\n    else {\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n    }\n    return this;\n  }\n\n  /**\n   * Stops event observing for a particular event handler. Calling this method\n   * without arguments removes all handlers for all events\n   * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)\n   * @memberOf fabric.Observable\n   * @alias off\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function to be deleted from EventListeners\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function stopObserving(eventName, handler) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (arguments.length === 0) {\n      for (eventName in this.__eventListeners) {\n        _removeEventListener.call(this, eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (arguments.length === 1 && typeof arguments[0] === 'object') {\n      for (var prop in eventName) {\n        _removeEventListener.call(this, prop, eventName[prop]);\n      }\n    }\n    else {\n      _removeEventListener.call(this, eventName, handler);\n    }\n    return this;\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)\n   * @memberOf fabric.Observable\n   * @alias trigger\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function fire(eventName, options) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    var listenersForEvent = this.__eventListeners[eventName];\n    if (!listenersForEvent) {\n      return;\n    }\n\n    for (var i = 0, len = listenersForEvent.length; i < len; i++) {\n      listenersForEvent[i] && listenersForEvent[i].call(this, options || { });\n    }\n    this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {\n      return value !== false;\n    });\n    return this;\n  }\n\n  /**\n   * @namespace fabric.Observable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n   * @see {@link http://fabricjs.com/events|Events demo}\n   */\n  fabric.Observable = {\n    observe: observe,\n    stopObserving: stopObserving,\n    fire: fire,\n\n    on: observe,\n    off: stopObserving,\n    trigger: fire\n  };\n})();\n\n\n/**\n * @namespace fabric.Collection\n */\nfabric.Collection = {\n\n  _objects: [],\n\n  /**\n   * Adds objects to collection, Canvas or Group, then renders canvas\n   * (if `renderOnAddRemove` is not `false`).\n   * in case of Group no changes to bounding box are made.\n   * Objects should be instances of (or inherit from) fabric.Object\n   * Use of this function is highly discouraged for groups.\n   * you can add a bunch of objects with the add method but then you NEED\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   * @chainable\n   */\n  add: function () {\n    this._objects.push.apply(this._objects, arguments);\n    if (this._onObjectAdded) {\n      for (var i = 0, length = arguments.length; i < length; i++) {\n        this._onObjectAdded(arguments[i]);\n      }\n    }\n    this.renderOnAddRemove && this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * An object should be an instance of (or inherit from) fabric.Object\n   * Use of this function is highly discouraged for groups.\n   * you can add a bunch of objects with the insertAt method but then you NEED\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\n   * @param {Object} object Object to insert\n   * @param {Number} index Index to insert object at\n   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\n   * @return {Self} thisArg\n   * @chainable\n   */\n  insertAt: function (object, index, nonSplicing) {\n    var objects = this._objects;\n    if (nonSplicing) {\n      objects[index] = object;\n    }\n    else {\n      objects.splice(index, 0, object);\n    }\n    this._onObjectAdded && this._onObjectAdded(object);\n    this.renderOnAddRemove && this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   * @chainable\n   */\n  remove: function() {\n    var objects = this._objects,\n        index, somethingRemoved = false;\n\n    for (var i = 0, length = arguments.length; i < length; i++) {\n      index = objects.indexOf(arguments[i]);\n\n      // only call onObjectRemoved if an object was actually removed\n      if (index !== -1) {\n        somethingRemoved = true;\n        objects.splice(index, 1);\n        this._onObjectRemoved && this._onObjectRemoved(arguments[i]);\n      }\n    }\n\n    this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Executes given function for each object in this group\n   * @param {Function} callback\n   *                   Callback invoked with current object as first argument,\n   *                   index - as second and an array of all objects - as third.\n   *                   Callback is invoked in a context of Global Object (e.g. `window`)\n   *                   when no `context` argument is given\n   *\n   * @param {Object} context Context (aka thisObject)\n   * @return {Self} thisArg\n   * @chainable\n   */\n  forEachObject: function(callback, context) {\n    var objects = this.getObjects();\n    for (var i = 0, len = objects.length; i < len; i++) {\n      callback.call(context, objects[i], i, objects);\n    }\n    return this;\n  },\n\n  /**\n   * Returns an array of children objects of this instance\n   * Type parameter introduced in 1.3.10\n   * since 2.3.5 this method return always a COPY of the array;\n   * @param {String} [type] When specified, only objects of this type are returned\n   * @return {Array}\n   */\n  getObjects: function(type) {\n    if (typeof type === 'undefined') {\n      return this._objects.concat();\n    }\n    return this._objects.filter(function(o) {\n      return o.type === type;\n    });\n  },\n\n  /**\n   * Returns object at specified index\n   * @param {Number} index\n   * @return {Self} thisArg\n   */\n  item: function (index) {\n    return this._objects[index];\n  },\n\n  /**\n   * Returns true if collection contains no objects\n   * @return {Boolean} true if collection is empty\n   */\n  isEmpty: function () {\n    return this._objects.length === 0;\n  },\n\n  /**\n   * Returns a size of a collection (i.e: length of an array containing its objects)\n   * @return {Number} Collection size\n   */\n  size: function() {\n    return this._objects.length;\n  },\n\n  /**\n   * Returns true if collection contains an object\n   * @param {Object} object Object to check against\n   * @return {Boolean} `true` if collection contains an object\n   */\n  contains: function(object) {\n    return this._objects.indexOf(object) > -1;\n  },\n\n  /**\n   * Returns number representation of a collection complexity\n   * @return {Number} complexity\n   */\n  complexity: function () {\n    return this._objects.reduce(function (memo, current) {\n      memo += current.complexity ? current.complexity() : 0;\n      return memo;\n    }, 0);\n  }\n};\n\n\n/**\n * @namespace fabric.CommonMethods\n */\nfabric.CommonMethods = {\n\n  /**\n   * Sets object's properties from options\n   * @param {Object} [options] Options object\n   */\n  _setOptions: function(options) {\n    for (var prop in options) {\n      this.set(prop, options[prop]);\n    }\n  },\n\n  /**\n   * @private\n   * @param {Object} [filler] Options object\n   * @param {String} [property] property to set the Gradient to\n   */\n  _initGradient: function(filler, property) {\n    if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {\n      this.set(property, new fabric.Gradient(filler));\n    }\n  },\n\n  /**\n   * @private\n   * @param {Object} [filler] Options object\n   * @param {String} [property] property to set the Pattern to\n   * @param {Function} [callback] callback to invoke after pattern load\n   */\n  _initPattern: function(filler, property, callback) {\n    if (filler && filler.source && !(filler instanceof fabric.Pattern)) {\n      this.set(property, new fabric.Pattern(filler, callback));\n    }\n    else {\n      callback && callback();\n    }\n  },\n\n  /**\n   * @private\n   * @param {Object} [options] Options object\n   */\n  _initClipping: function(options) {\n    if (!options.clipTo || typeof options.clipTo !== 'string') {\n      return;\n    }\n\n    var functionBody = fabric.util.getFunctionBody(options.clipTo);\n    if (typeof functionBody !== 'undefined') {\n      this.clipTo = new Function('ctx', functionBody);\n    }\n  },\n\n  /**\n   * @private\n   */\n  _setObject: function(obj) {\n    for (var prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  },\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  set: function(key, value) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    }\n    else {\n      if (typeof value === 'function' && key !== 'clipTo') {\n        this._set(key, value(this.get(key)));\n      }\n      else {\n        this._set(key, value);\n      }\n    }\n    return this;\n  },\n\n  _set: function(key, value) {\n    this[key] = value;\n  },\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  toggle: function(property) {\n    var value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  },\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get: function(property) {\n    return this[property];\n  }\n};\n\n\n(function(global) {\n\n  var sqrt = Math.sqrt,\n      atan2 = Math.atan2,\n      pow = Math.pow,\n      abs = Math.abs,\n      PiBy180 = Math.PI / 180,\n      PiBy2 = Math.PI / 2;\n\n  /**\n   * @namespace fabric.util\n   */\n  fabric.util = {\n\n    /**\n     * Calculate the cos of an angle, avoiding returning floats for known results\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} angle the angle in radians or in degree\n     * @return {Number}\n     */\n    cos: function(angle) {\n      if (angle === 0) { return 1; }\n      if (angle < 0) {\n        // cos(a) = cos(-a)\n        angle = -angle;\n      }\n      var angleSlice = angle / PiBy2;\n      switch (angleSlice) {\n        case 1: case 3: return 0;\n        case 2: return -1;\n      }\n      return Math.cos(angle);\n    },\n\n    /**\n     * Calculate the sin of an angle, avoiding returning floats for known results\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} angle the angle in radians or in degree\n     * @return {Number}\n     */\n    sin: function(angle) {\n      if (angle === 0) { return 0; }\n      var angleSlice = angle / PiBy2, sign = 1;\n      if (angle < 0) {\n        // sin(-a) = -sin(a)\n        sign = -1;\n      }\n      switch (angleSlice) {\n        case 1: return sign;\n        case 2: return 0;\n        case 3: return -sign;\n      }\n      return Math.sin(angle);\n    },\n\n    /**\n     * Removes value from an array.\n     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} array\n     * @param {*} value\n     * @return {Array} original array\n     */\n    removeFromArray: function(array, value) {\n      var idx = array.indexOf(value);\n      if (idx !== -1) {\n        array.splice(idx, 1);\n      }\n      return array;\n    },\n\n    /**\n     * Returns random number between 2 specified ones.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} min lower limit\n     * @param {Number} max upper limit\n     * @return {Number} random value (between min and max)\n     */\n    getRandomInt: function(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\n     * Transforms degrees to radians.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} degrees value in degrees\n     * @return {Number} value in radians\n     */\n    degreesToRadians: function(degrees) {\n      return degrees * PiBy180;\n    },\n\n    /**\n     * Transforms radians to degrees.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} radians value in radians\n     * @return {Number} value in degrees\n     */\n    radiansToDegrees: function(radians) {\n      return radians / PiBy180;\n    },\n\n    /**\n     * Rotates `point` around `origin` with `radians`\n     * @static\n     * @memberOf fabric.util\n     * @param {fabric.Point} point The point to rotate\n     * @param {fabric.Point} origin The origin of the rotation\n     * @param {Number} radians The radians of the angle for the rotation\n     * @return {fabric.Point} The new rotated point\n     */\n    rotatePoint: function(point, origin, radians) {\n      point.subtractEquals(origin);\n      var v = fabric.util.rotateVector(point, radians);\n      return new fabric.Point(v.x, v.y).addEquals(origin);\n    },\n\n    /**\n     * Rotates `vector` with `radians`\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} vector The vector to rotate (x and y)\n     * @param {Number} radians The radians of the angle for the rotation\n     * @return {Object} The new rotated point\n     */\n    rotateVector: function(vector, radians) {\n      var sin = fabric.util.sin(radians),\n          cos = fabric.util.cos(radians),\n          rx = vector.x * cos - vector.y * sin,\n          ry = vector.x * sin + vector.y * cos;\n      return {\n        x: rx,\n        y: ry\n      };\n    },\n\n    /**\n     * Apply transform t to point p\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Point} p The point to transform\n     * @param  {Array} t The transform\n     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n     * @return {fabric.Point} The transformed point\n     */\n    transformPoint: function(p, t, ignoreOffset) {\n      if (ignoreOffset) {\n        return new fabric.Point(\n          t[0] * p.x + t[2] * p.y,\n          t[1] * p.x + t[3] * p.y\n        );\n      }\n      return new fabric.Point(\n        t[0] * p.x + t[2] * p.y + t[4],\n        t[1] * p.x + t[3] * p.y + t[5]\n      );\n    },\n\n    /**\n     * Returns coordinates of points's bounding rectangle (left, top, width, height)\n     * @param {Array} points 4 points array\n     * @return {Object} Object with left, top, width, height properties\n     */\n    makeBoundingBoxFromPoints: function(points) {\n      var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],\n          minX = fabric.util.array.min(xPoints),\n          maxX = fabric.util.array.max(xPoints),\n          width = maxX - minX,\n          yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],\n          minY = fabric.util.array.min(yPoints),\n          maxY = fabric.util.array.max(yPoints),\n          height = maxY - minY;\n\n      return {\n        left: minX,\n        top: minY,\n        width: width,\n        height: height\n      };\n    },\n\n    /**\n     * Invert transformation t\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} t The transform\n     * @return {Array} The inverted transform\n     */\n    invertTransform: function(t) {\n      var a = 1 / (t[0] * t[3] - t[1] * t[2]),\n          r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\n          o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\n      r[4] = -o.x;\n      r[5] = -o.y;\n      return r;\n    },\n\n    /**\n     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number|String} number number to operate on\n     * @param {Number} fractionDigits number of fraction digits to \"leave\"\n     * @return {Number}\n     */\n    toFixed: function(number, fractionDigits) {\n      return parseFloat(Number(number).toFixed(fractionDigits));\n    },\n\n    /**\n     * Converts from attribute value to pixel value if applicable.\n     * Returns converted pixels or original value not converted.\n     * @param {Number|String} value number to operate on\n     * @param {Number} fontSize\n     * @return {Number|String}\n     */\n    parseUnit: function(value, fontSize) {\n      var unit = /\\D{0,2}$/.exec(value),\n          number = parseFloat(value);\n      if (!fontSize) {\n        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n      }\n      switch (unit[0]) {\n        case 'mm':\n          return number * fabric.DPI / 25.4;\n\n        case 'cm':\n          return number * fabric.DPI / 2.54;\n\n        case 'in':\n          return number * fabric.DPI;\n\n        case 'pt':\n          return number * fabric.DPI / 72; // or * 4 / 3\n\n        case 'pc':\n          return number * fabric.DPI / 72 * 12; // or * 16\n\n        case 'em':\n          return number * fontSize;\n\n        default:\n          return number;\n      }\n    },\n\n    /**\n     * Function which always returns `false`.\n     * @static\n     * @memberOf fabric.util\n     * @return {Boolean}\n     */\n    falseFunction: function() {\n      return false;\n    },\n\n    /**\n     * Returns klass \"Class\" object of given namespace\n     * @memberOf fabric.util\n     * @param {String} type Type of object (eg. 'circle')\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @return {Object} klass \"Class\"\n     */\n    getKlass: function(type, namespace) {\n      // capitalize first letter only\n      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\n      return fabric.util.resolveNamespace(namespace)[type];\n    },\n\n    /**\n     * Returns array of attributes for given svg that fabric parses\n     * @memberOf fabric.util\n     * @param {String} type Type of svg element (eg. 'circle')\n     * @return {Array} string names of supported attributes\n     */\n    getSvgAttributes: function(type) {\n      var attributes = [\n        'instantiated_by_use',\n        'style',\n        'id',\n        'class'\n      ];\n      switch (type) {\n        case 'linearGradient':\n          attributes = attributes.concat(['x1', 'y1', 'x2', 'y2', 'gradientUnits', 'gradientTransform']);\n          break;\n        case 'radialGradient':\n          attributes = attributes.concat(['gradientUnits', 'gradientTransform', 'cx', 'cy', 'r', 'fx', 'fy', 'fr']);\n          break;\n        case 'stop':\n          attributes = attributes.concat(['offset', 'stop-color', 'stop-opacity']);\n          break;\n      }\n      return attributes;\n    },\n\n    /**\n     * Returns object of given namespace\n     * @memberOf fabric.util\n     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\n     * @return {Object} Object for given namespace (default fabric)\n     */\n    resolveNamespace: function(namespace) {\n      if (!namespace) {\n        return fabric;\n      }\n\n      var parts = namespace.split('.'),\n          len = parts.length, i,\n          obj = global || fabric.window;\n\n      for (i = 0; i < len; ++i) {\n        obj = obj[parts[i]];\n      }\n\n      return obj;\n    },\n\n    /**\n     * Loads image element from given url and passes it to a callback\n     * @memberOf fabric.util\n     * @param {String} url URL representing an image\n     * @param {Function} callback Callback; invoked with loaded image\n     * @param {*} [context] Context to invoke callback in\n     * @param {Object} [crossOrigin] crossOrigin value to set image element to\n     */\n    loadImage: function(url, callback, context, crossOrigin) {\n      if (!url) {\n        callback && callback.call(context, url);\n        return;\n      }\n\n      var img = fabric.util.createImage();\n\n      /** @ignore */\n      var onLoadCallback = function () {\n        callback && callback.call(context, img);\n        img = img.onload = img.onerror = null;\n      };\n\n      img.onload = onLoadCallback;\n      /** @ignore */\n      img.onerror = function() {\n        fabric.log('Error loading ' + img.src);\n        callback && callback.call(context, null, true);\n        img = img.onload = img.onerror = null;\n      };\n\n      // data-urls appear to be buggy with crossOrigin\n      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\n      // see https://code.google.com/p/chromium/issues/detail?id=315152\n      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\n      if (url.indexOf('data') !== 0 && crossOrigin) {\n        img.crossOrigin = crossOrigin;\n      }\n\n      // IE10 / IE11-Fix: SVG contents from data: URI\n      // will only be available if the IMG is present\n      // in the DOM (and visible)\n      if (url.substring(0,14) === 'data:image/svg') {\n        img.onload = null;\n        fabric.util.loadImageInDom(img, onLoadCallback);\n      }\n\n      img.src = url;\n    },\n\n    /**\n     * Attaches SVG image with data: URL to the dom\n     * @memberOf fabric.util\n     * @param {Object} img Image object with data:image/svg src\n     * @param {Function} callback Callback; invoked with loaded image\n     * @return {Object} DOM element (div containing the SVG image)\n     */\n    loadImageInDom: function(img, onLoadCallback) {\n      var div = fabric.document.createElement('div');\n      div.style.width = div.style.height = '1px';\n      div.style.left = div.style.top = '-100%';\n      div.style.position = 'absolute';\n      div.appendChild(img);\n      fabric.document.querySelector('body').appendChild(div);\n      /**\n       * Wrap in function to:\n       *   1. Call existing callback\n       *   2. Cleanup DOM\n       */\n      img.onload = function () {\n        onLoadCallback();\n        div.parentNode.removeChild(div);\n        div = null;\n      };\n    },\n\n    /**\n     * Creates corresponding fabric instances from their object representations\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} objects Objects to enliven\n     * @param {Function} callback Callback to invoke when all objects are created\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @param {Function} reviver Method for further parsing of object elements,\n     * called after each fabric object created.\n     */\n    enlivenObjects: function(objects, callback, namespace, reviver) {\n      objects = objects || [];\n\n      function onLoaded() {\n        if (++numLoadedObjects === numTotalObjects) {\n          callback && callback(enlivenedObjects);\n        }\n      }\n\n      var enlivenedObjects = [],\n          numLoadedObjects = 0,\n          numTotalObjects = objects.length;\n\n      if (!numTotalObjects) {\n        callback && callback(enlivenedObjects);\n        return;\n      }\n\n      objects.forEach(function (o, index) {\n        // if sparse array\n        if (!o || !o.type) {\n          onLoaded();\n          return;\n        }\n        var klass = fabric.util.getKlass(o.type, namespace);\n        klass.fromObject(o, function (obj, error) {\n          error || (enlivenedObjects[index] = obj);\n          reviver && reviver(o, obj, error);\n          onLoaded();\n        });\n      });\n    },\n\n    /**\n     * Create and wait for loading of patterns\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} patterns Objects to enliven\n     * @param {Function} callback Callback to invoke when all objects are created\n     * called after each fabric object created.\n     */\n    enlivenPatterns: function(patterns, callback) {\n      patterns = patterns || [];\n\n      function onLoaded() {\n        if (++numLoadedPatterns === numPatterns) {\n          callback && callback(enlivenedPatterns);\n        }\n      }\n\n      var enlivenedPatterns = [],\n          numLoadedPatterns = 0,\n          numPatterns = patterns.length;\n\n      if (!numPatterns) {\n        callback && callback(enlivenedPatterns);\n        return;\n      }\n\n      patterns.forEach(function (p, index) {\n        if (p && p.source) {\n          new fabric.Pattern(p, function(pattern) {\n            enlivenedPatterns[index] = pattern;\n            onLoaded();\n          });\n        }\n        else {\n          enlivenedPatterns[index] = p;\n          onLoaded();\n        }\n      });\n    },\n\n    /**\n     * Groups SVG elements (usually those retrieved from SVG document)\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} elements SVG elements to group\n     * @param {Object} [options] Options object\n     * @param {String} path Value to set sourcePath to\n     * @return {fabric.Object|fabric.Group}\n     */\n    groupSVGElements: function(elements, options, path) {\n      var object;\n      if (elements && elements.length === 1) {\n        return elements[0];\n      }\n      if (options) {\n        if (options.width && options.height) {\n          options.centerPoint = {\n            x: options.width / 2,\n            y: options.height / 2\n          };\n        }\n        else {\n          delete options.width;\n          delete options.height;\n        }\n      }\n      object = new fabric.Group(elements, options);\n      if (typeof path !== 'undefined') {\n        object.sourcePath = path;\n      }\n      return object;\n    },\n\n    /**\n     * Populates an object with properties of another object\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} source Source object\n     * @param {Object} destination Destination object\n     * @return {Array} properties Properties names to include\n     */\n    populateWithProperties: function(source, destination, properties) {\n      if (properties && Object.prototype.toString.call(properties) === '[object Array]') {\n        for (var i = 0, len = properties.length; i < len; i++) {\n          if (properties[i] in source) {\n            destination[properties[i]] = source[properties[i]];\n          }\n        }\n      }\n    },\n\n    /**\n     * Draws a dashed line between two points\n     *\n     * This method is used to draw dashed line around selection area.\n     * See <a href=\"http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\">dotted stroke in canvas</a>\n     *\n     * @param {CanvasRenderingContext2D} ctx context\n     * @param {Number} x  start x coordinate\n     * @param {Number} y start y coordinate\n     * @param {Number} x2 end x coordinate\n     * @param {Number} y2 end y coordinate\n     * @param {Array} da dash array pattern\n     */\n    drawDashedLine: function(ctx, x, y, x2, y2, da) {\n      var dx = x2 - x,\n          dy = y2 - y,\n          len = sqrt(dx * dx + dy * dy),\n          rot = atan2(dy, dx),\n          dc = da.length,\n          di = 0,\n          draw = true;\n\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.moveTo(0, 0);\n      ctx.rotate(rot);\n\n      x = 0;\n      while (len > x) {\n        x += da[di++ % dc];\n        if (x > len) {\n          x = len;\n        }\n        ctx[draw ? 'lineTo' : 'moveTo'](x, 0);\n        draw = !draw;\n      }\n\n      ctx.restore();\n    },\n\n    /**\n     * Creates canvas element\n     * @static\n     * @memberOf fabric.util\n     * @return {CanvasElement} initialized canvas element\n     */\n    createCanvasElement: function() {\n      return fabric.document.createElement('canvas');\n    },\n\n    /**\n     * Creates a canvas element that is a copy of another and is also painted\n     * @param {CanvasElement} canvas to copy size and content of\n     * @static\n     * @memberOf fabric.util\n     * @return {CanvasElement} initialized canvas element\n     */\n    copyCanvasElement: function(canvas) {\n      var newCanvas = fabric.util.createCanvasElement();\n      newCanvas.width = canvas.width;\n      newCanvas.height = canvas.height;\n      newCanvas.getContext('2d').drawImage(canvas, 0, 0);\n      return newCanvas;\n    },\n\n    /**\n     * since 2.6.0 moved from canvas instance to utility.\n     * @param {CanvasElement} canvasEl to copy size and content of\n     * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n     * @param {Number} quality <= 1 and > 0\n     * @static\n     * @memberOf fabric.util\n     * @return {String} data url\n     */\n    toDataURL: function(canvasEl, format, quality) {\n      return canvasEl.toDataURL('image/' + format, quality);\n    },\n\n    /**\n     * Creates image element (works on client and node)\n     * @static\n     * @memberOf fabric.util\n     * @return {HTMLImageElement} HTML image element\n     */\n    createImage: function() {\n      return fabric.document.createElement('img');\n    },\n\n    /**\n     * @static\n     * @memberOf fabric.util\n     * @deprecated since 2.0.0\n     * @param {fabric.Object} receiver Object implementing `clipTo` method\n     * @param {CanvasRenderingContext2D} ctx Context to clip\n     */\n    clipContext: function(receiver, ctx) {\n      ctx.save();\n      ctx.beginPath();\n      receiver.clipTo(ctx);\n      ctx.clip();\n    },\n\n    /**\n     * Multiply matrix A by matrix B to nest transformations\n     * @static\n     * @memberOf fabric.util\n     * @param  {Array} a First transformMatrix\n     * @param  {Array} b Second transformMatrix\n     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n     * @return {Array} The product of the two transform matrices\n     */\n    multiplyTransformMatrices: function(a, b, is2x2) {\n      // Matrix multiply a * b\n      return [\n        a[0] * b[0] + a[2] * b[1],\n        a[1] * b[0] + a[3] * b[1],\n        a[0] * b[2] + a[2] * b[3],\n        a[1] * b[2] + a[3] * b[3],\n        is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n        is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]\n      ];\n    },\n\n    /**\n     * Decomposes standard 2x2 matrix into transform componentes\n     * @static\n     * @memberOf fabric.util\n     * @param  {Array} a transformMatrix\n     * @return {Object} Components of transform\n     */\n    qrDecompose: function(a) {\n      var angle = atan2(a[1], a[0]),\n          denom = pow(a[0], 2) + pow(a[1], 2),\n          scaleX = sqrt(denom),\n          scaleY = (a[0] * a[3] - a[2] * a [1]) / scaleX,\n          skewX = atan2(a[0] * a[2] + a[1] * a [3], denom);\n      return {\n        angle: angle  / PiBy180,\n        scaleX: scaleX,\n        scaleY: scaleY,\n        skewX: skewX / PiBy180,\n        skewY: 0,\n        translateX: a[4],\n        translateY: a[5]\n      };\n    },\n\n    customTransformMatrix: function(scaleX, scaleY, skewX) {\n      var skewMatrixX = [1, 0, abs(Math.tan(skewX * PiBy180)), 1],\n          scaleMatrix = [abs(scaleX), 0, 0, abs(scaleY)];\n      return fabric.util.multiplyTransformMatrices(scaleMatrix, skewMatrixX, true);\n    },\n\n    /**\n     * reset an object transform state to neutral. Top and left are not accounted for\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Object} target object to transform\n     */\n    resetObjectTransform: function (target) {\n      target.scaleX = 1;\n      target.scaleY = 1;\n      target.skewX = 0;\n      target.skewY = 0;\n      target.flipX = false;\n      target.flipY = false;\n      target.rotate(0);\n    },\n\n    /**\n     * Extract Object transform values\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Object} target object to read from\n     * @return {Object} Components of transform\n     */\n    saveObjectTransform: function (target) {\n      return {\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        angle: target.angle,\n        left: target.left,\n        flipX: target.flipX,\n        flipY: target.flipY,\n        top: target.top\n      };\n    },\n\n    /**\n     * Returns string representation of function body\n     * @param {Function} fn Function to get body of\n     * @return {String} Function body\n     */\n    getFunctionBody: function(fn) {\n      return (String(fn).match(/function[^{]*\\{([\\s\\S]*)\\}/) || {})[1];\n    },\n\n    /**\n     * Returns true if context has transparent pixel\n     * at specified location (taking tolerance into account)\n     * @param {CanvasRenderingContext2D} ctx context\n     * @param {Number} x x coordinate\n     * @param {Number} y y coordinate\n     * @param {Number} tolerance Tolerance\n     */\n    isTransparent: function(ctx, x, y, tolerance) {\n\n      // If tolerance is > 0 adjust start coords to take into account.\n      // If moves off Canvas fix to 0\n      if (tolerance > 0) {\n        if (x > tolerance) {\n          x -= tolerance;\n        }\n        else {\n          x = 0;\n        }\n        if (y > tolerance) {\n          y -= tolerance;\n        }\n        else {\n          y = 0;\n        }\n      }\n\n      var _isTransparent = true, i, temp,\n          imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1),\n          l = imageData.data.length;\n\n      // Split image data - for tolerance > 1, pixelDataSize = 4;\n      for (i = 3; i < l; i += 4) {\n        temp = imageData.data[i];\n        _isTransparent = temp <= 0;\n        if (_isTransparent === false) {\n          break; // Stop if colour found\n        }\n      }\n\n      imageData = null;\n\n      return _isTransparent;\n    },\n\n    /**\n     * Parse preserveAspectRatio attribute from element\n     * @param {string} attribute to be parsed\n     * @return {Object} an object containing align and meetOrSlice attribute\n     */\n    parsePreserveAspectRatioAttribute: function(attribute) {\n      var meetOrSlice = 'meet', alignX = 'Mid', alignY = 'Mid',\n          aspectRatioAttrs = attribute.split(' '), align;\n\n      if (aspectRatioAttrs && aspectRatioAttrs.length) {\n        meetOrSlice = aspectRatioAttrs.pop();\n        if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\n          align = meetOrSlice;\n          meetOrSlice = 'meet';\n        }\n        else if (aspectRatioAttrs.length) {\n          align = aspectRatioAttrs.pop();\n        }\n      }\n      //divide align in alignX and alignY\n      alignX = align !== 'none' ? align.slice(1, 4) : 'none';\n      alignY = align !== 'none' ? align.slice(5, 8) : 'none';\n      return {\n        meetOrSlice: meetOrSlice,\n        alignX: alignX,\n        alignY: alignY\n      };\n    },\n\n    /**\n     * Clear char widths cache for the given font family or all the cache if no\n     * fontFamily is specified.\n     * Use it if you know you are loading fonts in a lazy way and you are not waiting\n     * for custom fonts to load properly when adding text objects to the canvas.\n     * If a text object is added when its own font is not loaded yet, you will get wrong\n     * measurement and so wrong bounding boxes.\n     * After the font cache is cleared, either change the textObject text content or call\n     * initDimensions() to trigger a recalculation\n     * @memberOf fabric.util\n     * @param {String} [fontFamily] font family to clear\n     */\n    clearFabricFontCache: function(fontFamily) {\n      fontFamily = (fontFamily || '').toLowerCase();\n      if (!fontFamily) {\n        fabric.charWidthsCache = { };\n      }\n      else if (fabric.charWidthsCache[fontFamily]) {\n        delete fabric.charWidthsCache[fontFamily];\n      }\n    },\n\n    /**\n     * Given current aspect ratio, determines the max width and height that can\n     * respect the total allowed area for the cache.\n     * @memberOf fabric.util\n     * @param {Number} ar aspect ratio\n     * @param {Number} maximumArea Maximum area you want to achieve\n     * @return {Object.x} Limited dimensions by X\n     * @return {Object.y} Limited dimensions by Y\n     */\n    limitDimsByArea: function(ar, maximumArea) {\n      var roughWidth = Math.sqrt(maximumArea * ar),\n          perfLimitSizeY = Math.floor(maximumArea / roughWidth);\n      return { x: Math.floor(roughWidth), y: perfLimitSizeY };\n    },\n\n    capValue: function(min, value, max) {\n      return Math.max(min, Math.min(value, max));\n    },\n\n    findScaleToFit: function(source, destination) {\n      return Math.min(destination.width / source.width, destination.height / source.height);\n    },\n\n    findScaleToCover: function(source, destination) {\n      return Math.max(destination.width / source.width, destination.height / source.height);\n    }\n  };\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  var _join = Array.prototype.join;\n\n  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\n   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n   * http://mozilla.org/MPL/2.0/\n   */\n  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\n    var argsString = _join.call(arguments);\n    if (fabric.arcToSegmentsCache[argsString]) {\n      return fabric.arcToSegmentsCache[argsString];\n    }\n\n    var PI = Math.PI, th = rotateX * PI / 180,\n        sinTh = fabric.util.sin(th),\n        cosTh = fabric.util.cos(th),\n        fromX = 0, fromY = 0;\n\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\n        py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\n        rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\n        pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\n        root = 0;\n\n    if (pl < 0) {\n      var s = Math.sqrt(1 - pl / (rx2 * ry2));\n      rx *= s;\n      ry *= s;\n    }\n    else {\n      root = (large === sweep ? -1.0 : 1.0) *\n              Math.sqrt( pl / (rx2 * py2 + ry2 * px2));\n    }\n\n    var cx = root * rx * py / ry,\n        cy = -root * ry * px / rx,\n        cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\n        cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\n        mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\n        dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\n\n    if (sweep === 0 && dtheta > 0) {\n      dtheta -= 2 * PI;\n    }\n    else if (sweep === 1 && dtheta < 0) {\n      dtheta += 2 * PI;\n    }\n\n    // Convert into cubic bezier segments <= 90deg\n    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\n        result = [], mDelta = dtheta / segments,\n        mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\n        th3 = mTheta + mDelta;\n\n    for (var i = 0; i < segments; i++) {\n      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\n      fromX = result[i][4];\n      fromY = result[i][5];\n      mTheta = th3;\n      th3 += mDelta;\n    }\n    fabric.arcToSegmentsCache[argsString] = result;\n    return result;\n  }\n\n  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\n    var costh2 = fabric.util.cos(th2),\n        sinth2 = fabric.util.sin(th2),\n        costh3 = fabric.util.cos(th3),\n        sinth3 = fabric.util.sin(th3),\n        toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\n        toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\n        cp1X = fromX + mT * ( -cosTh * rx * sinth2 - sinTh * ry * costh2),\n        cp1Y = fromY + mT * ( -sinTh * rx * sinth2 + cosTh * ry * costh2),\n        cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\n        cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\n\n    return [\n      cp1X, cp1Y,\n      cp2X, cp2Y,\n      toX, toY\n    ];\n  }\n\n  /*\n   * Private\n   */\n  function calcVectorAngle(ux, uy, vx, vy) {\n    var ta = Math.atan2(uy, ux),\n        tb = Math.atan2(vy, vx);\n    if (tb >= ta) {\n      return tb - ta;\n    }\n    else {\n      return 2 * Math.PI - (ta - tb);\n    }\n  }\n\n  /**\n   * Draws arc\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Number} fx\n   * @param {Number} fy\n   * @param {Array} coords\n   */\n  fabric.util.drawArc = function(ctx, fx, fy, coords) {\n    var rx = coords[0],\n        ry = coords[1],\n        rot = coords[2],\n        large = coords[3],\n        sweep = coords[4],\n        tx = coords[5],\n        ty = coords[6],\n        segs = [[], [], [], []],\n        segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n    for (var i = 0, len = segsNorm.length; i < len; i++) {\n      segs[i][0] = segsNorm[i][0] + fx;\n      segs[i][1] = segsNorm[i][1] + fy;\n      segs[i][2] = segsNorm[i][2] + fx;\n      segs[i][3] = segsNorm[i][3] + fy;\n      segs[i][4] = segsNorm[i][4] + fx;\n      segs[i][5] = segsNorm[i][5] + fy;\n      ctx.bezierCurveTo.apply(ctx, segs[i]);\n    }\n  };\n\n  /**\n   * Calculate bounding box of a elliptic-arc\n   * @param {Number} fx start point of arc\n   * @param {Number} fy\n   * @param {Number} rx horizontal radius\n   * @param {Number} ry vertical radius\n   * @param {Number} rot angle of horizontal axe\n   * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points\n   * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction\n   * @param {Number} tx end point of arc\n   * @param {Number} ty\n   */\n  fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {\n\n    var fromX = 0, fromY = 0, bound, bounds = [],\n        segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n    for (var i = 0, len = segs.length; i < len; i++) {\n      bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);\n      bounds.push({ x: bound[0].x + fx, y: bound[0].y + fy });\n      bounds.push({ x: bound[1].x + fx, y: bound[1].y + fy });\n      fromX = segs[i][4];\n      fromY = segs[i][5];\n    }\n    return bounds;\n  };\n\n  /**\n   * Calculate bounding box of a beziercurve\n   * @param {Number} x0 starting point\n   * @param {Number} y0\n   * @param {Number} x1 first control point\n   * @param {Number} y1\n   * @param {Number} x2 secondo control point\n   * @param {Number} y2\n   * @param {Number} x3 end of beizer\n   * @param {Number} y3\n   */\n  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\n  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var argsString;\n    if (fabric.cachesBoundsOfCurve) {\n      argsString = _join.call(arguments);\n      if (fabric.boundsOfCurveCache[argsString]) {\n        return fabric.boundsOfCurveCache[argsString];\n      }\n    }\n\n    var sqrt = Math.sqrt,\n        min = Math.min, max = Math.max,\n        abs = Math.abs, tvalues = [],\n        bounds = [[], []],\n        a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n    b = 6 * x0 - 12 * x1 + 6 * x2;\n    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n    c = 3 * x1 - 3 * x0;\n\n    for (var i = 0; i < 2; ++i) {\n      if (i > 0) {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n\n      if (abs(a) < 1e-12) {\n        if (abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      if (b2ac < 0) {\n        continue;\n      }\n      sqrtb2ac = sqrt(b2ac);\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    var x, y, j = tvalues.length, jlen = j, mt;\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n      bounds[0][j] = x;\n\n      y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n      bounds[1][j] = y;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    var result = [\n      {\n        x: min.apply(null, bounds[0]),\n        y: min.apply(null, bounds[1])\n      },\n      {\n        x: max.apply(null, bounds[0]),\n        y: max.apply(null, bounds[1])\n      }\n    ];\n    if (fabric.cachesBoundsOfCurve) {\n      fabric.boundsOfCurveCache[argsString] = result;\n    }\n    return result;\n  }\n\n  fabric.util.getBoundsOfCurve = getBoundsOfCurve;\n\n})();\n\n\n(function() {\n\n  var slice = Array.prototype.slice;\n\n  /**\n   * Invokes method on all items in a given array\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} method Name of a method to invoke\n   * @return {Array}\n   */\n  function invoke(array, method) {\n    var args = slice.call(arguments, 2), result = [];\n    for (var i = 0, len = array.length; i < len; i++) {\n      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\n    }\n    return result;\n  }\n\n  /**\n   * Finds maximum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {*}\n   */\n  function max(array, byProperty) {\n    return find(array, byProperty, function(value1, value2) {\n      return value1 >= value2;\n    });\n  }\n\n  /**\n   * Finds minimum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {*}\n   */\n  function min(array, byProperty) {\n    return find(array, byProperty, function(value1, value2) {\n      return value1 < value2;\n    });\n  }\n\n  /**\n   * @private\n   */\n  function fill(array, value) {\n    var k = array.length;\n    while (k--) {\n      array[k] = value;\n    }\n    return array;\n  }\n\n  /**\n   * @private\n   */\n  function find(array, byProperty, condition) {\n    if (!array || array.length === 0) {\n      return;\n    }\n\n    var i = array.length - 1,\n        result = byProperty ? array[i][byProperty] : array[i];\n    if (byProperty) {\n      while (i--) {\n        if (condition(array[i][byProperty], result)) {\n          result = array[i][byProperty];\n        }\n      }\n    }\n    else {\n      while (i--) {\n        if (condition(array[i], result)) {\n          result = array[i];\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @namespace fabric.util.array\n   */\n  fabric.util.array = {\n    fill: fill,\n    invoke: invoke,\n    min: min,\n    max: max\n  };\n\n})();\n\n\n(function() {\n  /**\n   * Copies all enumerable properties of one js object to another\n   * this does not and cannot compete with generic utils.\n   * Does not clone or extend fabric.Object subclasses.\n   * This is mostly for internal use and has extra handling for fabricJS objects\n   * it skips the canvas property in deep cloning.\n   * @memberOf fabric.util.object\n   * @param {Object} destination Where to copy to\n   * @param {Object} source Where to copy from\n   * @return {Object}\n   */\n\n  function extend(destination, source, deep) {\n    // JScript DontEnum bug is not taken care of\n    // the deep clone is for internal use, is not meant to avoid\n    // javascript traps or cloning html element or self referenced objects.\n    if (deep) {\n      if (!fabric.isLikelyNode && source instanceof Element) {\n        // avoid cloning deep images, canvases,\n        destination = source;\n      }\n      else if (source instanceof Array) {\n        destination = [];\n        for (var i = 0, len = source.length; i < len; i++) {\n          destination[i] = extend({ }, source[i], deep);\n        }\n      }\n      else if (source && typeof source === 'object') {\n        for (var property in source) {\n          if (property === 'canvas') {\n            destination[property] = extend({ }, source[property]);\n          }\n          else if (source.hasOwnProperty(property)) {\n            destination[property] = extend({ }, source[property], deep);\n          }\n        }\n      }\n      else {\n        // this sounds odd for an extend but is ok for recursive use\n        destination = source;\n      }\n    }\n    else {\n      for (var property in source) {\n        destination[property] = source[property];\n      }\n    }\n    return destination;\n  }\n\n  /**\n   * Creates an empty object and copies all enumerable properties of another object to it\n   * @memberOf fabric.util.object\n   * TODO: this function return an empty object if you try to clone null\n   * @param {Object} object Object to clone\n   * @return {Object}\n   */\n  function clone(object, deep) {\n    return extend({ }, object, deep);\n  }\n\n  /** @namespace fabric.util.object */\n  fabric.util.object = {\n    extend: extend,\n    clone: clone\n  };\n  fabric.util.object.extend(fabric.util, fabric.Observable);\n})();\n\n\n(function() {\n\n  /**\n   * Camelizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to camelize\n   * @return {String} Camelized version of a string\n   */\n  function camelize(string) {\n    return string.replace(/-+(.)?/g, function(match, character) {\n      return character ? character.toUpperCase() : '';\n    });\n  }\n\n  /**\n   * Capitalizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to capitalize\n   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n   * and other letters stay untouched, if false first letter is capitalized\n   * and other letters are converted to lowercase.\n   * @return {String} Capitalized version of a string\n   */\n  function capitalize(string, firstLetterOnly) {\n    return string.charAt(0).toUpperCase() +\n      (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\n  }\n\n  /**\n   * Escapes XML in a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to escape\n   * @return {String} Escaped version of a string\n   */\n  function escapeXml(string) {\n    return string.replace(/&/g, '&amp;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&apos;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n  }\n\n  /**\n   * Divide a string in the user perceived single units\n   * @memberOf fabric.util.string\n   * @param {String} textstring String to escape\n   * @return {Array} array containing the graphemes\n   */\n  function graphemeSplit(textstring) {\n    var i = 0, chr, graphemes = [];\n    for (i = 0, chr; i < textstring.length; i++) {\n      if ((chr = getWholeChar(textstring, i)) === false) {\n        continue;\n      }\n      graphemes.push(chr);\n    }\n    return graphemes;\n  }\n\n  // taken from mdn in the charAt doc page.\n  function getWholeChar(str, i) {\n    var code = str.charCodeAt(i);\n\n    if (isNaN(code)) {\n      return ''; // Position not found\n    }\n    if (code < 0xD800 || code > 0xDFFF) {\n      return str.charAt(i);\n    }\n\n    // High surrogate (could change last hex to 0xDB7F to treat high private\n    // surrogates as single characters)\n    if (0xD800 <= code && code <= 0xDBFF) {\n      if (str.length <= (i + 1)) {\n        throw 'High surrogate without following low surrogate';\n      }\n      var next = str.charCodeAt(i + 1);\n      if (0xDC00 > next || next > 0xDFFF) {\n        throw 'High surrogate without following low surrogate';\n      }\n      return str.charAt(i) + str.charAt(i + 1);\n    }\n    // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n    if (i === 0) {\n      throw 'Low surrogate without preceding high surrogate';\n    }\n    var prev = str.charCodeAt(i - 1);\n\n    // (could change last hex to 0xDB7F to treat high private\n    // surrogates as single characters)\n    if (0xD800 > prev || prev > 0xDBFF) {\n      throw 'Low surrogate without preceding high surrogate';\n    }\n    // We can pass over low surrogates now as the second component\n    // in a pair which we have already processed\n    return false;\n  }\n\n\n  /**\n   * String utilities\n   * @namespace fabric.util.string\n   */\n  fabric.util.string = {\n    camelize: camelize,\n    capitalize: capitalize,\n    escapeXml: escapeXml,\n    graphemeSplit: graphemeSplit\n  };\n})();\n\n\n(function() {\n\n  var slice = Array.prototype.slice, emptyFunction = function() { },\n\n      IS_DONTENUM_BUGGY = (function() {\n        for (var p in { toString: 1 }) {\n          if (p === 'toString') {\n            return false;\n          }\n        }\n        return true;\n      })(),\n\n      /** @ignore */\n      addMethods = function(klass, source, parent) {\n        for (var property in source) {\n\n          if (property in klass.prototype &&\n              typeof klass.prototype[property] === 'function' &&\n              (source[property] + '').indexOf('callSuper') > -1) {\n\n            klass.prototype[property] = (function(property) {\n              return function() {\n\n                var superclass = this.constructor.superclass;\n                this.constructor.superclass = parent;\n                var returnValue = source[property].apply(this, arguments);\n                this.constructor.superclass = superclass;\n\n                if (property !== 'initialize') {\n                  return returnValue;\n                }\n              };\n            })(property);\n          }\n          else {\n            klass.prototype[property] = source[property];\n          }\n\n          if (IS_DONTENUM_BUGGY) {\n            if (source.toString !== Object.prototype.toString) {\n              klass.prototype.toString = source.toString;\n            }\n            if (source.valueOf !== Object.prototype.valueOf) {\n              klass.prototype.valueOf = source.valueOf;\n            }\n          }\n        }\n      };\n\n  function Subclass() { }\n\n  function callSuper(methodName) {\n    var parentMethod = null,\n        _this = this;\n\n    // climb prototype chain to find method not equal to callee's method\n    while (_this.constructor.superclass) {\n      var superClassMethod = _this.constructor.superclass.prototype[methodName];\n      if (_this[methodName] !== superClassMethod) {\n        parentMethod = superClassMethod;\n        break;\n      }\n      // eslint-disable-next-line\n      _this = _this.constructor.superclass.prototype;\n    }\n\n    if (!parentMethod) {\n      return console.log('tried to callSuper ' + methodName + ', method not found in prototype chain', this);\n    }\n\n    return (arguments.length > 1)\n      ? parentMethod.apply(this, slice.call(arguments, 1))\n      : parentMethod.call(this);\n  }\n\n  /**\n   * Helper for creation of \"classes\".\n   * @memberOf fabric.util\n   * @param {Function} [parent] optional \"Class\" to inherit from\n   * @param {Object} [properties] Properties shared by all instances of this class\n   *                  (be careful modifying objects defined here as this would affect all instances)\n   */\n  function createClass() {\n    var parent = null,\n        properties = slice.call(arguments, 0);\n\n    if (typeof properties[0] === 'function') {\n      parent = properties.shift();\n    }\n    function klass() {\n      this.initialize.apply(this, arguments);\n    }\n\n    klass.superclass = parent;\n    klass.subclasses = [];\n\n    if (parent) {\n      Subclass.prototype = parent.prototype;\n      klass.prototype = new Subclass();\n      parent.subclasses.push(klass);\n    }\n    for (var i = 0, length = properties.length; i < length; i++) {\n      addMethods(klass, properties[i], parent);\n    }\n    if (!klass.prototype.initialize) {\n      klass.prototype.initialize = emptyFunction;\n    }\n    klass.prototype.constructor = klass;\n    klass.prototype.callSuper = callSuper;\n    return klass;\n  }\n\n  fabric.util.createClass = createClass;\n})();\n\n\n(function () {\n\n  var unknown = 'unknown';\n\n  /* EVENT HANDLING */\n\n  function areHostMethods(object) {\n    var methodNames = Array.prototype.slice.call(arguments, 1),\n        t, i, len = methodNames.length;\n    for (i = 0; i < len; i++) {\n      t = typeof object[methodNames[i]];\n      if (!(/^(?:function|object|unknown)$/).test(t)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** @ignore */\n  var getElement,\n      setElement,\n      getUniqueId = (function () {\n        var uid = 0;\n        return function (element) {\n          return element.__uniqueID || (element.__uniqueID = 'uniqueID__' + uid++);\n        };\n      })();\n\n  (function () {\n    var elements = { };\n    /** @ignore */\n    getElement = function (uid) {\n      return elements[uid];\n    };\n    /** @ignore */\n    setElement = function (uid, element) {\n      elements[uid] = element;\n    };\n  })();\n\n  function createListener(uid, handler) {\n    return {\n      handler: handler,\n      wrappedHandler: createWrappedHandler(uid, handler)\n    };\n  }\n\n  function createWrappedHandler(uid, handler) {\n    return function (e) {\n      handler.call(getElement(uid), e || fabric.window.event);\n    };\n  }\n\n  function createDispatcher(uid, eventName) {\n    return function (e) {\n      if (handlers[uid] && handlers[uid][eventName]) {\n        var handlersForEvent = handlers[uid][eventName];\n        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n          handlersForEvent[i].call(this, e || fabric.window.event);\n        }\n      }\n    };\n  }\n\n  var shouldUseAddListenerRemoveListener = (\n        areHostMethods(fabric.document.documentElement, 'addEventListener', 'removeEventListener') &&\n        areHostMethods(fabric.window, 'addEventListener', 'removeEventListener')),\n\n      shouldUseAttachEventDetachEvent = (\n        areHostMethods(fabric.document.documentElement, 'attachEvent', 'detachEvent') &&\n        areHostMethods(fabric.window, 'attachEvent', 'detachEvent')),\n\n      // IE branch\n      listeners = { },\n\n      // DOM L0 branch\n      handlers = { },\n\n      addListener, removeListener;\n\n  if (shouldUseAddListenerRemoveListener) {\n    /** @ignore */\n    addListener = function (element, eventName, handler, options) {\n      // since ie10 or ie9 can use addEventListener but they do not support options, i need to check\n      element && element.addEventListener(eventName, handler, shouldUseAttachEventDetachEvent ? false : options);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler, options) {\n      element && element.removeEventListener(eventName, handler, shouldUseAttachEventDetachEvent ? false : options);\n    };\n  }\n\n  else if (shouldUseAttachEventDetachEvent) {\n    /** @ignore */\n    addListener = function (element, eventName, handler) {\n      if (!element) {\n        return;\n      }\n      var uid = getUniqueId(element);\n      setElement(uid, element);\n      if (!listeners[uid]) {\n        listeners[uid] = { };\n      }\n      if (!listeners[uid][eventName]) {\n        listeners[uid][eventName] = [];\n\n      }\n      var listener = createListener(uid, handler);\n      listeners[uid][eventName].push(listener);\n      element.attachEvent('on' + eventName, listener.wrappedHandler);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler) {\n      if (!element) {\n        return;\n      }\n      var uid = getUniqueId(element), listener;\n      if (listeners[uid] && listeners[uid][eventName]) {\n        for (var i = 0, len = listeners[uid][eventName].length; i < len; i++) {\n          listener = listeners[uid][eventName][i];\n          if (listener && listener.handler === handler) {\n            element.detachEvent('on' + eventName, listener.wrappedHandler);\n            listeners[uid][eventName][i] = null;\n          }\n        }\n      }\n    };\n  }\n  else {\n    /** @ignore */\n    addListener = function (element, eventName, handler) {\n      if (!element) {\n        return;\n      }\n      var uid = getUniqueId(element);\n      if (!handlers[uid]) {\n        handlers[uid] = { };\n      }\n      if (!handlers[uid][eventName]) {\n        handlers[uid][eventName] = [];\n        var existingHandler = element['on' + eventName];\n        if (existingHandler) {\n          handlers[uid][eventName].push(existingHandler);\n        }\n        element['on' + eventName] = createDispatcher(uid, eventName);\n      }\n      handlers[uid][eventName].push(handler);\n    };\n    /** @ignore */\n    removeListener = function (element, eventName, handler) {\n      if (!element) {\n        return;\n      }\n      var uid = getUniqueId(element);\n      if (handlers[uid] && handlers[uid][eventName]) {\n        var handlersForEvent = handlers[uid][eventName];\n        for (var i = 0, len = handlersForEvent.length; i < len; i++) {\n          if (handlersForEvent[i] === handler) {\n            handlersForEvent.splice(i, 1);\n          }\n        }\n      }\n    };\n  }\n\n  /**\n   * Adds an event listener to an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  fabric.util.addListener = addListener;\n\n  /**\n   * Removes an event listener from an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  fabric.util.removeListener = removeListener;\n\n  /**\n   * Cross-browser wrapper for getting event's coordinates\n   * @memberOf fabric.util\n   * @param {Event} event Event object\n   */\n  function getPointer(event) {\n    event || (event = fabric.window.event);\n\n    var element = event.target ||\n                  (typeof event.srcElement !== unknown ? event.srcElement : null),\n\n        scroll = fabric.util.getScrollLeftTop(element);\n    return {\n      x: pointerX(event) + scroll.left,\n      y: pointerY(event) + scroll.top\n    };\n  }\n\n  var pointerX = function(event) {\n        return event.clientX;\n      },\n\n      pointerY = function(event) {\n        return event.clientY;\n      };\n\n  function _getPointer(event, pageProp, clientProp) {\n    var touchProp = event.type === 'touchend' ? 'changedTouches' : 'touches';\n    var pointer, eventTouchProp = event[touchProp];\n\n    if (eventTouchProp && eventTouchProp[0]) {\n      pointer = eventTouchProp[0][clientProp];\n    }\n\n    if (typeof pointer === 'undefined') {\n      pointer = event[clientProp];\n    }\n\n    return pointer;\n  }\n\n  if (fabric.isTouchSupported) {\n    pointerX = function(event) {\n      return _getPointer(event, 'pageX', 'clientX');\n    };\n    pointerY = function(event) {\n      return _getPointer(event, 'pageY', 'clientY');\n    };\n  }\n\n  fabric.util.getPointer = getPointer;\n\n})();\n\n\n(function () {\n\n  /**\n   * Cross-browser wrapper for setting element's style\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {Object} styles\n   * @return {HTMLElement} Element that was passed as a first argument\n   */\n  function setStyle(element, styles) {\n    var elementStyle = element.style;\n    if (!elementStyle) {\n      return element;\n    }\n    if (typeof styles === 'string') {\n      element.style.cssText += ';' + styles;\n      return styles.indexOf('opacity') > -1\n        ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\n        : element;\n    }\n    for (var property in styles) {\n      if (property === 'opacity') {\n        setOpacity(element, styles[property]);\n      }\n      else {\n        var normalizedProperty = (property === 'float' || property === 'cssFloat')\n          ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\n          : property;\n        elementStyle[normalizedProperty] = styles[property];\n      }\n    }\n    return element;\n  }\n\n  var parseEl = fabric.document.createElement('div'),\n      supportsOpacity = typeof parseEl.style.opacity === 'string',\n      supportsFilters = typeof parseEl.style.filter === 'string',\n      reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\n\n      /** @ignore */\n      setOpacity = function (element) { return element; };\n\n  if (supportsOpacity) {\n    /** @ignore */\n    setOpacity = function(element, value) {\n      element.style.opacity = value;\n      return element;\n    };\n  }\n  else if (supportsFilters) {\n    /** @ignore */\n    setOpacity = function(element, value) {\n      var es = element.style;\n      if (element.currentStyle && !element.currentStyle.hasLayout) {\n        es.zoom = 1;\n      }\n      if (reOpacity.test(es.filter)) {\n        value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\n        es.filter = es.filter.replace(reOpacity, value);\n      }\n      else {\n        es.filter += ' alpha(opacity=' + (value * 100) + ')';\n      }\n      return element;\n    };\n  }\n\n  fabric.util.setStyle = setStyle;\n\n})();\n\n\n(function() {\n\n  var _slice = Array.prototype.slice;\n\n  /**\n   * Takes id and returns an element with that id (if one exists in a document)\n   * @memberOf fabric.util\n   * @param {String|HTMLElement} id\n   * @return {HTMLElement|null}\n   */\n  function getById(id) {\n    return typeof id === 'string' ? fabric.document.getElementById(id) : id;\n  }\n\n  var sliceCanConvertNodelists,\n      /**\n       * Converts an array-like object (e.g. arguments or NodeList) to an array\n       * @memberOf fabric.util\n       * @param {Object} arrayLike\n       * @return {Array}\n       */\n      toArray = function(arrayLike) {\n        return _slice.call(arrayLike, 0);\n      };\n\n  try {\n    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\n  }\n  catch (err) { }\n\n  if (!sliceCanConvertNodelists) {\n    toArray = function(arrayLike) {\n      var arr = new Array(arrayLike.length), i = arrayLike.length;\n      while (i--) {\n        arr[i] = arrayLike[i];\n      }\n      return arr;\n    };\n  }\n\n  /**\n   * Creates specified element with specified attributes\n   * @memberOf fabric.util\n   * @param {String} tagName Type of an element to create\n   * @param {Object} [attributes] Attributes to set on an element\n   * @return {HTMLElement} Newly created element\n   */\n  function makeElement(tagName, attributes) {\n    var el = fabric.document.createElement(tagName);\n    for (var prop in attributes) {\n      if (prop === 'class') {\n        el.className = attributes[prop];\n      }\n      else if (prop === 'for') {\n        el.htmlFor = attributes[prop];\n      }\n      else {\n        el.setAttribute(prop, attributes[prop]);\n      }\n    }\n    return el;\n  }\n\n  /**\n   * Adds class to an element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to add class to\n   * @param {String} className Class to add to an element\n   */\n  function addClass(element, className) {\n    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\n      element.className += (element.className ? ' ' : '') + className;\n    }\n  }\n\n  /**\n   * Wraps element with another element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to wrap\n   * @param {HTMLElement|String} wrapper Element to wrap with\n   * @param {Object} [attributes] Attributes to set on a wrapper\n   * @return {HTMLElement} wrapper\n   */\n  function wrapElement(element, wrapper, attributes) {\n    if (typeof wrapper === 'string') {\n      wrapper = makeElement(wrapper, attributes);\n    }\n    if (element.parentNode) {\n      element.parentNode.replaceChild(wrapper, element);\n    }\n    wrapper.appendChild(element);\n    return wrapper;\n  }\n\n  /**\n   * Returns element scroll offsets\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to operate on\n   * @return {Object} Object with left/top values\n   */\n  function getScrollLeftTop(element) {\n\n    var left = 0,\n        top = 0,\n        docElement = fabric.document.documentElement,\n        body = fabric.document.body || {\n          scrollLeft: 0, scrollTop: 0\n        };\n\n    // While loop checks (and then sets element to) .parentNode OR .host\n    //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n    //  but the .parentNode of a root ShadowDOM node will always be null, instead\n    //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n    while (element && (element.parentNode || element.host)) {\n\n      // Set element to element parent, or 'host' in case of ShadowDOM\n      element = element.parentNode || element.host;\n\n      if (element === fabric.document) {\n        left = body.scrollLeft || docElement.scrollLeft || 0;\n        top = body.scrollTop ||  docElement.scrollTop || 0;\n      }\n      else {\n        left += element.scrollLeft || 0;\n        top += element.scrollTop || 0;\n      }\n\n      if (element.nodeType === 1 && element.style.position === 'fixed') {\n        break;\n      }\n    }\n\n    return { left: left, top: top };\n  }\n\n  /**\n   * Returns offset for a given element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get offset for\n   * @return {Object} Object with \"left\" and \"top\" properties\n   */\n  function getElementOffset(element) {\n    var docElem,\n        doc = element && element.ownerDocument,\n        box = { left: 0, top: 0 },\n        offset = { left: 0, top: 0 },\n        scrollLeftTop,\n        offsetAttributes = {\n          borderLeftWidth: 'left',\n          borderTopWidth:  'top',\n          paddingLeft:     'left',\n          paddingTop:      'top'\n        };\n\n    if (!doc) {\n      return offset;\n    }\n\n    for (var attr in offsetAttributes) {\n      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\n    }\n\n    docElem = doc.documentElement;\n    if ( typeof element.getBoundingClientRect !== 'undefined' ) {\n      box = element.getBoundingClientRect();\n    }\n\n    scrollLeftTop = getScrollLeftTop(element);\n\n    return {\n      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\n    };\n  }\n\n  /**\n   * Returns style attribute value of a given element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get style attribute for\n   * @param {String} attr Style attribute to get for element\n   * @return {String} Style attribute value of the given element.\n   */\n  var getElementStyle;\n  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\n    getElementStyle = function(element, attr) {\n      var style = fabric.document.defaultView.getComputedStyle(element, null);\n      return style ? style[attr] : undefined;\n    };\n  }\n  else {\n    getElementStyle = function(element, attr) {\n      var value = element.style[attr];\n      if (!value && element.currentStyle) {\n        value = element.currentStyle[attr];\n      }\n      return value;\n    };\n  }\n\n  (function () {\n    var style = fabric.document.documentElement.style,\n        selectProp = 'userSelect' in style\n          ? 'userSelect'\n          : 'MozUserSelect' in style\n            ? 'MozUserSelect'\n            : 'WebkitUserSelect' in style\n              ? 'WebkitUserSelect'\n              : 'KhtmlUserSelect' in style\n                ? 'KhtmlUserSelect'\n                : '';\n\n    /**\n     * Makes element unselectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make unselectable\n     * @return {HTMLElement} Element that was passed in\n     */\n    function makeElementUnselectable(element) {\n      if (typeof element.onselectstart !== 'undefined') {\n        element.onselectstart = fabric.util.falseFunction;\n      }\n      if (selectProp) {\n        element.style[selectProp] = 'none';\n      }\n      else if (typeof element.unselectable === 'string') {\n        element.unselectable = 'on';\n      }\n      return element;\n    }\n\n    /**\n     * Makes element selectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make selectable\n     * @return {HTMLElement} Element that was passed in\n     */\n    function makeElementSelectable(element) {\n      if (typeof element.onselectstart !== 'undefined') {\n        element.onselectstart = null;\n      }\n      if (selectProp) {\n        element.style[selectProp] = '';\n      }\n      else if (typeof element.unselectable === 'string') {\n        element.unselectable = '';\n      }\n      return element;\n    }\n\n    fabric.util.makeElementUnselectable = makeElementUnselectable;\n    fabric.util.makeElementSelectable = makeElementSelectable;\n  })();\n\n  (function() {\n\n    /**\n     * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading\n     * @memberOf fabric.util\n     * @param {String} url URL of a script to load\n     * @param {Function} callback Callback to execute when script is finished loading\n     */\n    function getScript(url, callback) {\n      var headEl = fabric.document.getElementsByTagName('head')[0],\n          scriptEl = fabric.document.createElement('script'),\n          loading = true;\n\n      /** @ignore */\n      scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {\n        if (loading) {\n          if (typeof this.readyState === 'string' &&\n              this.readyState !== 'loaded' &&\n              this.readyState !== 'complete') {\n            return;\n          }\n          loading = false;\n          callback(e || fabric.window.event);\n          scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;\n        }\n      };\n      scriptEl.src = url;\n      headEl.appendChild(scriptEl);\n      // causes issue in Opera\n      // headEl.removeChild(scriptEl);\n    }\n\n    fabric.util.getScript = getScript;\n  })();\n\n  function getNodeCanvas(element) {\n    var impl = fabric.jsdomImplForWrapper(element);\n    return impl._canvas || impl._image;\n  };\n\n  function cleanUpJsdomNode(element) {\n    if (!fabric.isLikelyNode) {\n      return;\n    }\n    var impl = fabric.jsdomImplForWrapper(element);\n    if (impl) {\n      impl._image = null;\n      impl._canvas = null;\n      // unsure if necessary\n      impl._currentSrc = null;\n      impl._attributes = null;\n      impl._classList = null;\n    }\n  }\n\n  fabric.util.getById = getById;\n  fabric.util.toArray = toArray;\n  fabric.util.makeElement = makeElement;\n  fabric.util.addClass = addClass;\n  fabric.util.wrapElement = wrapElement;\n  fabric.util.getScrollLeftTop = getScrollLeftTop;\n  fabric.util.getElementOffset = getElementOffset;\n  fabric.util.getElementStyle = getElementStyle;\n  fabric.util.getNodeCanvas = getNodeCanvas;\n  fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;\n\n})();\n\n\n(function() {\n\n  function addParamToUrl(url, param) {\n    return url + (/\\?/.test(url) ? '&' : '?') + param;\n  }\n\n  function emptyFn() { }\n\n  /**\n   * Cross-browser abstraction for sending XMLHttpRequest\n   * @memberOf fabric.util\n   * @param {String} url URL to send XMLHttpRequest to\n   * @param {Object} [options] Options object\n   * @param {String} [options.method=\"GET\"]\n   * @param {String} [options.parameters] parameters to append to url in GET or in body\n   * @param {String} [options.body] body to send with POST or PUT request\n   * @param {Function} options.onComplete Callback to invoke when request is completed\n   * @return {XMLHttpRequest} request\n   */\n  function request(url, options) {\n    options || (options = { });\n\n    var method = options.method ? options.method.toUpperCase() : 'GET',\n        onComplete = options.onComplete || function() { },\n        xhr = new fabric.window.XMLHttpRequest(),\n        body = options.body || options.parameters;\n\n    /** @ignore */\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        onComplete(xhr);\n        xhr.onreadystatechange = emptyFn;\n      }\n    };\n\n    if (method === 'GET') {\n      body = null;\n      if (typeof options.parameters === 'string') {\n        url = addParamToUrl(url, options.parameters);\n      }\n    }\n\n    xhr.open(method, url, true);\n\n    if (method === 'POST' || method === 'PUT') {\n      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    }\n\n    xhr.send(body);\n    return xhr;\n  }\n\n  fabric.util.request = request;\n})();\n\n\n/**\n * Wrapper around `console.log` (when available)\n * @param {*} [values] Values to log\n */\nfabric.log = function() { };\n\n/**\n * Wrapper around `console.warn` (when available)\n * @param {*} [values] Values to log as a warning\n */\nfabric.warn = function() { };\n\n/* eslint-disable */\nif (typeof console !== 'undefined') {\n\n  ['log', 'warn'].forEach(function(methodName) {\n\n    if (typeof console[methodName] !== 'undefined' &&\n        typeof console[methodName].apply === 'function') {\n\n      fabric[methodName] = function() {\n        return console[methodName].apply(console, arguments);\n      };\n    }\n  });\n}\n/* eslint-enable */\n\n\n(function() {\n\n  function noop() {\n    return false;\n  }\n\n  /**\n   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\n   * @memberOf fabric.util\n   * @param {Object} [options] Animation options\n   * @param {Function} [options.onChange] Callback; invoked on every value change\n   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n   * @param {Number} [options.startValue=0] Starting value\n   * @param {Number} [options.endValue=100] Ending value\n   * @param {Number} [options.byValue=100] Value to modify the property by\n   * @param {Function} [options.easing] Easing function\n   * @param {Number} [options.duration=500] Duration of change (in ms)\n   */\n  function animate(options) {\n\n    requestAnimFrame(function(timestamp) {\n      options || (options = { });\n\n      var start = timestamp || +new Date(),\n          duration = options.duration || 500,\n          finish = start + duration, time,\n          onChange = options.onChange || noop,\n          abort = options.abort || noop,\n          onComplete = options.onComplete || noop,\n          easing = options.easing || function(t, b, c, d) {return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;},\n          startValue = 'startValue' in options ? options.startValue : 0,\n          endValue = 'endValue' in options ? options.endValue : 100,\n          byValue = options.byValue || endValue - startValue;\n\n      options.onStart && options.onStart();\n\n      (function tick(ticktime) {\n        if (abort()) {\n          onComplete(endValue, 1, 1);\n          return;\n        }\n        time = ticktime || +new Date();\n        var currentTime = time > finish ? duration : (time - start),\n            timePerc = currentTime / duration,\n            current = easing(currentTime, startValue, byValue, duration),\n            valuePerc = Math.abs((current - startValue) / byValue);\n        onChange(current, valuePerc, timePerc);\n        if (time > finish) {\n          options.onComplete && options.onComplete();\n          return;\n        }\n        requestAnimFrame(tick);\n      })(start);\n    });\n\n  }\n\n  var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\n                          fabric.window.webkitRequestAnimationFrame ||\n                          fabric.window.mozRequestAnimationFrame    ||\n                          fabric.window.oRequestAnimationFrame      ||\n                          fabric.window.msRequestAnimationFrame     ||\n                          function(callback) {\n                            return fabric.window.setTimeout(callback, 1000 / 60);\n                          };\n\n  var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;\n\n  /**\n   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\n   * @memberOf fabric.util\n   * @param {Function} callback Callback to invoke\n   * @param {DOMElement} element optional Element to associate with animation\n   */\n  function requestAnimFrame() {\n    return _requestAnimFrame.apply(fabric.window, arguments);\n  }\n\n  function cancelAnimFrame() {\n    return _cancelAnimFrame.apply(fabric.window, arguments);\n  }\n\n  fabric.util.animate = animate;\n  fabric.util.requestAnimFrame = requestAnimFrame;\n  fabric.util.cancelAnimFrame = cancelAnimFrame;\n})();\n\n\n(function() {\n  // Calculate an in-between color. Returns a \"rgba()\" string.\n  // Credit: Edwin Martin <edwin@bitstorm.org>\n  //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js\n  function calculateColor(begin, end, pos) {\n    var color = 'rgba('\n        + parseInt((begin[0] + pos * (end[0] - begin[0])), 10) + ','\n        + parseInt((begin[1] + pos * (end[1] - begin[1])), 10) + ','\n        + parseInt((begin[2] + pos * (end[2] - begin[2])), 10);\n\n    color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);\n    color += ')';\n    return color;\n  }\n\n  /**\n   * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.\n   * @memberOf fabric.util\n   * @param {String} fromColor The starting color in hex or rgb(a) format.\n   * @param {String} toColor The starting color in hex or rgb(a) format.\n   * @param {Number} [duration] Duration of change (in ms).\n   * @param {Object} [options] Animation options\n   * @param {Function} [options.onChange] Callback; invoked on every value change\n   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n   * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.\n   */\n  function animateColor(fromColor, toColor, duration, options) {\n    var startColor = new fabric.Color(fromColor).getSource(),\n        endColor = new fabric.Color(toColor).getSource();\n\n    options = options || {};\n\n    fabric.util.animate(fabric.util.object.extend(options, {\n      duration: duration || 500,\n      startValue: startColor,\n      endValue: endColor,\n      byValue: endColor,\n      easing: function (currentTime, startValue, byValue, duration) {\n        var posValue = options.colorEasing\n          ? options.colorEasing(currentTime, duration)\n          : 1 - Math.cos(currentTime / duration * (Math.PI / 2));\n        return calculateColor(startValue, byValue, posValue);\n      }\n    }));\n  }\n\n  fabric.util.animateColor = animateColor;\n\n})();\n\n\n(function() {\n\n  function normalize(a, c, p, s) {\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    }\n    else {\n      //handle the 0/0 case:\n      if (c === 0 && a === 0) {\n        s = p / (2 * Math.PI) * Math.asin(1);\n      }\n      else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n      }\n    }\n    return { a: a, c: c, p: p, s: s };\n  }\n\n  function elastic(opts, t, d) {\n    return opts.a *\n      Math.pow(2, 10 * (t -= 1)) *\n      Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );\n  }\n\n  /**\n   * Cubic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n  }\n\n  /**\n   * Cubic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutCubic(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * t * t * t + b;\n    }\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n  }\n\n  /**\n   * Quartic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n  }\n\n  /**\n   * Quartic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n  }\n\n  /**\n   * Quartic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutQuart(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * t * t * t * t + b;\n    }\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n  }\n\n  /**\n   * Quintic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInQuint(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n  }\n\n  /**\n   * Quintic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutQuint(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n  }\n\n  /**\n   * Quintic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutQuint(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * t * t * t * t * t + b;\n    }\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n  }\n\n  /**\n   * Sinusoidal easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInSine(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n  }\n\n  /**\n   * Sinusoidal easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutSine(t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n  }\n\n  /**\n   * Sinusoidal easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutSine(t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n  }\n\n  /**\n   * Exponential easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInExpo(t, b, c, d) {\n    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n  }\n\n  /**\n   * Exponential easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutExpo(t, b, c, d) {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n  }\n\n  /**\n   * Exponential easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutExpo(t, b, c, d) {\n    if (t === 0) {\n      return b;\n    }\n    if (t === d) {\n      return b + c;\n    }\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    }\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n  }\n\n  /**\n   * Circular easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInCirc(t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n  }\n\n  /**\n   * Circular easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutCirc(t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n  }\n\n  /**\n   * Circular easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutCirc(t, b, c, d) {\n    t /= d / 2;\n    if (t < 1) {\n      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    }\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n  }\n\n  /**\n   * Elastic easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d;\n    if (t === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    var opts = normalize(a, c, p, s);\n    return -elastic(opts, t, d) + b;\n  }\n\n  /**\n   * Elastic easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d;\n    if (t === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    var opts = normalize(a, c, p, s);\n    return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;\n  }\n\n  /**\n   * Elastic easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutElastic(t, b, c, d) {\n    var s = 1.70158, p = 0, a = c;\n    if (t === 0) {\n      return b;\n    }\n    t /= d / 2;\n    if (t === 2) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * (0.3 * 1.5);\n    }\n    var opts = normalize(a, c, p, s);\n    if (t < 1) {\n      return -0.5 * elastic(opts, t, d) + b;\n    }\n    return opts.a * Math.pow(2, -10 * (t -= 1)) *\n      Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;\n  }\n\n  /**\n   * Backwards easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n  }\n\n  /**\n   * Backwards easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n  }\n\n  /**\n   * Backwards easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutBack(t, b, c, d, s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    t /= d / 2;\n    if (t < 1) {\n      return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n    }\n    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n  }\n\n  /**\n   * Bouncing easing in\n   * @memberOf fabric.util.ease\n   */\n  function easeInBounce(t, b, c, d) {\n    return c - easeOutBounce (d - t, 0, c, d) + b;\n  }\n\n  /**\n   * Bouncing easing out\n   * @memberOf fabric.util.ease\n   */\n  function easeOutBounce(t, b, c, d) {\n    if ((t /= d) < (1 / 2.75)) {\n      return c * (7.5625 * t * t) + b;\n    }\n    else if (t < (2 / 2.75)) {\n      return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n    }\n    else if (t < (2.5 / 2.75)) {\n      return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n    }\n    else {\n      return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n    }\n  }\n\n  /**\n   * Bouncing easing in and out\n   * @memberOf fabric.util.ease\n   */\n  function easeInOutBounce(t, b, c, d) {\n    if (t < d / 2) {\n      return easeInBounce (t * 2, 0, c, d) * 0.5 + b;\n    }\n    return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n  }\n\n  /**\n   * Easing functions\n   * See <a href=\"http://gizma.com/easing/\">Easing Equations by Robert Penner</a>\n   * @namespace fabric.util.ease\n   */\n  fabric.util.ease = {\n\n    /**\n     * Quadratic easing in\n     * @memberOf fabric.util.ease\n     */\n    easeInQuad: function(t, b, c, d) {\n      return c * (t /= d) * t + b;\n    },\n\n    /**\n     * Quadratic easing out\n     * @memberOf fabric.util.ease\n     */\n    easeOutQuad: function(t, b, c, d) {\n      return -c * (t /= d) * (t - 2) + b;\n    },\n\n    /**\n     * Quadratic easing in and out\n     * @memberOf fabric.util.ease\n     */\n    easeInOutQuad: function(t, b, c, d) {\n      t /= (d / 2);\n      if (t < 1) {\n        return c / 2 * t * t + b;\n      }\n      return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    },\n\n    /**\n     * Cubic easing in\n     * @memberOf fabric.util.ease\n     */\n    easeInCubic: function(t, b, c, d) {\n      return c * (t /= d) * t * t + b;\n    },\n\n    easeOutCubic: easeOutCubic,\n    easeInOutCubic: easeInOutCubic,\n    easeInQuart: easeInQuart,\n    easeOutQuart: easeOutQuart,\n    easeInOutQuart: easeInOutQuart,\n    easeInQuint: easeInQuint,\n    easeOutQuint: easeOutQuint,\n    easeInOutQuint: easeInOutQuint,\n    easeInSine: easeInSine,\n    easeOutSine: easeOutSine,\n    easeInOutSine: easeInOutSine,\n    easeInExpo: easeInExpo,\n    easeOutExpo: easeOutExpo,\n    easeInOutExpo: easeInOutExpo,\n    easeInCirc: easeInCirc,\n    easeOutCirc: easeOutCirc,\n    easeInOutCirc: easeInOutCirc,\n    easeInElastic: easeInElastic,\n    easeOutElastic: easeOutElastic,\n    easeInOutElastic: easeInOutElastic,\n    easeInBack: easeInBack,\n    easeOutBack: easeOutBack,\n    easeInOutBack: easeInOutBack,\n    easeInBounce: easeInBounce,\n    easeOutBounce: easeOutBounce,\n    easeInOutBounce: easeInOutBounce\n  };\n\n})();\n\n\n(function(global) {\n\n  'use strict';\n\n  /**\n   * @name fabric\n   * @namespace\n   */\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone,\n      toFixed = fabric.util.toFixed,\n      parseUnit = fabric.util.parseUnit,\n      multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,\n\n      svgValidTagNames = ['path', 'circle', 'polygon', 'polyline', 'ellipse', 'rect', 'line',\n        'image', 'text'],\n      svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n      svgInvalidAncestors = ['pattern', 'defs', 'symbol', 'metadata', 'clipPath', 'mask', 'desc'],\n      svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\n\n      attributesMap = {\n        cx:                   'left',\n        x:                    'left',\n        r:                    'radius',\n        cy:                   'top',\n        y:                    'top',\n        display:              'visible',\n        visibility:           'visible',\n        transform:            'transformMatrix',\n        'fill-opacity':       'fillOpacity',\n        'fill-rule':          'fillRule',\n        'font-family':        'fontFamily',\n        'font-size':          'fontSize',\n        'font-style':         'fontStyle',\n        'font-weight':        'fontWeight',\n        'letter-spacing':     'charSpacing',\n        'paint-order':        'paintFirst',\n        'stroke-dasharray':   'strokeDashArray',\n        'stroke-dashoffset':  'strokeDashOffset',\n        'stroke-linecap':     'strokeLineCap',\n        'stroke-linejoin':    'strokeLineJoin',\n        'stroke-miterlimit':  'strokeMiterLimit',\n        'stroke-opacity':     'strokeOpacity',\n        'stroke-width':       'strokeWidth',\n        'text-decoration':    'textDecoration',\n        'text-anchor':        'textAnchor',\n        opacity:              'opacity',\n        'clip-path':          'clipPath',\n        'clip-rule':          'clipRule',\n      },\n\n      colorAttributes = {\n        stroke: 'strokeOpacity',\n        fill:   'fillOpacity'\n      };\n\n  fabric.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n  fabric.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n  fabric.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n  fabric.svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n  fabric.cssRules = { };\n  fabric.gradientDefs = { };\n  fabric.clipPaths = { };\n\n  function normalizeAttr(attr) {\n    // transform attribute names\n    if (attr in attributesMap) {\n      return attributesMap[attr];\n    }\n    return attr;\n  }\n\n  function normalizeValue(attr, value, parentAttributes, fontSize) {\n    var isArray = Object.prototype.toString.call(value) === '[object Array]',\n        parsed;\n\n    if ((attr === 'fill' || attr === 'stroke') && value === 'none') {\n      value = '';\n    }\n    else if (attr === 'strokeDashArray') {\n      if (value === 'none') {\n        value = null;\n      }\n      else {\n        value = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\n      }\n    }\n    else if (attr === 'transformMatrix') {\n      if (parentAttributes && parentAttributes.transformMatrix) {\n        value = multiplyTransformMatrices(\n          parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));\n      }\n      else {\n        value = fabric.parseTransformAttribute(value);\n      }\n    }\n    else if (attr === 'visible') {\n      value = value !== 'none' && value !== 'hidden';\n      // display=none on parent element always takes precedence over child element\n      if (parentAttributes && parentAttributes.visible === false) {\n        value = false;\n      }\n    }\n    else if (attr === 'opacity') {\n      value = parseFloat(value);\n      if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n        value *= parentAttributes.opacity;\n      }\n    }\n    else if (attr === 'textAnchor' /* text-anchor */) {\n      value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';\n    }\n    else if (attr === 'charSpacing') {\n      // parseUnit returns px and we convert it to em\n      parsed = parseUnit(value, fontSize) / fontSize * 1000;\n    }\n    else if (attr === 'paintFirst') {\n      var fillIndex = value.indexOf('fill');\n      var strokeIndex = value.indexOf('stroke');\n      var value = 'fill';\n      if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n        value = 'stroke';\n      }\n      else if (fillIndex === -1 && strokeIndex > -1) {\n        value = 'stroke';\n      }\n    }\n    else if (attr === 'href' || attr === 'xlink:href') {\n      return value;\n    }\n    else {\n      parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);\n    }\n\n    return (!isArray && isNaN(parsed) ? value : parsed);\n  }\n\n  /**\n    * @private\n    */\n  function getSvgRegex(arr) {\n    return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n  }\n\n  /**\n   * @private\n   * @param {Object} attributes Array of attributes to parse\n   */\n  function _setStrokeFillOpacity(attributes) {\n    for (var attr in colorAttributes) {\n\n      if (typeof attributes[colorAttributes[attr]] === 'undefined' || attributes[attr] === '') {\n        continue;\n      }\n\n      if (typeof attributes[attr] === 'undefined') {\n        if (!fabric.Object.prototype[attr]) {\n          continue;\n        }\n        attributes[attr] = fabric.Object.prototype[attr];\n      }\n\n      if (attributes[attr].indexOf('url(') === 0) {\n        continue;\n      }\n\n      var color = new fabric.Color(attributes[attr]);\n      attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();\n    }\n    return attributes;\n  }\n\n  /**\n   * @private\n   */\n  function _getMultipleNodes(doc, nodeNames) {\n    var nodeName, nodeArray = [], nodeList, i, len;\n    for (i = 0, len = nodeNames.length; i < len; i++) {\n      nodeName = nodeNames[i];\n      nodeList = doc.getElementsByTagName(nodeName);\n      nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));\n    }\n    return nodeArray;\n  }\n\n  /**\n   * Parses \"transform\" attribute, returning an array of values\n   * @static\n   * @function\n   * @memberOf fabric\n   * @param {String} attributeValue String containing attribute value\n   * @return {Array} Array of 6 elements representing transformation matrix\n   */\n  fabric.parseTransformAttribute = (function() {\n    function rotateMatrix(matrix, args) {\n      var cos = fabric.util.cos(args[0]), sin = fabric.util.sin(args[0]),\n          x = 0, y = 0;\n      if (args.length === 3) {\n        x = args[1];\n        y = args[2];\n      }\n\n      matrix[0] = cos;\n      matrix[1] = sin;\n      matrix[2] = -sin;\n      matrix[3] = cos;\n      matrix[4] = x - (cos * x - sin * y);\n      matrix[5] = y - (sin * x + cos * y);\n    }\n\n    function scaleMatrix(matrix, args) {\n      var multiplierX = args[0],\n          multiplierY = (args.length === 2) ? args[1] : args[0];\n\n      matrix[0] = multiplierX;\n      matrix[3] = multiplierY;\n    }\n\n    function skewMatrix(matrix, args, pos) {\n      matrix[pos] = Math.tan(fabric.util.degreesToRadians(args[0]));\n    }\n\n    function translateMatrix(matrix, args) {\n      matrix[4] = args[0];\n      if (args.length === 2) {\n        matrix[5] = args[1];\n      }\n    }\n\n    // identity matrix\n    var iMatrix = fabric.iMatrix,\n\n        // == begin transform regexp\n        number = fabric.reNum,\n\n        commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)',\n\n        skewX = '(?:(skewX)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\n        skewY = '(?:(skewY)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*\\\\))',\n\n        rotate = '(?:(rotate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + ')' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        scale = '(?:(scale)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        translate = '(?:(translate)\\\\s*\\\\(\\\\s*(' + number + ')(?:' +\n                    commaWsp + '(' + number + '))?\\\\s*\\\\))',\n\n        matrix = '(?:(matrix)\\\\s*\\\\(\\\\s*' +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' + commaWsp +\n                  '(' + number + ')' +\n                  '\\\\s*\\\\))',\n\n        transform = '(?:' +\n                    matrix + '|' +\n                    translate + '|' +\n                    scale + '|' +\n                    rotate + '|' +\n                    skewX + '|' +\n                    skewY +\n                    ')',\n\n        transforms = '(?:' + transform + '(?:' + commaWsp + '*' + transform + ')*' + ')',\n\n        transformList = '^\\\\s*(?:' + transforms + '?)\\\\s*$',\n\n        // http://www.w3.org/TR/SVG/coords.html#TransformAttribute\n        reTransformList = new RegExp(transformList),\n        // == end transform regexp\n\n        reTransform = new RegExp(transform, 'g');\n\n    return function(attributeValue) {\n\n      // start with identity matrix\n      var matrix = iMatrix.concat(),\n          matrices = [];\n\n      // return if no argument was given or\n      // an argument does not match transform attribute regexp\n      if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {\n        return matrix;\n      }\n\n      attributeValue.replace(reTransform, function(match) {\n\n        var m = new RegExp(transform).exec(match).filter(function (match) {\n              // match !== '' && match != null\n              return (!!match);\n            }),\n            operation = m[1],\n            args = m.slice(2).map(parseFloat);\n\n        switch (operation) {\n          case 'translate':\n            translateMatrix(matrix, args);\n            break;\n          case 'rotate':\n            args[0] = fabric.util.degreesToRadians(args[0]);\n            rotateMatrix(matrix, args);\n            break;\n          case 'scale':\n            scaleMatrix(matrix, args);\n            break;\n          case 'skewX':\n            skewMatrix(matrix, args, 2);\n            break;\n          case 'skewY':\n            skewMatrix(matrix, args, 1);\n            break;\n          case 'matrix':\n            matrix = args;\n            break;\n        }\n\n        // snapshot current matrix into matrices array\n        matrices.push(matrix.concat());\n        // reset\n        matrix = iMatrix.concat();\n      });\n\n      var combinedMatrix = matrices[0];\n      while (matrices.length > 1) {\n        matrices.shift();\n        combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);\n      }\n      return combinedMatrix;\n    };\n  })();\n\n  /**\n   * @private\n   */\n  function parseStyleString(style, oStyle) {\n    var attr, value;\n    style.replace(/;\\s*$/, '').split(';').forEach(function (chunk) {\n      var pair = chunk.split(':');\n\n      attr = pair[0].trim().toLowerCase();\n      value =  pair[1].trim();\n\n      oStyle[attr] = value;\n    });\n  }\n\n  /**\n   * @private\n   */\n  function parseStyleObject(style, oStyle) {\n    var attr, value;\n    for (var prop in style) {\n      if (typeof style[prop] === 'undefined') {\n        continue;\n      }\n\n      attr = prop.toLowerCase();\n      value = style[prop];\n\n      oStyle[attr] = value;\n    }\n  }\n\n  /**\n   * @private\n   */\n  function getGlobalStylesForElement(element, svgUid) {\n    var styles = { };\n    for (var rule in fabric.cssRules[svgUid]) {\n      if (elementMatchesRule(element, rule.split(' '))) {\n        for (var property in fabric.cssRules[svgUid][rule]) {\n          styles[property] = fabric.cssRules[svgUid][rule][property];\n        }\n      }\n    }\n    return styles;\n  }\n\n  /**\n   * @private\n   */\n  function elementMatchesRule(element, selectors) {\n    var firstMatching, parentMatching = true;\n    //start from rightmost selector.\n    firstMatching = selectorMatches(element, selectors.pop());\n    if (firstMatching && selectors.length) {\n      parentMatching = doesSomeParentMatch(element, selectors);\n    }\n    return firstMatching && parentMatching && (selectors.length === 0);\n  }\n\n  function doesSomeParentMatch(element, selectors) {\n    var selector, parentMatching = true;\n    while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {\n      if (parentMatching) {\n        selector = selectors.pop();\n      }\n      element = element.parentNode;\n      parentMatching = selectorMatches(element, selector);\n    }\n    return selectors.length === 0;\n  }\n\n  /**\n   * @private\n   */\n  function selectorMatches(element, selector) {\n    var nodeName = element.nodeName,\n        classNames = element.getAttribute('class'),\n        id = element.getAttribute('id'), matcher, i;\n    // i check if a selector matches slicing away part from it.\n    // if i get empty string i should match\n    matcher = new RegExp('^' + nodeName, 'i');\n    selector = selector.replace(matcher, '');\n    if (id && selector.length) {\n      matcher = new RegExp('#' + id + '(?![a-zA-Z\\\\-]+)', 'i');\n      selector = selector.replace(matcher, '');\n    }\n    if (classNames && selector.length) {\n      classNames = classNames.split(' ');\n      for (i = classNames.length; i--;) {\n        matcher = new RegExp('\\\\.' + classNames[i] + '(?![a-zA-Z\\\\-]+)', 'i');\n        selector = selector.replace(matcher, '');\n      }\n    }\n    return selector.length === 0;\n  }\n\n  /**\n   * @private\n   * to support IE8 missing getElementById on SVGdocument and on node xmlDOM\n   */\n  function elementById(doc, id) {\n    var el;\n    doc.getElementById && (el = doc.getElementById(id));\n    if (el) {\n      return el;\n    }\n    var node, i, len, nodelist = doc.getElementsByTagName('*');\n    for (i = 0, len = nodelist.length; i < len; i++) {\n      node = nodelist[i];\n      if (id === node.getAttribute('id')) {\n        return node;\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  function parseUseDirectives(doc) {\n    var nodelist = _getMultipleNodes(doc, ['use', 'svg:use']), i = 0;\n    while (nodelist.length && i < nodelist.length) {\n      var el = nodelist[i],\n          xlink = (el.getAttribute('xlink:href') || el.getAttribute('href')).substr(1),\n          x = el.getAttribute('x') || 0,\n          y = el.getAttribute('y') || 0,\n          el2 = elementById(doc, xlink).cloneNode(true),\n          currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',\n          parentNode, oldLength = nodelist.length, attr, j, attrs, len;\n\n      applyViewboxTransform(el2);\n      if (/^svg$/i.test(el2.nodeName)) {\n        var el3 = el2.ownerDocument.createElement('g');\n        for (j = 0, attrs = el2.attributes, len = attrs.length; j < len; j++) {\n          attr = attrs.item(j);\n          el3.setAttribute(attr.nodeName, attr.nodeValue);\n        }\n        // el2.firstChild != null\n        while (el2.firstChild) {\n          el3.appendChild(el2.firstChild);\n        }\n        el2 = el3;\n      }\n\n      for (j = 0, attrs = el.attributes, len = attrs.length; j < len; j++) {\n        attr = attrs.item(j);\n        if (attr.nodeName === 'x' || attr.nodeName === 'y' ||\n          attr.nodeName === 'xlink:href' || attr.nodeName === 'href') {\n          continue;\n        }\n\n        if (attr.nodeName === 'transform') {\n          currentTrans = attr.nodeValue + ' ' + currentTrans;\n        }\n        else {\n          el2.setAttribute(attr.nodeName, attr.nodeValue);\n        }\n      }\n\n      el2.setAttribute('transform', currentTrans);\n      el2.setAttribute('instantiated_by_use', '1');\n      el2.removeAttribute('id');\n      parentNode = el.parentNode;\n      parentNode.replaceChild(el2, el);\n      // some browsers do not shorten nodelist after replaceChild (IE8)\n      if (nodelist.length === oldLength) {\n        i++;\n      }\n    }\n  }\n\n  // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n  // matches, e.g.: +14.56e-12, etc.\n  var reViewBoxAttrValue = new RegExp(\n    '^' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*,?' +\n    '\\\\s*(' + fabric.reNum + '+)\\\\s*' +\n    '$'\n  );\n\n  /**\n   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n   */\n  function applyViewboxTransform(element) {\n\n    var viewBoxAttr = element.getAttribute('viewBox'),\n        scaleX = 1,\n        scaleY = 1,\n        minX = 0,\n        minY = 0,\n        viewBoxWidth, viewBoxHeight, matrix, el,\n        widthAttr = element.getAttribute('width'),\n        heightAttr = element.getAttribute('height'),\n        x = element.getAttribute('x') || 0,\n        y = element.getAttribute('y') || 0,\n        preserveAspectRatio = element.getAttribute('preserveAspectRatio') || '',\n        missingViewBox = (!viewBoxAttr || !fabric.svgViewBoxElementsRegEx.test(element.nodeName)\n                           || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),\n        missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),\n        toBeParsed = missingViewBox && missingDimAttr,\n        parsedDim = { }, translateMatrix = '', widthDiff = 0, heightDiff = 0;\n\n    parsedDim.width = 0;\n    parsedDim.height = 0;\n    parsedDim.toBeParsed = toBeParsed;\n\n    if (toBeParsed) {\n      return parsedDim;\n    }\n\n    if (missingViewBox) {\n      parsedDim.width = parseUnit(widthAttr);\n      parsedDim.height = parseUnit(heightAttr);\n      return parsedDim;\n    }\n\n    minX = -parseFloat(viewBoxAttr[1]);\n    minY = -parseFloat(viewBoxAttr[2]);\n    viewBoxWidth = parseFloat(viewBoxAttr[3]);\n    viewBoxHeight = parseFloat(viewBoxAttr[4]);\n\n    if (!missingDimAttr) {\n      parsedDim.width = parseUnit(widthAttr);\n      parsedDim.height = parseUnit(heightAttr);\n      scaleX = parsedDim.width / viewBoxWidth;\n      scaleY = parsedDim.height / viewBoxHeight;\n    }\n    else {\n      parsedDim.width = viewBoxWidth;\n      parsedDim.height = viewBoxHeight;\n    }\n\n    // default is to preserve aspect ratio\n    preserveAspectRatio = fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);\n    if (preserveAspectRatio.alignX !== 'none') {\n      //translate all container for the effect of Mid, Min, Max\n      if (preserveAspectRatio.meetOrSlice === 'meet') {\n        scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);\n        // calculate additional translation to move the viewbox\n      }\n      if (preserveAspectRatio.meetOrSlice === 'slice') {\n        scaleY = scaleX = (scaleX > scaleY ? scaleX : scaleY);\n        // calculate additional translation to move the viewbox\n      }\n      widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n      heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n      if (preserveAspectRatio.alignX === 'Mid') {\n        widthDiff /= 2;\n      }\n      if (preserveAspectRatio.alignY === 'Mid') {\n        heightDiff /= 2;\n      }\n      if (preserveAspectRatio.alignX === 'Min') {\n        widthDiff = 0;\n      }\n      if (preserveAspectRatio.alignY === 'Min') {\n        heightDiff = 0;\n      }\n    }\n\n    if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {\n      return parsedDim;\n    }\n\n    if (x || y) {\n      translateMatrix = ' translate(' + parseUnit(x) + ' ' + parseUnit(y) + ') ';\n    }\n\n    matrix = translateMatrix + ' matrix(' + scaleX +\n                  ' 0' +\n                  ' 0 ' +\n                  scaleY + ' ' +\n                  (minX * scaleX + widthDiff) + ' ' +\n                  (minY * scaleY + heightDiff) + ') ';\n    parsedDim.viewboxTransform = fabric.parseTransformAttribute(matrix);\n    if (element.nodeName === 'svg') {\n      el = element.ownerDocument.createElement('g');\n      // element.firstChild != null\n      while (element.firstChild) {\n        el.appendChild(element.firstChild);\n      }\n      element.appendChild(el);\n    }\n    else {\n      el = element;\n      matrix = el.getAttribute('transform') + matrix;\n    }\n    el.setAttribute('transform', matrix);\n    return parsedDim;\n  }\n\n  function hasAncestorWithNodeName(element, nodeName) {\n    while (element && (element = element.parentNode)) {\n      if (element.nodeName && nodeName.test(element.nodeName.replace('svg:', ''))\n        && !element.getAttribute('instantiated_by_use')) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n   * @static\n   * @function\n   * @memberOf fabric\n   * @param {SVGDocument} doc SVG document to parse\n   * @param {Function} callback Callback to call when parsing is finished;\n   * It's being passed an array of elements (parsed from a document).\n   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n   * @param {Object} [parsingOptions] options for parsing document\n   * @param {String} [parsingOptions.crossOrigin] crossOrigin settings\n   */\n  fabric.parseSVGDocument = function(doc, callback, reviver, parsingOptions) {\n    if (!doc) {\n      return;\n    }\n\n    parseUseDirectives(doc);\n\n    var svgUid =  fabric.Object.__uid++, i, len,\n        options = applyViewboxTransform(doc),\n        descendants = fabric.util.toArray(doc.getElementsByTagName('*'));\n    options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;\n    options.svgUid = svgUid;\n\n    if (descendants.length === 0 && fabric.isLikelyNode) {\n      // we're likely in node, where \"o3-xml\" library fails to gEBTN(\"*\")\n      // https://github.com/ajaxorg/node-o3-xml/issues/21\n      descendants = doc.selectNodes('//*[name(.)!=\"svg\"]');\n      var arr = [];\n      for (i = 0, len = descendants.length; i < len; i++) {\n        arr[i] = descendants[i];\n      }\n      descendants = arr;\n    }\n\n    var elements = descendants.filter(function(el) {\n      applyViewboxTransform(el);\n      return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', '')) &&\n            !hasAncestorWithNodeName(el, fabric.svgInvalidAncestorsRegEx); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n    });\n\n    if (!elements || (elements && !elements.length)) {\n      callback && callback([], {});\n      return;\n    }\n    var clipPaths = { };\n    descendants.filter(function(el) {\n      return el.nodeName.replace('svg:', '') === 'clipPath';\n    }).forEach(function(el) {\n      var id = el.getAttribute('id');\n      clipPaths[id] = fabric.util.toArray(el.getElementsByTagName('*')).filter(function(el) {\n        return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', ''));\n      });\n    });\n    fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);\n    fabric.cssRules[svgUid] = fabric.getCSSRules(doc);\n    fabric.clipPaths[svgUid] = clipPaths;\n    // Precedence of rules:   style > class > attribute\n    fabric.parseElements(elements, function(instances, elements) {\n      if (callback) {\n        callback(instances, options, elements, descendants);\n        delete fabric.gradientDefs[svgUid];\n        delete fabric.cssRules[svgUid];\n        delete fabric.clipPaths[svgUid];\n      }\n    }, clone(options), reviver, parsingOptions);\n  };\n\n  function recursivelyParseGradientsXlink(doc, gradient) {\n    var gradientsAttrs = ['gradientTransform', 'x1', 'x2', 'y1', 'y2', 'gradientUnits', 'cx', 'cy', 'r', 'fx', 'fy'],\n        xlinkAttr = 'xlink:href',\n        xLink = gradient.getAttribute(xlinkAttr).substr(1),\n        referencedGradient = elementById(doc, xLink);\n    if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\n      recursivelyParseGradientsXlink(doc, referencedGradient);\n    }\n    gradientsAttrs.forEach(function(attr) {\n      if (!gradient.hasAttribute(attr)) {\n        gradient.setAttribute(attr, referencedGradient.getAttribute(attr));\n      }\n    });\n    if (!gradient.children.length) {\n      var referenceClone = referencedGradient.cloneNode(true);\n      while (referenceClone.firstChild) {\n        gradient.appendChild(referenceClone.firstChild);\n      }\n    }\n    gradient.removeAttribute(xlinkAttr);\n  }\n\n  var reFontDeclaration = new RegExp(\n    '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n      fabric.reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' + fabric.reNum + '))?\\\\s+(.*)');\n\n  extend(fabric, {\n    /**\n     * Parses a short font declaration, building adding its properties to a style object\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {String} value font declaration\n     * @param {Object} oStyle definition\n     */\n    parseFontDeclaration: function(value, oStyle) {\n      var match = value.match(reFontDeclaration);\n\n      if (!match) {\n        return;\n      }\n      var fontStyle = match[1],\n          // font variant is not used\n          // fontVariant = match[2],\n          fontWeight = match[3],\n          fontSize = match[4],\n          lineHeight = match[5],\n          fontFamily = match[6];\n\n      if (fontStyle) {\n        oStyle.fontStyle = fontStyle;\n      }\n      if (fontWeight) {\n        oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);\n      }\n      if (fontSize) {\n        oStyle.fontSize = parseUnit(fontSize);\n      }\n      if (fontFamily) {\n        oStyle.fontFamily = fontFamily;\n      }\n      if (lineHeight) {\n        oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n      }\n    },\n\n    /**\n     * Parses an SVG document, returning all of the gradient declarations found in it\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {SVGDocument} doc SVG document to parse\n     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n     */\n    getGradientDefs: function(doc) {\n      var tagArray = [\n            'linearGradient',\n            'radialGradient',\n            'svg:linearGradient',\n            'svg:radialGradient'],\n          elList = _getMultipleNodes(doc, tagArray),\n          el, j = 0, gradientDefs = { };\n      j = elList.length;\n      while (j--) {\n        el = elList[j];\n        if (el.getAttribute('xlink:href')) {\n          recursivelyParseGradientsXlink(doc, el);\n        }\n        gradientDefs[el.getAttribute('id')] = el;\n      }\n      return gradientDefs;\n    },\n\n    /**\n     * Returns an object of attributes' name/value, given element and an array of attribute names;\n     * Parses parent \"g\" nodes recursively upwards.\n     * @static\n     * @memberOf fabric\n     * @param {DOMElement} element Element to parse\n     * @param {Array} attributes Array of attributes to parse\n     * @return {Object} object containing parsed attributes' names/values\n     */\n    parseAttributes: function(element, attributes, svgUid) {\n\n      if (!element) {\n        return;\n      }\n\n      var value,\n          parentAttributes = { },\n          fontSize, parentFontSize;\n\n      if (typeof svgUid === 'undefined') {\n        svgUid = element.getAttribute('svgUid');\n      }\n      // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n      if (element.parentNode && fabric.svgValidParentsRegEx.test(element.parentNode.nodeName)) {\n        parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);\n      }\n\n      var ownAttributes = attributes.reduce(function(memo, attr) {\n        value = element.getAttribute(attr);\n        if (value) { // eslint-disable-line\n          memo[attr] = value;\n        }\n        return memo;\n      }, { });\n      // add values parsed from style, which take precedence over attributes\n      // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n      ownAttributes = extend(ownAttributes,\n        extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element)));\n\n      fontSize = parentFontSize = parentAttributes.fontSize || fabric.Text.DEFAULT_SVG_FONT_SIZE;\n      if (ownAttributes['font-size']) {\n        // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n        ownAttributes['font-size'] = fontSize = parseUnit(ownAttributes['font-size'], parentFontSize);\n      }\n\n      var normalizedAttr, normalizedValue, normalizedStyle = {};\n      for (var attr in ownAttributes) {\n        normalizedAttr = normalizeAttr(attr);\n        normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize);\n        normalizedStyle[normalizedAttr] = normalizedValue;\n      }\n      if (normalizedStyle && normalizedStyle.font) {\n        fabric.parseFontDeclaration(normalizedStyle.font, normalizedStyle);\n      }\n      var mergedAttrs = extend(parentAttributes, normalizedStyle);\n      return fabric.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);\n    },\n\n    /**\n     * Transforms an array of svg elements to corresponding fabric.* instances\n     * @static\n     * @memberOf fabric\n     * @param {Array} elements Array of elements to parse\n     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)\n     * @param {Object} [options] Options object\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     */\n    parseElements: function(elements, callback, options, reviver, parsingOptions) {\n      new fabric.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();\n    },\n\n    /**\n     * Parses \"style\" attribute, retuning an object with values\n     * @static\n     * @memberOf fabric\n     * @param {SVGElement} element Element to parse\n     * @return {Object} Objects with values parsed from style attribute of an element\n     */\n    parseStyleAttribute: function(element) {\n      var oStyle = { },\n          style = element.getAttribute('style');\n\n      if (!style) {\n        return oStyle;\n      }\n\n      if (typeof style === 'string') {\n        parseStyleString(style, oStyle);\n      }\n      else {\n        parseStyleObject(style, oStyle);\n      }\n\n      return oStyle;\n    },\n\n    /**\n     * Parses \"points\" attribute, returning an array of values\n     * @static\n     * @memberOf fabric\n     * @param {String} points points attribute string\n     * @return {Array} array of points\n     */\n    parsePointsAttribute: function(points) {\n\n      // points attribute is required and must not be empty\n      if (!points) {\n        return null;\n      }\n\n      // replace commas with whitespace and remove bookending whitespace\n      points = points.replace(/,/g, ' ').trim();\n\n      points = points.split(/\\s+/);\n      var parsedPoints = [], i, len;\n\n      for (i = 0, len = points.length; i < len; i += 2) {\n        parsedPoints.push({\n          x: parseFloat(points[i]),\n          y: parseFloat(points[i + 1])\n        });\n      }\n\n      // odd number of points is an error\n      // if (parsedPoints.length % 2 !== 0) {\n      //   return null;\n      // }\n\n      return parsedPoints;\n    },\n\n    /**\n     * Returns CSS rules for a given SVG document\n     * @static\n     * @function\n     * @memberOf fabric\n     * @param {SVGDocument} doc SVG document to parse\n     * @return {Object} CSS rules of this document\n     */\n    getCSSRules: function(doc) {\n      var styles = doc.getElementsByTagName('style'), i, len,\n          allRules = { }, rules;\n\n      // very crude parsing of style contents\n      for (i = 0, len = styles.length; i < len; i++) {\n        // IE9 doesn't support textContent, but provides text instead.\n        var styleContents = styles[i].textContent || styles[i].text;\n\n        // remove comments\n        styleContents = styleContents.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n        if (styleContents.trim() === '') {\n          continue;\n        }\n        rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n        rules = rules.map(function(rule) { return rule.trim(); });\n        // eslint-disable-next-line no-loop-func\n        rules.forEach(function(rule) {\n\n          var match = rule.match(/([\\s\\S]*?)\\s*\\{([^}]*)\\}/),\n              ruleObj = { }, declaration = match[2].trim(),\n              propertyValuePairs = declaration.replace(/;$/, '').split(/\\s*;\\s*/);\n\n          for (i = 0, len = propertyValuePairs.length; i < len; i++) {\n            var pair = propertyValuePairs[i].split(/\\s*:\\s*/),\n                property = pair[0],\n                value = pair[1];\n            ruleObj[property] = value;\n          }\n          rule = match[1];\n          rule.split(',').forEach(function(_rule) {\n            _rule = _rule.replace(/^svg/i, '').trim();\n            if (_rule === '') {\n              return;\n            }\n            if (allRules[_rule]) {\n              fabric.util.object.extend(allRules[_rule], ruleObj);\n            }\n            else {\n              allRules[_rule] = fabric.util.object.clone(ruleObj);\n            }\n          });\n        });\n      }\n      return allRules;\n    },\n\n    /**\n     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n     * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n     * @memberOf fabric\n     * @param {String} url\n     * @param {Function} callback\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     * @param {Object} [options] Object containing options for parsing\n     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\n     */\n    loadSVGFromURL: function(url, callback, reviver, options) {\n\n      url = url.replace(/^\\n\\s*/, '').trim();\n      new fabric.util.request(url, {\n        method: 'get',\n        onComplete: onComplete\n      });\n\n      function onComplete(r) {\n\n        var xml = r.responseXML;\n        if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {\n          xml = new ActiveXObject('Microsoft.XMLDOM');\n          xml.async = 'false';\n          //IE chokes on DOCTYPE\n          xml.loadXML(r.responseText.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n        }\n        if (!xml || !xml.documentElement) {\n          callback && callback(null);\n          return false;\n        }\n\n        fabric.parseSVGDocument(xml.documentElement, function (results, _options, elements, allElements) {\n          callback && callback(results, _options, elements, allElements);\n        }, reviver, options);\n      }\n    },\n\n    /**\n     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n     * @memberOf fabric\n     * @param {String} string\n     * @param {Function} callback\n     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.\n     * @param {Object} [options] Object containing options for parsing\n     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources\n     */\n    loadSVGFromString: function(string, callback, reviver, options) {\n      string = string.trim();\n      var doc;\n      if (typeof DOMParser !== 'undefined') {\n        var parser = new DOMParser();\n        if (parser && parser.parseFromString) {\n          doc = parser.parseFromString(string, 'text/xml');\n        }\n      }\n      else if (fabric.window.ActiveXObject) {\n        doc = new ActiveXObject('Microsoft.XMLDOM');\n        doc.async = 'false';\n        // IE chokes on DOCTYPE\n        doc.loadXML(string.replace(/<!DOCTYPE[\\s\\S]*?(\\[[\\s\\S]*\\])*?>/i, ''));\n      }\n\n      fabric.parseSVGDocument(doc.documentElement, function (results, _options, elements, allElements) {\n        callback(results, _options, elements, allElements);\n      }, reviver, options);\n    }\n  });\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\nfabric.ElementsParser = function(elements, callback, options, reviver, parsingOptions) {\n  this.elements = elements;\n  this.callback = callback;\n  this.options = options;\n  this.reviver = reviver;\n  this.svgUid = (options && options.svgUid) || 0;\n  this.parsingOptions = parsingOptions;\n  this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n};\n\n(function(proto) {\n  proto.parse = function() {\n    this.instances = new Array(this.elements.length);\n    this.numElements = this.elements.length;\n    this.createObjects();\n  };\n\n  proto.createObjects = function() {\n    var _this = this;\n    this.elements.forEach(function(element, i) {\n      element.setAttribute('svgUid', _this.svgUid);\n      _this.createObject(element, i);\n    });\n  };\n\n  proto.findTag = function(el) {\n    return fabric[fabric.util.string.capitalize(el.tagName.replace('svg:', ''))];\n  };\n\n  proto.createObject = function(el, index) {\n    var klass = this.findTag(el);\n    if (klass && klass.fromElement) {\n      try {\n        klass.fromElement(el, this.createCallback(index, el), this.options);\n      }\n      catch (err) {\n        fabric.log(err);\n      }\n    }\n    else {\n      this.checkIfDone();\n    }\n  };\n\n  proto.createCallback = function(index, el) {\n    var _this = this;\n    return function(obj) {\n      var _options;\n      _this.resolveGradient(obj, 'fill');\n      _this.resolveGradient(obj, 'stroke');\n      if (obj instanceof fabric.Image && obj._originalElement) {\n        _options = obj.parsePreserveAspectRatioAttribute(el);\n      }\n      obj._removeTransformMatrix(_options);\n      _this.resolveClipPath(obj);\n      _this.reviver && _this.reviver(el, obj);\n      _this.instances[index] = obj;\n      _this.checkIfDone();\n    };\n  };\n\n  proto.extractPropertyDefinition = function(obj, property, storage) {\n    var value = obj[property];\n    if (!(/^url\\(/).test(value)) {\n      return;\n    }\n    var id = this.regexUrl.exec(value)[1];\n    this.regexUrl.lastIndex = 0;\n    return fabric[storage][this.svgUid][id];\n  };\n\n  proto.resolveGradient = function(obj, property) {\n    var gradientDef = this.extractPropertyDefinition(obj, property, 'gradientDefs');\n    if (gradientDef) {\n      obj.set(property, fabric.Gradient.fromElement(gradientDef, obj));\n    }\n  };\n\n  proto.createClipPathCallback = function(obj, container) {\n    return function(_newObj) {\n      _newObj._removeTransformMatrix();\n      _newObj.fillRule = _newObj.clipRule;\n      container.push(_newObj);\n    };\n  };\n\n  proto.resolveClipPath = function(obj) {\n    var clipPath = this.extractPropertyDefinition(obj, 'clipPath', 'clipPaths'),\n        element, klass, objTransformInv, container, gTransform, options;\n    if (clipPath) {\n      container = [];\n      objTransformInv = fabric.util.invertTransform(obj.calcTransformMatrix());\n      for (var i = 0; i < clipPath.length; i++) {\n        element = clipPath[i];\n        klass = this.findTag(element);\n        klass.fromElement(\n          element,\n          this.createClipPathCallback(obj, container),\n          this.options\n        );\n      }\n      if (container.length === 1) {\n        clipPath = container[0];\n      }\n      else {\n        clipPath = new fabric.Group(container);\n      }\n      gTransform = fabric.util.multiplyTransformMatrices(\n        objTransformInv,\n        clipPath.calcTransformMatrix()\n      );\n      var options = fabric.util.qrDecompose(gTransform);\n      clipPath.flipX = false;\n      clipPath.flipY = false;\n      clipPath.set('scaleX', options.scaleX);\n      clipPath.set('scaleY', options.scaleY);\n      clipPath.angle = options.angle;\n      clipPath.skewX = options.skewX;\n      clipPath.skewY = 0;\n      clipPath.setPositionByOrigin({ x: options.translateX, y: options.translateY }, 'center', 'center');\n      obj.clipPath = clipPath;\n    }\n  };\n\n  proto.checkIfDone = function() {\n    if (--this.numElements === 0) {\n      this.instances = this.instances.filter(function(el) {\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        return el != null;\n      });\n      this.callback(this.instances, this.elements);\n    }\n  };\n})(fabric.ElementsParser.prototype);\n\n\n(function(global) {\n\n  'use strict';\n\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Point) {\n    fabric.warn('fabric.Point is already defined');\n    return;\n  }\n\n  fabric.Point = Point;\n\n  /**\n   * Point class\n   * @class fabric.Point\n   * @memberOf fabric\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @return {fabric.Point} thisArg\n   */\n  function Point(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  Point.prototype = /** @lends fabric.Point.prototype */ {\n\n    type: 'point',\n\n    constructor: Point,\n\n    /**\n     * Adds another point to this one and returns another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point instance with added values\n     */\n    add: function (that) {\n      return new Point(this.x + that.x, this.y + that.y);\n    },\n\n    /**\n     * Adds another point to this one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    addEquals: function (that) {\n      this.x += that.x;\n      this.y += that.y;\n      return this;\n    },\n\n    /**\n     * Adds value to this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point} new Point with added value\n     */\n    scalarAdd: function (scalar) {\n      return new Point(this.x + scalar, this.y + scalar);\n    },\n\n    /**\n     * Adds value to this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    scalarAddEquals: function (scalar) {\n      this.x += scalar;\n      this.y += scalar;\n      return this;\n    },\n\n    /**\n     * Subtracts another point from this point and returns a new one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point object with subtracted values\n     */\n    subtract: function (that) {\n      return new Point(this.x - that.x, this.y - that.y);\n    },\n\n    /**\n     * Subtracts another point from this point\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    subtractEquals: function (that) {\n      this.x -= that.x;\n      this.y -= that.y;\n      return this;\n    },\n\n    /**\n     * Subtracts value from this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    scalarSubtract: function (scalar) {\n      return new Point(this.x - scalar, this.y - scalar);\n    },\n\n    /**\n     * Subtracts value from this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    scalarSubtractEquals: function (scalar) {\n      this.x -= scalar;\n      this.y -= scalar;\n      return this;\n    },\n\n    /**\n     * Multiplies this point by a value and returns a new one\n     * TODO: rename in scalarMultiply in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    multiply: function (scalar) {\n      return new Point(this.x * scalar, this.y * scalar);\n    },\n\n    /**\n     * Multiplies this point by a value\n     * TODO: rename in scalarMultiplyEquals in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    multiplyEquals: function (scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      return this;\n    },\n\n    /**\n     * Divides this point by a value and returns a new one\n     * TODO: rename in scalarDivide in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    divide: function (scalar) {\n      return new Point(this.x / scalar, this.y / scalar);\n    },\n\n    /**\n     * Divides this point by a value\n     * TODO: rename in scalarDivideEquals in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    divideEquals: function (scalar) {\n      this.x /= scalar;\n      this.y /= scalar;\n      return this;\n    },\n\n    /**\n     * Returns true if this point is equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    eq: function (that) {\n      return (this.x === that.x && this.y === that.y);\n    },\n\n    /**\n     * Returns true if this point is less than another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    lt: function (that) {\n      return (this.x < that.x && this.y < that.y);\n    },\n\n    /**\n     * Returns true if this point is less than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    lte: function (that) {\n      return (this.x <= that.x && this.y <= that.y);\n    },\n\n    /**\n\n     * Returns true if this point is greater another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    gt: function (that) {\n      return (this.x > that.x && this.y > that.y);\n    },\n\n    /**\n     * Returns true if this point is greater than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    gte: function (that) {\n      return (this.x >= that.x && this.y >= that.y);\n    },\n\n    /**\n     * Returns new point which is the result of linear interpolation with this one and another one\n     * @param {fabric.Point} that\n     * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n     * @return {fabric.Point}\n     */\n    lerp: function (that, t) {\n      if (typeof t === 'undefined') {\n        t = 0.5;\n      }\n      t = Math.max(Math.min(1, t), 0);\n      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\n    },\n\n    /**\n     * Returns distance from this point and another one\n     * @param {fabric.Point} that\n     * @return {Number}\n     */\n    distanceFrom: function (that) {\n      var dx = this.x - that.x,\n          dy = this.y - that.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /**\n     * Returns the point between this point and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    midPointFrom: function (that) {\n      return this.lerp(that);\n    },\n\n    /**\n     * Returns a new point which is the min of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    min: function (that) {\n      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n    },\n\n    /**\n     * Returns a new point which is the max of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    max: function (that) {\n      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n    },\n\n    /**\n     * Returns string representation of this point\n     * @return {String}\n     */\n    toString: function () {\n      return this.x + ',' + this.y;\n    },\n\n    /**\n     * Sets x/y of this point\n     * @param {Number} x\n     * @param {Number} y\n     * @chainable\n     */\n    setXY: function (x, y) {\n      this.x = x;\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets x of this point\n     * @param {Number} x\n     * @chainable\n     */\n    setX: function (x) {\n      this.x = x;\n      return this;\n    },\n\n    /**\n     * Sets y of this point\n     * @param {Number} y\n     * @chainable\n     */\n    setY: function (y) {\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets x/y of this point from another point\n     * @param {fabric.Point} that\n     * @chainable\n     */\n    setFromPoint: function (that) {\n      this.x = that.x;\n      this.y = that.y;\n      return this;\n    },\n\n    /**\n     * Swaps x/y of this point and another point\n     * @param {fabric.Point} that\n     */\n    swap: function (that) {\n      var x = this.x,\n          y = this.y;\n      this.x = that.x;\n      this.y = that.y;\n      that.x = x;\n      that.y = y;\n    },\n\n    /**\n     * return a cloned instance of the point\n     * @return {fabric.Point}\n     */\n    clone: function () {\n      return new Point(this.x, this.y);\n    }\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Intersection) {\n    fabric.warn('fabric.Intersection is already defined');\n    return;\n  }\n\n  /**\n   * Intersection class\n   * @class fabric.Intersection\n   * @memberOf fabric\n   * @constructor\n   */\n  function Intersection(status) {\n    this.status = status;\n    this.points = [];\n  }\n\n  fabric.Intersection = Intersection;\n\n  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\n\n    constructor: Intersection,\n\n    /**\n     * Appends a point to intersection\n     * @param {fabric.Point} point\n     * @return {fabric.Intersection} thisArg\n     * @chainable\n     */\n    appendPoint: function (point) {\n      this.points.push(point);\n      return this;\n    },\n\n    /**\n     * Appends points to intersection\n     * @param {Array} points\n     * @return {fabric.Intersection} thisArg\n     * @chainable\n     */\n    appendPoints: function (points) {\n      this.points = this.points.concat(points);\n      return this;\n    }\n  };\n\n  /**\n   * Checks if one line intersects another\n   * TODO: rename in intersectSegmentSegment\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {fabric.Point} b1\n   * @param {fabric.Point} b2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\n    var result,\n        uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\n        ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\n        uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n    if (uB !== 0) {\n      var ua = uaT / uB,\n          ub = ubT / uB;\n      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n        result = new Intersection('Intersection');\n        result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\n      }\n      else {\n        result = new Intersection();\n      }\n    }\n    else {\n      if (uaT === 0 || ubT === 0) {\n        result = new Intersection('Coincident');\n      }\n      else {\n        result = new Intersection('Parallel');\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Checks if line intersects polygon\n   * TODO: rename in intersectSegmentPolygon\n   * fix detection of coincident\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {Array} points\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\n    var result = new Intersection(),\n        length = points.length,\n        b1, b2, inter, i;\n\n    for (i = 0; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n      result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n  /**\n   * Checks if polygon intersects another polygon\n   * @static\n   * @param {Array} points1\n   * @param {Array} points2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\n    var result = new Intersection(),\n        length = points1.length, i;\n\n    for (i = 0; i < length; i++) {\n      var a1 = points1[i],\n          a2 = points1[(i + 1) % length],\n          inter = Intersection.intersectLinePolygon(a1, a2, points2);\n\n      result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @param {Array} points\n   * @param {fabric.Point} r1\n   * @param {fabric.Point} r2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\n    var min = r1.min(r2),\n        max = r1.max(r2),\n        topRight = new fabric.Point(max.x, min.y),\n        bottomLeft = new fabric.Point(min.x, max.y),\n        inter1 = Intersection.intersectLinePolygon(min, topRight, points),\n        inter2 = Intersection.intersectLinePolygon(topRight, max, points),\n        inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\n        inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\n        result = new Intersection();\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Color) {\n    fabric.warn('fabric.Color is already defined.');\n    return;\n  }\n\n  /**\n   * Color class\n   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\n   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\n   *\n   * @class fabric.Color\n   * @param {String} color optional in hex or rgb(a) or hsl format or from known color list\n   * @return {fabric.Color} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\n   */\n  function Color(color) {\n    if (!color) {\n      this.setSource([0, 0, 0, 1]);\n    }\n    else {\n      this._tryParsingColor(color);\n    }\n  }\n\n  fabric.Color = Color;\n\n  fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\n\n    /**\n     * @private\n     * @param {String|Array} color Color value to parse\n     */\n    _tryParsingColor: function(color) {\n      var source;\n\n      if (color in Color.colorNameMap) {\n        color = Color.colorNameMap[color];\n      }\n\n      if (color === 'transparent') {\n        source = [255, 255, 255, 0];\n      }\n\n      if (!source) {\n        source = Color.sourceFromHex(color);\n      }\n      if (!source) {\n        source = Color.sourceFromRgb(color);\n      }\n      if (!source) {\n        source = Color.sourceFromHsl(color);\n      }\n      if (!source) {\n        //if color is not recognize let's make black as canvas does\n        source = [0, 0, 0, 1];\n      }\n      if (source) {\n        this.setSource(source);\n      }\n    },\n\n    /**\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n     * @private\n     * @param {Number} r Red color value\n     * @param {Number} g Green color value\n     * @param {Number} b Blue color value\n     * @return {Array} Hsl color\n     */\n    _rgbToHsl: function(r, g, b) {\n      r /= 255; g /= 255; b /= 255;\n\n      var h, s, l,\n          max = fabric.util.array.max([r, g, b]),\n          min = fabric.util.array.min([r, g, b]);\n\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0; // achromatic\n      }\n      else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n          case g:\n            h = (b - r) / d + 2;\n            break;\n          case b:\n            h = (r - g) / d + 4;\n            break;\n        }\n        h /= 6;\n      }\n\n      return [\n        Math.round(h * 360),\n        Math.round(s * 100),\n        Math.round(l * 100)\n      ];\n    },\n\n    /**\n     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @return {Array}\n     */\n    getSource: function() {\n      return this._source;\n    },\n\n    /**\n     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @param {Array} source\n     */\n    setSource: function(source) {\n      this._source = source;\n    },\n\n    /**\n     * Returns color representation in RGB format\n     * @return {String} ex: rgb(0-255,0-255,0-255)\n     */\n    toRgb: function() {\n      var source = this.getSource();\n      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\n    },\n\n    /**\n     * Returns color representation in RGBA format\n     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n     */\n    toRgba: function() {\n      var source = this.getSource();\n      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\n    },\n\n    /**\n     * Returns color representation in HSL format\n     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n     */\n    toHsl: function() {\n      var source = this.getSource(),\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\n    },\n\n    /**\n     * Returns color representation in HSLA format\n     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n     */\n    toHsla: function() {\n      var source = this.getSource(),\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\n    },\n\n    /**\n     * Returns color representation in HEX format\n     * @return {String} ex: FF5555\n     */\n    toHex: function() {\n      var source = this.getSource(), r, g, b;\n\n      r = source[0].toString(16);\n      r = (r.length === 1) ? ('0' + r) : r;\n\n      g = source[1].toString(16);\n      g = (g.length === 1) ? ('0' + g) : g;\n\n      b = source[2].toString(16);\n      b = (b.length === 1) ? ('0' + b) : b;\n\n      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\n    },\n\n    /**\n     * Returns color representation in HEXA format\n     * @return {String} ex: FF5555CC\n     */\n    toHexa: function() {\n      var source = this.getSource(), a;\n\n      a = Math.round(source[3] * 255);\n      a = a.toString(16);\n      a = (a.length === 1) ? ('0' + a) : a;\n\n      return this.toHex() + a.toUpperCase();\n    },\n\n    /**\n     * Gets value of alpha channel for this color\n     * @return {Number} 0-1\n     */\n    getAlpha: function() {\n      return this.getSource()[3];\n    },\n\n    /**\n     * Sets value of alpha channel for this color\n     * @param {Number} alpha Alpha value 0-1\n     * @return {fabric.Color} thisArg\n     */\n    setAlpha: function(alpha) {\n      var source = this.getSource();\n      source[3] = alpha;\n      this.setSource(source);\n      return this;\n    },\n\n    /**\n     * Transforms color to its grayscale representation\n     * @return {fabric.Color} thisArg\n     */\n    toGrayscale: function() {\n      var source = this.getSource(),\n          average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\n          currentAlpha = source[3];\n      this.setSource([average, average, average, currentAlpha]);\n      return this;\n    },\n\n    /**\n     * Transforms color to its black and white representation\n     * @param {Number} threshold\n     * @return {fabric.Color} thisArg\n     */\n    toBlackWhite: function(threshold) {\n      var source = this.getSource(),\n          average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\n          currentAlpha = source[3];\n\n      threshold = threshold || 127;\n\n      average = (Number(average) < Number(threshold)) ? 0 : 255;\n      this.setSource([average, average, average, currentAlpha]);\n      return this;\n    },\n\n    /**\n     * Overlays color with another color\n     * @param {String|fabric.Color} otherColor\n     * @return {fabric.Color} thisArg\n     */\n    overlayWith: function(otherColor) {\n      if (!(otherColor instanceof Color)) {\n        otherColor = new Color(otherColor);\n      }\n\n      var result = [],\n          alpha = this.getAlpha(),\n          otherAlpha = 0.5,\n          source = this.getSource(),\n          otherSource = otherColor.getSource(), i;\n\n      for (i = 0; i < 3; i++) {\n        result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\n      }\n\n      result[3] = alpha;\n      this.setSource(result);\n      return this;\n    }\n  };\n\n  /**\n   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  // eslint-disable-next-line max-len\n  fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i;\n\n  /**\n   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i;\n\n  /**\n   * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\n\n  /**\n   * Map of the 148 color names with HEX code\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   * @see: https://www.w3.org/TR/css3-color/#svg-color\n   */\n  fabric.Color.colorNameMap = {\n    aliceblue:            '#F0F8FF',\n    antiquewhite:         '#FAEBD7',\n    aqua:                 '#00FFFF',\n    aquamarine:           '#7FFFD4',\n    azure:                '#F0FFFF',\n    beige:                '#F5F5DC',\n    bisque:               '#FFE4C4',\n    black:                '#000000',\n    blanchedalmond:       '#FFEBCD',\n    blue:                 '#0000FF',\n    blueviolet:           '#8A2BE2',\n    brown:                '#A52A2A',\n    burlywood:            '#DEB887',\n    cadetblue:            '#5F9EA0',\n    chartreuse:           '#7FFF00',\n    chocolate:            '#D2691E',\n    coral:                '#FF7F50',\n    cornflowerblue:       '#6495ED',\n    cornsilk:             '#FFF8DC',\n    crimson:              '#DC143C',\n    cyan:                 '#00FFFF',\n    darkblue:             '#00008B',\n    darkcyan:             '#008B8B',\n    darkgoldenrod:        '#B8860B',\n    darkgray:             '#A9A9A9',\n    darkgrey:             '#A9A9A9',\n    darkgreen:            '#006400',\n    darkkhaki:            '#BDB76B',\n    darkmagenta:          '#8B008B',\n    darkolivegreen:       '#556B2F',\n    darkorange:           '#FF8C00',\n    darkorchid:           '#9932CC',\n    darkred:              '#8B0000',\n    darksalmon:           '#E9967A',\n    darkseagreen:         '#8FBC8F',\n    darkslateblue:        '#483D8B',\n    darkslategray:        '#2F4F4F',\n    darkslategrey:        '#2F4F4F',\n    darkturquoise:        '#00CED1',\n    darkviolet:           '#9400D3',\n    deeppink:             '#FF1493',\n    deepskyblue:          '#00BFFF',\n    dimgray:              '#696969',\n    dimgrey:              '#696969',\n    dodgerblue:           '#1E90FF',\n    firebrick:            '#B22222',\n    floralwhite:          '#FFFAF0',\n    forestgreen:          '#228B22',\n    fuchsia:              '#FF00FF',\n    gainsboro:            '#DCDCDC',\n    ghostwhite:           '#F8F8FF',\n    gold:                 '#FFD700',\n    goldenrod:            '#DAA520',\n    gray:                 '#808080',\n    grey:                 '#808080',\n    green:                '#008000',\n    greenyellow:          '#ADFF2F',\n    honeydew:             '#F0FFF0',\n    hotpink:              '#FF69B4',\n    indianred:            '#CD5C5C',\n    indigo:               '#4B0082',\n    ivory:                '#FFFFF0',\n    khaki:                '#F0E68C',\n    lavender:             '#E6E6FA',\n    lavenderblush:        '#FFF0F5',\n    lawngreen:            '#7CFC00',\n    lemonchiffon:         '#FFFACD',\n    lightblue:            '#ADD8E6',\n    lightcoral:           '#F08080',\n    lightcyan:            '#E0FFFF',\n    lightgoldenrodyellow: '#FAFAD2',\n    lightgray:            '#D3D3D3',\n    lightgrey:            '#D3D3D3',\n    lightgreen:           '#90EE90',\n    lightpink:            '#FFB6C1',\n    lightsalmon:          '#FFA07A',\n    lightseagreen:        '#20B2AA',\n    lightskyblue:         '#87CEFA',\n    lightslategray:       '#778899',\n    lightslategrey:       '#778899',\n    lightsteelblue:       '#B0C4DE',\n    lightyellow:          '#FFFFE0',\n    lime:                 '#00FF00',\n    limegreen:            '#32CD32',\n    linen:                '#FAF0E6',\n    magenta:              '#FF00FF',\n    maroon:               '#800000',\n    mediumaquamarine:     '#66CDAA',\n    mediumblue:           '#0000CD',\n    mediumorchid:         '#BA55D3',\n    mediumpurple:         '#9370DB',\n    mediumseagreen:       '#3CB371',\n    mediumslateblue:      '#7B68EE',\n    mediumspringgreen:    '#00FA9A',\n    mediumturquoise:      '#48D1CC',\n    mediumvioletred:      '#C71585',\n    midnightblue:         '#191970',\n    mintcream:            '#F5FFFA',\n    mistyrose:            '#FFE4E1',\n    moccasin:             '#FFE4B5',\n    navajowhite:          '#FFDEAD',\n    navy:                 '#000080',\n    oldlace:              '#FDF5E6',\n    olive:                '#808000',\n    olivedrab:            '#6B8E23',\n    orange:               '#FFA500',\n    orangered:            '#FF4500',\n    orchid:               '#DA70D6',\n    palegoldenrod:        '#EEE8AA',\n    palegreen:            '#98FB98',\n    paleturquoise:        '#AFEEEE',\n    palevioletred:        '#DB7093',\n    papayawhip:           '#FFEFD5',\n    peachpuff:            '#FFDAB9',\n    peru:                 '#CD853F',\n    pink:                 '#FFC0CB',\n    plum:                 '#DDA0DD',\n    powderblue:           '#B0E0E6',\n    purple:               '#800080',\n    rebeccapurple:        '#663399',\n    red:                  '#FF0000',\n    rosybrown:            '#BC8F8F',\n    royalblue:            '#4169E1',\n    saddlebrown:          '#8B4513',\n    salmon:               '#FA8072',\n    sandybrown:           '#F4A460',\n    seagreen:             '#2E8B57',\n    seashell:             '#FFF5EE',\n    sienna:               '#A0522D',\n    silver:               '#C0C0C0',\n    skyblue:              '#87CEEB',\n    slateblue:            '#6A5ACD',\n    slategray:            '#708090',\n    slategrey:            '#708090',\n    snow:                 '#FFFAFA',\n    springgreen:          '#00FF7F',\n    steelblue:            '#4682B4',\n    tan:                  '#D2B48C',\n    teal:                 '#008080',\n    thistle:              '#D8BFD8',\n    tomato:               '#FF6347',\n    turquoise:            '#40E0D0',\n    violet:               '#EE82EE',\n    wheat:                '#F5DEB3',\n    white:                '#FFFFFF',\n    whitesmoke:           '#F5F5F5',\n    yellow:               '#FFFF00',\n    yellowgreen:          '#9ACD32'\n  };\n\n  /**\n   * @private\n   * @param {Number} p\n   * @param {Number} q\n   * @param {Number} t\n   * @return {Number}\n   */\n  function hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n    if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n      return q;\n    }\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromRgb = function(color) {\n    return Color.fromSource(Color.sourceFromRgb(color));\n  };\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {Array} source\n   */\n  fabric.Color.sourceFromRgb = function(color) {\n    var match = color.match(Color.reRGBa);\n    if (match) {\n      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\n          g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\n          b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\n\n      return [\n        parseInt(r, 10),\n        parseInt(g, 10),\n        parseInt(b, 10),\n        match[4] ? parseFloat(match[4]) : 1\n      ];\n    }\n  };\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromRgba = Color.fromRgb;\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf fabric.Color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHsl = function(color) {\n    return Color.fromSource(Color.sourceFromHsl(color));\n  };\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {Array} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  fabric.Color.sourceFromHsl = function(color) {\n    var match = color.match(Color.reHSLa);\n    if (!match) {\n      return;\n    }\n\n    var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\n        s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\n        l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\n        r, g, b;\n\n    if (s === 0) {\n      r = g = b = l;\n    }\n    else {\n      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n          p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      match[4] ? parseFloat(match[4]) : 1\n    ];\n  };\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHsla = Color.fromHsl;\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: FF5555\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHex = function(color) {\n    return Color.fromSource(Color.sourceFromHex(color));\n  };\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {Array} source\n   */\n  fabric.Color.sourceFromHex = function(color) {\n    if (color.match(Color.reHex)) {\n      var value = color.slice(color.indexOf('#') + 1),\n          isShortNotation = (value.length === 3 || value.length === 4),\n          isRGBa = (value.length === 8 || value.length === 4),\n          r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\n          g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\n          b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6),\n          a = isRGBa ? (isShortNotation ? (value.charAt(3) + value.charAt(3)) : value.substring(6, 8)) : 'FF';\n\n      return [\n        parseInt(r, 16),\n        parseInt(g, 16),\n        parseInt(b, 16),\n        parseFloat((parseInt(a, 16) / 255).toFixed(2))\n      ];\n    }\n  };\n\n  /**\n   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\n   * @static\n   * @memberOf fabric.Color\n   * @param {Array} source\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromSource = function(source) {\n    var oColor = new Color();\n    oColor.setSource(source);\n    return oColor;\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  /* _FROM_SVG_START_ */\n  function getColorStop(el) {\n    var style = el.getAttribute('style'),\n        offset = el.getAttribute('offset') || 0,\n        color, colorAlpha, opacity, i;\n\n    // convert percents to absolute values\n    offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);\n    offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;\n    if (style) {\n      var keyValuePairs = style.split(/\\s*;\\s*/);\n\n      if (keyValuePairs[keyValuePairs.length - 1] === '') {\n        keyValuePairs.pop();\n      }\n\n      for (i = keyValuePairs.length; i--; ) {\n\n        var split = keyValuePairs[i].split(/\\s*:\\s*/),\n            key = split[0].trim(),\n            value = split[1].trim();\n\n        if (key === 'stop-color') {\n          color = value;\n        }\n        else if (key === 'stop-opacity') {\n          opacity = value;\n        }\n      }\n    }\n\n    if (!color) {\n      color = el.getAttribute('stop-color') || 'rgb(0,0,0)';\n    }\n    if (!opacity) {\n      opacity = el.getAttribute('stop-opacity');\n    }\n\n    color = new fabric.Color(color);\n    colorAlpha = color.getAlpha();\n    opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);\n    opacity *= colorAlpha;\n\n    return {\n      offset: offset,\n      color: color.toRgb(),\n      opacity: opacity\n    };\n  }\n\n  function getLinearCoords(el) {\n    return {\n      x1: el.getAttribute('x1') || 0,\n      y1: el.getAttribute('y1') || 0,\n      x2: el.getAttribute('x2') || '100%',\n      y2: el.getAttribute('y2') || 0\n    };\n  }\n\n  function getRadialCoords(el) {\n    return {\n      x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',\n      y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',\n      r1: 0,\n      x2: el.getAttribute('cx') || '50%',\n      y2: el.getAttribute('cy') || '50%',\n      r2: el.getAttribute('r') || '50%'\n    };\n  }\n  /* _FROM_SVG_END_ */\n\n  var clone = fabric.util.object.clone;\n\n  /**\n   * Gradient class\n   * @class fabric.Gradient\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n   * @see {@link fabric.Gradient#initialize} for constructor definition\n   */\n  fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {\n\n    /**\n     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n     * @type Number\n     * @default 0\n     */\n    offsetX: 0,\n\n    /**\n     * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n     * @type Number\n     * @default 0\n     */\n    offsetY: 0,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object with type, coords, gradientUnits and colorStops\n     * @return {fabric.Gradient} thisArg\n     */\n    initialize: function(options) {\n      options || (options = { });\n\n      var coords = { };\n\n      this.id = fabric.Object.__uid++;\n      this.type = options.type || 'linear';\n\n      coords = {\n        x1: options.coords.x1 || 0,\n        y1: options.coords.y1 || 0,\n        x2: options.coords.x2 || 0,\n        y2: options.coords.y2 || 0\n      };\n\n      if (this.type === 'radial') {\n        coords.r1 = options.coords.r1 || 0;\n        coords.r2 = options.coords.r2 || 0;\n      }\n      this.coords = coords;\n      this.colorStops = options.colorStops.slice();\n      if (options.gradientTransform) {\n        this.gradientTransform = options.gradientTransform;\n      }\n      this.offsetX = options.offsetX || this.offsetX;\n      this.offsetY = options.offsetY || this.offsetY;\n    },\n\n    /**\n     * Adds another colorStop\n     * @param {Object} colorStop Object with offset and color\n     * @return {fabric.Gradient} thisArg\n     */\n    addColorStop: function(colorStops) {\n      for (var position in colorStops) {\n        var color = new fabric.Color(colorStops[position]);\n        this.colorStops.push({\n          offset: parseFloat(position),\n          color: color.toRgb(),\n          opacity: color.getAlpha()\n        });\n      }\n      return this;\n    },\n\n    /**\n     * Returns object representation of a gradient\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object}\n     */\n    toObject: function(propertiesToInclude) {\n      var object = {\n        type: this.type,\n        coords: this.coords,\n        colorStops: this.colorStops,\n        offsetX: this.offsetX,\n        offsetY: this.offsetY,\n        gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform\n      };\n      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n\n      return object;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of an gradient\n     * @param {Object} object Object to create a gradient for\n     * @return {String} SVG representation of an gradient (linear/radial)\n     */\n    toSVG: function(object) {\n      var coords = clone(this.coords, true), i, len,\n          markup, commonAttributes, colorStops = clone(this.colorStops, true),\n          needsSwap = coords.r1 > coords.r2,\n          transform = this.gradientTransform ? this.gradientTransform.concat() : fabric.iMatrix.concat(),\n          offsetX = object.width / 2 - this.offsetX, offsetY = object.height / 2 - this.offsetY;\n      // colorStops must be sorted ascending\n      colorStops.sort(function(a, b) {\n        return a.offset - b.offset;\n      });\n\n      if (object.type === 'path') {\n        offsetX -= object.pathOffset.x;\n        offsetY -= object.pathOffset.y;\n      }\n\n      transform[4] -= offsetX;\n      transform[5] -= offsetY;\n\n      commonAttributes = 'id=\"SVGID_' + this.id +\n                     '\" gradientUnits=\"userSpaceOnUse\"';\n      commonAttributes += ' gradientTransform=\"matrix(' + transform.join(' ') + ')\" ';\n\n      if (this.type === 'linear') {\n        markup = [\n          '<linearGradient ',\n          commonAttributes,\n          ' x1=\"', coords.x1,\n          '\" y1=\"', coords.y1,\n          '\" x2=\"', coords.x2,\n          '\" y2=\"', coords.y2,\n          '\">\\n'\n        ];\n      }\n      else if (this.type === 'radial') {\n        // svg radial gradient has just 1 radius. the biggest.\n        markup = [\n          '<radialGradient ',\n          commonAttributes,\n          ' cx=\"', needsSwap ? coords.x1 : coords.x2,\n          '\" cy=\"', needsSwap ? coords.y1 : coords.y2,\n          '\" r=\"', needsSwap ? coords.r1 : coords.r2,\n          '\" fx=\"', needsSwap ? coords.x2 : coords.x1,\n          '\" fy=\"', needsSwap ? coords.y2 : coords.y1,\n          '\">\\n'\n        ];\n      }\n\n      if (this.type === 'radial') {\n        if (needsSwap) {\n          // svg goes from internal to external radius. if radius are inverted, swap color stops.\n          colorStops = colorStops.concat();\n          colorStops.reverse();\n          for (i = 0, len = colorStops.length; i < len; i++) {\n            colorStops[i].offset = 1 - colorStops[i].offset;\n          }\n        }\n        var minRadius = Math.min(coords.r1, coords.r2);\n        if (minRadius > 0) {\n          // i have to shift all colorStops and add new one in 0.\n          var maxRadius = Math.max(coords.r1, coords.r2),\n              percentageShift = minRadius / maxRadius;\n          for (i = 0, len = colorStops.length; i < len; i++) {\n            colorStops[i].offset += percentageShift * (1 - colorStops[i].offset);\n          }\n        }\n      }\n\n      for (i = 0, len = colorStops.length; i < len; i++) {\n        var colorStop = colorStops[i];\n        markup.push(\n          '<stop ',\n          'offset=\"', (colorStop.offset * 100) + '%',\n          '\" style=\"stop-color:', colorStop.color,\n          (typeof colorStop.opacity !== 'undefined' ? ';stop-opacity: ' + colorStop.opacity : ';'),\n          '\"/>\\n'\n        );\n      }\n\n      markup.push((this.type === 'linear' ? '</linearGradient>\\n' : '</radialGradient>\\n'));\n\n      return markup.join('');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns an instance of CanvasGradient\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {CanvasGradient}\n     */\n    toLive: function(ctx) {\n      var gradient, coords = fabric.util.object.clone(this.coords), i, len;\n\n      if (!this.type) {\n        return;\n      }\n\n      if (this.type === 'linear') {\n        gradient = ctx.createLinearGradient(\n          coords.x1, coords.y1, coords.x2, coords.y2);\n      }\n      else if (this.type === 'radial') {\n        gradient = ctx.createRadialGradient(\n          coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);\n      }\n\n      for (i = 0, len = this.colorStops.length; i < len; i++) {\n        var color = this.colorStops[i].color,\n            opacity = this.colorStops[i].opacity,\n            offset = this.colorStops[i].offset;\n\n        if (typeof opacity !== 'undefined') {\n          color = new fabric.Color(color).setAlpha(opacity).toRgba();\n        }\n        gradient.addColorStop(offset, color);\n      }\n\n      return gradient;\n    }\n  });\n\n  fabric.util.object.extend(fabric.Gradient, {\n\n    /* _FROM_SVG_START_ */\n    /**\n     * Returns {@link fabric.Gradient} instance from an SVG element\n     * @static\n     * @memberOf fabric.Gradient\n     * @param {SVGGradientElement} el SVG gradient element\n     * @param {fabric.Object} instance\n     * @return {fabric.Gradient} Gradient instance\n     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n     */\n    fromElement: function(el, instance) {\n      /**\n       *  @example:\n       *\n       *  <linearGradient id=\"linearGrad1\">\n       *    <stop offset=\"0%\" stop-color=\"white\"/>\n       *    <stop offset=\"100%\" stop-color=\"black\"/>\n       *  </linearGradient>\n       *\n       *  OR\n       *\n       *  <linearGradient id=\"linearGrad2\">\n       *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n       *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n       *  </linearGradient>\n       *\n       *  OR\n       *\n       *  <radialGradient id=\"radialGrad1\">\n       *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n       *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n       *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n       *  </radialGradient>\n       *\n       *  OR\n       *\n       *  <radialGradient id=\"radialGrad2\">\n       *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n       *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n       *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n       *  </radialGradient>\n       *\n       */\n\n      var colorStopEls = el.getElementsByTagName('stop'),\n          type,\n          gradientUnits = el.getAttribute('gradientUnits') || 'objectBoundingBox',\n          gradientTransform = el.getAttribute('gradientTransform'),\n          colorStops = [],\n          coords, ellipseMatrix, i;\n\n      if (el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT') {\n        type = 'linear';\n      }\n      else {\n        type = 'radial';\n      }\n\n      if (type === 'linear') {\n        coords = getLinearCoords(el);\n      }\n      else if (type === 'radial') {\n        coords = getRadialCoords(el);\n      }\n\n      for (i = colorStopEls.length; i--; ) {\n        colorStops.push(getColorStop(colorStopEls[i]));\n      }\n\n      ellipseMatrix = _convertPercentUnitsToValues(instance, coords, gradientUnits);\n\n      var gradient = new fabric.Gradient({\n        type: type,\n        coords: coords,\n        colorStops: colorStops,\n        offsetX: -instance.left,\n        offsetY: -instance.top\n      });\n\n      if (gradientTransform || ellipseMatrix !== '') {\n        gradient.gradientTransform = fabric.parseTransformAttribute((gradientTransform || '') + ellipseMatrix);\n      }\n\n      return gradient;\n    },\n    /* _FROM_SVG_END_ */\n\n    /**\n     * Returns {@link fabric.Gradient} instance from its object representation\n     * @static\n     * @memberOf fabric.Gradient\n     * @param {Object} obj\n     * @param {Object} [options] Options object\n     */\n    forObject: function(obj, options) {\n      options || (options = { });\n      _convertPercentUnitsToValues(obj, options.coords, 'userSpaceOnUse');\n      return new fabric.Gradient(options);\n    }\n  });\n\n  /**\n   * @private\n   */\n  function _convertPercentUnitsToValues(object, options, gradientUnits) {\n    var propValue, addFactor = 0, multFactor = 1, ellipseMatrix = '';\n    for (var prop in options) {\n      if (options[prop] === 'Infinity') {\n        options[prop] = 1;\n      }\n      else if (options[prop] === '-Infinity') {\n        options[prop] = 0;\n      }\n      propValue = parseFloat(options[prop], 10);\n      if (typeof options[prop] === 'string' && /^(\\d+\\.\\d+)%|(\\d+)%$/.test(options[prop])) {\n        multFactor = 0.01;\n      }\n      else {\n        multFactor = 1;\n      }\n      if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n        multFactor *= gradientUnits === 'objectBoundingBox' ? object.width : 1;\n        addFactor = gradientUnits === 'objectBoundingBox' ? object.left || 0 : 0;\n      }\n      else if (prop === 'y1' || prop === 'y2') {\n        multFactor *= gradientUnits === 'objectBoundingBox' ? object.height : 1;\n        addFactor = gradientUnits === 'objectBoundingBox' ? object.top || 0 : 0;\n      }\n      options[prop] = propValue * multFactor + addFactor;\n    }\n    if (object.type === 'ellipse' &&\n        options.r2 !== null &&\n        gradientUnits === 'objectBoundingBox' &&\n        object.rx !== object.ry) {\n\n      var scaleFactor = object.ry / object.rx;\n      ellipseMatrix = ' scale(1, ' + scaleFactor + ')';\n      if (options.y1) {\n        options.y1 /= scaleFactor;\n      }\n      if (options.y2) {\n        options.y2 /= scaleFactor;\n      }\n    }\n    return ellipseMatrix;\n  }\n})();\n\n\n(function() {\n\n  'use strict';\n\n  var toFixed = fabric.util.toFixed;\n\n  /**\n   * Pattern class\n   * @class fabric.Pattern\n   * @see {@link http://fabricjs.com/patterns|Pattern demo}\n   * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}\n   * @see {@link fabric.Pattern#initialize} for constructor definition\n   */\n\n\n  fabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {\n\n    /**\n     * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n     * @type String\n     * @default\n     */\n    repeat: 'repeat',\n\n    /**\n     * Pattern horizontal offset from object's left/top corner\n     * @type Number\n     * @default\n     */\n    offsetX: 0,\n\n    /**\n     * Pattern vertical offset from object's left/top corner\n     * @type Number\n     * @default\n     */\n    offsetY: 0,\n\n    /**\n     * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\n     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n     * @type String\n     * @default\n     */\n    crossOrigin: '',\n\n    /**\n     * transform matrix to change the pattern, imported from svgs.\n     * @type Array\n     * @default\n     */\n    patternTransform: null,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @param {Function} [callback] function to invoke after callback init.\n     * @return {fabric.Pattern} thisArg\n     */\n    initialize: function(options, callback) {\n      options || (options = { });\n\n      this.id = fabric.Object.__uid++;\n      this.setOptions(options);\n      if (!options.source || (options.source && typeof options.source !== 'string')) {\n        callback && callback(this);\n        return;\n      }\n      // function string\n      if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {\n        this.source = new Function(fabric.util.getFunctionBody(options.source));\n        callback && callback(this);\n      }\n      else {\n        // img src string\n        var _this = this;\n        this.source = fabric.util.createImage();\n        fabric.util.loadImage(options.source, function(img) {\n          _this.source = img;\n          callback && callback(_this);\n        }, null, this.crossOrigin);\n      }\n    },\n\n    /**\n     * Returns object representation of a pattern\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of a pattern instance\n     */\n    toObject: function(propertiesToInclude) {\n      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n          source, object;\n\n      // callback\n      if (typeof this.source === 'function') {\n        source = String(this.source);\n      }\n      // <img> element\n      else if (typeof this.source.src === 'string') {\n        source = this.source.src;\n      }\n      // <canvas> element\n      else if (typeof this.source === 'object' && this.source.toDataURL) {\n        source = this.source.toDataURL();\n      }\n\n      object = {\n        type: 'pattern',\n        source: source,\n        repeat: this.repeat,\n        crossOrigin: this.crossOrigin,\n        offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),\n        offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),\n        patternTransform: this.patternTransform ? this.patternTransform.concat() : null\n      };\n      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n\n      return object;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of a pattern\n     * @param {fabric.Object} object\n     * @return {String} SVG representation of a pattern\n     */\n    toSVG: function(object) {\n      var patternSource = typeof this.source === 'function' ? this.source() : this.source,\n          patternWidth = patternSource.width / object.width,\n          patternHeight = patternSource.height / object.height,\n          patternOffsetX = this.offsetX / object.width,\n          patternOffsetY = this.offsetY / object.height,\n          patternImgSrc = '';\n      if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {\n        patternHeight = 1;\n        if (patternOffsetY) {\n          patternHeight += Math.abs(patternOffsetY);\n        }\n      }\n      if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {\n        patternWidth = 1;\n        if (patternOffsetX) {\n          patternWidth += Math.abs(patternOffsetX);\n        }\n\n      }\n      if (patternSource.src) {\n        patternImgSrc = patternSource.src;\n      }\n      else if (patternSource.toDataURL) {\n        patternImgSrc = patternSource.toDataURL();\n      }\n\n      return '<pattern id=\"SVGID_' + this.id +\n                    '\" x=\"' + patternOffsetX +\n                    '\" y=\"' + patternOffsetY +\n                    '\" width=\"' + patternWidth +\n                    '\" height=\"' + patternHeight + '\">\\n' +\n               '<image x=\"0\" y=\"0\"' +\n                      ' width=\"' + patternSource.width +\n                      '\" height=\"' + patternSource.height +\n                      '\" xlink:href=\"' + patternImgSrc +\n               '\"></image>\\n' +\n             '</pattern>\\n';\n    },\n    /* _TO_SVG_END_ */\n\n    setOptions: function(options) {\n      for (var prop in options) {\n        this[prop] = options[prop];\n      }\n    },\n\n    /**\n     * Returns an instance of CanvasPattern\n     * @param {CanvasRenderingContext2D} ctx Context to create pattern\n     * @return {CanvasPattern}\n     */\n    toLive: function(ctx) {\n      var source = typeof this.source === 'function' ? this.source() : this.source;\n\n      // if the image failed to load, return, and allow rest to continue loading\n      if (!source) {\n        return '';\n      }\n\n      // if an image\n      if (typeof source.src !== 'undefined') {\n        if (!source.complete) {\n          return '';\n        }\n        if (source.naturalWidth === 0 || source.naturalHeight === 0) {\n          return '';\n        }\n      }\n      return ctx.createPattern(source, this.repeat);\n    }\n  });\n})();\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      toFixed = fabric.util.toFixed;\n\n  if (fabric.Shadow) {\n    fabric.warn('fabric.Shadow is already defined.');\n    return;\n  }\n\n  /**\n   * Shadow class\n   * @class fabric.Shadow\n   * @see {@link http://fabricjs.com/shadows|Shadow demo}\n   * @see {@link fabric.Shadow#initialize} for constructor definition\n   */\n  fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {\n\n    /**\n     * Shadow color\n     * @type String\n     * @default\n     */\n    color: 'rgb(0,0,0)',\n\n    /**\n     * Shadow blur\n     * @type Number\n     */\n    blur: 0,\n\n    /**\n     * Shadow horizontal offset\n     * @type Number\n     * @default\n     */\n    offsetX: 0,\n\n    /**\n     * Shadow vertical offset\n     * @type Number\n     * @default\n     */\n    offsetY: 0,\n\n    /**\n     * Whether the shadow should affect stroke operations\n     * @type Boolean\n     * @default\n     */\n    affectStroke: false,\n\n    /**\n     * Indicates whether toObject should include default values\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues: true,\n\n    /**\n     * Constructor\n     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n     * @return {fabric.Shadow} thisArg\n     */\n    initialize: function(options) {\n\n      if (typeof options === 'string') {\n        options = this._parseShadow(options);\n      }\n\n      for (var prop in options) {\n        this[prop] = options[prop];\n      }\n\n      this.id = fabric.Object.__uid++;\n    },\n\n    /**\n     * @private\n     * @param {String} shadow Shadow value to parse\n     * @return {Object} Shadow object with color, offsetX, offsetY and blur\n     */\n    _parseShadow: function(shadow) {\n      var shadowStr = shadow.trim(),\n          offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [],\n          color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';\n\n      return {\n        color: color.trim(),\n        offsetX: parseInt(offsetsAndBlur[1], 10) || 0,\n        offsetY: parseInt(offsetsAndBlur[2], 10) || 0,\n        blur: parseInt(offsetsAndBlur[3], 10) || 0\n      };\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n     * @return {String} Returns CSS3 text-shadow declaration\n     */\n    toString: function() {\n      return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns SVG representation of a shadow\n     * @param {fabric.Object} object\n     * @return {String} SVG representation of a shadow\n     */\n    toSVG: function(object) {\n      var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n          offset = fabric.util.rotateVector(\n            { x: this.offsetX, y: this.offsetY },\n            fabric.util.degreesToRadians(-object.angle)),\n          BLUR_BOX = 20, color = new fabric.Color(this.color);\n\n      if (object.width && object.height) {\n        //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n        // we add some extra space to filter box to contain the blur ( 20 )\n        fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\n        fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;\n      }\n      if (object.flipX) {\n        offset.x *= -1;\n      }\n      if (object.flipY) {\n        offset.y *= -1;\n      }\n\n      return (\n        '<filter id=\"SVGID_' + this.id + '\" y=\"-' + fBoxY + '%\" height=\"' + (100 + 2 * fBoxY) + '%\" ' +\n          'x=\"-' + fBoxX + '%\" width=\"' + (100 + 2 * fBoxX) + '%\" ' + '>\\n' +\n          '\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"' +\n            toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '\"></feGaussianBlur>\\n' +\n          '\\t<feOffset dx=\"' + toFixed(offset.x, NUM_FRACTION_DIGITS) +\n          '\" dy=\"' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '\" result=\"oBlur\" ></feOffset>\\n' +\n          '\\t<feFlood flood-color=\"' + color.toRgb() + '\" flood-opacity=\"' + color.getAlpha() + '\"/>\\n' +\n          '\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n' +\n          '\\t<feMerge>\\n' +\n            '\\t\\t<feMergeNode></feMergeNode>\\n' +\n            '\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n' +\n          '\\t</feMerge>\\n' +\n        '</filter>\\n');\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns object representation of a shadow\n     * @return {Object} Object representation of a shadow instance\n     */\n    toObject: function() {\n      if (this.includeDefaultValues) {\n        return {\n          color: this.color,\n          blur: this.blur,\n          offsetX: this.offsetX,\n          offsetY: this.offsetY,\n          affectStroke: this.affectStroke\n        };\n      }\n      var obj = { }, proto = fabric.Shadow.prototype;\n\n      ['color', 'blur', 'offsetX', 'offsetY', 'affectStroke'].forEach(function(prop) {\n        if (this[prop] !== proto[prop]) {\n          obj[prop] = this[prop];\n        }\n      }, this);\n\n      return obj;\n    }\n  });\n\n  /**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * @static\n   * @field\n   * @memberOf fabric.Shadow\n   */\n  // eslint-disable-next-line max-len\n  fabric.Shadow.reOffsetsAndBlur = /(?:\\s|^)(-?\\d+(?:px)?(?:\\s?|$))?(-?\\d+(?:px)?(?:\\s?|$))?(\\d+(?:px)?)?(?:\\s?|$)(?:$|\\s)/;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function () {\n\n  'use strict';\n\n  if (fabric.StaticCanvas) {\n    fabric.warn('fabric.StaticCanvas is already defined.');\n    return;\n  }\n\n  // aliases for faster resolution\n  var extend = fabric.util.object.extend,\n      getElementOffset = fabric.util.getElementOffset,\n      removeFromArray = fabric.util.removeFromArray,\n      toFixed = fabric.util.toFixed,\n      transformPoint = fabric.util.transformPoint,\n      invertTransform = fabric.util.invertTransform,\n      getNodeCanvas = fabric.util.getNodeCanvas,\n      createCanvasElement = fabric.util.createCanvasElement,\n\n      CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\n\n  /**\n   * Static canvas class\n   * @class fabric.StaticCanvas\n   * @mixes fabric.Collection\n   * @mixes fabric.Observable\n   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n   * @see {@link fabric.StaticCanvas#initialize} for constructor definition\n   * @fires before:render\n   * @fires after:render\n   * @fires canvas:cleared\n   * @fires object:added\n   * @fires object:removed\n   */\n  fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(el, options) {\n      options || (options = { });\n      this.renderAndResetBound = this.renderAndReset.bind(this);\n      this.requestRenderAllBound = this.requestRenderAll.bind(this);\n      this._initStatic(el, options);\n    },\n\n    /**\n     * Background color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */\n    backgroundColor: '',\n\n    /**\n     * Background image of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.\n     * <b>Backwards incompatibility note:</b> The \"backgroundImageOpacity\"\n     * and \"backgroundImageStretch\" properties are deprecated since 1.3.9.\n     * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.\n     * since 2.4.0 image caching is active, please when putting an image as background, add to the\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n     * vale. As an alternative you can disable image objectCaching\n     * @type fabric.Image\n     * @default\n     */\n    backgroundImage: null,\n\n    /**\n     * Overlay color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\n     * @since 1.3.9\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */\n    overlayColor: '',\n\n    /**\n     * Overlay image of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.\n     * <b>Backwards incompatibility note:</b> The \"overlayImageLeft\"\n     * and \"overlayImageTop\" properties are deprecated since 1.3.9.\n     * Use {@link fabric.Image#left} and {@link fabric.Image#top}.\n     * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n     * vale. As an alternative you can disable image objectCaching\n     * @type fabric.Image\n     * @default\n     */\n    overlayImage: null,\n\n    /**\n     * Indicates whether toObject/toDatalessObject should include default values\n     * if set to false, takes precedence over the object value.\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues: true,\n\n    /**\n     * Indicates whether objects' state should be saved\n     * @type Boolean\n     * @default\n     */\n    stateful: false,\n\n    /**\n     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},\n     * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.\n     * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n     * since the renders are quequed and executed one per frame.\n     * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n     * Left default to true to do not break documentation and old app, fiddles.\n     * @type Boolean\n     * @default\n     */\n    renderOnAddRemove: true,\n\n    /**\n     * Function that determines clipping of entire canvas area\n     * Being passed context as first argument.\n     * If you are using code minification, ctx argument can be minified/manglied you should use\n     * as a workaround `var ctx = arguments[0];` in the function;\n     * See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}\n     * @deprecated since 2.0.0\n     * @type Function\n     * @default\n     */\n    clipTo: null,\n\n    /**\n     * Indicates whether object controls (borders/controls) are rendered above overlay image\n     * @type Boolean\n     * @default\n     */\n    controlsAboveOverlay: false,\n\n    /**\n     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n     * @type Boolean\n     * @default\n     */\n    allowTouchScrolling: false,\n\n    /**\n     * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n     * @type Boolean\n     * @default\n     */\n    imageSmoothingEnabled: true,\n\n    /**\n     * The transformation (in the format of Canvas transform) which focuses the viewport\n     * @type Array\n     * @default\n     */\n    viewportTransform: fabric.iMatrix.concat(),\n\n    /**\n     * if set to false background image is not affected by viewport transform\n     * @since 1.6.3\n     * @type Boolean\n     * @default\n     */\n    backgroundVpt: true,\n\n    /**\n     * if set to false overlya image is not affected by viewport transform\n     * @since 1.6.3\n     * @type Boolean\n     * @default\n     */\n    overlayVpt: true,\n\n    /**\n     * Callback; invoked right before object is about to be scaled/rotated\n     * @deprecated since 2.3.0\n     * Use before:transform event\n     */\n    onBeforeScaleRotate: function () {\n      /* NOOP */\n    },\n\n    /**\n     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n     * @type Boolean\n     * @default\n     */\n    enableRetinaScaling: true,\n\n    /**\n     * Describe canvas element extension over design\n     * properties are tl,tr,bl,br.\n     * if canvas is not zoomed/panned those points are the four corner of canvas\n     * if canvas is viewportTransformed you those points indicate the extension\n     * of canvas element in plain untrasformed coordinates\n     * The coordinates get updated with @method calcViewportBoundaries.\n     * @memberOf fabric.StaticCanvas.prototype\n     */\n    vptCoords: { },\n\n    /**\n     * Based on vptCoords and object.aCoords, skip rendering of objects that\n     * are not included in current viewport.\n     * May greatly help in applications with crowded canvas and use of zoom/pan\n     * If One of the corner of the bounding box of the object is on the canvas\n     * the objects get rendered.\n     * @memberOf fabric.StaticCanvas.prototype\n     * @type Boolean\n     * @default\n     */\n    skipOffscreen: true,\n\n    /**\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n     * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n     * top left corner of the canvas.\n     * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n     * @type fabric.Object\n     */\n    clipPath: undefined,\n\n    /**\n     * @private\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     */\n    _initStatic: function(el, options) {\n      var cb = this.requestRenderAllBound;\n      this._objects = [];\n      this._createLowerCanvas(el);\n      this._initOptions(options);\n      this._setImageSmoothing();\n      // only initialize retina scaling once\n      if (!this.interactive) {\n        this._initRetinaScaling();\n      }\n\n      if (options.overlayImage) {\n        this.setOverlayImage(options.overlayImage, cb);\n      }\n      if (options.backgroundImage) {\n        this.setBackgroundImage(options.backgroundImage, cb);\n      }\n      if (options.backgroundColor) {\n        this.setBackgroundColor(options.backgroundColor, cb);\n      }\n      if (options.overlayColor) {\n        this.setOverlayColor(options.overlayColor, cb);\n      }\n      this.calcOffset();\n    },\n\n    /**\n     * @private\n     */\n    _isRetinaScaling: function() {\n      return (fabric.devicePixelRatio !== 1 && this.enableRetinaScaling);\n    },\n\n    /**\n     * @private\n     * @return {Number} retinaScaling if applied, otherwise 1;\n     */\n    getRetinaScaling: function() {\n      return this._isRetinaScaling() ? fabric.devicePixelRatio : 1;\n    },\n\n    /**\n     * @private\n     */\n    _initRetinaScaling: function() {\n      if (!this._isRetinaScaling()) {\n        return;\n      }\n      this.lowerCanvasEl.setAttribute('width', this.width * fabric.devicePixelRatio);\n      this.lowerCanvasEl.setAttribute('height', this.height * fabric.devicePixelRatio);\n\n      this.contextContainer.scale(fabric.devicePixelRatio, fabric.devicePixelRatio);\n    },\n\n    /**\n     * Calculates canvas element offset relative to the document\n     * This method is also attached as \"resize\" event handler of window\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    calcOffset: function () {\n      this._offset = getElementOffset(this.lowerCanvasEl);\n      return this;\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\n     * @param {Function} callback callback to invoke when image is loaded and set as an overlay\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\n     * @example <caption>Normal overlayImage with left/top = 0</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage with different properties</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage loaded from cross-origin</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */\n    setOverlayImage: function (image, callback, options) {\n      return this.__setBgOverlayImage('overlayImage', image, callback, options);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}\n     * @example <caption>Normal backgroundImage with left/top = 0</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage with different properties</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage loaded from cross-origin</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */\n    // TODO: fix stretched examples\n    setBackgroundImage: function (image, callback, options) {\n      return this.__setBgOverlayImage('backgroundImage', image, callback, options);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas\n     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to\n     * @param {Function} callback Callback to invoke when foreground color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\n     * @example <caption>Normal overlayColor - color value</caption>\n     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */\n    setOverlayColor: function(overlayColor, callback) {\n      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\n     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\n     * @param {Function} callback Callback to invoke when background color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\n     * @example <caption>Normal backgroundColor - color value</caption>\n     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */\n    setBackgroundColor: function(backgroundColor, callback) {\n      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\n    },\n\n    /**\n     * @private\n     * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}\n     */\n    _setImageSmoothing: function() {\n      var ctx = this.getContext();\n\n      ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled\n        || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;\n      ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\n     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\n     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\n     */\n    __setBgOverlayImage: function(property, image, callback, options) {\n      if (typeof image === 'string') {\n        fabric.util.loadImage(image, function(img) {\n          if (img) {\n            var instance = new fabric.Image(img, options);\n            this[property] = instance;\n            instance.canvas = this;\n          }\n          callback && callback(img);\n        }, this, options && options.crossOrigin);\n      }\n      else {\n        options && image.setOptions(options);\n        this[property] = image;\n        image && (image.canvas = this);\n        callback && callback(image);\n      }\n\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\n     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\n     * @param {(Object|String|null)} color Object with pattern information, color value or null\n     * @param {Function} [callback] Callback is invoked when color is set\n     */\n    __setBgOverlayColor: function(property, color, callback) {\n      this[property] = color;\n      this._initGradient(color, property);\n      this._initPattern(color, property, callback);\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _createCanvasElement: function() {\n      var element = createCanvasElement();\n      if (!element) {\n        throw CANVAS_INIT_ERROR;\n      }\n      if (!element.style) {\n        element.style = { };\n      }\n      if (typeof element.getContext === 'undefined') {\n        throw CANVAS_INIT_ERROR;\n      }\n      return element;\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initOptions: function (options) {\n      var lowerCanvasEl = this.lowerCanvasEl;\n      this._setOptions(options);\n\n      this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;\n      this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;\n\n      if (!this.lowerCanvasEl.style) {\n        return;\n      }\n\n      lowerCanvasEl.width = this.width;\n      lowerCanvasEl.height = this.height;\n\n      lowerCanvasEl.style.width = this.width + 'px';\n      lowerCanvasEl.style.height = this.height + 'px';\n\n      this.viewportTransform = this.viewportTransform.slice();\n    },\n\n    /**\n     * Creates a bottom canvas\n     * @private\n     * @param {HTMLElement} [canvasEl]\n     */\n    _createLowerCanvas: function (canvasEl) {\n      // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n      if (canvasEl && canvasEl.getContext) {\n        this.lowerCanvasEl = canvasEl;\n      }\n      else {\n        this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\n      }\n\n      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\n\n      if (this.interactive) {\n        this._applyCanvasStyle(this.lowerCanvasEl);\n      }\n\n      this.contextContainer = this.lowerCanvasEl.getContext('2d');\n    },\n\n    /**\n     * Returns canvas width (in px)\n     * @return {Number}\n     */\n    getWidth: function () {\n      return this.width;\n    },\n\n    /**\n     * Returns canvas height (in px)\n     * @return {Number}\n     */\n    getHeight: function () {\n      return this.height;\n    },\n\n    /**\n     * Sets width of this canvas instance\n     * @param {Number|String} value                         Value to set width to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setWidth: function (value, options) {\n      return this.setDimensions({ width: value }, options);\n    },\n\n    /**\n     * Sets height of this canvas instance\n     * @param {Number|String} value                         Value to set height to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setHeight: function (value, options) {\n      return this.setDimensions({ height: value }, options);\n    },\n\n    /**\n     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n     * @param {Object}        dimensions                    Object with width/height properties\n     * @param {Number|String} [dimensions.width]            Width of canvas element\n     * @param {Number|String} [dimensions.height]           Height of canvas element\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setDimensions: function (dimensions, options) {\n      var cssValue;\n\n      options = options || {};\n\n      for (var prop in dimensions) {\n        cssValue = dimensions[prop];\n\n        if (!options.cssOnly) {\n          this._setBackstoreDimension(prop, dimensions[prop]);\n          cssValue += 'px';\n          this.hasLostContext = true;\n        }\n\n        if (!options.backstoreOnly) {\n          this._setCssDimension(prop, cssValue);\n        }\n      }\n      if (this._isCurrentlyDrawing) {\n        this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles();\n      }\n      this._initRetinaScaling();\n      this._setImageSmoothing();\n      this.calcOffset();\n\n      if (!options.cssOnly) {\n        this.requestRenderAll();\n      }\n\n      return this;\n    },\n\n    /**\n     * Helper for setting width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {Number} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    _setBackstoreDimension: function (prop, value) {\n      this.lowerCanvasEl[prop] = value;\n\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl[prop] = value;\n      }\n\n      if (this.cacheCanvasEl) {\n        this.cacheCanvasEl[prop] = value;\n      }\n\n      this[prop] = value;\n\n      return this;\n    },\n\n    /**\n     * Helper for setting css width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {String} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    _setCssDimension: function (prop, value) {\n      this.lowerCanvasEl.style[prop] = value;\n\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl.style[prop] = value;\n      }\n\n      if (this.wrapperEl) {\n        this.wrapperEl.style[prop] = value;\n      }\n\n      return this;\n    },\n\n    /**\n     * Returns canvas zoom level\n     * @return {Number}\n     */\n    getZoom: function () {\n      return this.viewportTransform[0];\n    },\n\n    /**\n     * Sets viewport transform of this canvas instance\n     * @param {Array} vpt the transform in the form of context.transform\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setViewportTransform: function (vpt) {\n      var activeObject = this._activeObject, object, ignoreVpt = false, skipAbsolute = true, i, len;\n      this.viewportTransform = vpt;\n      for (i = 0, len = this._objects.length; i < len; i++) {\n        object = this._objects[i];\n        object.group || object.setCoords(ignoreVpt, skipAbsolute);\n      }\n      if (activeObject && activeObject.type === 'activeSelection') {\n        activeObject.setCoords(ignoreVpt, skipAbsolute);\n      }\n      this.calcViewportBoundaries();\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Sets zoom level of this canvas instance, zoom centered around point\n     * @param {fabric.Point} point to zoom with respect to\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    zoomToPoint: function (point, value) {\n      // TODO: just change the scale, preserve other transformations\n      var before = point, vpt = this.viewportTransform.slice(0);\n      point = transformPoint(point, invertTransform(this.viewportTransform));\n      vpt[0] = value;\n      vpt[3] = value;\n      var after = transformPoint(point, vpt);\n      vpt[4] += before.x - after.x;\n      vpt[5] += before.y - after.y;\n      return this.setViewportTransform(vpt);\n    },\n\n    /**\n     * Sets zoom level of this canvas instance\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setZoom: function (value) {\n      this.zoomToPoint(new fabric.Point(0, 0), value);\n      return this;\n    },\n\n    /**\n     * Pan viewport so as to place point at top left corner of canvas\n     * @param {fabric.Point} point to move to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    absolutePan: function (point) {\n      var vpt = this.viewportTransform.slice(0);\n      vpt[4] = -point.x;\n      vpt[5] = -point.y;\n      return this.setViewportTransform(vpt);\n    },\n\n    /**\n     * Pans viewpoint relatively\n     * @param {fabric.Point} point (position vector) to move by\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    relativePan: function (point) {\n      return this.absolutePan(new fabric.Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5]\n      ));\n    },\n\n    /**\n     * Returns &lt;canvas> element corresponding to this instance\n     * @return {HTMLCanvasElement}\n     */\n    getElement: function () {\n      return this.lowerCanvasEl;\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was added\n     */\n    _onObjectAdded: function(obj) {\n      this.stateful && obj.setupState();\n      obj._set('canvas', this);\n      obj.setCoords();\n      this.fire('object:added', { target: obj });\n      obj.fire('added');\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was removed\n     */\n    _onObjectRemoved: function(obj) {\n      this.fire('object:removed', { target: obj });\n      obj.fire('removed');\n      delete obj.canvas;\n    },\n\n    /**\n     * Clears specified context of canvas element\n     * @param {CanvasRenderingContext2D} ctx Context to clear\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clearContext: function(ctx) {\n      ctx.clearRect(0, 0, this.width, this.height);\n      return this;\n    },\n\n    /**\n     * Returns context of canvas where objects are drawn\n     * @return {CanvasRenderingContext2D}\n     */\n    getContext: function () {\n      return this.contextContainer;\n    },\n\n    /**\n     * Clears all contexts (background, main, top) of an instance\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clear: function () {\n      this._objects.length = 0;\n      this.backgroundImage = null;\n      this.overlayImage = null;\n      this.backgroundColor = '';\n      this.overlayColor = '';\n      if (this._hasITextHandlers) {\n        this.off('mouse:up', this._mouseUpITextHandler);\n        this._iTextInstances = null;\n        this._hasITextHandlers = false;\n      }\n      this.clearContext(this.contextContainer);\n      this.fire('canvas:cleared');\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Renders the canvas\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAll: function () {\n      var canvasToDrawOn = this.contextContainer;\n      this.renderCanvas(canvasToDrawOn, this._objects);\n      return this;\n    },\n\n    /**\n     * Function created to be instance bound at initialization\n     * used in requestAnimationFrame rendering\n     * Let the fabricJS call it. If you call it manually you could have more\n     * animationFrame stacking on to of each other\n     * for an imperative rendering, use canvas.renderAll\n     * @private\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAndReset: function() {\n      this.isRendering = 0;\n      this.renderAll();\n    },\n\n    /**\n     * Append a renderAll request to next animation frame.\n     * unless one is already in progress, in that case nothing is done\n     * a boolean flag will avoid appending more.\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    requestRenderAll: function () {\n      if (!this.isRendering) {\n        this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);\n      }\n      return this;\n    },\n\n    /**\n     * Calculate the position of the 4 corner of canvas with current viewportTransform.\n     * helps to determinate when an object is in the current rendering viewport using\n     * object absolute coordinates ( aCoords )\n     * @return {Object} points.tl\n     * @chainable\n     */\n    calcViewportBoundaries: function() {\n      var points = { }, width = this.width, height = this.height,\n          iVpt = invertTransform(this.viewportTransform);\n      points.tl = transformPoint({ x: 0, y: 0 }, iVpt);\n      points.br = transformPoint({ x: width, y: height }, iVpt);\n      points.tr = new fabric.Point(points.br.x, points.tl.y);\n      points.bl = new fabric.Point(points.tl.x, points.br.y);\n      this.vptCoords = points;\n      return points;\n    },\n\n    cancelRequestedRender: function() {\n      if (this.isRendering) {\n        fabric.util.cancelAnimFrame(this.isRendering);\n        this.isRendering = 0;\n      }\n    },\n\n    /**\n     * Renders background, objects, overlay and controls.\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Array} objects to render\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderCanvas: function(ctx, objects) {\n      var v = this.viewportTransform, path = this.clipPath;\n      this.cancelRequestedRender();\n      this.calcViewportBoundaries();\n      this.clearContext(ctx);\n      this.fire('before:render', { ctx: ctx, });\n      if (this.clipTo) {\n        fabric.util.clipContext(this, ctx);\n      }\n      this._renderBackground(ctx);\n\n      ctx.save();\n      //apply viewport transform once for all rendering process\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      this._renderObjects(ctx, objects);\n      ctx.restore();\n      if (!this.controlsAboveOverlay && this.interactive) {\n        this.drawControls(ctx);\n      }\n      if (this.clipTo) {\n        ctx.restore();\n      }\n      if (path) {\n        path.canvas = this;\n        // needed to setup a couple of variables\n        path.shouldCache();\n        path._transformDone = true;\n        path.renderCache({ forClipping: true });\n        this.drawClipPathOnCanvas(ctx);\n      }\n      this._renderOverlay(ctx);\n      if (this.controlsAboveOverlay && this.interactive) {\n        this.drawControls(ctx);\n      }\n      this.fire('after:render', { ctx: ctx, });\n    },\n\n    /**\n     * Paint the cached clipPath on the lowerCanvasEl\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawClipPathOnCanvas: function(ctx) {\n      var v = this.viewportTransform, path = this.clipPath;\n      ctx.save();\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      // DEBUG: uncomment this line, comment the following\n      // ctx.globalAlpha = 0.4;\n      ctx.globalCompositeOperation = 'destination-in';\n      path.transform(ctx);\n      ctx.scale(1 / path.zoomX, 1 / path.zoomY);\n      ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Array} objects to render\n     */\n    _renderObjects: function(ctx, objects) {\n      var i, len;\n      for (i = 0, len = objects.length; i < len; ++i) {\n        objects[i] && objects[i].render(ctx);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {string} property 'background' or 'overlay'\n     */\n    _renderBackgroundOrOverlay: function(ctx, property) {\n      var object = this[property + 'Color'], v;\n      if (object) {\n        ctx.fillStyle = object.toLive\n          ? object.toLive(ctx, this)\n          : object;\n\n        ctx.fillRect(\n          object.offsetX || 0,\n          object.offsetY || 0,\n          this.width,\n          this.height);\n      }\n      object = this[property + 'Image'];\n      if (object) {\n        if (this[property + 'Vpt']) {\n          v = this.viewportTransform;\n          ctx.save();\n          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n        }\n        object.render(ctx);\n        this[property + 'Vpt'] && ctx.restore();\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderBackground: function(ctx) {\n      this._renderBackgroundOrOverlay(ctx, 'background');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderOverlay: function(ctx) {\n      this._renderBackgroundOrOverlay(ctx, 'overlay');\n    },\n\n    /**\n     * Returns coordinates of a center of canvas.\n     * Returned value is an object with top and left properties\n     * @return {Object} object with \"top\" and \"left\" number values\n     */\n    getCenter: function () {\n      return {\n        top: this.height / 2,\n        left: this.width / 2\n      };\n    },\n\n    /**\n     * Centers object horizontally in the canvas\n     * @param {fabric.Object} object Object to center horizontally\n     * @return {fabric.Canvas} thisArg\n     */\n    centerObjectH: function (object) {\n      return this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));\n    },\n\n    /**\n     * Centers object vertically in the canvas\n     * @param {fabric.Object} object Object to center vertically\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    centerObjectV: function (object) {\n      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));\n    },\n\n    /**\n     * Centers object vertically and horizontally in the canvas\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    centerObject: function(object) {\n      var center = this.getCenter();\n\n      return this._centerObject(object, new fabric.Point(center.left, center.top));\n    },\n\n    /**\n     * Centers object vertically and horizontally in the viewport\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    viewportCenterObject: function(object) {\n      var vpCenter = this.getVpCenter();\n\n      return this._centerObject(object, vpCenter);\n    },\n\n    /**\n     * Centers object horizontally in the viewport, object.top is unchanged\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    viewportCenterObjectH: function(object) {\n      var vpCenter = this.getVpCenter();\n      this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));\n      return this;\n    },\n\n    /**\n     * Centers object Vertically in the viewport, object.top is unchanged\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    viewportCenterObjectV: function(object) {\n      var vpCenter = this.getVpCenter();\n\n      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));\n    },\n\n    /**\n     * Calculate the point in canvas that correspond to the center of actual viewport.\n     * @return {fabric.Point} vpCenter, viewport center\n     * @chainable\n     */\n    getVpCenter: function() {\n      var center = this.getCenter(),\n          iVpt = invertTransform(this.viewportTransform);\n      return transformPoint({ x: center.left, y: center.top }, iVpt);\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} object Object to center\n     * @param {fabric.Point} center Center point\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    _centerObject: function(object, center) {\n      object.setPositionByOrigin(center, 'center', 'center');\n      object.setCoords();\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Returs dataless JSON representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {String} json string\n     */\n    toDatalessJSON: function (propertiesToInclude) {\n      return this.toDatalessObject(propertiesToInclude);\n    },\n\n    /**\n     * Returns object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function (propertiesToInclude) {\n      return this._toObjectMethod('toObject', propertiesToInclude);\n    },\n\n    /**\n     * Returns dataless object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function (propertiesToInclude) {\n      return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n    },\n\n    /**\n     * @private\n     */\n    _toObjectMethod: function (methodName, propertiesToInclude) {\n\n      var clipPath = this.clipPath, data = {\n        version: fabric.version,\n        objects: this._toObjects(methodName, propertiesToInclude),\n      };\n      if (clipPath) {\n        data.clipPath = this._toObjectMethod(clipPath, methodName, propertiesToInclude);\n      }\n      extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));\n\n      fabric.util.populateWithProperties(this, data, propertiesToInclude);\n\n      return data;\n    },\n\n    /**\n     * @private\n     */\n    _toObjects: function(methodName, propertiesToInclude) {\n      return this._objects.filter(function(object) {\n        return !object.excludeFromExport;\n      }).map(function(instance) {\n        return this._toObject(instance, methodName, propertiesToInclude);\n      }, this);\n    },\n\n    /**\n     * @private\n     */\n    _toObject: function(instance, methodName, propertiesToInclude) {\n      var originalValue;\n\n      if (!this.includeDefaultValues) {\n        originalValue = instance.includeDefaultValues;\n        instance.includeDefaultValues = false;\n      }\n\n      var object = instance[methodName](propertiesToInclude);\n      if (!this.includeDefaultValues) {\n        instance.includeDefaultValues = originalValue;\n      }\n      return object;\n    },\n\n    /**\n     * @private\n     */\n    __serializeBgOverlay: function(methodName, propertiesToInclude) {\n      var data = { }, bgImage = this.backgroundImage, overlay = this.overlayImage;\n\n      if (this.backgroundColor) {\n        data.background = this.backgroundColor.toObject\n          ? this.backgroundColor.toObject(propertiesToInclude)\n          : this.backgroundColor;\n      }\n\n      if (this.overlayColor) {\n        data.overlay = this.overlayColor.toObject\n          ? this.overlayColor.toObject(propertiesToInclude)\n          : this.overlayColor;\n      }\n      if (bgImage && !bgImage.excludeFromExport) {\n        data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);\n      }\n      if (overlay && !overlay.excludeFromExport) {\n        data.overlayImage = this._toObject(overlay, methodName, propertiesToInclude);\n      }\n\n      return data;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n     * a zoomed canvas will then produce zoomed SVG output.\n     * @type Boolean\n     * @default\n     */\n    svgViewportTransformation: true,\n\n    /**\n     * Returns SVG representation of canvas\n     * @function\n     * @param {Object} [options] Options object for SVG output\n     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n     * @param {Object} [options.viewBox] SVG viewbox object\n     * @param {Number} [options.viewBox.x] x-cooridnate of viewbox\n     * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n     * @param {Number} [options.viewBox.width] Width of viewbox\n     * @param {Number} [options.viewBox.height] Height of viewbox\n     * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n     * @param {String} [options.width] desired width of svg with or without units\n     * @param {String} [options.height] desired height of svg with or without units\n     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n     * @return {String} SVG string\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n     * @example <caption>Normal SVG output</caption>\n     * var svg = canvas.toSVG();\n     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n     * var svg = canvas.toSVG({suppressPreamble: true});\n     * @example <caption>SVG output with viewBox attribute</caption>\n     * var svg = canvas.toSVG({\n     *   viewBox: {\n     *     x: 100,\n     *     y: 100,\n     *     width: 200,\n     *     height: 300\n     *   }\n     * });\n     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n     * @example <caption>Modify SVG output with reviver function</caption>\n     * var svg = canvas.toSVG(null, function(svg) {\n     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n     * });\n     */\n    toSVG: function(options, reviver) {\n      options || (options = { });\n      options.reviver = reviver;\n      var markup = [];\n\n      this._setSVGPreamble(markup, options);\n      this._setSVGHeader(markup, options);\n      if (this.clipPath) {\n        markup.push('<g clip-path=\"url(#' + this.clipPath.clipPathId + ')\" >\\n');\n      }\n      this._setSVGBgOverlayColor(markup, 'backgroundColor');\n      this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n      this._setSVGObjects(markup, reviver);\n      if (this.clipPath) {\n        markup.push('</g>\\n');\n      }\n      this._setSVGBgOverlayColor(markup, 'overlayColor');\n      this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n      markup.push('</svg>');\n\n      return markup.join('');\n    },\n\n    /**\n     * @private\n     */\n    _setSVGPreamble: function(markup, options) {\n      if (options.suppressPreamble) {\n        return;\n      }\n      markup.push(\n        '<?xml version=\"1.0\" encoding=\"', (options.encoding || 'UTF-8'), '\" standalone=\"no\" ?>\\n',\n        '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n        '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n'\n      );\n    },\n\n    /**\n     * @private\n     */\n    _setSVGHeader: function(markup, options) {\n      var width = options.width || this.width,\n          height = options.height || this.height,\n          vpt, viewBox = 'viewBox=\"0 0 ' + this.width + ' ' + this.height + '\" ',\n          NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\n      if (options.viewBox) {\n        viewBox = 'viewBox=\"' +\n                options.viewBox.x + ' ' +\n                options.viewBox.y + ' ' +\n                options.viewBox.width + ' ' +\n                options.viewBox.height + '\" ';\n      }\n      else {\n        if (this.svgViewportTransformation) {\n          vpt = this.viewportTransform;\n          viewBox = 'viewBox=\"' +\n                  toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\n                  toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + ' ' +\n                  toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + ' ' +\n                  toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '\" ';\n        }\n      }\n\n      markup.push(\n        '<svg ',\n        'xmlns=\"http://www.w3.org/2000/svg\" ',\n        'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n        'version=\"1.1\" ',\n        'width=\"', width, '\" ',\n        'height=\"', height, '\" ',\n        viewBox,\n        'xml:space=\"preserve\">\\n',\n        '<desc>Created with Fabric.js ', fabric.version, '</desc>\\n',\n        '<defs>\\n',\n        this.createSVGFontFacesMarkup(),\n        this.createSVGRefElementsMarkup(),\n        this.createSVGClipPathMarkup(options),\n        '</defs>\\n'\n      );\n    },\n\n    createSVGClipPathMarkup: function(options) {\n      var clipPath = this.clipPath;\n      if (clipPath) {\n        clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;\n        return  '<clipPath id=\"' + clipPath.clipPathId + '\" >\\n' +\n          this.clipPath.toClipPathSVG(options.reviver) +\n          '</clipPath>\\n';\n      }\n      return '';\n    },\n\n    /**\n     * Creates markup containing SVG referenced elements like patterns, gradients etc.\n     * @return {String}\n     */\n    createSVGRefElementsMarkup: function() {\n      var _this = this,\n          markup = ['backgroundColor', 'overlayColor'].map(function(prop) {\n            var fill = _this[prop];\n            if (fill && fill.toLive) {\n              return fill.toSVG(_this, false);\n            }\n          });\n      return markup.join('');\n    },\n\n    /**\n     * Creates markup containing SVG font faces,\n     * font URLs for font faces must be collected by developers\n     * and are not extracted from the DOM by fabricjs\n     * @param {Array} objects Array of fabric objects\n     * @return {String}\n     */\n    createSVGFontFacesMarkup: function() {\n      var markup = '', fontList = { }, obj, fontFamily,\n          style, row, rowIndex, _char, charIndex, i, len,\n          fontPaths = fabric.fontPaths, objects = this._objects;\n\n      for (i = 0, len = objects.length; i < len; i++) {\n        obj = objects[i];\n        fontFamily = obj.fontFamily;\n        if (obj.type.indexOf('text') === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {\n          continue;\n        }\n        fontList[fontFamily] = true;\n        if (!obj.styles) {\n          continue;\n        }\n        style = obj.styles;\n        for (rowIndex in style) {\n          row = style[rowIndex];\n          for (charIndex in row) {\n            _char = row[charIndex];\n            fontFamily = _char.fontFamily;\n            if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n              fontList[fontFamily] = true;\n            }\n          }\n        }\n      }\n\n      for (var j in fontList) {\n        markup += [\n          '\\t\\t@font-face {\\n',\n          '\\t\\t\\tfont-family: \\'', j, '\\';\\n',\n          '\\t\\t\\tsrc: url(\\'', fontPaths[j], '\\');\\n',\n          '\\t\\t}\\n'\n        ].join('');\n      }\n\n      if (markup) {\n        markup = [\n          '\\t<style type=\"text/css\">',\n          '<![CDATA[\\n',\n          markup,\n          ']]>',\n          '</style>\\n'\n        ].join('');\n      }\n\n      return markup;\n    },\n\n    /**\n     * @private\n     */\n    _setSVGObjects: function(markup, reviver) {\n      var instance, i, len, objects = this._objects;\n      for (i = 0, len = objects.length; i < len; i++) {\n        instance = objects[i];\n        if (instance.excludeFromExport) {\n          continue;\n        }\n        this._setSVGObject(markup, instance, reviver);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGObject: function(markup, instance, reviver) {\n      markup.push(instance.toSVG(reviver));\n    },\n\n    /**\n     * @private\n     */\n    _setSVGBgOverlayImage: function(markup, property, reviver) {\n      if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {\n        markup.push(this[property].toSVG(reviver));\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGBgOverlayColor: function(markup, property) {\n      var filler = this[property], vpt = this.viewportTransform, finalWidth = this.width / vpt[0],\n          finalHeight = this.height / vpt[3];\n      if (!filler) {\n        return;\n      }\n      if (filler.toLive) {\n        var repeat = filler.repeat;\n        markup.push(\n          '<rect transform=\"translate(', finalWidth / 2, ',', finalHeight / 2, ')\"',\n          ' x=\"', filler.offsetX - finalWidth / 2, '\" y=\"', filler.offsetY - finalHeight / 2, '\" ',\n          'width=\"',\n          (repeat === 'repeat-y' || repeat === 'no-repeat'\n            ? filler.source.width\n            : finalWidth ),\n          '\" height=\"',\n          (repeat === 'repeat-x' || repeat === 'no-repeat'\n            ? filler.source.height\n            : finalHeight),\n          '\" fill=\"url(#SVGID_' + filler.id + ')\"',\n          '></rect>\\n'\n        );\n      }\n      else {\n        markup.push(\n          '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n          'fill=\"', this[property], '\"',\n          '></rect>\\n'\n        );\n      }\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    sendToBack: function (object) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, objs;\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = objs.length; i--;) {\n          obj = objs[i];\n          removeFromArray(this._objects, obj);\n          this._objects.unshift(obj);\n        }\n      }\n      else {\n        removeFromArray(this._objects, object);\n        this._objects.unshift(object);\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    bringToFront: function (object) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, objs;\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = 0; i < objs.length; i++) {\n          obj = objs[i];\n          removeFromArray(this._objects, obj);\n          this._objects.push(obj);\n        }\n      }\n      else {\n        removeFromArray(this._objects, object);\n        this._objects.push(object);\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional paramter, intersecting allowes to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    sendBackwards: function (object, intersecting) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, idx, newIdx, objs, objsMoved = 0;\n\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = 0; i < objs.length; i++) {\n          obj = objs[i];\n          idx = this._objects.indexOf(obj);\n          if (idx > 0 + objsMoved) {\n            newIdx = idx - 1;\n            removeFromArray(this._objects, obj);\n            this._objects.splice(newIdx, 0, obj);\n          }\n          objsMoved++;\n        }\n      }\n      else {\n        idx = this._objects.indexOf(object);\n        if (idx !== 0) {\n          // if object is not on the bottom of stack\n          newIdx = this._findNewLowerIndex(object, idx, intersecting);\n          removeFromArray(this._objects, object);\n          this._objects.splice(newIdx, 0, object);\n        }\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _findNewLowerIndex: function(object, idx, intersecting) {\n      var newIdx, i;\n\n      if (intersecting) {\n        newIdx = idx;\n\n        // traverse down the stack looking for the nearest intersecting object\n        for (i = idx - 1; i >= 0; --i) {\n\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                               object.isContainedWithinObject(this._objects[i]) ||\n                               this._objects[i].isContainedWithinObject(object);\n\n          if (isIntersecting) {\n            newIdx = i;\n            break;\n          }\n        }\n      }\n      else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    },\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional paramter, intersecting allowes to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    bringForward: function (object, intersecting) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, idx, newIdx, objs, objsMoved = 0;\n\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = objs.length; i--;) {\n          obj = objs[i];\n          idx = this._objects.indexOf(obj);\n          if (idx < this._objects.length - 1 - objsMoved) {\n            newIdx = idx + 1;\n            removeFromArray(this._objects, obj);\n            this._objects.splice(newIdx, 0, obj);\n          }\n          objsMoved++;\n        }\n      }\n      else {\n        idx = this._objects.indexOf(object);\n        if (idx !== this._objects.length - 1) {\n          // if object is not on top of stack (last item in an array)\n          newIdx = this._findNewUpperIndex(object, idx, intersecting);\n          removeFromArray(this._objects, object);\n          this._objects.splice(newIdx, 0, object);\n        }\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _findNewUpperIndex: function(object, idx, intersecting) {\n      var newIdx, i, len;\n\n      if (intersecting) {\n        newIdx = idx;\n\n        // traverse up the stack looking for the nearest intersecting object\n        for (i = idx + 1, len = this._objects.length; i < len; ++i) {\n\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                               object.isContainedWithinObject(this._objects[i]) ||\n                               this._objects[i].isContainedWithinObject(object);\n\n          if (isIntersecting) {\n            newIdx = i;\n            break;\n          }\n        }\n      }\n      else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    },\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {Number} index Position to move to\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    moveTo: function (object, index) {\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      return this.renderOnAddRemove && this.requestRenderAll();\n    },\n\n    /**\n     * Clears a canvas element and dispose objects\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    dispose: function () {\n      // cancel eventually ongoing renders\n      if (this.isRendering) {\n        fabric.util.cancelAnimFrame(this.isRendering);\n        this.isRendering = 0;\n      }\n      this.forEachObject(function(object) {\n        object.dispose && object.dispose();\n      });\n      this._objects = [];\n      if (this.backgroundImage && this.backgroundImage.dispose) {\n        this.backgroundImage.dispose();\n      }\n      this.backgroundImage = null;\n      if (this.overlayImage && this.overlayImage.dispose) {\n        this.overlayImage.dispose();\n      }\n      this.overlayImage = null;\n      this._iTextInstances = null;\n      this.contextContainer = null;\n      fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);\n      this.lowerCanvasEl = undefined;\n      return this;\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @return {String} string representation of an instance\n     */\n    toString: function () {\n      return '#<fabric.Canvas (' + this.complexity() + '): ' +\n               '{ objects: ' + this._objects.length + ' }>';\n    }\n  });\n\n  extend(fabric.StaticCanvas.prototype, fabric.Observable);\n  extend(fabric.StaticCanvas.prototype, fabric.Collection);\n  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\n\n  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\n\n    /**\n     * @static\n     * @type String\n     * @default\n     */\n    EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\n\n    /**\n     * Provides a way to check support of some of the canvas methods\n     * (either those of HTMLCanvasElement itself, or rendering context)\n     *\n     * @param {String} methodName Method to check support for;\n     *                            Could be one of \"setLineDash\"\n     * @return {Boolean | null} `true` if method is supported (or at least exists),\n     *                          `null` if canvas element or context can not be initialized\n     */\n    supports: function (methodName) {\n      var el = createCanvasElement();\n\n      if (!el || !el.getContext) {\n        return null;\n      }\n\n      var ctx = el.getContext('2d');\n      if (!ctx) {\n        return null;\n      }\n\n      switch (methodName) {\n\n        case 'setLineDash':\n          return typeof ctx.setLineDash !== 'undefined';\n\n        default:\n          return null;\n      }\n    }\n  });\n\n  /**\n   * Returns JSON representation of canvas\n   * @function\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} JSON string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);\n   * @example <caption>JSON without default values</caption>\n   * canvas.includeDefaultValues = false;\n   * var json = canvas.toJSON();\n   */\n  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\n\n  if (fabric.isLikelyNode) {\n    fabric.StaticCanvas.prototype.createPNGStream = function() {\n      var impl = getNodeCanvas(this.lowerCanvasEl);\n      return impl && impl.createPNGStream();\n    };\n    fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\n      var impl = getNodeCanvas(this.lowerCanvasEl);\n      return impl && impl.createJPEGStream(opts);\n    };\n  }\n})();\n\n\n/**\n * BaseBrush class\n * @class fabric.BaseBrush\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nfabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\n\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color: 'rgb(0, 0, 0)',\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width: 1,\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type fabric.Shadow\n   * @default\n   */\n  shadow: null,\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: 'round',\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: 'round',\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit:         10,\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: null,\n\n  /**\n   * Sets shadow of an object\n   * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  setShadow: function(options) {\n    this.shadow = new fabric.Shadow(options);\n    return this;\n  },\n\n  /**\n   * Sets brush styles\n   * @private\n   */\n  _setBrushStyles: function() {\n    var ctx = this.canvas.contextTop;\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    if (fabric.StaticCanvas.supports('setLineDash')) {\n      ctx.setLineDash(this.strokeDashArray || []);\n    }\n  },\n\n  /**\n   * Sets the transformation on given context\n   * @param {RenderingContext2d} ctx context to render on\n   * @private\n   */\n  _saveAndTransform: function(ctx) {\n    var v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  },\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  _setShadow: function() {\n    if (!this.shadow) {\n      return;\n    }\n\n    var ctx = this.canvas.contextTop,\n        zoom = this.canvas.getZoom();\n\n    ctx.shadowColor = this.shadow.color;\n    ctx.shadowBlur = this.shadow.blur * zoom;\n    ctx.shadowOffsetX = this.shadow.offsetX * zoom;\n    ctx.shadowOffsetY = this.shadow.offsetY * zoom;\n  },\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  _resetShadow: function() {\n    var ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n});\n\n\n(function() {\n\n  /**\n   * PencilBrush class\n   * @class fabric.PencilBrush\n   * @extends fabric.BaseBrush\n   */\n  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\n\n    /**\n     * Constructor\n     * @param {fabric.Canvas} canvas\n     * @return {fabric.PencilBrush} Instance of a pencil brush\n     */\n    initialize: function(canvas) {\n      this.canvas = canvas;\n      this._points = [];\n    },\n\n    /**\n     * Invoked inside on mouse down and mouse move\n     * @param {Object} pointer\n     */\n    _drawSegment: function (ctx, p1, p2) {\n      var midPoint = p1.midPointFrom(p2);\n      ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n      return midPoint;\n    },\n\n    /**\n     * Inovoked on mouse down\n     * @param {Object} pointer\n     */\n    onMouseDown: function(pointer) {\n      this._prepareForDrawing(pointer);\n      // capture coordinates immediately\n      // this allows to draw dots (when movement never occurs)\n      this._captureDrawingPath(pointer);\n      this._render();\n    },\n\n    /**\n     * Inovoked on mouse move\n     * @param {Object} pointer\n     */\n    onMouseMove: function(pointer) {\n      if (this._captureDrawingPath(pointer) && this._points.length > 1) {\n        if (this.needsFullRender) {\n          // redraw curve\n          // clear top canvas\n          this.canvas.clearContext(this.canvas.contextTop);\n          this._render();\n        }\n        else {\n          var points = this._points, length = points.length, ctx = this.canvas.contextTop;\n          // draw the curve update\n          this._saveAndTransform(ctx);\n          if (this.oldEnd) {\n            ctx.beginPath();\n            ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n          }\n          this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);\n          ctx.stroke();\n          ctx.restore();\n        }\n      }\n    },\n\n    /**\n     * Invoked on mouse up\n     */\n    onMouseUp: function() {\n      this.oldEnd = undefined;\n      this._finalizeAndAddPath();\n    },\n\n    /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */\n    _prepareForDrawing: function(pointer) {\n\n      var p = new fabric.Point(pointer.x, pointer.y);\n\n      this._reset();\n      this._addPoint(p);\n      this.canvas.contextTop.moveTo(p.x, p.y);\n    },\n\n    /**\n     * @private\n     * @param {fabric.Point} point Point to be added to points array\n     */\n    _addPoint: function(point) {\n      if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {\n        return false;\n      }\n      this._points.push(point);\n      return true;\n    },\n\n    /**\n     * Clear points array and set contextTop canvas style.\n     * @private\n     */\n    _reset: function() {\n      this._points.length = 0;\n      this._setBrushStyles();\n      var color = new fabric.Color(this.color);\n      this.needsFullRender = (color.getAlpha() < 1);\n      this._setShadow();\n    },\n\n    /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */\n    _captureDrawingPath: function(pointer) {\n      var pointerPoint = new fabric.Point(pointer.x, pointer.y);\n      return this._addPoint(pointerPoint);\n    },\n\n    /**\n     * Draw a smooth path on the topCanvas using quadraticCurveTo\n     * @private\n     */\n    _render: function() {\n      var ctx  = this.canvas.contextTop, i, len,\n          p1 = this._points[0],\n          p2 = this._points[1];\n\n      this._saveAndTransform(ctx);\n      ctx.beginPath();\n      //if we only have 2 points in the path and they are the same\n      //it means that the user only clicked the canvas without moving the mouse\n      //then we should be drawing a dot. A path isn't drawn between two identical dots\n      //that's why we set them apart a bit\n      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n        var width = this.width / 1000;\n        p1 = new fabric.Point(p1.x, p1.y);\n        p2 = new fabric.Point(p2.x, p2.y);\n        p1.x -= width;\n        p2.x += width;\n      }\n      ctx.moveTo(p1.x, p1.y);\n\n      for (i = 1, len = this._points.length; i < len; i++) {\n        // we pick the point between pi + 1 & pi + 2 as the\n        // end point and p1 as our control point.\n        this._drawSegment(ctx, p1, p2);\n        p1 = this._points[i];\n        p2 = this._points[i + 1];\n      }\n      // Draw last line as a straight line while\n      // we wait for the next point to be able to calculate\n      // the bezier control point\n      ctx.lineTo(p1.x, p1.y);\n      ctx.stroke();\n      ctx.restore();\n    },\n\n    /**\n     * Converts points to SVG path\n     * @param {Array} points Array of points\n     * @return {String} SVG path\n     */\n    convertPointsToSVGPath: function(points) {\n      var path = [], i, width = this.width / 1000,\n          p1 = new fabric.Point(points[0].x, points[0].y),\n          p2 = new fabric.Point(points[1].x, points[1].y),\n          len = points.length, multSignX = 1, multSignY = 1, manyPoints = len > 2;\n\n      if (manyPoints) {\n        multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n        multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n      }\n      path.push('M ', p1.x - multSignX * width, ' ', p1.y - multSignY * width, ' ');\n      for (i = 1; i < len; i++) {\n        if (!p1.eq(p2)) {\n          var midPoint = p1.midPointFrom(p2);\n          // p1 is our bezier control point\n          // midpoint is our endpoint\n          // start point is p(i-1) value.\n          path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');\n        }\n        p1 = points[i];\n        if ((i + 1) < points.length) {\n          p2 = points[i + 1];\n        }\n      }\n      if (manyPoints) {\n        multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n        multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n      }\n      path.push('L ', p1.x + multSignX * width, ' ', p1.y + multSignY * width);\n      return path;\n    },\n\n    /**\n     * Creates fabric.Path object to add on canvas\n     * @param {String} pathData Path data\n     * @return {fabric.Path} Path to add on canvas\n     */\n    createPath: function(pathData) {\n      var path = new fabric.Path(pathData, {\n        fill: null,\n        stroke: this.color,\n        strokeWidth: this.width,\n        strokeLineCap: this.strokeLineCap,\n        strokeMiterLimit: this.strokeMiterLimit,\n        strokeLineJoin: this.strokeLineJoin,\n        strokeDashArray: this.strokeDashArray,\n      });\n      var position = new fabric.Point(path.left + path.width / 2, path.top + path.height / 2);\n      position = path.translateToGivenOrigin(position, 'center', 'center', path.originX, path.originY);\n      path.top = position.y;\n      path.left = position.x;\n      if (this.shadow) {\n        this.shadow.affectStroke = true;\n        path.setShadow(this.shadow);\n      }\n\n      return path;\n    },\n\n    /**\n     * On mouseup after drawing the path on contextTop canvas\n     * we use the points captured to create an new fabric path object\n     * and add it to the fabric canvas.\n     */\n    _finalizeAndAddPath: function() {\n      var ctx = this.canvas.contextTop;\n      ctx.closePath();\n\n      var pathData = this.convertPointsToSVGPath(this._points).join('');\n      if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {\n        // do not create 0 width/height paths, as they are\n        // rendered inconsistently across browsers\n        // Firefox 4, for example, renders a dot,\n        // whereas Chrome 10 renders nothing\n        this.canvas.requestRenderAll();\n        return;\n      }\n\n      var path = this.createPath(pathData);\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.canvas.add(path);\n      this.canvas.renderAll();\n      path.setCoords();\n      this._resetShadow();\n\n\n      // fire event 'path' created\n      this.canvas.fire('path:created', { path: path });\n    }\n  });\n})();\n\n\n/**\n * CircleBrush class\n * @class fabric.CircleBrush\n */\nfabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\n\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width: 10,\n\n  /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.CircleBrush} Instance of a circle brush\n   */\n  initialize: function(canvas) {\n    this.canvas = canvas;\n    this.points = [];\n  },\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Object} pointer\n   */\n  drawDot: function(pointer) {\n    var point = this.addPoint(pointer),\n        ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.restore();\n  },\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown: function(pointer) {\n    this.points.length = 0;\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  },\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render: function() {\n    var ctx  = this.canvas.contextTop, i, len,\n        points = this.points, point;\n    this._saveAndTransform(ctx);\n    for (i = 0, len = points.length; i < len; i++) {\n      point = points[i];\n      ctx.fillStyle = point.fill;\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n      ctx.closePath();\n      ctx.fill();\n    }\n    ctx.restore();\n  },\n\n  /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */\n  onMouseMove: function(pointer) {\n    this.drawDot(pointer);\n  },\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp: function() {\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;\n    this.canvas.renderOnAddRemove = false;\n\n    var circles = [];\n\n    for (i = 0, len = this.points.length; i < len; i++) {\n      var point = this.points[i],\n          circle = new fabric.Circle({\n            radius: point.radius,\n            left: point.x,\n            top: point.y,\n            originX: 'center',\n            originY: 'center',\n            fill: point.fill\n          });\n\n      this.shadow && circle.setShadow(this.shadow);\n\n      circles.push(circle);\n    }\n    var group = new fabric.Group(circles);\n    group.canvas = this.canvas;\n\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  },\n\n  /**\n   * @param {Object} pointer\n   * @return {fabric.Point} Just added pointer point\n   */\n  addPoint: function(pointer) {\n    var pointerPoint = new fabric.Point(pointer.x, pointer.y),\n\n        circleRadius = fabric.util.getRandomInt(\n          Math.max(0, this.width - 20), this.width + 20) / 2,\n\n        circleColor = new fabric.Color(this.color)\n          .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\n          .toRgba();\n\n    pointerPoint.radius = circleRadius;\n    pointerPoint.fill = circleColor;\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n});\n\n\n/**\n * SprayBrush class\n * @class fabric.SprayBrush\n */\nfabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\n\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width:              10,\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density:            20,\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth:           1,\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance:   1,\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity:        false,\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping:  true,\n\n  /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.SprayBrush} Instance of a spray brush\n   */\n  initialize: function(canvas) {\n    this.canvas = canvas;\n    this.sprayChunks = [];\n  },\n\n  /**\n   * Invoked on mouse down\n   * @param {Object} pointer\n   */\n  onMouseDown: function(pointer) {\n    this.sprayChunks.length = 0;\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.render(this.sprayChunkPoints);\n  },\n\n  /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */\n  onMouseMove: function(pointer) {\n    this.addSprayChunk(pointer);\n    this.render(this.sprayChunkPoints);\n  },\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp: function() {\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    var rects = [];\n\n    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n      var sprayChunk = this.sprayChunks[i];\n\n      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\n\n        var rect = new fabric.Rect({\n          width: sprayChunk[j].width,\n          height: sprayChunk[j].width,\n          left: sprayChunk[j].x + 1,\n          top: sprayChunk[j].y + 1,\n          originX: 'center',\n          originY: 'center',\n          fill: this.color\n        });\n        rects.push(rect);\n      }\n    }\n\n    if (this.optimizeOverlapping) {\n      rects = this._getOptimizedRects(rects);\n    }\n\n    var group = new fabric.Group(rects);\n    this.shadow && group.setShadow(this.shadow);\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  },\n\n  /**\n   * @private\n   * @param {Array} rects\n   */\n  _getOptimizedRects: function(rects) {\n\n    // avoid creating duplicate rects at the same coordinates\n    var uniqueRects = { }, key, i, len;\n\n    for (i = 0, len = rects.length; i < len; i++) {\n      key = rects[i].left + '' + rects[i].top;\n      if (!uniqueRects[key]) {\n        uniqueRects[key] = rects[i];\n      }\n    }\n    var uniqueRectsArray = [];\n    for (key in uniqueRects) {\n      uniqueRectsArray.push(uniqueRects[key]);\n    }\n\n    return uniqueRectsArray;\n  },\n\n  /**\n   * Render new chunk of spray brush\n   */\n  render: function(sprayChunk) {\n    var ctx = this.canvas.contextTop, i, len;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (i = 0, len = sprayChunk.length; i < len; i++) {\n      var point = sprayChunk[i];\n      if (typeof point.opacity !== 'undefined') {\n        ctx.globalAlpha = point.opacity;\n      }\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n    ctx.restore();\n  },\n\n  /**\n   * Render all spray chunks\n   */\n  _render: function() {\n    var ctx = this.canvas.contextTop, i, ilen;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n      this.render(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  },\n\n  /**\n   * @param {Object} pointer\n   */\n  addSprayChunk: function(pointer) {\n    this.sprayChunkPoints = [];\n\n    var x, y, width, radius = this.width / 2, i;\n\n    for (i = 0; i < this.density; i++) {\n\n      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\n      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\n\n      if (this.dotWidthVariance) {\n        width = fabric.util.getRandomInt(\n          // bottom clamp width to 1\n          Math.max(1, this.dotWidth - this.dotWidthVariance),\n          this.dotWidth + this.dotWidthVariance);\n      }\n      else {\n        width = this.dotWidth;\n      }\n\n      var point = new fabric.Point(x, y);\n      point.width = width;\n\n      if (this.randomOpacity) {\n        point.opacity = fabric.util.getRandomInt(0, 100) / 100;\n      }\n\n      this.sprayChunkPoints.push(point);\n    }\n\n    this.sprayChunks.push(this.sprayChunkPoints);\n  }\n});\n\n\n/**\n * PatternBrush class\n * @class fabric.PatternBrush\n * @extends fabric.BaseBrush\n */\nfabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\n\n  getPatternSrc: function() {\n\n    var dotWidth = 20,\n        dotDistance = 5,\n        patternCanvas = fabric.util.createCanvasElement(),\n        patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n\n    patternCtx.fillStyle = this.color;\n    patternCtx.beginPath();\n    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\n    patternCtx.closePath();\n    patternCtx.fill();\n\n    return patternCanvas;\n  },\n\n  getPatternSrcFunction: function() {\n    return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\n  },\n\n  /**\n   * Creates \"pattern\" instance property\n   */\n  getPattern: function() {\n    return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  },\n\n  /**\n   * Sets brush styles\n   */\n  _setBrushStyles: function() {\n    this.callSuper('_setBrushStyles');\n    this.canvas.contextTop.strokeStyle = this.getPattern();\n  },\n\n  /**\n   * Creates path\n   */\n  createPath: function(pathData) {\n    var path = this.callSuper('createPath', pathData),\n        topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new fabric.Pattern({\n      source: this.source || this.getPatternSrcFunction(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y\n    });\n    return path;\n  }\n});\n\n\n(function() {\n\n  var getPointer = fabric.util.getPointer,\n      degreesToRadians = fabric.util.degreesToRadians,\n      radiansToDegrees = fabric.util.radiansToDegrees,\n      atan2 = Math.atan2,\n      abs = Math.abs,\n      supportLineDash = fabric.StaticCanvas.supports('setLineDash'),\n\n      STROKE_OFFSET = 0.5;\n\n  /**\n   * Canvas class\n   * @class fabric.Canvas\n   * @extends fabric.StaticCanvas\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n   * @see {@link fabric.Canvas#initialize} for constructor definition\n   *\n   * @fires object:modified\n   * @fires object:rotated\n   * @fires object:scaled\n   * @fires object:moved\n   * @fires object:skewed\n   * @fires object:rotating\n   * @fires object:scaling\n   * @fires object:moving\n   * @fires object:skewing\n   * @fires object:selected this event is deprecated. use selection:created\n   *\n   * @fires before:transform\n   * @fires before:selection:cleared\n   * @fires selection:cleared\n   * @fires selection:updated\n   * @fires selection:created\n   *\n   * @fires path:created\n   * @fires mouse:down\n   * @fires mouse:move\n   * @fires mouse:up\n   * @fires mouse:down:before\n   * @fires mouse:move:before\n   * @fires mouse:up:before\n   * @fires mouse:over\n   * @fires mouse:out\n   * @fires mouse:dblclick\n   *\n   * @fires dragover\n   * @fires dragenter\n   * @fires dragleave\n   * @fires drop\n   *\n   */\n  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(el, options) {\n      options || (options = { });\n      this.renderAndResetBound = this.renderAndReset.bind(this);\n      this.requestRenderAllBound = this.requestRenderAll.bind(this);\n      this._initStatic(el, options);\n      this._initInteractive();\n      this._createCacheCanvas();\n    },\n\n    /**\n     * When true, objects can be transformed by one side (unproportionally)\n     * @type Boolean\n     * @default\n     */\n    uniScaleTransform:      false,\n\n    /**\n     * Indicates which key enable unproportional scaling\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled feature disabled.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    uniScaleKey:           'shiftKey',\n\n    /**\n     * When true, objects use center point as the origin of scale transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredScaling:        false,\n\n    /**\n     * When true, objects use center point as the origin of rotate transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredRotation:       false,\n\n    /**\n     * Indicates which key enable centered Transform\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled feature disabled.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    centeredKey:           'altKey',\n\n    /**\n     * Indicates which key enable alternate action on corner\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled feature disabled.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    altActionKey:           'shiftKey',\n\n    /**\n     * Indicates that canvas is interactive. This property should not be changed.\n     * @type Boolean\n     * @default\n     */\n    interactive:            true,\n\n    /**\n     * Indicates whether group selection should be enabled\n     * @type Boolean\n     * @default\n     */\n    selection:              true,\n\n    /**\n     * Indicates which key or keys enable multiple click selection\n     * Pass value as a string or array of strings\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or empty or containing any other string that is not a modifier key\n     * feature is disabled.\n     * @since 1.6.2\n     * @type String|Array\n     * @default\n     */\n    selectionKey:           'shiftKey',\n\n    /**\n     * Indicates which key enable alternative selection\n     * in case of target overlapping with active object\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * For a series of reason that come from the general expectations on how\n     * things should work, this feature works only for preserveObjectStacking true.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled.\n     * @since 1.6.5\n     * @type null|String\n     * @default\n     */\n    altSelectionKey:           null,\n\n    /**\n     * Color of selection\n     * @type String\n     * @default\n     */\n    selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\n\n    /**\n     * Default dash array pattern\n     * If not empty the selection border is dashed\n     * @type Array\n     */\n    selectionDashArray:     [],\n\n    /**\n     * Color of the border of selection (usually slightly darker than color of selection itself)\n     * @type String\n     * @default\n     */\n    selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\n\n    /**\n     * Width of a line used in object/group selection\n     * @type Number\n     * @default\n     */\n    selectionLineWidth:     1,\n\n    /**\n     * Select only shapes that are fully contained in the dragged selection rectangle.\n     * @type Boolean\n     * @default\n     */\n    selectionFullyContained: false,\n\n    /**\n     * Default cursor value used when hovering over an object on canvas\n     * @type String\n     * @default\n     */\n    hoverCursor:            'move',\n\n    /**\n     * Default cursor value used when moving an object on canvas\n     * @type String\n     * @default\n     */\n    moveCursor:             'move',\n\n    /**\n     * Default cursor value used for the entire canvas\n     * @type String\n     * @default\n     */\n    defaultCursor:          'default',\n\n    /**\n     * Cursor value used during free drawing\n     * @type String\n     * @default\n     */\n    freeDrawingCursor:      'crosshair',\n\n    /**\n     * Cursor value used for rotation point\n     * @type String\n     * @default\n     */\n    rotationCursor:         'crosshair',\n\n    /**\n     * Cursor value used for disabled elements ( corners with disabled action )\n     * @type String\n     * @since 2.0.0\n     * @default\n     */\n    notAllowedCursor:         'not-allowed',\n\n    /**\n     * Default element class that's given to wrapper (div) element of canvas\n     * @type String\n     * @default\n     */\n    containerClass:         'canvas-container',\n\n    /**\n     * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n     * @type Boolean\n     * @default\n     */\n    perPixelTargetFind:     false,\n\n    /**\n     * Number of pixels around target pixel to tolerate (consider active) during object detection\n     * @type Number\n     * @default\n     */\n    targetFindTolerance:    0,\n\n    /**\n     * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.\n     * @type Boolean\n     * @default\n     */\n    skipTargetFind:         false,\n\n    /**\n     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n     * After mousedown, mousemove creates a shape,\n     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n     * @type Boolean\n     * @default\n     */\n    isDrawingMode:          false,\n\n    /**\n     * Indicates whether objects should remain in current stack position when selected.\n     * When false objects are brought to top and rendered as part of the selection group\n     * @type Boolean\n     * @default\n     */\n    preserveObjectStacking: false,\n\n    /**\n     * Indicates the angle that an object will lock to while rotating.\n     * @type Number\n     * @since 1.6.7\n     * @default\n     */\n    snapAngle: 0,\n\n    /**\n     * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.\n     * When `null`, the snapThreshold will default to the snapAngle.\n     * @type null|Number\n     * @since 1.6.7\n     * @default\n     */\n    snapThreshold: null,\n\n    /**\n     * Indicates if the right click on canvas can output the context menu or not\n     * @type Boolean\n     * @since 1.6.5\n     * @default\n     */\n    stopContextMenu: false,\n\n    /**\n     * Indicates if the canvas can fire right click events\n     * @type Boolean\n     * @since 1.6.5\n     * @default\n     */\n    fireRightClick: false,\n\n    /**\n     * Indicates if the canvas can fire middle click events\n     * @type Boolean\n     * @since 1.7.8\n     * @default\n     */\n    fireMiddleClick: false,\n\n    /**\n     * @private\n     */\n    _initInteractive: function() {\n      this._currentTransform = null;\n      this._groupSelector = null;\n      this._initWrapperElement();\n      this._createUpperCanvas();\n      this._initEventListeners();\n\n      this._initRetinaScaling();\n\n      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\n\n      this.calcOffset();\n    },\n\n    /**\n     * Divides objects in two groups, one to render immediately\n     * and one to render as activeGroup.\n     * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n     */\n    _chooseObjectsToRender: function() {\n      var activeObjects = this.getActiveObjects(),\n          object, objsToRender, activeGroupObjects;\n\n      if (activeObjects.length > 0 && !this.preserveObjectStacking) {\n        objsToRender = [];\n        activeGroupObjects = [];\n        for (var i = 0, length = this._objects.length; i < length; i++) {\n          object = this._objects[i];\n          if (activeObjects.indexOf(object) === -1 ) {\n            objsToRender.push(object);\n          }\n          else {\n            activeGroupObjects.push(object);\n          }\n        }\n        if (activeObjects.length > 1) {\n          this._activeObject._objects = activeGroupObjects;\n        }\n        objsToRender.push.apply(objsToRender, activeGroupObjects);\n      }\n      else {\n        objsToRender = this._objects;\n      }\n      return objsToRender;\n    },\n\n    /**\n     * Renders both the top canvas and the secondary container canvas.\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAll: function () {\n      if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n        this.clearContext(this.contextTop);\n        this.contextTopDirty = false;\n      }\n      if (this.hasLostContext) {\n        this.renderTopLayer(this.contextTop);\n      }\n      var canvasToDrawOn = this.contextContainer;\n      this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());\n      return this;\n    },\n\n    renderTopLayer: function(ctx) {\n      ctx.save();\n      if (this.isDrawingMode && this._isCurrentlyDrawing) {\n        this.freeDrawingBrush && this.freeDrawingBrush._render();\n        this.contextTopDirty = true;\n      }\n      // we render the top context - last object\n      if (this.selection && this._groupSelector) {\n        this._drawSelection(ctx);\n        this.contextTopDirty = true;\n      }\n      ctx.restore();\n    },\n\n    /**\n     * Method to render only the top canvas.\n     * Also used to render the group selection box.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    renderTop: function () {\n      var ctx = this.contextTop;\n      this.clearContext(ctx);\n      this.renderTopLayer(ctx);\n      this.fire('after:render');\n      return this;\n    },\n\n    /**\n     * Resets the current transform to its original values and chooses the type of resizing based on the event\n     * @private\n     */\n    _resetCurrentTransform: function() {\n      var t = this._currentTransform;\n\n      t.target.set({\n        scaleX: t.original.scaleX,\n        scaleY: t.original.scaleY,\n        skewX: t.original.skewX,\n        skewY: t.original.skewY,\n        left: t.original.left,\n        top: t.original.top\n      });\n\n      if (this._shouldCenterTransform(t.target)) {\n        if (t.originX !== 'center') {\n          if (t.originX === 'right') {\n            t.mouseXSign = -1;\n          }\n          else {\n            t.mouseXSign = 1;\n          }\n        }\n        if (t.originY !== 'center') {\n          if (t.originY === 'bottom') {\n            t.mouseYSign = -1;\n          }\n          else {\n            t.mouseYSign = 1;\n          }\n        }\n\n        t.originX = 'center';\n        t.originY = 'center';\n      }\n      else {\n        t.originX = t.original.originX;\n        t.originY = t.original.originY;\n      }\n    },\n\n    /**\n     * Checks if point is contained within an area of given object\n     * @param {Event} e Event object\n     * @param {fabric.Object} target Object to test against\n     * @param {Object} [point] x,y object of point coordinates we want to check.\n     * @return {Boolean} true if point is contained within an area of given object\n     */\n    containsPoint: function (e, target, point) {\n      var ignoreZoom = true,\n          pointer = point || this.getPointer(e, ignoreZoom),\n          xy;\n\n      if (target.group && target.group === this._activeObject && target.group.type === 'activeSelection') {\n        xy = this._normalizePointer(target.group, pointer);\n      }\n      else {\n        xy = { x: pointer.x, y: pointer.y };\n      }\n      // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\n      // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\n      return (target.containsPoint(xy) || target._findTargetCorner(pointer));\n    },\n\n    /**\n     * @private\n     */\n    _normalizePointer: function (object, pointer) {\n      var m = object.calcTransformMatrix(),\n          invertedM = fabric.util.invertTransform(m),\n          vptPointer = this.restorePointerVpt(pointer);\n      return fabric.util.transformPoint(vptPointer, invertedM);\n    },\n\n    /**\n     * Returns true if object is transparent at a certain location\n     * @param {fabric.Object} target Object to check\n     * @param {Number} x Left coordinate\n     * @param {Number} y Top coordinate\n     * @return {Boolean}\n     */\n    isTargetTransparent: function (target, x, y) {\n      // in case the target is the activeObject, we cannot execute this optimization\n      // because we need to draw controls too.\n      if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {\n        var normalizedPointer = this._normalizePointer(target, {x: x, y: y}),\n            targetRelativeX = Math.max(target.cacheTranslationX + (normalizedPointer.x * target.zoomX), 0),\n            targetRelativeY = Math.max(target.cacheTranslationY + (normalizedPointer.y * target.zoomY), 0);\n\n        var isTransparent = fabric.util.isTransparent(\n          target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);\n\n        return isTransparent;\n      }\n\n      var ctx = this.contextCache,\n          originalColor = target.selectionBackgroundColor, v = this.viewportTransform;\n\n      target.selectionBackgroundColor = '';\n\n      this.clearContext(ctx);\n\n      ctx.save();\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      target.render(ctx);\n      ctx.restore();\n\n      target === this._activeObject && target._renderControls(ctx, {\n        hasBorders: false,\n        transparentCorners: false\n      }, {\n        hasBorders: false,\n      });\n\n      target.selectionBackgroundColor = originalColor;\n\n      var isTransparent = fabric.util.isTransparent(\n        ctx, x, y, this.targetFindTolerance);\n\n      return isTransparent;\n    },\n\n    /**\n     * takes an event and determins if selection key has been pressed\n     * @private\n     * @param {Event} e Event object\n     */\n    _isSelectionKeyPressed: function(e) {\n      var selectionKeyPressed = false;\n\n      if (Object.prototype.toString.call(this.selectionKey) === '[object Array]') {\n        selectionKeyPressed = !!this.selectionKey.find(function(key) { return e[key] === true; });\n      }\n      else {\n        selectionKeyPressed = e[this.selectionKey];\n      }\n\n      return selectionKeyPressed;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _shouldClearSelection: function (e, target) {\n      var activeObjects = this.getActiveObjects(),\n          activeObject = this._activeObject;\n\n      return (\n        !target\n        ||\n        (target &&\n          activeObject &&\n          activeObjects.length > 1 &&\n          activeObjects.indexOf(target) === -1 &&\n          activeObject !== target &&\n          !this._isSelectionKeyPressed(e))\n        ||\n        (target && !target.evented)\n        ||\n        (target &&\n          !target.selectable &&\n          activeObject &&\n          activeObject !== target)\n      );\n    },\n\n    /**\n     * centeredScaling from object can't override centeredScaling from canvas.\n     * this should be fixed, since object setting should take precedence over canvas.\n     * @private\n     * @param {fabric.Object} target\n     */\n    _shouldCenterTransform: function (target) {\n      if (!target) {\n        return;\n      }\n\n      var t = this._currentTransform,\n          centerTransform;\n\n      if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {\n        centerTransform = this.centeredScaling || target.centeredScaling;\n      }\n      else if (t.action === 'rotate') {\n        centerTransform = this.centeredRotation || target.centeredRotation;\n      }\n\n      return centerTransform ? !t.altKey : t.altKey;\n    },\n\n    /**\n     * @private\n     */\n    _getOriginFromCorner: function(target, corner) {\n      var origin = {\n        x: target.originX,\n        y: target.originY\n      };\n\n      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\n        origin.x = 'right';\n      }\n      else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\n        origin.x = 'left';\n      }\n\n      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\n        origin.y = 'bottom';\n      }\n      else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\n        origin.y = 'top';\n      }\n\n      return origin;\n    },\n\n    /**\n     * @private\n     */\n    _getActionFromCorner: function(alreadySelected, corner, e) {\n      if (!corner || !alreadySelected) {\n        return 'drag';\n      }\n\n      switch (corner) {\n        case 'mtr':\n          return 'rotate';\n        case 'ml':\n        case 'mr':\n          return e[this.altActionKey] ? 'skewY' : 'scaleX';\n        case 'mt':\n        case 'mb':\n          return e[this.altActionKey] ? 'skewX' : 'scaleY';\n        default:\n          return 'scale';\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _setupCurrentTransform: function (e, target, alreadySelected) {\n      if (!target) {\n        return;\n      }\n\n      var pointer = this.getPointer(e),\n          corner = target._findTargetCorner(this.getPointer(e, true)),\n          action = this._getActionFromCorner(alreadySelected, corner, e),\n          origin = this._getOriginFromCorner(target, corner);\n\n      this._currentTransform = {\n        target: target,\n        action: action,\n        corner: corner,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        // used by transation\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        lastX: pointer.x,\n        lastY: pointer.y,\n        // unsure they are usefull anymore.\n        // left: target.left,\n        // top: target.top,\n        theta: degreesToRadians(target.angle),\n        // end of unsure\n        width: target.width * target.scaleX,\n        mouseXSign: 1,\n        mouseYSign: 1,\n        shiftKey: e.shiftKey,\n        altKey: e[this.centeredKey],\n        original: fabric.util.saveObjectTransform(target),\n      };\n\n      this._currentTransform.original.originX = origin.x;\n      this._currentTransform.original.originY = origin.y;\n\n      this._resetCurrentTransform();\n      this._beforeTransform(e);\n    },\n\n    /**\n     * Translates object by \"setting\" its left/top\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     * @return {Boolean} true if the translation occurred\n     */\n    _translateObject: function (x, y) {\n      var transform = this._currentTransform,\n          target = transform.target,\n          newLeft = x - transform.offsetX,\n          newTop = y - transform.offsetY,\n          moveX = !target.get('lockMovementX') && target.left !== newLeft,\n          moveY = !target.get('lockMovementY') && target.top !== newTop;\n\n      moveX && target.set('left', newLeft);\n      moveY && target.set('top', newTop);\n      return moveX || moveY;\n    },\n\n    /**\n     * Check if we are increasing a positive skew or lower it,\n     * checking mouse direction and pressed corner.\n     * @private\n     */\n    _changeSkewTransformOrigin: function(mouseMove, t, by) {\n      var property = 'originX', origins = { 0: 'center' },\n          skew = t.target.skewX, originA = 'left', originB = 'right',\n          corner = t.corner === 'mt' || t.corner === 'ml' ? 1 : -1,\n          flipSign = 1;\n\n      mouseMove = mouseMove > 0 ? 1 : -1;\n      if (by === 'y') {\n        skew = t.target.skewY;\n        originA = 'top';\n        originB = 'bottom';\n        property = 'originY';\n      }\n      origins[-1] = originA;\n      origins[1] = originB;\n\n      t.target.flipX && (flipSign *= -1);\n      t.target.flipY && (flipSign *= -1);\n\n      if (skew === 0) {\n        t.skewSign = -corner * mouseMove * flipSign;\n        t[property] = origins[-mouseMove];\n      }\n      else {\n        skew = skew > 0 ? 1 : -1;\n        t.skewSign = skew;\n        t[property] = origins[skew * corner * flipSign];\n      }\n    },\n\n    /**\n     * Skew object by mouse events\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     * @param {String} by Either 'x' or 'y'\n     * @return {Boolean} true if the skewing occurred\n     */\n    _skewObject: function (x, y, by) {\n      var t = this._currentTransform,\n          target = t.target, skewed = false,\n          lockSkewingX = target.get('lockSkewingX'),\n          lockSkewingY = target.get('lockSkewingY');\n\n      if ((lockSkewingX && by === 'x') || (lockSkewingY && by === 'y')) {\n        return false;\n      }\n\n      // Get the constraint point\n      var center = target.getCenterPoint(),\n          actualMouseByCenter = target.toLocalPoint(new fabric.Point(x, y), 'center', 'center')[by],\n          lastMouseByCenter = target.toLocalPoint(new fabric.Point(t.lastX, t.lastY), 'center', 'center')[by],\n          actualMouseByOrigin, constraintPosition, dim = target._getTransformedDimensions();\n\n      this._changeSkewTransformOrigin(actualMouseByCenter - lastMouseByCenter, t, by);\n      actualMouseByOrigin = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY)[by];\n      constraintPosition = target.translateToOriginPoint(center, t.originX, t.originY);\n      // Actually skew the object\n      skewed = this._setObjectSkew(actualMouseByOrigin, t, by, dim);\n      t.lastX = x;\n      t.lastY = y;\n      // Make sure the constraints apply\n      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n      return skewed;\n    },\n\n    /**\n     * Set object skew\n     * @private\n     * @return {Boolean} true if the skewing occurred\n     */\n    _setObjectSkew: function(localMouse, transform, by, _dim) {\n      var target = transform.target, newValue, skewed = false,\n          skewSign = transform.skewSign, newDim, dimNoSkew,\n          otherBy, _otherBy, _by, newDimMouse, skewX, skewY;\n\n      if (by === 'x') {\n        otherBy = 'y';\n        _otherBy = 'Y';\n        _by = 'X';\n        skewX = 0;\n        skewY = target.skewY;\n      }\n      else {\n        otherBy = 'x';\n        _otherBy = 'X';\n        _by = 'Y';\n        skewX = target.skewX;\n        skewY = 0;\n      }\n\n      dimNoSkew = target._getTransformedDimensions(skewX, skewY);\n      newDimMouse = 2 * Math.abs(localMouse) - dimNoSkew[by];\n      if (newDimMouse <= 2) {\n        newValue = 0;\n      }\n      else {\n        newValue = skewSign * Math.atan((newDimMouse / target['scale' + _by]) /\n                                        (dimNoSkew[otherBy] / target['scale' + _otherBy]));\n        newValue = fabric.util.radiansToDegrees(newValue);\n      }\n      skewed = target['skew' + _by] !== newValue;\n      target.set('skew' + _by, newValue);\n      if (target['skew' + _otherBy] !== 0) {\n        newDim = target._getTransformedDimensions();\n        newValue = (_dim[otherBy] / newDim[otherBy]) * target['scale' + _otherBy];\n        target.set('scale' + _otherBy, newValue);\n      }\n      return skewed;\n    },\n\n    /**\n     * Scales object by invoking its scaleX/scaleY methods\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.\n     *                    When not provided, an object is scaled by both dimensions equally\n     * @return {Boolean} true if the scaling occurred\n     */\n    _scaleObject: function (x, y, by) {\n      var t = this._currentTransform,\n          target = t.target,\n          lockScalingX = target.lockScalingX,\n          lockScalingY = target.lockScalingY,\n          lockScalingFlip = target.lockScalingFlip;\n\n      if (lockScalingX && lockScalingY) {\n        return false;\n      }\n\n      // Get the constraint point\n      var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),\n          localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY),\n          dim = target._getTransformedDimensions(), scaled = false;\n\n      this._setLocalMouse(localMouse, t);\n\n      // Actually scale the object\n      scaled = this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip, dim);\n\n      // Make sure the constraints apply\n      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n      return scaled;\n    },\n\n    /**\n     * @private\n     * @return {Boolean} true if the scaling occurred\n     */\n    _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {\n      var target = transform.target, forbidScalingX = false, forbidScalingY = false, scaled = false,\n          scaleX = localMouse.x * target.scaleX / _dim.x,\n          scaleY = localMouse.y * target.scaleY / _dim.y,\n          changeX = target.scaleX !== scaleX,\n          changeY = target.scaleY !== scaleY;\n\n      if (lockScalingFlip && scaleX <= 0 && scaleX < target.scaleX) {\n        forbidScalingX = true;\n        localMouse.x = 0;\n      }\n\n      if (lockScalingFlip && scaleY <= 0 && scaleY < target.scaleY) {\n        forbidScalingY = true;\n        localMouse.y = 0;\n      }\n\n      if (by === 'equally' && !lockScalingX && !lockScalingY) {\n        scaled = this._scaleObjectEqually(localMouse, target, transform, _dim);\n      }\n      else if (!by) {\n        forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));\n        forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));\n      }\n      else if (by === 'x' && !target.get('lockUniScaling')) {\n        forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = changeX));\n      }\n      else if (by === 'y' && !target.get('lockUniScaling')) {\n        forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = changeY));\n      }\n      transform.newScaleX = scaleX;\n      transform.newScaleY = scaleY;\n      forbidScalingX || forbidScalingY || this._flipObject(transform, by);\n      return scaled;\n    },\n\n    /**\n     * @private\n     * @return {Boolean} true if the scaling occurred\n     */\n    _scaleObjectEqually: function(localMouse, target, transform, _dim) {\n\n      var dist = localMouse.y + localMouse.x,\n          lastDist = _dim.y * transform.original.scaleY / target.scaleY +\n                     _dim.x * transform.original.scaleX / target.scaleX,\n          scaled, signX = localMouse.x < 0 ? -1 : 1,\n          signY = localMouse.y < 0 ? -1 : 1, newScaleX, newScaleY;\n\n      // We use transform.scaleX/Y instead of target.scaleX/Y\n      // because the object may have a min scale and we'll loose the proportions\n      newScaleX = signX * Math.abs(transform.original.scaleX * dist / lastDist);\n      newScaleY = signY * Math.abs(transform.original.scaleY * dist / lastDist);\n      scaled = newScaleX !== target.scaleX || newScaleY !== target.scaleY;\n      target.set('scaleX', newScaleX);\n      target.set('scaleY', newScaleY);\n      return scaled;\n    },\n\n    /**\n     * @private\n     */\n    _flipObject: function(transform, by) {\n      if (transform.newScaleX < 0 && by !== 'y') {\n        if (transform.originX === 'left') {\n          transform.originX = 'right';\n        }\n        else if (transform.originX === 'right') {\n          transform.originX = 'left';\n        }\n      }\n\n      if (transform.newScaleY < 0 && by !== 'x') {\n        if (transform.originY === 'top') {\n          transform.originY = 'bottom';\n        }\n        else if (transform.originY === 'bottom') {\n          transform.originY = 'top';\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setLocalMouse: function(localMouse, t) {\n      var target = t.target, zoom = this.getZoom(),\n          padding = target.padding / zoom;\n\n      if (t.originX === 'right') {\n        localMouse.x *= -1;\n      }\n      else if (t.originX === 'center') {\n        localMouse.x *= t.mouseXSign * 2;\n        if (localMouse.x < 0) {\n          t.mouseXSign = -t.mouseXSign;\n        }\n      }\n\n      if (t.originY === 'bottom') {\n        localMouse.y *= -1;\n      }\n      else if (t.originY === 'center') {\n        localMouse.y *= t.mouseYSign * 2;\n        if (localMouse.y < 0) {\n          t.mouseYSign = -t.mouseYSign;\n        }\n      }\n\n      // adjust the mouse coordinates when dealing with padding\n      if (abs(localMouse.x) > padding) {\n        if (localMouse.x < 0) {\n          localMouse.x += padding;\n        }\n        else {\n          localMouse.x -= padding;\n        }\n      }\n      else { // mouse is within the padding, set to 0\n        localMouse.x = 0;\n      }\n\n      if (abs(localMouse.y) > padding) {\n        if (localMouse.y < 0) {\n          localMouse.y += padding;\n        }\n        else {\n          localMouse.y -= padding;\n        }\n      }\n      else {\n        localMouse.y = 0;\n      }\n    },\n\n    /**\n     * Rotates object by invoking its rotate method\n     * @private\n     * @param {Number} x pointer's x coordinate\n     * @param {Number} y pointer's y coordinate\n     * @return {Boolean} true if the rotation occurred\n     */\n    _rotateObject: function (x, y) {\n\n      var t = this._currentTransform,\n          target = t.target, constraintPosition,\n          constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);\n\n      if (target.lockRotation) {\n        return false;\n      }\n\n      var lastAngle = atan2(t.ey - constraintPosition.y, t.ex - constraintPosition.x),\n          curAngle = atan2(y - constraintPosition.y, x - constraintPosition.x),\n          angle = radiansToDegrees(curAngle - lastAngle + t.theta),\n          hasRotated = true;\n\n      if (target.snapAngle > 0) {\n        var snapAngle  = target.snapAngle,\n            snapThreshold  = target.snapThreshold || snapAngle,\n            rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n            leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n        if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n          angle = leftAngleLocked;\n        }\n        else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n          angle = rightAngleLocked;\n        }\n      }\n\n      // normalize angle to positive value\n      if (angle < 0) {\n        angle = 360 + angle;\n      }\n      angle %= 360;\n\n      if (target.angle === angle) {\n        hasRotated = false;\n      }\n      else {\n        // rotation only happen here\n        target.angle = angle;\n        // Make sure the constraints apply\n        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);\n      }\n\n      return hasRotated;\n    },\n\n    /**\n     * Set the cursor type of the canvas element\n     * @param {String} value Cursor type of the canvas element.\n     * @see http://www.w3.org/TR/css3-ui/#cursor\n     */\n    setCursor: function (value) {\n      this.upperCanvasEl.style.cursor = value;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx to draw the selection on\n     */\n    _drawSelection: function (ctx) {\n      var groupSelector = this._groupSelector,\n          left = groupSelector.left,\n          top = groupSelector.top,\n          aleft = abs(left),\n          atop = abs(top);\n\n      if (this.selectionColor) {\n        ctx.fillStyle = this.selectionColor;\n\n        ctx.fillRect(\n          groupSelector.ex - ((left > 0) ? 0 : -left),\n          groupSelector.ey - ((top > 0) ? 0 : -top),\n          aleft,\n          atop\n        );\n      }\n\n      if (!this.selectionLineWidth || !this.selectionBorderColor) {\n        return;\n      }\n      ctx.lineWidth = this.selectionLineWidth;\n      ctx.strokeStyle = this.selectionBorderColor;\n\n      // selection border\n      if (this.selectionDashArray.length > 1 && !supportLineDash) {\n\n        var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\n            py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop);\n\n        ctx.beginPath();\n\n        fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);\n        fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);\n\n        ctx.closePath();\n        ctx.stroke();\n      }\n      else {\n        fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);\n        ctx.strokeRect(\n          groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),\n          groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),\n          aleft,\n          atop\n        );\n      }\n    },\n\n    /**\n     * Method that determines what object we are clicking on\n     * the skipGroup parameter is for internal use, is needed for shift+click action\n     * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n     * or the outside part of the corner.\n     * @param {Event} e mouse event\n     * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through\n     * @return {fabric.Object} the target found\n     */\n    findTarget: function (e, skipGroup) {\n      if (this.skipTargetFind) {\n        return;\n      }\n\n      var ignoreZoom = true,\n          pointer = this.getPointer(e, ignoreZoom),\n          activeObject = this._activeObject,\n          aObjects = this.getActiveObjects(),\n          activeTarget, activeTargetSubs;\n\n      // first check current group (if one exists)\n      // active group does not check sub targets like normal groups.\n      // if active group just exits.\n      this.targets = [];\n\n      if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {\n        return activeObject;\n      }\n      // if we hit the corner of an activeObject, let's return that.\n      if (aObjects.length === 1 && activeObject._findTargetCorner(pointer)) {\n        return activeObject;\n      }\n      if (aObjects.length === 1 &&\n        activeObject === this._searchPossibleTargets([activeObject], pointer)) {\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        }\n        else {\n          activeTarget = activeObject;\n          activeTargetSubs = this.targets;\n          this.targets = [];\n        }\n      }\n      var target = this._searchPossibleTargets(this._objects, pointer);\n      if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {\n        target = activeTarget;\n        this.targets = activeTargetSubs;\n      }\n      return target;\n    },\n\n    /**\n     * Checks point is inside the object.\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\n     * @param {fabric.Object} obj Object to test against\n     * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.\n     * @return {Boolean} true if point is contained within an area of given object\n     * @private\n     */\n    _checkTarget: function(pointer, obj, globalPointer) {\n      if (obj &&\n          obj.visible &&\n          obj.evented &&\n          this.containsPoint(null, obj, pointer)){\n        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\n          var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);\n          if (!isTransparent) {\n            return true;\n          }\n        }\n        else {\n          return true;\n        }\n      }\n    },\n\n    /**\n     * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n     * @param {Array} [objects] objects array to look into\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\n     * @return {fabric.Object} object that contains pointer\n     * @private\n     */\n    _searchPossibleTargets: function(objects, pointer) {\n      // Cache all targets where their bounding box contains point.\n      var target, i = objects.length, subTarget;\n      // Do not check for currently grouped objects, since we check the parent group itself.\n      // until we call this function specifically to search inside the activeGroup\n      while (i--) {\n        var objToCheck = objects[i];\n        var pointerToUse = objToCheck.group && objToCheck.group.type !== 'activeSelection' ?\n          this._normalizePointer(objToCheck.group, pointer) : pointer;\n        if (this._checkTarget(pointerToUse, objToCheck, pointer)) {\n          target = objects[i];\n          if (target.subTargetCheck && target instanceof fabric.Group) {\n            subTarget = this._searchPossibleTargets(target._objects, pointer);\n            subTarget && this.targets.push(subTarget);\n          }\n          break;\n        }\n      }\n      return target;\n    },\n\n    /**\n     * Returns pointer coordinates without the effect of the viewport\n     * @param {Object} pointer with \"x\" and \"y\" number values\n     * @return {Object} object with \"x\" and \"y\" number values\n     */\n    restorePointerVpt: function(pointer) {\n      return fabric.util.transformPoint(\n        pointer,\n        fabric.util.invertTransform(this.viewportTransform)\n      );\n    },\n\n    /**\n     * Returns pointer coordinates relative to canvas.\n     * Can return coordinates with or without viewportTransform.\n     * ignoreZoom false gives back coordinates that represent\n     * the point clicked on canvas element.\n     * ignoreZoom true gives back coordinates after being processed\n     * by the viewportTransform ( sort of coordinates of what is displayed\n     * on the canvas where you are clicking.\n     * ignoreZoom true = HTMLElement coordinates relative to top,left\n     * ignoreZoom false, default = fabric space coordinates, the same used for shape position\n     * To interact with your shapes top and left you want to use ignoreZoom true\n     * most of the time, while ignoreZoom false will give you coordinates\n     * compatible with the object.oCoords system.\n     * of the time.\n     * @param {Event} e\n     * @param {Boolean} ignoreZoom\n     * @return {Object} object with \"x\" and \"y\" number values\n     */\n    getPointer: function (e, ignoreZoom) {\n      // return cached values if we are in the event processing chain\n      if (this._absolutePointer && !ignoreZoom) {\n        return this._absolutePointer;\n      }\n      if (this._pointer && ignoreZoom) {\n        return this._pointer;\n      }\n\n      var pointer = getPointer(e),\n          upperCanvasEl = this.upperCanvasEl,\n          bounds = upperCanvasEl.getBoundingClientRect(),\n          boundsWidth = bounds.width || 0,\n          boundsHeight = bounds.height || 0,\n          cssScale;\n\n      if (!boundsWidth || !boundsHeight ) {\n        if ('top' in bounds && 'bottom' in bounds) {\n          boundsHeight = Math.abs( bounds.top - bounds.bottom );\n        }\n        if ('right' in bounds && 'left' in bounds) {\n          boundsWidth = Math.abs( bounds.right - bounds.left );\n        }\n      }\n\n      this.calcOffset();\n      pointer.x = pointer.x - this._offset.left;\n      pointer.y = pointer.y - this._offset.top;\n      if (!ignoreZoom) {\n        pointer = this.restorePointerVpt(pointer);\n      }\n\n      if (boundsWidth === 0 || boundsHeight === 0) {\n        // If bounds are not available (i.e. not visible), do not apply scale.\n        cssScale = { width: 1, height: 1 };\n      }\n      else {\n        cssScale = {\n          width: upperCanvasEl.width / boundsWidth,\n          height: upperCanvasEl.height / boundsHeight\n        };\n      }\n\n      return {\n        x: pointer.x * cssScale.width,\n        y: pointer.y * cssScale.height\n      };\n    },\n\n    /**\n     * @private\n     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\n     */\n    _createUpperCanvas: function () {\n      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, '');\n\n      // there is no need to create a new upperCanvas element if we have already one.\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl.className = '';\n      }\n      else {\n        this.upperCanvasEl = this._createCanvasElement();\n      }\n      fabric.util.addClass(this.upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\n\n      this.wrapperEl.appendChild(this.upperCanvasEl);\n\n      this._copyCanvasStyle(this.lowerCanvasEl, this.upperCanvasEl);\n      this._applyCanvasStyle(this.upperCanvasEl);\n      this.contextTop = this.upperCanvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _createCacheCanvas: function () {\n      this.cacheCanvasEl = this._createCanvasElement();\n      this.cacheCanvasEl.setAttribute('width', this.width);\n      this.cacheCanvasEl.setAttribute('height', this.height);\n      this.contextCache = this.cacheCanvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _initWrapperElement: function () {\n      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\n        'class': this.containerClass\n      });\n      fabric.util.setStyle(this.wrapperEl, {\n        width: this.width + 'px',\n        height: this.height + 'px',\n        position: 'relative'\n      });\n      fabric.util.makeElementUnselectable(this.wrapperEl);\n    },\n\n    /**\n     * @private\n     * @param {HTMLElement} element canvas element to apply styles on\n     */\n    _applyCanvasStyle: function (element) {\n      var width = this.width || element.width,\n          height = this.height || element.height;\n\n      fabric.util.setStyle(element, {\n        position: 'absolute',\n        width: width + 'px',\n        height: height + 'px',\n        left: 0,\n        top: 0,\n        'touch-action': this.allowTouchScrolling ? 'manipulation' : 'none'\n      });\n      element.width = width;\n      element.height = height;\n      fabric.util.makeElementUnselectable(element);\n    },\n\n    /**\n     * Copy the entire inline style from one element (fromEl) to another (toEl)\n     * @private\n     * @param {Element} fromEl Element style is copied from\n     * @param {Element} toEl Element copied style is applied to\n     */\n    _copyCanvasStyle: function (fromEl, toEl) {\n      toEl.style.cssText = fromEl.style.cssText;\n    },\n\n    /**\n     * Returns context of canvas where object selection is drawn\n     * @return {CanvasRenderingContext2D}\n     */\n    getSelectionContext: function() {\n      return this.contextTop;\n    },\n\n    /**\n     * Returns &lt;canvas> element on which object selection is drawn\n     * @return {HTMLCanvasElement}\n     */\n    getSelectionElement: function () {\n      return this.upperCanvasEl;\n    },\n\n    /**\n     * Returns currently active object\n     * @return {fabric.Object} active object\n     */\n    getActiveObject: function () {\n      return this._activeObject;\n    },\n\n    /**\n     * Returns an array with the current selected objects\n     * @return {fabric.Object} active object\n     */\n    getActiveObjects: function () {\n      var active = this._activeObject;\n      if (active) {\n        if (active.type === 'activeSelection' && active._objects) {\n          return active._objects.slice(0);\n        }\n        else {\n          return [active];\n        }\n      }\n      return [];\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was removed\n     */\n    _onObjectRemoved: function(obj) {\n      // removing active object should fire \"selection:cleared\" events\n      if (obj === this._activeObject) {\n        this.fire('before:selection:cleared', { target: obj });\n        this._discardActiveObject();\n        this.fire('selection:cleared', { target: obj });\n        obj.fire('deselected');\n      }\n      if (this._hoveredTarget === obj) {\n        this._hoveredTarget = null;\n      }\n      this.callSuper('_onObjectRemoved', obj);\n    },\n\n    /**\n     * @private\n     * Compares the old activeObject with the current one and fires correct events\n     * @param {fabric.Object} obj old activeObject\n     */\n    _fireSelectionEvents: function(oldObjects, e) {\n      var somethingChanged = false, objects = this.getActiveObjects(),\n          added = [], removed = [], opt = { e: e };\n      oldObjects.forEach(function(oldObject) {\n        if (objects.indexOf(oldObject) === -1) {\n          somethingChanged = true;\n          oldObject.fire('deselected', opt);\n          removed.push(oldObject);\n        }\n      });\n      objects.forEach(function(object) {\n        if (oldObjects.indexOf(object) === -1) {\n          somethingChanged = true;\n          object.fire('selected', opt);\n          added.push(object);\n        }\n      });\n      if (oldObjects.length > 0 && objects.length > 0) {\n        opt.selected = added;\n        opt.deselected = removed;\n        // added for backward compatibility\n        opt.updated = added[0] || removed[0];\n        opt.target = this._activeObject;\n        somethingChanged && this.fire('selection:updated', opt);\n      }\n      else if (objects.length > 0) {\n        // deprecated event\n        if (objects.length === 1) {\n          opt.target = added[0];\n          this.fire('object:selected', opt);\n        }\n        opt.selected = added;\n        // added for backward compatibility\n        opt.target = this._activeObject;\n        this.fire('selection:created', opt);\n      }\n      else if (oldObjects.length > 0) {\n        opt.deselected = removed;\n        this.fire('selection:cleared', opt);\n      }\n    },\n\n    /**\n     * Sets given object as the only active object on canvas\n     * @param {fabric.Object} object Object to set as an active one\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setActiveObject: function (object, e) {\n      var currentActives = this.getActiveObjects();\n      this._setActiveObject(object, e);\n      this._fireSelectionEvents(currentActives, e);\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {Object} object to set as active\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n     * @return {Boolean} true if the selection happened\n     */\n    _setActiveObject: function(object, e) {\n      if (this._activeObject === object) {\n        return false;\n      }\n      if (!this._discardActiveObject(e, object)) {\n        return false;\n      }\n      if (object.onSelect({ e: e })) {\n        return false;\n      }\n      this._activeObject = object;\n      return true;\n    },\n\n    /**\n     * @private\n     */\n    _discardActiveObject: function(e, object) {\n      var obj = this._activeObject;\n      if (obj) {\n        // onDeselect return TRUE to cancel selection;\n        if (obj.onDeselect({ e: e, object: object })) {\n          return false;\n        }\n        this._activeObject = null;\n      }\n      return true;\n    },\n\n    /**\n     * Discards currently active object and fire events. If the function is called by fabric\n     * as a consequence of a mouse event, the event is passed as a parameter and\n     * sent to the fire function for the custom events. When used as a method the\n     * e param does not have any application.\n     * @param {event} e\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    discardActiveObject: function (e) {\n      var currentActives = this.getActiveObjects();\n      if (currentActives.length) {\n        this.fire('before:selection:cleared', { target: currentActives[0], e: e });\n      }\n      this._discardActiveObject(e);\n      this._fireSelectionEvents(currentActives, e);\n      return this;\n    },\n\n    /**\n     * Clears a canvas element and removes all event listeners\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    dispose: function () {\n      var wrapper = this.wrapperEl;\n      this.removeListeners();\n      wrapper.removeChild(this.upperCanvasEl);\n      wrapper.removeChild(this.lowerCanvasEl);\n      this.contextCache = null;\n      this.contextTop = null;\n      ['upperCanvasEl', 'cacheCanvasEl'].forEach((function(element) {\n        fabric.util.cleanUpJsdomNode(this[element]);\n        this[element] = undefined;\n      }).bind(this));\n      if (wrapper.parentNode) {\n        wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);\n      }\n      delete this.wrapperEl;\n      fabric.StaticCanvas.prototype.dispose.call(this);\n      return this;\n    },\n\n    /**\n     * Clears all contexts (background, main, top) of an instance\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clear: function () {\n      // this.discardActiveGroup();\n      this.discardActiveObject();\n      this.clearContext(this.contextTop);\n      return this.callSuper('clear');\n    },\n\n    /**\n     * Draws objects' controls (borders/controls)\n     * @param {CanvasRenderingContext2D} ctx Context to render controls on\n     */\n    drawControls: function(ctx) {\n      var activeObject = this._activeObject;\n\n      if (activeObject) {\n        activeObject._renderControls(ctx);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _toObject: function(instance, methodName, propertiesToInclude) {\n      //If the object is part of the current selection group, it should\n      //be transformed appropriately\n      //i.e. it should be serialised as it would appear if the selection group\n      //were to be destroyed.\n      var originalProperties = this._realizeGroupTransformOnObject(instance),\n          object = this.callSuper('_toObject', instance, methodName, propertiesToInclude);\n      //Undo the damage we did by changing all of its properties\n      this._unwindGroupTransformOnObject(instance, originalProperties);\n      return object;\n    },\n\n    /**\n     * Realises an object's group transformation on it\n     * @private\n     * @param {fabric.Object} [instance] the object to transform (gets mutated)\n     * @returns the original values of instance which were changed\n     */\n    _realizeGroupTransformOnObject: function(instance) {\n      if (instance.group && instance.group.type === 'activeSelection' && this._activeObject === instance.group) {\n        var layoutProps = ['angle', 'flipX', 'flipY', 'left', 'scaleX', 'scaleY', 'skewX', 'skewY', 'top'];\n        //Copy all the positionally relevant properties across now\n        var originalValues = {};\n        layoutProps.forEach(function(prop) {\n          originalValues[prop] = instance[prop];\n        });\n        this._activeObject.realizeTransform(instance);\n        return originalValues;\n      }\n      else {\n        return null;\n      }\n    },\n\n    /**\n     * Restores the changed properties of instance\n     * @private\n     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\n     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\n     */\n    _unwindGroupTransformOnObject: function(instance, originalValues) {\n      if (originalValues) {\n        instance.set(originalValues);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGObject: function(markup, instance, reviver) {\n      //If the object is in a selection group, simulate what would happen to that\n      //object when the group is deselected\n      var originalProperties = this._realizeGroupTransformOnObject(instance);\n      this.callSuper('_setSVGObject', markup, instance, reviver);\n      this._unwindGroupTransformOnObject(instance, originalProperties);\n    },\n\n    setViewportTransform: function (vpt) {\n      if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {\n        this._activeObject.clearContextTop();\n      }\n      fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);\n    }\n  });\n\n  // copying static properties manually to work around Opera's bug,\n  // where \"prototype\" property is enumerable and overrides existing prototype\n  for (var prop in fabric.StaticCanvas) {\n    if (prop !== 'prototype') {\n      fabric.Canvas[prop] = fabric.StaticCanvas[prop];\n    }\n  }\n\n  if (fabric.isTouchSupported) {\n    /** @ignore */\n    fabric.Canvas.prototype._setCursorFromEvent = function() { };\n  }\n})();\n\n\n(function() {\n\n  var cursorOffset = {\n        mt: 0, // n\n        tr: 1, // ne\n        mr: 2, // e\n        br: 3, // se\n        mb: 4, // s\n        bl: 5, // sw\n        ml: 6, // w\n        tl: 7 // nw\n      },\n      addListener = fabric.util.addListener,\n      removeListener = fabric.util.removeListener,\n      RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1,\n      addEventOptions = { passive: false };\n\n  function checkClick(e, value) {\n    return 'which' in e ? e.which === value : e.button === value - 1;\n  }\n\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * Map of cursor style values for each of the object controls\n     * @private\n     */\n    cursorMap: [\n      'n-resize',\n      'ne-resize',\n      'e-resize',\n      'se-resize',\n      's-resize',\n      'sw-resize',\n      'w-resize',\n      'nw-resize'\n    ],\n\n    /**\n     * Adds mouse listeners to canvas\n     * @private\n     */\n    _initEventListeners: function () {\n      // in case we initialized the class twice. This should not happen normally\n      // but in some kind of applications where the canvas element may be changed\n      // this is a workaround to having double listeners.\n      this.removeListeners();\n      this._bindEvents();\n      this.addOrRemove(addListener, 'add');\n    },\n\n    addOrRemove: function(functor, eventjsFunctor) {\n      functor(fabric.window, 'resize', this._onResize);\n      functor(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n      functor(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\n      functor(this.upperCanvasEl, 'mouseout', this._onMouseOut);\n      functor(this.upperCanvasEl, 'mouseenter', this._onMouseEnter);\n      functor(this.upperCanvasEl, 'wheel', this._onMouseWheel);\n      functor(this.upperCanvasEl, 'contextmenu', this._onContextMenu);\n      functor(this.upperCanvasEl, 'dblclick', this._onDoubleClick);\n      functor(this.upperCanvasEl, 'touchstart', this._onMouseDown, addEventOptions);\n      functor(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\n      functor(this.upperCanvasEl, 'dragover', this._onDragOver);\n      functor(this.upperCanvasEl, 'dragenter', this._onDragEnter);\n      functor(this.upperCanvasEl, 'dragleave', this._onDragLeave);\n      functor(this.upperCanvasEl, 'drop', this._onDrop);\n      if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n        eventjs[eventjsFunctor](this.upperCanvasEl, 'gesture', this._onGesture);\n        eventjs[eventjsFunctor](this.upperCanvasEl, 'drag', this._onDrag);\n        eventjs[eventjsFunctor](this.upperCanvasEl, 'orientation', this._onOrientationChange);\n        eventjs[eventjsFunctor](this.upperCanvasEl, 'shake', this._onShake);\n        eventjs[eventjsFunctor](this.upperCanvasEl, 'longpress', this._onLongPress);\n      }\n    },\n\n    /**\n     * Removes all event listeners\n     */\n    removeListeners: function() {\n      this.addOrRemove(removeListener, 'remove');\n      // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n      removeListener(fabric.document, 'mouseup', this._onMouseUp);\n      removeListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\n      removeListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\n      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n    },\n\n    /**\n     * @private\n     */\n    _bindEvents: function() {\n      if (this.eventsBound) {\n        // for any reason we pass here twice we do not want to bind events twice.\n        return;\n      }\n      this._onMouseDown = this._onMouseDown.bind(this);\n      this._onMouseMove = this._onMouseMove.bind(this);\n      this._onMouseUp = this._onMouseUp.bind(this);\n      this._onResize = this._onResize.bind(this);\n      this._onGesture = this._onGesture.bind(this);\n      this._onDrag = this._onDrag.bind(this);\n      this._onShake = this._onShake.bind(this);\n      this._onLongPress = this._onLongPress.bind(this);\n      this._onOrientationChange = this._onOrientationChange.bind(this);\n      this._onMouseWheel = this._onMouseWheel.bind(this);\n      this._onMouseOut = this._onMouseOut.bind(this);\n      this._onMouseEnter = this._onMouseEnter.bind(this);\n      this._onContextMenu = this._onContextMenu.bind(this);\n      this._onDoubleClick = this._onDoubleClick.bind(this);\n      this._onDragOver = this._onDragOver.bind(this);\n      this._onDragEnter = this._simpleEventHandler.bind(this, 'dragenter');\n      this._onDragLeave = this._simpleEventHandler.bind(this, 'dragleave');\n      this._onDrop = this._simpleEventHandler.bind(this, 'drop');\n      this.eventsBound = true;\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js gesture\n     * @param {Event} [self] Inner Event object\n     */\n    _onGesture: function(e, self) {\n      this.__onTransformGesture && this.__onTransformGesture(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js drag\n     * @param {Event} [self] Inner Event object\n     */\n    _onDrag: function(e, self) {\n      this.__onDrag && this.__onDrag(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on wheel event\n     */\n    _onMouseWheel: function(e) {\n      this.__onMouseWheel(e);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseOut: function(e) {\n      var target = this._hoveredTarget;\n      this.fire('mouse:out', { target: target, e: e });\n      this._hoveredTarget = null;\n      target && target.fire('mouseout', { e: e });\n      if (this._iTextInstances) {\n        this._iTextInstances.forEach(function(obj) {\n          if (obj.isEditing) {\n            obj.hiddenTextarea.focus();\n          }\n        });\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseenter\n     */\n    _onMouseEnter: function(e) {\n      if (!this.findTarget(e)) {\n        this.fire('mouse:over', { target: null, e: e });\n        this._hoveredTarget = null;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js orientation change\n     * @param {Event} [self] Inner Event object\n     */\n    _onOrientationChange: function(e, self) {\n      this.__onOrientationChange && this.__onOrientationChange(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */\n    _onShake: function(e, self) {\n      this.__onShake && this.__onShake(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */\n    _onLongPress: function(e, self) {\n      this.__onLongPress && this.__onLongPress(e, self);\n    },\n\n    /**\n     * prevent default to allow drop event to be fired\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     */\n    _onDragOver: function(e) {\n      e.preventDefault();\n      var target = this._simpleEventHandler('dragover', e);\n      this._fireEnterLeaveEvents(target, e);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onContextMenu: function (e) {\n      if (this.stopContextMenu) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n      return false;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onDoubleClick: function (e) {\n      this._cacheTransformEventData(e);\n      this._handleEvent(e, 'dblclick');\n      this._resetTransformEventData(e);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseDown: function (e) {\n      this.__onMouseDown(e);\n      this._resetTransformEventData();\n      addListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\n      addListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n\n      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\n      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\n\n      if (e.type === 'touchstart') {\n        // Unbind mousedown to prevent double triggers from touch devices\n        removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);\n      }\n      else {\n        addListener(fabric.document, 'mouseup', this._onMouseUp);\n        addListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    _onMouseUp: function (e) {\n      this.__onMouseUp(e);\n      this._resetTransformEventData();\n      removeListener(fabric.document, 'mouseup', this._onMouseUp);\n      removeListener(fabric.document, 'touchend', this._onMouseUp, addEventOptions);\n\n      removeListener(fabric.document, 'mousemove', this._onMouseMove, addEventOptions);\n      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n\n      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove, addEventOptions);\n      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove, addEventOptions);\n\n      if (e.type === 'touchend') {\n        // Wait 400ms before rebinding mousedown to prevent double triggers\n        // from touch devices\n        var _this = this;\n        setTimeout(function() {\n          addListener(_this.upperCanvasEl, 'mousedown', _this._onMouseDown);\n        }, 400);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _onMouseMove: function (e) {\n      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\n      this.__onMouseMove(e);\n    },\n\n    /**\n     * @private\n     */\n    _onResize: function () {\n      this.calcOffset();\n    },\n\n    /**\n     * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n     * @private\n     * @param {Object} target\n     */\n    _shouldRender: function(target) {\n      var activeObject = this._activeObject;\n\n      if (\n        !!activeObject !== !!target ||\n        (activeObject && target && (activeObject !== target))\n      ) {\n        // this covers: switch of target, from target to no target, selection of target\n        // multiSelection with key and mouse\n        return true;\n      }\n      else if (activeObject && activeObject.isEditing) {\n        // if we mouse up/down over a editing textbox a cursor change,\n        // there is no need to re render\n        return false;\n      }\n      return false;\n    },\n\n    /**\n     * Method that defines the actions when mouse is released on canvas.\n     * The method resets the currentTransform parameters, store the image corner\n     * position in the image object and render the canvas on top.\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    __onMouseUp: function (e) {\n      var target, transform = this._currentTransform,\n          groupSelector = this._groupSelector, shouldRender = false,\n          isClick = (!groupSelector || (groupSelector.left === 0 && groupSelector.top === 0));\n      this._cacheTransformEventData(e);\n      target = this._target;\n      this._handleEvent(e, 'up:before');\n      // if right/middle click just fire events and return\n      // target undefined will make the _handleEvent search the target\n      if (checkClick(e, RIGHT_CLICK)) {\n        if (this.fireRightClick) {\n          this._handleEvent(e, 'up', RIGHT_CLICK, isClick);\n        }\n        return;\n      }\n\n      if (checkClick(e, MIDDLE_CLICK)) {\n        if (this.fireMiddleClick) {\n          this._handleEvent(e, 'up', MIDDLE_CLICK, isClick);\n        }\n        this._resetTransformEventData();\n        return;\n      }\n\n      if (this.isDrawingMode && this._isCurrentlyDrawing) {\n        this._onMouseUpInDrawingMode(e);\n        return;\n      }\n\n      if (transform) {\n        this._finalizeCurrentTransform(e);\n        shouldRender = transform.actionPerformed;\n      }\n\n      if (!isClick) {\n        this._maybeGroupObjects(e);\n        shouldRender || (shouldRender = this._shouldRender(target));\n      }\n      if (target) {\n        target.isMoving = false;\n      }\n      this._setCursorFromEvent(e, target);\n      this._handleEvent(e, 'up', LEFT_CLICK, isClick);\n      this._groupSelector = null;\n      this._currentTransform = null;\n      // reset the target information about which corner is selected\n      target && (target.__corner = 0);\n      if (shouldRender) {\n        this.requestRenderAll();\n      }\n      else if (!isClick) {\n        this.renderTop();\n      }\n    },\n\n    /**\n     * @private\n     * Handle event firing for target and subtargets\n     * @param {Event} e event from mouse\n     * @param {String} eventType event to fire (up, down or move)\n     * @return {Fabric.Object} target return the the target found, for internal reasons.\n     */\n    _simpleEventHandler: function(eventType, e) {\n      var target = this.findTarget(e),\n          targets = this.targets,\n          options = {\n            e: e,\n            target: target,\n            subTargets: targets,\n          };\n      this.fire(eventType, options);\n      target && target.fire(eventType, options);\n      if (!targets) {\n        return target;\n      }\n      for (var i = 0; i < targets.length; i++) {\n        targets[i].fire(eventType, options);\n      }\n      return target;\n    },\n\n    /**\n     * @private\n     * Handle event firing for target and subtargets\n     * @param {Event} e event from mouse\n     * @param {String} eventType event to fire (up, down or move)\n     * @param {fabric.Object} targetObj receiving event\n     * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right\n     * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.\n     */\n    _handleEvent: function(e, eventType, button, isClick) {\n      var target = this._target,\n          targets = this.targets || [],\n          options = {\n            e: e,\n            target: target,\n            subTargets: targets,\n            button: button || LEFT_CLICK,\n            isClick: isClick || false,\n            pointer: this._pointer,\n            absolutePointer: this._absolutePointer,\n            transform: this._currentTransform\n          };\n      this.fire('mouse:' + eventType, options);\n      target && target.fire('mouse' + eventType, options);\n      for (var i = 0; i < targets.length; i++) {\n        targets[i].fire('mouse' + eventType, options);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n     */\n    _finalizeCurrentTransform: function(e) {\n\n      var transform = this._currentTransform,\n          target = transform.target,\n          eventName,\n          options = {\n            e: e,\n            target: target,\n            transform: transform,\n          };\n\n      if (target._scaling) {\n        target._scaling = false;\n      }\n\n      target.setCoords();\n\n      if (transform.actionPerformed || (this.stateful && target.hasStateChanged())) {\n        if (transform.actionPerformed) {\n          eventName = this._addEventOptions(options, transform);\n          this._fire(eventName, options);\n        }\n        this._fire('modified', options);\n      }\n    },\n\n    /**\n     * Mutate option object in order to add by property and give back the event name.\n     * @private\n     * @param {Object} options to mutate\n     * @param {Object} transform to inspect action from\n     */\n    _addEventOptions: function(options, transform) {\n      // we can probably add more details at low cost\n      // scale change, rotation changes, translation changes\n      var eventName, by;\n      switch (transform.action) {\n        case 'scaleX':\n          eventName = 'scaled';\n          by = 'x';\n          break;\n        case 'scaleY':\n          eventName = 'scaled';\n          by = 'y';\n          break;\n        case 'skewX':\n          eventName = 'skewed';\n          by = 'x';\n          break;\n        case 'skewY':\n          eventName = 'skewed';\n          by = 'y';\n          break;\n        case 'scale':\n          eventName = 'scaled';\n          by = 'equally';\n          break;\n        case 'rotate':\n          eventName = 'rotated';\n          break;\n        case 'drag':\n          eventName = 'moved';\n          break;\n      }\n      options.by = by;\n      return eventName;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseDownInDrawingMode: function(e) {\n      this._isCurrentlyDrawing = true;\n      if (this.getActiveObject()) {\n        this.discardActiveObject(e).requestRenderAll();\n      }\n      if (this.clipTo) {\n        fabric.util.clipContext(this, this.contextTop);\n      }\n      var pointer = this.getPointer(e);\n      this.freeDrawingBrush.onMouseDown(pointer);\n      this._handleEvent(e, 'down');\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _onMouseMoveInDrawingMode: function(e) {\n      if (this._isCurrentlyDrawing) {\n        var pointer = this.getPointer(e);\n        this.freeDrawingBrush.onMouseMove(pointer);\n      }\n      this.setCursor(this.freeDrawingCursor);\n      this._handleEvent(e, 'move');\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    _onMouseUpInDrawingMode: function(e) {\n      this._isCurrentlyDrawing = false;\n      if (this.clipTo) {\n        this.contextTop.restore();\n      }\n      this.freeDrawingBrush.onMouseUp();\n      this._handleEvent(e, 'up');\n    },\n\n    /**\n     * Method that defines the actions when mouse is clicked on canvas.\n     * The method inits the currentTransform parameters and renders all the\n     * canvas so the current image can be placed on the top canvas and the rest\n     * in on the container one.\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    __onMouseDown: function (e) {\n      this._cacheTransformEventData(e);\n      this._handleEvent(e, 'down:before');\n      var target = this._target;\n      // if right click just fire events\n      if (checkClick(e, RIGHT_CLICK)) {\n        if (this.fireRightClick) {\n          this._handleEvent(e, 'down', RIGHT_CLICK);\n        }\n        return;\n      }\n\n      if (checkClick(e, MIDDLE_CLICK)) {\n        if (this.fireMiddleClick) {\n          this._handleEvent(e, 'down', MIDDLE_CLICK);\n        }\n        return;\n      }\n\n      if (this.isDrawingMode) {\n        this._onMouseDownInDrawingMode(e);\n        return;\n      }\n\n      // ignore if some object is being transformed at this moment\n      if (this._currentTransform) {\n        return;\n      }\n\n      var pointer = this._pointer;\n      // save pointer for check in __onMouseUp event\n      this._previousPointer = pointer;\n      var shouldRender = this._shouldRender(target),\n          shouldGroup = this._shouldGroup(e, target);\n      if (this._shouldClearSelection(e, target)) {\n        this.discardActiveObject(e);\n      }\n      else if (shouldGroup) {\n        this._handleGrouping(e, target);\n        target = this._activeObject;\n      }\n\n      if (this.selection && (!target ||\n        (!target.selectable && !target.isEditing && target !== this._activeObject))) {\n        this._groupSelector = {\n          ex: pointer.x,\n          ey: pointer.y,\n          top: 0,\n          left: 0\n        };\n      }\n\n      if (target) {\n        var alreadySelected = target === this._activeObject;\n        if (target.selectable) {\n          this.setActiveObject(target, e);\n        }\n        if (target === this._activeObject && (target.__corner || !shouldGroup)) {\n          this._setupCurrentTransform(e, target, alreadySelected);\n        }\n      }\n      this._handleEvent(e, 'down');\n      // we must renderAll so that we update the visuals\n      (shouldRender || shouldGroup) && this.requestRenderAll();\n    },\n\n    /**\n     * reset cache form common information needed during event processing\n     * @private\n     */\n    _resetTransformEventData: function() {\n      this._target = null;\n      this._pointer = null;\n      this._absolutePointer = null;\n    },\n\n    /**\n     * Cache common information needed during event processing\n     * @private\n     * @param {Event} e Event object fired on event\n     */\n    _cacheTransformEventData: function(e) {\n      // reset in order to avoid stale caching\n      this._resetTransformEventData();\n      this._pointer = this.getPointer(e, true);\n      this._absolutePointer = this.restorePointerVpt(this._pointer);\n      this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;\n    },\n\n    /**\n     * @private\n     */\n    _beforeTransform: function(e) {\n      var t = this._currentTransform;\n      this.stateful && t.target.saveState();\n      this.fire('before:transform', {\n        e: e,\n        transform: t,\n      });\n      // determine if it's a drag or rotate case\n      if (t.corner) {\n        this.onBeforeScaleRotate(t.target);\n      }\n    },\n\n    /**\n     * Method that defines the actions when mouse is hovering the canvas.\n     * The currentTransform parameter will definde whether the user is rotating/scaling/translating\n     * an image or neither of them (only hovering). A group selection is also possible and would cancel\n     * all any other type of action.\n     * In case of an image transformation only the top canvas will be rendered.\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    __onMouseMove: function (e) {\n      this._handleEvent(e, 'move:before');\n      this._cacheTransformEventData(e);\n      var target, pointer;\n\n      if (this.isDrawingMode) {\n        this._onMouseMoveInDrawingMode(e);\n        return;\n      }\n      if (typeof e.touches !== 'undefined' && e.touches.length > 1) {\n        return;\n      }\n\n      var groupSelector = this._groupSelector;\n\n      // We initially clicked in an empty area, so we draw a box for multiple selection\n      if (groupSelector) {\n        pointer = this._pointer;\n\n        groupSelector.left = pointer.x - groupSelector.ex;\n        groupSelector.top = pointer.y - groupSelector.ey;\n\n        this.renderTop();\n      }\n      else if (!this._currentTransform) {\n        target = this.findTarget(e) || null;\n        this._setCursorFromEvent(e, target);\n        this._fireOverOutEvents(target, e);\n      }\n      else {\n        this._transformObject(e);\n      }\n      this._handleEvent(e, 'move');\n      this._resetTransformEventData();\n    },\n\n    /**\n     * Manage the mouseout, mouseover events for the fabric object on the canvas\n     * @param {Fabric.Object} target the target where the target from the mousemove event\n     * @param {Event} e Event object fired on mousemove\n     * @private\n     */\n    _fireOverOutEvents: function(target, e) {\n      this.fireSynteticInOutEvents(target, e, {\n        targetName: '_hoveredTarget',\n        canvasEvtOut: 'mouse:out',\n        evtOut: 'mouseout',\n        canvasEvtIn: 'mouse:over',\n        evtIn: 'mouseover',\n      });\n    },\n\n    /**\n     * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n     * @param {Fabric.Object} target the target where the target from the onDrag event\n     * @param {Event} e Event object fired on ondrag\n     * @private\n     */\n    _fireEnterLeaveEvents: function(target, e) {\n      this.fireSynteticInOutEvents(target, e, {\n        targetName: '_draggedoverTarget',\n        evtOut: 'dragleave',\n        evtIn: 'dragenter',\n      });\n    },\n\n    /**\n     * Manage the syntetic in/out events for the fabric objects on the canvas\n     * @param {Fabric.Object} target the target where the target from the supported events\n     * @param {Event} e Event object fired\n     * @param {Object} config configuration for the function to work\n     * @param {String} config.targetName property on the canvas where the old target is stored\n     * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n     * @param {String} config.evtOut name of the event to fire for out\n     * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n     * @param {String} config.evtIn name of the event to fire for in\n     * @private\n     */\n    fireSynteticInOutEvents: function(target, e, config) {\n      var inOpt, outOpt, oldTarget = this[config.targetName], outFires, inFires,\n          targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;\n      if (targetChanged) {\n        inOpt = { e: e, target: target, previousTarget: oldTarget };\n        outOpt = { e: e, target: oldTarget, nextTarget: target };\n        this[config.targetName] = target;\n      }\n      inFires = target && targetChanged;\n      outFires = oldTarget && targetChanged;\n      if (outFires) {\n        canvasEvtOut && this.fire(canvasEvtOut, outOpt);\n        oldTarget.fire(config.evtOut, outOpt);\n      }\n      if (inFires) {\n        canvasEvtIn && this.fire(canvasEvtIn, inOpt);\n        target.fire(config.evtIn, inOpt);\n      }\n    },\n\n    /**\n     * Method that defines actions when an Event Mouse Wheel\n     * @param {Event} e Event object fired on mouseup\n     */\n    __onMouseWheel: function(e) {\n      this._cacheTransformEventData(e);\n      this._handleEvent(e, 'wheel');\n      this._resetTransformEventData();\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event fired on mousemove\n     */\n    _transformObject: function(e) {\n      var pointer = this.getPointer(e),\n          transform = this._currentTransform;\n\n      transform.reset = false;\n      transform.target.isMoving = true;\n      transform.shiftKey = e.shiftKey;\n      transform.altKey = e[this.centeredKey];\n\n      this._beforeScaleTransform(e, transform);\n      this._performTransformAction(e, transform, pointer);\n\n      transform.actionPerformed && this.requestRenderAll();\n    },\n\n    /**\n     * @private\n     */\n    _performTransformAction: function(e, transform, pointer) {\n      var x = pointer.x,\n          y = pointer.y,\n          action = transform.action,\n          actionPerformed = false,\n          options = {\n            target: transform.target,\n            e: e,\n            transform: transform,\n            pointer: pointer\n          };\n\n      if (action === 'rotate') {\n        (actionPerformed = this._rotateObject(x, y)) && this._fire('rotating', options);\n      }\n      else if (action === 'scale') {\n        (actionPerformed = this._onScale(e, transform, x, y)) && this._fire('scaling', options);\n      }\n      else if (action === 'scaleX') {\n        (actionPerformed = this._scaleObject(x, y, 'x')) && this._fire('scaling', options);\n      }\n      else if (action === 'scaleY') {\n        (actionPerformed = this._scaleObject(x, y, 'y')) && this._fire('scaling', options);\n      }\n      else if (action === 'skewX') {\n        (actionPerformed = this._skewObject(x, y, 'x')) && this._fire('skewing', options);\n      }\n      else if (action === 'skewY') {\n        (actionPerformed = this._skewObject(x, y, 'y')) && this._fire('skewing', options);\n      }\n      else {\n        actionPerformed = this._translateObject(x, y);\n        if (actionPerformed) {\n          this._fire('moving', options);\n          this.setCursor(options.target.moveCursor || this.moveCursor);\n        }\n      }\n      transform.actionPerformed = transform.actionPerformed || actionPerformed;\n    },\n\n    /**\n     * @private\n     */\n    _fire: function(eventName, options) {\n      this.fire('object:' + eventName, options);\n      options.target.fire(eventName, options);\n    },\n\n    /**\n     * @private\n     */\n    _beforeScaleTransform: function(e, transform) {\n      if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {\n        var centerTransform = this._shouldCenterTransform(transform.target);\n\n        // Switch from a normal resize to center-based\n        if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||\n           // Switch from center-based resize to normal one\n           (!centerTransform && transform.originX === 'center' && transform.originY === 'center')\n        ) {\n          this._resetCurrentTransform();\n          transform.reset = true;\n        }\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {Object} transform current tranform\n     * @param {Number} x mouse position x from origin\n     * @param {Number} y mouse poistion y from origin\n     * @return {Boolean} true if the scaling occurred\n     */\n    _onScale: function(e, transform, x, y) {\n      if (this._isUniscalePossible(e, transform.target)) {\n        transform.currentAction = 'scale';\n        return this._scaleObject(x, y);\n      }\n      else {\n        // Switch from a normal resize to proportional\n        if (!transform.reset && transform.currentAction === 'scale') {\n          this._resetCurrentTransform();\n        }\n\n        transform.currentAction = 'scaleEqually';\n        return this._scaleObject(x, y, 'equally');\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target current target\n     * @return {Boolean} true if unproportional scaling is possible\n     */\n    _isUniscalePossible: function(e, target) {\n      return (e[this.uniScaleKey] || this.uniScaleTransform) && !target.get('lockUniScaling');\n    },\n\n    /**\n     * Sets the cursor depending on where the canvas is being hovered.\n     * Note: very buggy in Opera\n     * @param {Event} e Event object\n     * @param {Object} target Object that the mouse is hovering, if so.\n     */\n    _setCursorFromEvent: function (e, target) {\n      if (!target) {\n        this.setCursor(this.defaultCursor);\n        return false;\n      }\n\n      var hoverCursor = target.hoverCursor || this.hoverCursor,\n          activeSelection = this._activeObject && this._activeObject.type === 'activeSelection' ?\n            this._activeObject : null,\n          // only show proper corner when group selection is not active\n          corner = (!activeSelection || !activeSelection.contains(target))\n                    && target._findTargetCorner(this.getPointer(e, true));\n\n      if (!corner) {\n        this.setCursor(hoverCursor);\n      }\n      else {\n        this.setCursor(this.getCornerCursor(corner, target, e));\n      }\n    },\n\n    /**\n     * @private\n     */\n    getCornerCursor: function(corner, target, e) {\n      if (this.actionIsDisabled(corner, target, e)) {\n        return this.notAllowedCursor;\n      }\n      else if (corner in cursorOffset) {\n        return this._getRotatedCornerCursor(corner, target, e);\n      }\n      else if (corner === 'mtr' && target.hasRotatingPoint) {\n        return this.rotationCursor;\n      }\n      else {\n        return this.defaultCursor;\n      }\n    },\n\n    actionIsDisabled: function(corner, target, e) {\n      if (corner === 'mt' || corner === 'mb') {\n        return e[this.altActionKey] ? target.lockSkewingX : target.lockScalingY;\n      }\n      else if (corner === 'ml' || corner === 'mr') {\n        return e[this.altActionKey] ? target.lockSkewingY : target.lockScalingX;\n      }\n      else if (corner === 'mtr') {\n        return target.lockRotation;\n      }\n      else {\n        return this._isUniscalePossible(e, target) ?\n          target.lockScalingX && target.lockScalingY : target.lockScalingX || target.lockScalingY;\n      }\n    },\n\n    /**\n     * @private\n     */\n    _getRotatedCornerCursor: function(corner, target, e) {\n      var n = Math.round((target.angle % 360) / 45);\n\n      if (n < 0) {\n        n += 8; // full circle ahead\n      }\n      n += cursorOffset[corner];\n      if (e[this.altActionKey] && cursorOffset[corner] % 2 === 0) {\n        //if we are holding shift and we are on a mx corner...\n        n += 2;\n      }\n      // normalize n to be from 0 to 7\n      n %= 8;\n\n      return this.cursorMap[n];\n    }\n  });\n})();\n\n\n(function() {\n\n  var min = Math.min,\n      max = Math.max;\n\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     * @return {Boolean}\n     */\n    _shouldGroup: function(e, target) {\n      var activeObject = this._activeObject;\n      return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection &&\n            (activeObject !== target || activeObject.type === 'activeSelection') && !target.onSelect({ e: e });\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _handleGrouping: function (e, target) {\n      var activeObject = this._activeObject;\n      // avoid multi select when shift click on a corner\n      if (activeObject.__corner) {\n        return;\n      }\n      if (target === activeObject) {\n        // if it's a group, find target again, using activeGroup objects\n        target = this.findTarget(e, true);\n        // if even object is not found or we are on activeObjectCorner, bail out\n        if (!target || !target.selectable) {\n          return;\n        }\n      }\n      if (activeObject && activeObject.type === 'activeSelection') {\n        this._updateActiveSelection(target, e);\n      }\n      else {\n        this._createActiveSelection(target, e);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _updateActiveSelection: function(target, e) {\n      var activeSelection = this._activeObject,\n          currentActiveObjects = activeSelection._objects.slice(0);\n      if (activeSelection.contains(target)) {\n        activeSelection.removeWithUpdate(target);\n        this._hoveredTarget = target;\n        if (activeSelection.size() === 1) {\n          // activate last remaining object\n          this._setActiveObject(activeSelection.item(0), e);\n        }\n      }\n      else {\n        activeSelection.addWithUpdate(target);\n        this._hoveredTarget = activeSelection;\n      }\n      this._fireSelectionEvents(currentActiveObjects, e);\n    },\n\n    /**\n     * @private\n     */\n    _createActiveSelection: function(target, e) {\n      var currentActives = this.getActiveObjects(), group = this._createGroup(target);\n      this._hoveredTarget = group;\n      this._setActiveObject(group, e);\n      this._fireSelectionEvents(currentActives, e);\n    },\n\n    /**\n     * @private\n     * @param {Object} target\n     */\n    _createGroup: function(target) {\n      var objects = this._objects,\n          isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\n          groupObjects = isActiveLower\n            ? [this._activeObject, target]\n            : [target, this._activeObject];\n      this._activeObject.isEditing && this._activeObject.exitEditing();\n      return new fabric.ActiveSelection(groupObjects, {\n        canvas: this\n      });\n    },\n\n    /**\n     * @private\n     * @param {Event} e mouse event\n     */\n    _groupSelectedObjects: function (e) {\n\n      var group = this._collectObjects(e),\n          aGroup;\n\n      // do not create group for 1 element only\n      if (group.length === 1) {\n        this.setActiveObject(group[0], e);\n      }\n      else if (group.length > 1) {\n        aGroup = new fabric.ActiveSelection(group.reverse(), {\n          canvas: this\n        });\n        this.setActiveObject(aGroup, e);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _collectObjects: function(e) {\n      var group = [],\n          currentObject,\n          x1 = this._groupSelector.ex,\n          y1 = this._groupSelector.ey,\n          x2 = x1 + this._groupSelector.left,\n          y2 = y1 + this._groupSelector.top,\n          selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\n          selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\n          allowIntersect = !this.selectionFullyContained,\n          isClick = x1 === x2 && y1 === y2;\n      // we iterate reverse order to collect top first in case of click.\n      for (var i = this._objects.length; i--; ) {\n        currentObject = this._objects[i];\n\n        if (!currentObject || !currentObject.selectable || !currentObject.visible || currentObject.onSelect({ e: e })) {\n          continue;\n        }\n\n        if ((allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2)) ||\n            currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||\n            (allowIntersect && currentObject.containsPoint(selectionX1Y1)) ||\n            (allowIntersect && currentObject.containsPoint(selectionX2Y2))\n        ) {\n          group.push(currentObject);\n\n          // only add one object if it's a click\n          if (isClick) {\n            break;\n          }\n        }\n      }\n\n      return group;\n    },\n\n    /**\n     * @private\n     */\n    _maybeGroupObjects: function(e) {\n      if (this.selection && this._groupSelector) {\n        this._groupSelectedObjects(e);\n      }\n      this.setCursor(this.defaultCursor);\n      // clear selection and current transformation\n      this._groupSelector = null;\n    }\n  });\n\n})();\n\n\n(function () {\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n     * @param {Object} [options] Options object\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\n     * @example <caption>Generate jpeg dataURL with lower quality</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'jpeg',\n     *   quality: 0.8\n     * });\n     * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'png',\n     *   left: 100,\n     *   top: 100,\n     *   width: 200,\n     *   height: 200\n     * });\n     * @example <caption>Generate double scaled png dataURL</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'png',\n     *   multiplier: 2\n     * });\n     */\n    toDataURL: function (options) {\n      options || (options = { });\n\n      var format = options.format || 'png',\n          quality = options.quality || 1,\n          multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1),\n          canvasEl = this.toCanvasElement(multiplier, options);\n      return fabric.util.toDataURL(canvasEl, format, quality);\n    },\n\n    /**\n     * Create a new HTMLCanvas element painted with the current canvas content.\n     * No need to resize the actual one or repaint it.\n     * Will transfer object ownership to a new canvas, paint it, and set everything back.\n     * This is an intermediary step used to get to a dataUrl but also it is usefull to\n     * create quick image copies of a canvas without passing for the dataUrl string\n     * @param {Number} [multiplier] a zoom factor.\n     * @param {Object} [cropping] Cropping informations\n     * @param {Number} [cropping.left] Cropping left offset.\n     * @param {Number} [cropping.top] Cropping top offset.\n     * @param {Number} [cropping.width] Cropping width.\n     * @param {Number} [cropping.height] Cropping height.\n     */\n    toCanvasElement: function(multiplier, cropping) {\n      multiplier = multiplier || 1;\n      cropping = cropping || { };\n      var scaledWidth = (cropping.width || this.width) * multiplier,\n          scaledHeight = (cropping.height || this.height) * multiplier,\n          zoom = this.getZoom(),\n          originalWidth = this.width,\n          originalHeight = this.height,\n          newZoom = zoom * multiplier,\n          vp = this.viewportTransform,\n          translateX = (vp[4] - (cropping.left || 0)) * multiplier,\n          translateY = (vp[5] - (cropping.top || 0)) * multiplier,\n          originalInteractive = this.interactive,\n          originalContext = this.contextContainer,\n          newVp = [newZoom, 0, 0, newZoom, translateX, translateY],\n          canvasEl = fabric.util.createCanvasElement();\n      canvasEl.width = scaledWidth;\n      canvasEl.height = scaledHeight;\n      this.interactive = false;\n      this.viewportTransform = newVp;\n      this.width = scaledWidth;\n      this.height = scaledHeight;\n      this.calcViewportBoundaries();\n      this.contextContainer = canvasEl.getContext('2d');\n      // will be renderAllExport();\n      this.renderAll();\n      this.viewportTransform = vp;\n      this.width = originalWidth;\n      this.height = originalHeight;\n      this.calcViewportBoundaries();\n      this.contextContainer = originalContext;\n      this.interactive = originalInteractive;\n      return canvasEl;\n    },\n  });\n\n})();\n\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Populates canvas with data from the specified dataless JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}\n   * @deprecated since 1.2.2\n   * @param {String|Object} json JSON string or object\n   * @param {Function} callback Callback, invoked when json is parsed\n   *                            and corresponding objects (e.g: {@link fabric.Image})\n   *                            are initialized\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @return {fabric.Canvas} instance\n   * @chainable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   */\n  loadFromDatalessJSON: function (json, callback, reviver) {\n    return this.loadFromJSON(json, callback, reviver);\n  },\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   * @param {String|Object} json JSON string or object\n   * @param {Function} callback Callback, invoked when json is parsed\n   *                            and corresponding objects (e.g: {@link fabric.Image})\n   *                            are initialized\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @return {fabric.Canvas} instance\n   * @chainable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * });\n   */\n  loadFromJSON: function (json, callback, reviver) {\n    if (!json) {\n      return;\n    }\n\n    // serialize if it wasn't already\n    var serialized = (typeof json === 'string')\n      ? JSON.parse(json)\n      : fabric.util.object.clone(json);\n\n    var _this = this,\n        renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    this._enlivenObjects(serialized.objects, function (enlivenedObjects) {\n      _this.clear();\n      _this._setBgOverlay(serialized, function () {\n        enlivenedObjects.forEach(function(obj, index) {\n          // we splice the array just in case some custom classes restored from JSON\n          // will add more object to canvas at canvas init.\n          _this.insertAt(obj, index);\n        });\n        _this.renderOnAddRemove = renderOnAddRemove;\n        // remove parts i cannot set as options\n        delete serialized.objects;\n        delete serialized.backgroundImage;\n        delete serialized.overlayImage;\n        delete serialized.background;\n        delete serialized.overlay;\n        // this._initOptions does too many things to just\n        // call it. Normally loading an Object from JSON\n        // create the Object instance. Here the Canvas is\n        // already an instance and we are just loading things over it\n        _this._setOptions(serialized);\n        _this.renderAll();\n        callback && callback();\n      });\n    }, reviver);\n    return this;\n  },\n\n  /**\n   * @private\n   * @param {Object} serialized Object with background and overlay information\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n   */\n  _setBgOverlay: function(serialized, callback) {\n    var loaded = {\n      backgroundColor: false,\n      overlayColor: false,\n      backgroundImage: false,\n      overlayImage: false\n    };\n\n    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\n      callback && callback();\n      return;\n    }\n\n    var cbIfLoaded = function () {\n      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\n        callback && callback();\n      }\n    };\n\n    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\n    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\n    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\n    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\n  },\n\n  /**\n   * @private\n   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\n   * @param {(Object|String)} value Value to set\n   * @param {Object} loaded Set loaded property to true if property is set\n   * @param {Object} callback Callback function to invoke after property is set\n   */\n  __setBgOverlay: function(property, value, loaded, callback) {\n    var _this = this;\n\n    if (!value) {\n      loaded[property] = true;\n      callback && callback();\n      return;\n    }\n\n    if (property === 'backgroundImage' || property === 'overlayImage') {\n      fabric.util.enlivenObjects([value], function(enlivedObject){\n        _this[property] = enlivedObject[0];\n        loaded[property] = true;\n        callback && callback();\n      });\n    }\n    else {\n      this['set' + fabric.util.string.capitalize(property, true)](value, function() {\n        loaded[property] = true;\n        callback && callback();\n      });\n    }\n  },\n\n  /**\n   * @private\n   * @param {Array} objects\n   * @param {Function} callback\n   * @param {Function} [reviver]\n   */\n  _enlivenObjects: function (objects, callback, reviver) {\n    if (!objects || objects.length === 0) {\n      callback && callback([]);\n      return;\n    }\n\n    fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n      callback && callback(enlivenedObjects);\n    }, null, reviver);\n  },\n\n  /**\n   * @private\n   * @param {String} format\n   * @param {Function} callback\n   */\n  _toDataURL: function (format, callback) {\n    this.clone(function (clone) {\n      callback(clone.toDataURL(format));\n    });\n  },\n\n  /**\n   * @private\n   * @param {String} format\n   * @param {Number} multiplier\n   * @param {Function} callback\n   */\n  _toDataURLWithMultiplier: function (format, multiplier, callback) {\n    this.clone(function (clone) {\n      callback(clone.toDataURLWithMultiplier(format, multiplier));\n    });\n  },\n\n  /**\n   * Clones canvas instance\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   * @param {Array} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone: function (callback, properties) {\n    var data = JSON.stringify(this.toJSON(properties));\n    this.cloneWithoutData(function(clone) {\n      clone.loadFromJSON(data, function() {\n        callback && callback(clone);\n      });\n    });\n  },\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions, clipping properties, etc.\n   * but leaves data empty (so that you can populate it with your own)\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   */\n  cloneWithoutData: function(callback) {\n    var el = fabric.util.createCanvasElement();\n\n    el.width = this.width;\n    el.height = this.height;\n\n    var clone = new fabric.Canvas(el);\n    clone.clipTo = this.clipTo;\n    if (this.backgroundImage) {\n      clone.setBackgroundImage(this.backgroundImage.src, function() {\n        clone.renderAll();\n        callback && callback(clone);\n      });\n      clone.backgroundImageOpacity = this.backgroundImageOpacity;\n      clone.backgroundImageStretch = this.backgroundImageStretch;\n    }\n    else {\n      callback && callback(clone);\n    }\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone,\n      toFixed = fabric.util.toFixed,\n      capitalize = fabric.util.string.capitalize,\n      degreesToRadians = fabric.util.degreesToRadians,\n      supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),\n      objectCaching = !fabric.isLikelyNode,\n      ALIASING_LIMIT = 2;\n\n  if (fabric.Object) {\n    return;\n  }\n\n  /**\n   * Root object class from which all 2d shape classes inherit from\n   * @class fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n   * @see {@link fabric.Object#initialize} for constructor definition\n   *\n   * @fires added\n   * @fires removed\n   *\n   * @fires selected\n   * @fires deselected\n   * @fires modified\n   * @fires modified\n   * @fires moved\n   * @fires scaled\n   * @fires rotated\n   * @fires skewed\n   *\n   * @fires rotating\n   * @fires scaling\n   * @fires moving\n   * @fires skewing\n   *\n   * @fires mousedown\n   * @fires mouseup\n   * @fires mouseover\n   * @fires mouseout\n   * @fires mousewheel\n   * @fires mousedblclick\n   *\n   * @fires dragover\n   * @fires dragenter\n   * @fires dragleave\n   * @fires drop\n   */\n  fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Type of an object (rect, circle, path, etc.).\n     * Note that this property is meant to be read-only and not meant to be modified.\n     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\n     * @type String\n     * @default\n     */\n    type:                     'object',\n\n    /**\n     * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */\n    originX:                  'left',\n\n    /**\n     * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */\n    originY:                  'top',\n\n    /**\n     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}\n     * @type Number\n     * @default\n     */\n    top:                      0,\n\n    /**\n     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}\n     * @type Number\n     * @default\n     */\n    left:                     0,\n\n    /**\n     * Object width\n     * @type Number\n     * @default\n     */\n    width:                    0,\n\n    /**\n     * Object height\n     * @type Number\n     * @default\n     */\n    height:                   0,\n\n    /**\n     * Object scale factor (horizontal)\n     * @type Number\n     * @default\n     */\n    scaleX:                   1,\n\n    /**\n     * Object scale factor (vertical)\n     * @type Number\n     * @default\n     */\n    scaleY:                   1,\n\n    /**\n     * When true, an object is rendered as flipped horizontally\n     * @type Boolean\n     * @default\n     */\n    flipX:                    false,\n\n    /**\n     * When true, an object is rendered as flipped vertically\n     * @type Boolean\n     * @default\n     */\n    flipY:                    false,\n\n    /**\n     * Opacity of an object\n     * @type Number\n     * @default\n     */\n    opacity:                  1,\n\n    /**\n     * Angle of rotation of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    angle:                    0,\n\n    /**\n     * Angle of skew on x axes of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    skewX:                    0,\n\n    /**\n     * Angle of skew on y axes of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    skewY:                    0,\n\n    /**\n     * Size of object's controlling corners (in pixels)\n     * @type Number\n     * @default\n     */\n    cornerSize:               13,\n\n    /**\n     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\n     * @type Boolean\n     * @default\n     */\n    transparentCorners:       true,\n\n    /**\n     * Default cursor value used when hovering over this object on canvas\n     * @type String\n     * @default\n     */\n    hoverCursor:              null,\n\n    /**\n     * Default cursor value used when moving this object on canvas\n     * @type String\n     * @default\n     */\n    moveCursor:               null,\n\n    /**\n     * Padding between object and its controlling borders (in pixels)\n     * @type Number\n     * @default\n     */\n    padding:                  0,\n\n    /**\n     * Color of controlling borders of an object (when it's active)\n     * @type String\n     * @default\n     */\n    borderColor:              'rgba(102,153,255,0.75)',\n\n    /**\n     * Array specifying dash pattern of an object's borders (hasBorder must be true)\n     * @since 1.6.2\n     * @type Array\n     */\n    borderDashArray:          null,\n\n    /**\n     * Color of controlling corners of an object (when it's active)\n     * @type String\n     * @default\n     */\n    cornerColor:              'rgba(102,153,255,0.5)',\n\n    /**\n     * Color of controlling corners of an object (when it's active and transparentCorners false)\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    cornerStrokeColor:        null,\n\n    /**\n     * Specify style of control, 'rect' or 'circle'\n     * @since 1.6.2\n     * @type String\n     */\n    cornerStyle:          'rect',\n\n    /**\n     * Array specifying dash pattern of an object's control (hasBorder must be true)\n     * @since 1.6.2\n     * @type Array\n     */\n    cornerDashArray:          null,\n\n    /**\n     * When true, this object will use center point as the origin of transformation\n     * when being scaled via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredScaling:          false,\n\n    /**\n     * When true, this object will use center point as the origin of transformation\n     * when being rotated via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredRotation:         true,\n\n    /**\n     * Color of object's fill\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */\n    fill:                     'rgb(0,0,0)',\n\n    /**\n     * Fill rule used to fill an object\n     * accepted values are nonzero, evenodd\n     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\n     * @type String\n     * @default\n     */\n    fillRule:                 'nonzero',\n\n    /**\n     * Composite rule used for canvas globalCompositeOperation\n     * @type String\n     * @default\n     */\n    globalCompositeOperation: 'source-over',\n\n    /**\n     * Background color of an object.\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */\n    backgroundColor:          '',\n\n    /**\n     * Selection Background color of an object. colored layer behind the object when it is active.\n     * does not mix good with globalCompositeOperation methods.\n     * @type String\n     * @default\n     */\n    selectionBackgroundColor:          '',\n\n    /**\n     * When defined, an object is rendered via stroke and this property specifies its color\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */\n    stroke:                   null,\n\n    /**\n     * Width of a stroke used to render this object\n     * @type Number\n     * @default\n     */\n    strokeWidth:              1,\n\n    /**\n     * Array specifying dash pattern of an object's stroke (stroke must be defined)\n     * @type Array\n     */\n    strokeDashArray:          null,\n\n    /**\n     * Line offset of an object's stroke\n     * @type Number\n     * @default\n     */\n    strokeDashOffset: 0,\n\n    /**\n     * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\n     * @type String\n     * @default\n     */\n    strokeLineCap:            'butt',\n\n    /**\n     * Corner style of an object's stroke (one of \"bevil\", \"round\", \"miter\")\n     * @type String\n     * @default\n     */\n    strokeLineJoin:           'miter',\n\n    /**\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\n     * @type Number\n     * @default\n     */\n    strokeMiterLimit:         4,\n\n    /**\n     * Shadow object representing shadow of this shape\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow:                   null,\n\n    /**\n     * Opacity of object's controlling borders when object is active and moving\n     * @type Number\n     * @default\n     */\n    borderOpacityWhenMoving:  0.4,\n\n    /**\n     * Scale factor of object's controlling borders\n     * @type Number\n     * @default\n     */\n    borderScaleFactor:        1,\n\n    /**\n     * Transform matrix (similar to SVG's transform matrix)\n     * @type Array\n     */\n    transformMatrix:          null,\n\n    /**\n     * Minimum allowed scale value of an object\n     * @type Number\n     * @default\n     */\n    minScaleLimit:            0,\n\n    /**\n     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\n     * But events still fire on it.\n     * @type Boolean\n     * @default\n     */\n    selectable:               true,\n\n    /**\n     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\n     * @type Boolean\n     * @default\n     */\n    evented:                  true,\n\n    /**\n     * When set to `false`, an object is not rendered on canvas\n     * @type Boolean\n     * @default\n     */\n    visible:                  true,\n\n    /**\n     * When set to `false`, object's controls are not displayed and can not be used to manipulate object\n     * @type Boolean\n     * @default\n     */\n    hasControls:              true,\n\n    /**\n     * When set to `false`, object's controlling borders are not rendered\n     * @type Boolean\n     * @default\n     */\n    hasBorders:               true,\n\n    /**\n     * When set to `false`, object's controlling rotating point will not be visible or selectable\n     * @type Boolean\n     * @default\n     */\n    hasRotatingPoint:         true,\n\n    /**\n     * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)\n     * @type Number\n     * @default\n     */\n    rotatingPointOffset:      40,\n\n    /**\n     * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\n     * @type Boolean\n     * @default\n     */\n    perPixelTargetFind:       false,\n\n    /**\n     * When `false`, default object's values are not included in its serialization\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues:     true,\n\n    /**\n     * Function that determines clipping of an object (context is passed as a first argument).\n     * If you are using code minification, ctx argument can be minified/manglied you should use\n     * as a workaround `var ctx = arguments[0];` in the function;\n     * Note that context origin is at the object's center point (not left/top corner)\n     * @deprecated since 2.0.0\n     * @type Function\n     */\n    clipTo:                   null,\n\n    /**\n     * When `true`, object horizontal movement is locked\n     * @type Boolean\n     * @default\n     */\n    lockMovementX:            false,\n\n    /**\n     * When `true`, object vertical movement is locked\n     * @type Boolean\n     * @default\n     */\n    lockMovementY:            false,\n\n    /**\n     * When `true`, object rotation is locked\n     * @type Boolean\n     * @default\n     */\n    lockRotation:             false,\n\n    /**\n     * When `true`, object horizontal scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockScalingX:             false,\n\n    /**\n     * When `true`, object vertical scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockScalingY:             false,\n\n    /**\n     * When `true`, object non-uniform scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockUniScaling:           false,\n\n    /**\n     * When `true`, object horizontal skewing is locked\n     * @type Boolean\n     * @default\n     */\n    lockSkewingX:             false,\n\n    /**\n     * When `true`, object vertical skewing is locked\n     * @type Boolean\n     * @default\n     */\n    lockSkewingY:             false,\n\n    /**\n     * When `true`, object cannot be flipped by scaling into negative values\n     * @type Boolean\n     * @default\n     */\n    lockScalingFlip:          false,\n\n    /**\n     * When `true`, object is not exported in OBJECT/JSON\n     * since 1.6.3\n     * @type Boolean\n     * @default\n     */\n    excludeFromExport:        false,\n\n    /**\n     * When `true`, object is cached on an additional canvas.\n     * default to true\n     * since 1.7.0\n     * @type Boolean\n     * @default true\n     */\n    objectCaching:            objectCaching,\n\n    /**\n     * When `true`, object properties are checked for cache invalidation. In some particular\n     * situation you may want this to be disabled ( spray brush, very big, groups)\n     * or if your application does not allow you to modify properties for groups child you want\n     * to disable it for groups.\n     * default to false\n     * since 1.7.0\n     * @type Boolean\n     * @default false\n     */\n    statefullCache:            false,\n\n    /**\n     * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled\n     * too much and will be redrawn with correct details at the end of scaling.\n     * this setting is performance and application dependant.\n     * default to true\n     * since 1.7.0\n     * @type Boolean\n     * @default true\n     */\n    noScaleCache:              true,\n\n    /**\n     * When set to `true`, object's cache will be rerendered next render call.\n     * since 1.7.0\n     * @type Boolean\n     * @default true\n     */\n    dirty:                true,\n\n    /**\n     * keeps the value of the last hovered corner during mouse move.\n     * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n     * It should be private, but there is no harm in using it as\n     * a read-only property.\n     * @type number|string|any\n     * @default 0\n     */\n    __corner: 0,\n\n    /**\n     * Determines if the fill or the stroke is drawn first (one of \"fill\" or \"stroke\")\n     * @type String\n     * @default\n     */\n    paintFirst:           'fill',\n\n    /**\n     * List of properties to consider when checking if state\n     * of an object is changed (fabric.Object#hasStateChanged)\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: (\n      'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\n      'stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit ' +\n      'angle opacity fill globalCompositeOperation shadow clipTo visible backgroundColor ' +\n      'skewX skewY fillRule paintFirst clipPath'\n    ).split(' '),\n\n    /**\n     * List of properties to consider when checking if cache needs refresh\n     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\n     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n     * and refreshed at the next render\n     * @type Array\n     */\n    cacheProperties: (\n      'fill stroke strokeWidth strokeDashArray width height paintFirst' +\n      ' strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath'\n    ).split(' '),\n\n    /**\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n     * the clipPath object gets used when the object has rendered, and the context is placed in the center\n     * of the object cacheCanvas.\n     * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'\n     * @type fabric.Object\n     */\n    clipPath: undefined,\n\n    /**\n     * Meaningful ONLY when the object is used as clipPath.\n     * if true, the clipPath will make the object clip to the outside of the clipPath\n     * since 2.4.0\n     * @type boolean\n     * @default false\n     */\n    inverted: false,\n\n    /**\n     * Meaningful ONLY when the object is used as clipPath.\n     * if true, the clipPath will have its top and left relative to canvas, and will\n     * not be influenced by the object transform. This will make the clipPath relative\n     * to the canvas, but clipping just a particular object.\n     * WARNING this is beta, this feature may change or be renamed.\n     * since 2.4.0\n     * @type boolean\n     * @default false\n     */\n    absolutePositioned: false,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      if (options) {\n        this.setOptions(options);\n      }\n    },\n\n    /**\n     * Create a the canvas used to keep the cached copy of the object\n     * @private\n     */\n    _createCacheCanvas: function() {\n      this._cacheProperties = {};\n      this._cacheCanvas = fabric.util.createCanvasElement();\n      this._cacheContext = this._cacheCanvas.getContext('2d');\n      this._updateCacheCanvas();\n      // if canvas gets created, is empty, so dirty.\n      this.dirty = true;\n    },\n\n    /**\n     * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal\n     * and each side do not cross fabric.cacheSideLimit\n     * those numbers are configurable so that you can get as much detail as you want\n     * making bargain with performances.\n     * @param {Object} dims\n     * @param {Object} dims.width width of canvas\n     * @param {Object} dims.height height of canvas\n     * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */\n    _limitCacheSize: function(dims) {\n      var perfLimitSizeTotal = fabric.perfLimitSizeTotal,\n          width = dims.width, height = dims.height,\n          max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;\n      if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {\n        if (width < min) {\n          dims.width = min;\n        }\n        if (height < min) {\n          dims.height = min;\n        }\n        return dims;\n      }\n      var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal),\n          capValue = fabric.util.capValue,\n          x = capValue(min, limitedDims.x, max),\n          y = capValue(min, limitedDims.y, max);\n      if (width > x) {\n        dims.zoomX /= width / x;\n        dims.width = x;\n        dims.capped = true;\n      }\n      if (height > y) {\n        dims.zoomY /= height / y;\n        dims.height = y;\n        dims.capped = true;\n      }\n      return dims;\n    },\n\n    /**\n     * Return the dimension and the zoom level needed to create a cache canvas\n     * big enough to host the object to be cached.\n     * @private\n     * @return {Object}.x width of object to be cached\n     * @return {Object}.y height of object to be cached\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */\n    _getCacheCanvasDimensions: function() {\n      var objectScale = this.getTotalObjectScaling(),\n          dim = this._getNonTransformedDimensions(),\n          zoomX = objectScale.scaleX,\n          zoomY = objectScale.scaleY,\n          width = dim.x * zoomX,\n          height = dim.y * zoomY;\n      return {\n        // for sure this ALIASING_LIMIT is slightly crating problem\n        // in situation in wich the cache canvas gets an upper limit\n        width: width + ALIASING_LIMIT,\n        height: height + ALIASING_LIMIT,\n        zoomX: zoomX,\n        zoomY: zoomY,\n        x: dim.x,\n        y: dim.y\n      };\n    },\n\n    /**\n     * Update width and height of the canvas for cache\n     * returns true or false if canvas needed resize.\n     * @private\n     * @return {Boolean} true if the canvas has been resized\n     */\n    _updateCacheCanvas: function() {\n      var targetCanvas = this.canvas;\n      if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n        var target = targetCanvas._currentTransform.target,\n            action = targetCanvas._currentTransform.action;\n        if (this === target && action.slice && action.slice(0, 5) === 'scale') {\n          return false;\n        }\n      }\n      var canvas = this._cacheCanvas,\n          dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n          minCacheSize = fabric.minCacheSideLimit,\n          width = dims.width, height = dims.height, drawingWidth, drawingHeight,\n          zoomX = dims.zoomX, zoomY = dims.zoomY,\n          dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight,\n          zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY,\n          shouldRedraw = dimensionsChanged || zoomChanged,\n          additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;\n      if (dimensionsChanged) {\n        var canvasWidth = this._cacheCanvas.width,\n            canvasHeight = this._cacheCanvas.height,\n            sizeGrowing = width > canvasWidth || height > canvasHeight,\n            sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\n              canvasWidth > minCacheSize && canvasHeight > minCacheSize;\n        shouldResizeCanvas = sizeGrowing || sizeShrinking;\n        if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {\n          additionalWidth = width * 0.1;\n          additionalHeight = height * 0.1;\n        }\n      }\n      if (shouldRedraw) {\n        if (shouldResizeCanvas) {\n          canvas.width = Math.ceil(width + additionalWidth);\n          canvas.height = Math.ceil(height + additionalHeight);\n        }\n        else {\n          this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);\n          this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);\n        }\n        drawingWidth = dims.x * zoomX / 2;\n        drawingHeight = dims.y * zoomY / 2;\n        this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n        this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n        this.cacheWidth = width;\n        this.cacheHeight = height;\n        this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);\n        this._cacheContext.scale(zoomX, zoomY);\n        this.zoomX = zoomX;\n        this.zoomY = zoomY;\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Sets object's properties from options\n     * @param {Object} [options] Options object\n     */\n    setOptions: function(options) {\n      this._setOptions(options);\n      this._initGradient(options.fill, 'fill');\n      this._initGradient(options.stroke, 'stroke');\n      this._initClipping(options);\n      this._initPattern(options.fill, 'fill');\n      this._initPattern(options.stroke, 'stroke');\n    },\n\n    /**\n     * Transforms context when rendering an object\n     * @param {CanvasRenderingContext2D} ctx Context\n     */\n    transform: function(ctx) {\n      var m;\n      if (this.group && !this.group._transformDone) {\n        m = this.calcTransformMatrix();\n      }\n      else {\n        m = this.calcOwnMatrix();\n      }\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    },\n\n    /**\n     * Returns an object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\n          object = {\n            type:                     this.type,\n            version:                  fabric.version,\n            originX:                  this.originX,\n            originY:                  this.originY,\n            left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\n            top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\n            width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\n            height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\n            fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\n            stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\n            strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n            strokeDashArray:          this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,\n            strokeLineCap:            this.strokeLineCap,\n            strokeDashOffset:         this.strokeDashOffset,\n            strokeLineJoin:           this.strokeLineJoin,\n            strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n            scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n            scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n            angle:                    toFixed(this.angle, NUM_FRACTION_DIGITS),\n            flipX:                    this.flipX,\n            flipY:                    this.flipY,\n            opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\n            shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\n            visible:                  this.visible,\n            clipTo:                   this.clipTo && String(this.clipTo),\n            backgroundColor:          this.backgroundColor,\n            fillRule:                 this.fillRule,\n            paintFirst:               this.paintFirst,\n            globalCompositeOperation: this.globalCompositeOperation,\n            transformMatrix:          this.transformMatrix ? this.transformMatrix.concat() : null,\n            skewX:                    toFixed(this.skewX, NUM_FRACTION_DIGITS),\n            skewY:                    toFixed(this.skewY, NUM_FRACTION_DIGITS),\n          };\n\n      if (this.clipPath) {\n        object.clipPath = this.clipPath.toObject(propertiesToInclude);\n        object.clipPath.inverted = this.clipPath.inverted;\n        object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;\n      }\n\n      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n      if (!this.includeDefaultValues) {\n        object = this._removeDefaultValues(object);\n      }\n\n      return object;\n    },\n\n    /**\n     * Returns (dataless) object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      // will be overwritten by subclasses\n      return this.toObject(propertiesToInclude);\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     */\n    _removeDefaultValues: function(object) {\n      var prototype = fabric.util.getKlass(object.type).prototype,\n          stateProperties = prototype.stateProperties;\n      stateProperties.forEach(function(prop) {\n        if (object[prop] === prototype[prop]) {\n          delete object[prop];\n        }\n        var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&\n                      Object.prototype.toString.call(prototype[prop]) === '[object Array]';\n\n        // basically a check for [] === []\n        if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {\n          delete object[prop];\n        }\n      });\n\n      return object;\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.' + capitalize(this.type) + '>';\n    },\n\n    /**\n     * Return the object scale factor counting also the group scaling\n     * @return {Object} object with scaleX and scaleY properties\n     */\n    getObjectScaling: function() {\n      var scaleX = this.scaleX, scaleY = this.scaleY;\n      if (this.group) {\n        var scaling = this.group.getObjectScaling();\n        scaleX *= scaling.scaleX;\n        scaleY *= scaling.scaleY;\n      }\n      return { scaleX: scaleX, scaleY: scaleY };\n    },\n\n    /**\n     * Return the object scale factor counting also the group scaling, zoom and retina\n     * @return {Object} object with scaleX and scaleY properties\n     */\n    getTotalObjectScaling: function() {\n      var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;\n      if (this.canvas) {\n        var zoom = this.canvas.getZoom();\n        var retina = this.canvas.getRetinaScaling();\n        scaleX *= zoom * retina;\n        scaleY *= zoom * retina;\n      }\n      return { scaleX: scaleX, scaleY: scaleY };\n    },\n\n    /**\n     * Return the object opacity counting also the group property\n     * @return {Number}\n     */\n    getObjectOpacity: function() {\n      var opacity = this.opacity;\n      if (this.group) {\n        opacity *= this.group.getObjectOpacity();\n      }\n      return opacity;\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {*} value\n     * @return {fabric.Object} thisArg\n     */\n    _set: function(key, value) {\n      var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY'),\n          isChanged = this[key] !== value, groupNeedsUpdate = false;\n\n      if (shouldConstrainValue) {\n        value = this._constrainScale(value);\n      }\n      if (key === 'scaleX' && value < 0) {\n        this.flipX = !this.flipX;\n        value *= -1;\n      }\n      else if (key === 'scaleY' && value < 0) {\n        this.flipY = !this.flipY;\n        value *= -1;\n      }\n      else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\n        value = new fabric.Shadow(value);\n      }\n      else if (key === 'dirty' && this.group) {\n        this.group.set('dirty', value);\n      }\n\n      this[key] = value;\n\n      if (isChanged) {\n        groupNeedsUpdate = this.group && this.group.isOnACache();\n        if (this.cacheProperties.indexOf(key) > -1) {\n          this.dirty = true;\n          groupNeedsUpdate && this.group.set('dirty', true);\n        }\n        else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {\n          this.group.set('dirty', true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * This callback function is called by the parent group of an object every\n     * time a non-delegated property changes on the group. It is passed the key\n     * and value as parameters. Not adding in this function's signature to avoid\n     * Travis build error about unused variables.\n     */\n    setOnGroup: function() {\n      // implemented by sub-classes, as needed.\n    },\n\n    /**\n     * Retrieves viewportTransform from Object's canvas if possible\n     * @method getViewportTransform\n     * @memberOf fabric.Object.prototype\n     * @return {Array}\n     */\n    getViewportTransform: function() {\n      if (this.canvas && this.canvas.viewportTransform) {\n        return this.canvas.viewportTransform;\n      }\n      return fabric.iMatrix.concat();\n    },\n\n    /*\n     * @private\n     * return if the object would be visible in rendering\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean}\n     */\n    isNotVisible: function() {\n      return this.opacity === 0 ||\n        (this.width === 0 && this.height === 0 && this.strokeWidth === 0) ||\n        !this.visible;\n    },\n\n    /**\n     * Renders an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    render: function(ctx) {\n      // do not render if width/height are zeros or object is not visible\n      if (this.isNotVisible()) {\n        return;\n      }\n      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n        return;\n      }\n      ctx.save();\n      this._setupCompositeOperation(ctx);\n      this.drawSelectionBackground(ctx);\n      this.transform(ctx);\n      this._setOpacity(ctx);\n      this._setShadow(ctx, this);\n      if (this.transformMatrix) {\n        ctx.transform.apply(ctx, this.transformMatrix);\n      }\n      this.clipTo && fabric.util.clipContext(this, ctx);\n      if (this.shouldCache()) {\n        this.renderCache();\n        this.drawCacheOnCanvas(ctx);\n      }\n      else {\n        this._removeCacheCanvas();\n        this.dirty = false;\n        this.drawObject(ctx);\n        if (this.objectCaching && this.statefullCache) {\n          this.saveState({ propertySet: 'cacheProperties' });\n        }\n      }\n      this.clipTo && ctx.restore();\n      ctx.restore();\n    },\n\n    renderCache: function(options) {\n      options = options || {};\n      if (!this._cacheCanvas) {\n        this._createCacheCanvas();\n      }\n      if (this.isCacheDirty()) {\n        this.statefullCache && this.saveState({ propertySet: 'cacheProperties' });\n        this.drawObject(this._cacheContext, options.forClipping);\n        this.dirty = false;\n      }\n    },\n\n    /**\n     * Remove cacheCanvas and its dimensions from the objects\n     */\n    _removeCacheCanvas: function() {\n      this._cacheCanvas = null;\n      this.cacheWidth = 0;\n      this.cacheHeight = 0;\n    },\n\n    /**\n     * When set to `true`, force the object to have its own cache, even if it is inside a group\n     * it may be needed when your object behave in a particular way on the cache and always needs\n     * its own isolated canvas to render correctly.\n     * Created to be overridden\n     * since 1.7.12\n     * @returns false\n     */\n    needsItsOwnCache: function() {\n      if (this.paintFirst === 'stroke' && typeof this.shadow === 'object') {\n        return true;\n      }\n      if (this.clipPath) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      this.ownCaching = this.objectCaching &&\n      (!this.group || this.needsItsOwnCache() || !this.group.isOnACache());\n      return this.ownCaching;\n    },\n\n    /**\n     * Check if this object or a child object will cast a shadow\n     * used by Group.shouldCache to know if child has a shadow recursively\n     * @return {Boolean}\n     */\n    willDrawShadow: function() {\n      return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\n    },\n\n    /**\n     * Execute the drawing operation for an object clipPath\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawClipPathOnCache: function(ctx) {\n      var path = this.clipPath;\n      ctx.save();\n      // DEBUG: uncomment this line, comment the following\n      // ctx.globalAlpha = 0.4\n      if (path.inverted) {\n        ctx.globalCompositeOperation = 'destination-out';\n      }\n      else {\n        ctx.globalCompositeOperation = 'destination-in';\n      }\n      //ctx.scale(1 / 2, 1 / 2);\n      if (path.absolutePositioned) {\n        var m = fabric.util.invertTransform(this.calcTransformMatrix());\n        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n      }\n      path.transform(ctx);\n      ctx.scale(1 / path.zoomX, 1 / path.zoomY);\n      ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\n      ctx.restore();\n    },\n\n    /**\n     * Execute the drawing operation for an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawObject: function(ctx, forClipping) {\n      var originalFill = this.fill, originalStroke = this.stroke;\n      if (forClipping) {\n        this.fill = 'black';\n        this.stroke = '';\n        this._setClippingProperties(ctx);\n      }\n      else {\n        this._renderBackground(ctx);\n        this._setStrokeStyles(ctx, this);\n        this._setFillStyles(ctx, this);\n      }\n      this._render(ctx);\n      this._drawClipPath(ctx);\n      this.fill = originalFill;\n      this.stroke = originalStroke;\n    },\n\n    _drawClipPath: function(ctx) {\n      var path = this.clipPath;\n      if (!path) { return; }\n      // needed to setup a couple of variables\n      // path canvas gets overridden with this one.\n      // TODO find a better solution?\n      path.canvas = this.canvas;\n      path.shouldCache();\n      path._transformDone = true;\n      path.renderCache({ forClipping: true });\n      this.drawClipPathOnCache(ctx);\n    },\n\n    /**\n     * Paint the cached copy of the object on the target context.\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawCacheOnCanvas: function(ctx) {\n      ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n      ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\n    },\n\n    /**\n     * Check if cache is dirty\n     * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n     * on parent canvas.\n     */\n    isCacheDirty: function(skipCanvas) {\n      if (this.isNotVisible()) {\n        return false;\n      }\n      if (this._cacheCanvas && !skipCanvas && this._updateCacheCanvas()) {\n        // in this case the context is already cleared.\n        return true;\n      }\n      else {\n        if (this.dirty ||\n          (this.clipPath && this.clipPath.absolutePositioned) ||\n          (this.statefullCache && this.hasStateChanged('cacheProperties'))\n        ) {\n          if (this._cacheCanvas && !skipCanvas) {\n            var width = this.cacheWidth / this.zoomX;\n            var height = this.cacheHeight / this.zoomY;\n            this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\n          }\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Draws a background for the object big as its untransformed dimensions\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderBackground: function(ctx) {\n      if (!this.backgroundColor) {\n        return;\n      }\n      var dim = this._getNonTransformedDimensions();\n      ctx.fillStyle = this.backgroundColor;\n\n      ctx.fillRect(\n        -dim.x / 2,\n        -dim.y / 2,\n        dim.x,\n        dim.y\n      );\n      // if there is background color no other shadows\n      // should be casted\n      this._removeShadow(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setOpacity: function(ctx) {\n      if (this.group && !this.group._transformDone) {\n        ctx.globalAlpha = this.getObjectOpacity();\n      }\n      else {\n        ctx.globalAlpha *= this.opacity;\n      }\n    },\n\n    _setStrokeStyles: function(ctx, decl) {\n      if (decl.stroke) {\n        ctx.lineWidth = decl.strokeWidth;\n        ctx.lineCap = decl.strokeLineCap;\n        ctx.lineDashOffset = decl.strokeDashOffset;\n        ctx.lineJoin = decl.strokeLineJoin;\n        ctx.miterLimit = decl.strokeMiterLimit;\n        ctx.strokeStyle = decl.stroke.toLive\n          ? decl.stroke.toLive(ctx, this)\n          : decl.stroke;\n      }\n    },\n\n    _setFillStyles: function(ctx, decl) {\n      if (decl.fill) {\n        ctx.fillStyle = decl.fill.toLive\n          ? decl.fill.toLive(ctx, this)\n          : decl.fill;\n      }\n    },\n\n    _setClippingProperties: function(ctx) {\n      ctx.globalAlpha = 1;\n      ctx.strokeStyle = 'transparent';\n      ctx.fillStyle = '#000000';\n    },\n\n    /**\n     * @private\n     * Sets line dash\n     * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n     * @param {Array} dashArray array representing dashes\n     * @param {Function} alternative function to call if browser does not support lineDash\n     */\n    _setLineDash: function(ctx, dashArray, alternative) {\n      if (!dashArray) {\n        return;\n      }\n      // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n      if (1 & dashArray.length) {\n        dashArray.push.apply(dashArray, dashArray);\n      }\n      if (supportsLineDash) {\n        ctx.setLineDash(dashArray);\n      }\n      else {\n        alternative && alternative(ctx);\n      }\n    },\n\n    /**\n     * Renders controls and borders for the object\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [styleOverride] properties to override the object style\n     */\n    _renderControls: function(ctx, styleOverride) {\n      var vpt = this.getViewportTransform(),\n          matrix = this.calcTransformMatrix(),\n          options, drawBorders, drawControls;\n      styleOverride = styleOverride || { };\n      drawBorders = typeof styleOverride.hasBorders !== 'undefined' ? styleOverride.hasBorders : this.hasBorders;\n      drawControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls;\n      matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);\n      options = fabric.util.qrDecompose(matrix);\n      ctx.save();\n      ctx.translate(options.translateX, options.translateY);\n      ctx.lineWidth = 1 * this.borderScaleFactor;\n      if (!this.group) {\n        ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      }\n      if (styleOverride.forActiveSelection) {\n        ctx.rotate(degreesToRadians(options.angle));\n        drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);\n      }\n      else {\n        ctx.rotate(degreesToRadians(this.angle));\n        drawBorders && this.drawBorders(ctx, styleOverride);\n      }\n      drawControls && this.drawControls(ctx, styleOverride);\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setShadow: function(ctx) {\n      if (!this.shadow) {\n        return;\n      }\n\n      var shadow = this.shadow, canvas = this.canvas,\n          multX = (canvas && canvas.viewportTransform[0]) || 1,\n          multY = (canvas && canvas.viewportTransform[3]) || 1,\n          scaling = this.getObjectScaling();\n      if (canvas && canvas._isRetinaScaling()) {\n        multX *= fabric.devicePixelRatio;\n        multY *= fabric.devicePixelRatio;\n      }\n      ctx.shadowColor = shadow.color;\n      ctx.shadowBlur = shadow.blur * fabric.browserShadowBlurConstant *\n        (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;\n      ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;\n      ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _removeShadow: function(ctx) {\n      if (!this.shadow) {\n        return;\n      }\n\n      ctx.shadowColor = '';\n      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} filler fabric.Pattern or fabric.Gradient\n     * @return {Object} offset.offsetX offset for text rendering\n     * @return {Object} offset.offsetY offset for text rendering\n     */\n    _applyPatternGradientTransform: function(ctx, filler) {\n      if (!filler || !filler.toLive) {\n        return { offsetX: 0, offsetY: 0 };\n      }\n      var t = filler.gradientTransform || filler.patternTransform;\n      var offsetX = -this.width / 2 + filler.offsetX || 0,\n          offsetY = -this.height / 2 + filler.offsetY || 0;\n      ctx.translate(offsetX, offsetY);\n      if (t) {\n        ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n      }\n      return { offsetX: offsetX, offsetY: offsetY };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderPaintInOrder: function(ctx) {\n      if (this.paintFirst === 'stroke') {\n        this._renderStroke(ctx);\n        this._renderFill(ctx);\n      }\n      else {\n        this._renderFill(ctx);\n        this._renderStroke(ctx);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderFill: function(ctx) {\n      if (!this.fill) {\n        return;\n      }\n\n      ctx.save();\n      this._applyPatternGradientTransform(ctx, this.fill);\n      if (this.fillRule === 'evenodd') {\n        ctx.fill('evenodd');\n      }\n      else {\n        ctx.fill();\n      }\n      ctx.restore();\n    },\n\n    _renderStroke: function(ctx) {\n      if (!this.stroke || this.strokeWidth === 0) {\n        return;\n      }\n\n      if (this.shadow && !this.shadow.affectStroke) {\n        this._removeShadow(ctx);\n      }\n\n      ctx.save();\n      this._setLineDash(ctx, this.strokeDashArray, this._renderDashedStroke);\n      this._applyPatternGradientTransform(ctx, this.stroke);\n      ctx.stroke();\n      ctx.restore();\n    },\n\n    /**\n     * This function is an helper for svg import. it returns the center of the object in the svg\n     * untransformed coordinates\n     * @private\n     * @return {Object} center point from element coordinates\n     */\n    _findCenterFromElement: function() {\n      return { x: this.left + this.width / 2, y: this.top + this.height / 2 };\n    },\n\n    /**\n     * This function is an helper for svg import. it decompose the transformMatrix\n     * and assign properties to object.\n     * untransformed coordinates\n     * @private\n     * @chainable\n     */\n    _assignTransformMatrixProps: function() {\n      if (this.transformMatrix) {\n        var options = fabric.util.qrDecompose(this.transformMatrix);\n        this.flipX = false;\n        this.flipY = false;\n        this.set('scaleX', options.scaleX);\n        this.set('scaleY', options.scaleY);\n        this.angle = options.angle;\n        this.skewX = options.skewX;\n        this.skewY = 0;\n      }\n    },\n\n    /**\n     * This function is an helper for svg import. it removes the transform matrix\n     * and set to object properties that fabricjs can handle\n     * @private\n     * @param {Object} preserveAspectRatioOptions\n     * @return {thisArg}\n     */\n    _removeTransformMatrix: function(preserveAspectRatioOptions) {\n      var center = this._findCenterFromElement();\n      if (this.transformMatrix) {\n        this._assignTransformMatrixProps();\n        center = fabric.util.transformPoint(center, this.transformMatrix);\n      }\n      this.transformMatrix = null;\n      if (preserveAspectRatioOptions) {\n        this.scaleX *= preserveAspectRatioOptions.scaleX;\n        this.scaleY *= preserveAspectRatioOptions.scaleY;\n        this.cropX = preserveAspectRatioOptions.cropX;\n        this.cropY = preserveAspectRatioOptions.cropY;\n        center.x += preserveAspectRatioOptions.offsetLeft;\n        center.y += preserveAspectRatioOptions.offsetTop;\n        this.width = preserveAspectRatioOptions.width;\n        this.height = preserveAspectRatioOptions.height;\n      }\n      this.setPositionByOrigin(center, 'center', 'center');\n    },\n\n    /**\n     * Clones an instance, using a callback method will work for every object.\n     * @param {Function} callback Callback is invoked with a clone as a first argument\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     */\n    clone: function(callback, propertiesToInclude) {\n      var objectForm = this.toObject(propertiesToInclude);\n      if (this.constructor.fromObject) {\n        this.constructor.fromObject(objectForm, callback);\n      }\n      else {\n        fabric.Object._fromObject('Object', objectForm, callback);\n      }\n    },\n\n    /**\n     * Creates an instance of fabric.Image out of an object\n     * could make use of both toDataUrl or toCanvasElement.\n     * @param {Function} callback callback, invoked with an instance as a first argument\n     * @param {Object} [options] for clone as image, passed to toDataURL\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {fabric.Object} thisArg\n     */\n    cloneAsImage: function(callback, options) {\n      var canvasEl = this.toCanvasElement(options);\n      if (callback) {\n        callback(new fabric.Image(canvasEl));\n      }\n      return this;\n    },\n\n    /**\n     * Converts an object into a HTMLCanvas element\n     * @param {Object} options Options object\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     */\n    toCanvasElement: function(options) {\n      options || (options = { });\n\n      var utils = fabric.util, origParams = utils.saveObjectTransform(this),\n          originalShadow = this.shadow, abs = Math.abs,\n          multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric.devicePixelRatio : 1);\n\n      if (options.withoutTransform) {\n        utils.resetObjectTransform(this);\n      }\n      if (options.withoutShadow) {\n        this.shadow = null;\n      }\n\n      var el = fabric.util.createCanvasElement(),\n          // skip canvas zoom and calculate with setCoords now.\n          boundingRect = this.getBoundingRect(true, true),\n          shadow = this.shadow, scaling,\n          shadowOffset = { x: 0, y: 0 }, shadowBlur;\n\n      if (shadow) {\n        shadowBlur = shadow.blur;\n        scaling = this.getObjectScaling();\n        shadowOffset.x = 2 * Math.round((abs(shadow.offsetX) + shadowBlur) * abs(scaling.scaleX));\n        shadowOffset.y = 2 * Math.round((abs(shadow.offsetY) + shadowBlur) * abs(scaling.scaleY));\n      }\n      el.width = boundingRect.width + shadowOffset.x;\n      el.height = boundingRect.height + shadowOffset.y;\n      el.width += el.width % 2 ? 2 - el.width % 2 : 0;\n      el.height += el.height % 2 ? 2 - el.height % 2 : 0;\n      var canvas = new fabric.StaticCanvas(el, {\n        enableRetinaScaling: false,\n        renderOnAddRemove: false,\n        skipOffscreen: false,\n      });\n      if (options.format === 'jpeg') {\n        canvas.backgroundColor = '#fff';\n      }\n      this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), 'center', 'center');\n\n      var originalCanvas = this.canvas;\n      canvas.add(this);\n      var canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n      this.shadow = originalShadow;\n      this.canvas = originalCanvas;\n      this.set(origParams).setCoords();\n      // canvas.dispose will call image.dispose that will nullify the elements\n      // since this canvas is a simple element for the process, we remove references\n      // to objects in this way in order to avoid object trashing.\n      canvas._objects = [];\n      canvas.dispose();\n      canvas = null;\n\n      return canvasEl;\n    },\n\n    /**\n     * Converts an object into a data-url-like string\n     * @param {Object} options Options object\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     */\n    toDataURL: function(options) {\n      options || (options = { });\n      return fabric.util.toDataURL(this.toCanvasElement(options), options.format || 'png', options.quality || 1);\n    },\n\n    /**\n     * Returns true if specified type is identical to the type of an instance\n     * @param {String} type Type to check against\n     * @return {Boolean}\n     */\n    isType: function(type) {\n      return this.type === type;\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance (is 1 unless subclassed)\n     */\n    complexity: function() {\n      return 1;\n    },\n\n    /**\n     * Returns a JSON representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} JSON\n     */\n    toJSON: function(propertiesToInclude) {\n      // delegate, not alias\n      return this.toObject(propertiesToInclude);\n    },\n\n    /**\n     * Sets gradient (fill or stroke) of an object\n     * <b>Backwards incompatibility note:</b> This method was named \"setGradientFill\" until v1.1.0\n     * @param {String} property Property name 'stroke' or 'fill'\n     * @param {Object} [options] Options object\n     * @param {String} [options.type] Type of gradient 'radial' or 'linear'\n     * @param {Number} [options.x1=0] x-coordinate of start point\n     * @param {Number} [options.y1=0] y-coordinate of start point\n     * @param {Number} [options.x2=0] x-coordinate of end point\n     * @param {Number} [options.y2=0] y-coordinate of end point\n     * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)\n     * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)\n     * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}\n     * @param {Object} [options.gradientTransform] transformMatrix for gradient\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}\n     * @example <caption>Set linear gradient</caption>\n     * object.setGradient('fill', {\n     *   type: 'linear',\n     *   x1: -object.width / 2,\n     *   y1: 0,\n     *   x2: object.width / 2,\n     *   y2: 0,\n     *   colorStops: {\n     *     0: 'red',\n     *     0.5: '#005555',\n     *     1: 'rgba(0,0,255,0.5)'\n     *   }\n     * });\n     * canvas.renderAll();\n     * @example <caption>Set radial gradient</caption>\n     * object.setGradient('fill', {\n     *   type: 'radial',\n     *   x1: 0,\n     *   y1: 0,\n     *   x2: 0,\n     *   y2: 0,\n     *   r1: object.width / 2,\n     *   r2: 10,\n     *   colorStops: {\n     *     0: 'red',\n     *     0.5: '#005555',\n     *     1: 'rgba(0,0,255,0.5)'\n     *   }\n     * });\n     * canvas.renderAll();\n     */\n    setGradient: function(property, options) {\n      options || (options = { });\n\n      var gradient = { colorStops: [] };\n\n      gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');\n      gradient.coords = {\n        x1: options.x1,\n        y1: options.y1,\n        x2: options.x2,\n        y2: options.y2\n      };\n\n      if (options.r1 || options.r2) {\n        gradient.coords.r1 = options.r1;\n        gradient.coords.r2 = options.r2;\n      }\n\n      gradient.gradientTransform = options.gradientTransform;\n      fabric.Gradient.prototype.addColorStop.call(gradient, options.colorStops);\n\n      return this.set(property, fabric.Gradient.forObject(this, gradient));\n    },\n\n    /**\n     * Sets pattern fill of an object\n     * @param {Object} options Options object\n     * @param {(String|HTMLImageElement)} options.source Pattern source\n     * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)\n     * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner\n     * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner\n     * @param {Function} [callback] Callback to invoke when image set as a pattern\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}\n     * @example <caption>Set pattern</caption>\n     * object.setPatternFill({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat'\n     * },canvas.renderAll.bind(canvas));\n     */\n    setPatternFill: function(options, callback) {\n      return this.set('fill', new fabric.Pattern(options, callback));\n    },\n\n    /**\n     * Sets {@link fabric.Object#shadow|shadow} of an object\n     * @param {Object|String} [options] Options object or string (e.g. \"2px 2px 10px rgba(0,0,0,0.2)\")\n     * @param {String} [options.color=rgb(0,0,0)] Shadow color\n     * @param {Number} [options.blur=0] Shadow blur\n     * @param {Number} [options.offsetX=0] Shadow horizontal offset\n     * @param {Number} [options.offsetY=0] Shadow vertical offset\n     * @return {fabric.Object} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}\n     * @example <caption>Set shadow with string notation</caption>\n     * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');\n     * canvas.renderAll();\n     * @example <caption>Set shadow with object notation</caption>\n     * object.setShadow({\n     *   color: 'red',\n     *   blur: 10,\n     *   offsetX: 20,\n     *   offsetY: 20\n     * });\n     * canvas.renderAll();\n     */\n    setShadow: function(options) {\n      return this.set('shadow', options ? new fabric.Shadow(options) : null);\n    },\n\n    /**\n     * Sets \"color\" of an instance (alias of `set('fill', &hellip;)`)\n     * @param {String} color Color value\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setColor: function(color) {\n      this.set('fill', color);\n      return this;\n    },\n\n    /**\n     * Sets \"angle\" of an instance with centered rotation\n     * @param {Number} angle Angle value (in degrees)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    rotate: function(angle) {\n      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\n\n      if (shouldCenterOrigin) {\n        this._setOriginToCenter();\n      }\n\n      this.set('angle', angle);\n\n      if (shouldCenterOrigin) {\n        this._resetOrigin();\n      }\n\n      return this;\n    },\n\n    /**\n     * Centers object horizontally on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    centerH: function () {\n      this.canvas && this.canvas.centerObjectH(this);\n      return this;\n    },\n\n    /**\n     * Centers object horizontally on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    viewportCenterH: function () {\n      this.canvas && this.canvas.viewportCenterObjectH(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    centerV: function () {\n      this.canvas && this.canvas.centerObjectV(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    viewportCenterV: function () {\n      this.canvas && this.canvas.viewportCenterObjectV(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically and horizontally on canvas to which is was added last\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    center: function () {\n      this.canvas && this.canvas.centerObject(this);\n      return this;\n    },\n\n    /**\n     * Centers object on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    viewportCenter: function () {\n      this.canvas && this.canvas.viewportCenterObject(this);\n      return this;\n    },\n\n    /**\n     * Returns coordinates of a pointer relative to an object\n     * @param {Event} e Event to operate upon\n     * @param {Object} [pointer] Pointer to operate upon (instead of event)\n     * @return {Object} Coordinates of a pointer (x, y)\n     */\n    getLocalPointer: function(e, pointer) {\n      pointer = pointer || this.canvas.getPointer(e);\n      var pClicked = new fabric.Point(pointer.x, pointer.y),\n          objectLeftTop = this._getLeftTopCoords();\n      if (this.angle) {\n        pClicked = fabric.util.rotatePoint(\n          pClicked, objectLeftTop, degreesToRadians(-this.angle));\n      }\n      return {\n        x: pClicked.x - objectLeftTop.x,\n        y: pClicked.y - objectLeftTop.y\n      };\n    },\n\n    /**\n     * Sets canvas globalCompositeOperation for specific object\n     * custom composition operation for the particular object can be specified using globalCompositeOperation property\n     * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n     */\n    _setupCompositeOperation: function (ctx) {\n      if (this.globalCompositeOperation) {\n        ctx.globalCompositeOperation = this.globalCompositeOperation;\n      }\n    }\n  });\n\n  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);\n\n  extend(fabric.Object.prototype, fabric.Observable);\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   * @static\n   * @memberOf fabric.Object\n   * @constant\n   * @type Number\n   */\n  fabric.Object.NUM_FRACTION_DIGITS = 2;\n\n  fabric.Object._fromObject = function(className, object, callback, extraParam) {\n    var klass = fabric[className];\n    object = clone(object, true);\n    fabric.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {\n      if (typeof patterns[0] !== 'undefined') {\n        object.fill = patterns[0];\n      }\n      if (typeof patterns[1] !== 'undefined') {\n        object.stroke = patterns[1];\n      }\n      fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {\n        object.clipPath = enlivedProps[0];\n        var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);\n        callback && callback(instance);\n      });\n    });\n  };\n\n  /**\n   * Unique id used internally when creating SVG elements\n   * @static\n   * @memberOf fabric.Object\n   * @type Number\n   */\n  fabric.Object.__uid = 0;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians,\n      originXOffset = {\n        left: -0.5,\n        center: 0,\n        right: 0.5\n      },\n      originYOffset = {\n        top: -0.5,\n        center: 0,\n        bottom: 0.5\n      };\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\n      var x = point.x,\n          y = point.y,\n          offsetX, offsetY, dim;\n\n      if (typeof fromOriginX === 'string') {\n        fromOriginX = originXOffset[fromOriginX];\n      }\n      else {\n        fromOriginX -= 0.5;\n      }\n\n      if (typeof toOriginX === 'string') {\n        toOriginX = originXOffset[toOriginX];\n      }\n      else {\n        toOriginX -= 0.5;\n      }\n\n      offsetX = toOriginX - fromOriginX;\n\n      if (typeof fromOriginY === 'string') {\n        fromOriginY = originYOffset[fromOriginY];\n      }\n      else {\n        fromOriginY -= 0.5;\n      }\n\n      if (typeof toOriginY === 'string') {\n        toOriginY = originYOffset[toOriginY];\n      }\n      else {\n        toOriginY -= 0.5;\n      }\n\n      offsetY = toOriginY - fromOriginY;\n\n      if (offsetX || offsetY) {\n        dim = this._getTransformedDimensions();\n        x = point.x + offsetX * dim.x;\n        y = point.y + offsetY * dim.y;\n      }\n\n      return new fabric.Point(x, y);\n    },\n\n    /**\n     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToCenterPoint: function(point, originX, originY) {\n      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\n      if (this.angle) {\n        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\n      }\n      return p;\n    },\n\n    /**\n     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n     * @param {fabric.Point} center The point which corresponds to center of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToOriginPoint: function(center, originX, originY) {\n      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n      if (this.angle) {\n        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\n      }\n      return p;\n    },\n\n    /**\n     * Returns the real center coordinates of the object\n     * @return {fabric.Point}\n     */\n    getCenterPoint: function() {\n      var leftTop = new fabric.Point(this.left, this.top);\n      return this.translateToCenterPoint(leftTop, this.originX, this.originY);\n    },\n\n    /**\n     * Returns the coordinates of the object based on center coordinates\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @return {fabric.Point}\n     */\n    // getOriginPoint: function(center) {\n    //   return this.translateToOriginPoint(center, this.originX, this.originY);\n    // },\n\n    /**\n     * Returns the coordinates of the object as if it has a different origin\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    getPointByOrigin: function(originX, originY) {\n      var center = this.getCenterPoint();\n      return this.translateToOriginPoint(center, originX, originY);\n    },\n\n    /**\n     * Returns the point in local coordinates\n     * @param {fabric.Point} point The point relative to the global coordinate system\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    toLocalPoint: function(point, originX, originY) {\n      var center = this.getCenterPoint(),\n          p, p2;\n\n      if (typeof originX !== 'undefined' && typeof originY !== 'undefined' ) {\n        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n      }\n      else {\n        p = new fabric.Point(this.left, this.top);\n      }\n\n      p2 = new fabric.Point(point.x, point.y);\n      if (this.angle) {\n        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\n      }\n      return p2.subtractEquals(p);\n    },\n\n    /**\n     * Returns the point in global coordinates\n     * @param {fabric.Point} The point relative to the local coordinate system\n     * @return {fabric.Point}\n     */\n    // toGlobalPoint: function(point) {\n    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\n    // },\n\n    /**\n     * Sets the position of the object taking into consideration the object's origin\n     * @param {fabric.Point} pos The new position of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {void}\n     */\n    setPositionByOrigin: function(pos, originX, originY) {\n      var center = this.translateToCenterPoint(pos, originX, originY),\n          position = this.translateToOriginPoint(center, this.originX, this.originY);\n      this.set('left', position.x);\n      this.set('top', position.y);\n    },\n\n    /**\n     * @param {String} to One of 'left', 'center', 'right'\n     */\n    adjustPosition: function(to) {\n      var angle = degreesToRadians(this.angle),\n          hypotFull = this.getScaledWidth(),\n          xFull = fabric.util.cos(angle) * hypotFull,\n          yFull = fabric.util.sin(angle) * hypotFull,\n          offsetFrom, offsetTo;\n\n      //TODO: this function does not consider mixed situation like top, center.\n      if (typeof this.originX === 'string') {\n        offsetFrom = originXOffset[this.originX];\n      }\n      else {\n        offsetFrom = this.originX - 0.5;\n      }\n      if (typeof to === 'string') {\n        offsetTo = originXOffset[to];\n      }\n      else {\n        offsetTo = to - 0.5;\n      }\n      this.left += xFull * (offsetTo - offsetFrom);\n      this.top += yFull * (offsetTo - offsetFrom);\n      this.setCoords();\n      this.originX = to;\n    },\n\n    /**\n     * Sets the origin/position of the object to it's center point\n     * @private\n     * @return {void}\n     */\n    _setOriginToCenter: function() {\n      this._originalOriginX = this.originX;\n      this._originalOriginY = this.originY;\n\n      var center = this.getCenterPoint();\n\n      this.originX = 'center';\n      this.originY = 'center';\n\n      this.left = center.x;\n      this.top = center.y;\n    },\n\n    /**\n     * Resets the origin/position of the object to it's original origin\n     * @private\n     * @return {void}\n     */\n    _resetOrigin: function() {\n      var originPoint = this.translateToOriginPoint(\n        this.getCenterPoint(),\n        this._originalOriginX,\n        this._originalOriginY);\n\n      this.originX = this._originalOriginX;\n      this.originY = this._originalOriginY;\n\n      this.left = originPoint.x;\n      this.top = originPoint.y;\n\n      this._originalOriginX = null;\n      this._originalOriginY = null;\n    },\n\n    /**\n     * @private\n     */\n    _getLeftTopCoords: function() {\n      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\n    },\n  });\n\n})();\n\n\n(function() {\n\n  function getCoords(coords) {\n    return [\n      new fabric.Point(coords.tl.x, coords.tl.y),\n      new fabric.Point(coords.tr.x, coords.tr.y),\n      new fabric.Point(coords.br.x, coords.br.y),\n      new fabric.Point(coords.bl.x, coords.bl.y)\n    ];\n  }\n\n  var degreesToRadians = fabric.util.degreesToRadians,\n      multiplyMatrices = fabric.util.multiplyTransformMatrices,\n      transformPoint = fabric.util.transformPoint;\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Describe object's corner position in canvas element coordinates.\n     * properties are tl,mt,tr,ml,mr,bl,mb,br,mtr for the main controls.\n     * each property is an object with x, y and corner.\n     * The `corner` property contains in a similar manner the 4 points of the\n     * interactive area of the corner.\n     * The coordinates depends from this properties: width, height, scaleX, scaleY\n     * skewX, skewY, angle, strokeWidth, viewportTransform, top, left, padding.\n     * The coordinates get updated with @method setCoords.\n     * You can calculate them without updating with @method calcCoords;\n     * @memberOf fabric.Object.prototype\n     */\n    oCoords: null,\n\n    /**\n     * Describe object's corner position in canvas object absolute coordinates\n     * properties are tl,tr,bl,br and describe the four main corner.\n     * each property is an object with x, y, instance of Fabric.Point.\n     * The coordinates depends from this properties: width, height, scaleX, scaleY\n     * skewX, skewY, angle, strokeWidth, top, left.\n     * Those coordinates are usefull to understand where an object is. They get updated\n     * with oCoords but they do not need to be updated when zoom or panning change.\n     * The coordinates get updated with @method setCoords.\n     * You can calculate them without updating with @method calcCoords(true);\n     * @memberOf fabric.Object.prototype\n     */\n    aCoords: null,\n\n    /**\n     * storage for object transform matrix\n     */\n    ownMatrixCache: null,\n\n    /**\n     * storage for object full transform matrix\n     */\n    matrixCache: null,\n\n    /**\n     * return correct set of coordinates for intersection\n     */\n    getCoords: function(absolute, calculate) {\n      if (!this.oCoords) {\n        this.setCoords();\n      }\n      var coords = absolute ? this.aCoords : this.oCoords;\n      return getCoords(calculate ? this.calcCoords(absolute) : coords);\n    },\n\n    /**\n     * Checks if object intersects with an area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object intersects with an area formed by 2 points\n     */\n    intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {\n      var coords = this.getCoords(absolute, calculate),\n          intersection = fabric.Intersection.intersectPolygonRectangle(\n            coords,\n            pointTL,\n            pointBR\n          );\n      return intersection.status === 'Intersection';\n    },\n\n    /**\n     * Checks if object intersects with another object\n     * @param {Object} other Object to test\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object intersects with another object\n     */\n    intersectsWithObject: function(other, absolute, calculate) {\n      var intersection = fabric.Intersection.intersectPolygonPolygon(\n        this.getCoords(absolute, calculate),\n        other.getCoords(absolute, calculate)\n      );\n\n      return intersection.status === 'Intersection'\n        || other.isContainedWithinObject(this, absolute, calculate)\n        || this.isContainedWithinObject(other, absolute, calculate);\n    },\n\n    /**\n     * Checks if object is fully contained within area of another object\n     * @param {Object} other Object to test\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is fully contained within area of another object\n     */\n    isContainedWithinObject: function(other, absolute, calculate) {\n      var points = this.getCoords(absolute, calculate),\n          i = 0, lines = other._getImageLines(\n            calculate ? other.calcCoords(absolute) : absolute ? other.aCoords : other.oCoords\n          );\n      for (; i < 4; i++) {\n        if (!other.containsPoint(points[i], lines)) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Checks if object is fully contained within area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is fully contained within area formed by 2 points\n     */\n    isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {\n      var boundingRect = this.getBoundingRect(absolute, calculate);\n\n      return (\n        boundingRect.left >= pointTL.x &&\n        boundingRect.left + boundingRect.width <= pointBR.x &&\n        boundingRect.top >= pointTL.y &&\n        boundingRect.top + boundingRect.height <= pointBR.y\n      );\n    },\n\n    /**\n     * Checks if point is inside the object\n     * @param {fabric.Point} point Point to check against\n     * @param {Object} [lines] object returned from @method _getImageLines\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if point is inside the object\n     */\n    containsPoint: function(point, lines, absolute, calculate) {\n      var lines = lines || this._getImageLines(\n            calculate ? this.calcCoords(absolute) : absolute ? this.aCoords : this.oCoords\n          ),\n          xPoints = this._findCrossPoints(point, lines);\n\n      // if xPoints is odd then point is inside the object\n      return (xPoints !== 0 && xPoints % 2 === 1);\n    },\n\n    /**\n     * Checks if object is contained within the canvas with current viewportTransform\n     * the check is done stopping at first point that appears on screen\n     * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords\n     * @return {Boolean} true if object is fully or partially contained within canvas\n     */\n    isOnScreen: function(calculate) {\n      if (!this.canvas) {\n        return false;\n      }\n      var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n      var points = this.getCoords(true, calculate), point;\n      for (var i = 0; i < 4; i++) {\n        point = points[i];\n        if (point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y) {\n          return true;\n        }\n      }\n      // no points on screen, check intersection with absolute coordinates\n      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n        return true;\n      }\n      return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n    },\n\n    /**\n     * Checks if the object contains the midpoint between canvas extremities\n     * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen\n     * @private\n     * @param {Fabric.Point} pointTL Top Left point\n     * @param {Fabric.Point} pointBR Top Right point\n     * @param {Boolean} calculate use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if the objects containe the point\n     */\n    _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {\n      // worst case scenario the object is so big that contains the screen\n      var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };\n      if (this.containsPoint(centerPoint, null, true, calculate)) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Checks if object is partially contained within the canvas with current viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is partially contained within canvas\n     */\n    isPartiallyOnScreen: function(calculate) {\n      if (!this.canvas) {\n        return false;\n      }\n      var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n        return true;\n      }\n      return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n    },\n\n    /**\n     * Method that returns an object with the object edges in it, given the coordinates of the corners\n     * @private\n     * @param {Object} oCoords Coordinates of the object corners\n     */\n    _getImageLines: function(oCoords) {\n      return {\n        topline: {\n          o: oCoords.tl,\n          d: oCoords.tr\n        },\n        rightline: {\n          o: oCoords.tr,\n          d: oCoords.br\n        },\n        bottomline: {\n          o: oCoords.br,\n          d: oCoords.bl\n        },\n        leftline: {\n          o: oCoords.bl,\n          d: oCoords.tl\n        }\n      };\n    },\n\n    /**\n     * Helper method to determine how many cross points are between the 4 object edges\n     * and the horizontal line determined by a point on canvas\n     * @private\n     * @param {fabric.Point} point Point to check\n     * @param {Object} lines Coordinates of the object being evaluated\n     */\n    // remove yi, not used but left code here just in case.\n    _findCrossPoints: function(point, lines) {\n      var b1, b2, a1, a2, xi, // yi,\n          xcount = 0,\n          iLine;\n\n      for (var lineKey in lines) {\n        iLine = lines[lineKey];\n        // optimisation 1: line below point. no cross\n        if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\n          continue;\n        }\n        // optimisation 2: line above point. no cross\n        if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\n          continue;\n        }\n        // optimisation 3: vertical line case\n        if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\n          xi = iLine.o.x;\n          // yi = point.y;\n        }\n        // calculate the intersection point\n        else {\n          b1 = 0;\n          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\n          a1 = point.y - b1 * point.x;\n          a2 = iLine.o.y - b2 * iLine.o.x;\n\n          xi = -(a1 - a2) / (b1 - b2);\n          // yi = a1 + b1 * xi;\n        }\n        // dont count xi < point.x cases\n        if (xi >= point.x) {\n          xcount += 1;\n        }\n        // optimisation 4: specific for square images\n        if (xcount === 2) {\n          break;\n        }\n      }\n      return xcount;\n    },\n\n    /**\n     * Returns coordinates of object's bounding rectangle (left, top, width, height)\n     * the box is intented as aligned to axis of canvas.\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords\n     * @return {Object} Object with left, top, width, height properties\n     */\n    getBoundingRect: function(absolute, calculate) {\n      var coords = this.getCoords(absolute, calculate);\n      return fabric.util.makeBoundingBoxFromPoints(coords);\n    },\n\n    /**\n     * Returns width of an object bounding box counting transformations\n     * before 2.0 it was named getWidth();\n     * @return {Number} width value\n     */\n    getScaledWidth: function() {\n      return this._getTransformedDimensions().x;\n    },\n\n    /**\n     * Returns height of an object bounding box counting transformations\n     * before 2.0 it was named getHeight();\n     * @return {Number} height value\n     */\n    getScaledHeight: function() {\n      return this._getTransformedDimensions().y;\n    },\n\n    /**\n     * Makes sure the scale is valid and modifies it if necessary\n     * @private\n     * @param {Number} value\n     * @return {Number}\n     */\n    _constrainScale: function(value) {\n      if (Math.abs(value) < this.minScaleLimit) {\n        if (value < 0) {\n          return -this.minScaleLimit;\n        }\n        else {\n          return this.minScaleLimit;\n        }\n      }\n      else if (value === 0) {\n        return 0.0001;\n      }\n      return value;\n    },\n\n    /**\n     * Scales an object (equally by x and y)\n     * @param {Number} value Scale factor\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scale: function(value) {\n      this._set('scaleX', value);\n      this._set('scaleY', value);\n      return this.setCoords();\n    },\n\n    /**\n     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New width value\n     * @param {Boolean} absolute ignore viewport\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scaleToWidth: function(value, absolute) {\n      // adjust to bounding rect factor so that rotated shapes would fit as well\n      var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();\n      return this.scale(value / this.width / boundingRectFactor);\n    },\n\n    /**\n     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New height value\n     * @param {Boolean} absolute ignore viewport\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scaleToHeight: function(value, absolute) {\n      // adjust to bounding rect factor so that rotated shapes would fit as well\n      var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();\n      return this.scale(value / this.height / boundingRectFactor);\n    },\n\n    /**\n     * Calculate and returns the .coords of an object.\n     * @return {Object} Object with tl, tr, br, bl ....\n     * @chainable\n     */\n    calcCoords: function(absolute) {\n      var rotateMatrix = this._calcRotateMatrix(),\n          translateMatrix = this._calcTranslateMatrix(),\n          startMatrix = multiplyMatrices(translateMatrix, rotateMatrix),\n          vpt = this.getViewportTransform(),\n          finalMatrix = absolute ? startMatrix : multiplyMatrices(vpt, startMatrix),\n          dim = this._getTransformedDimensions(),\n          w = dim.x / 2, h = dim.y / 2,\n          tl = transformPoint({ x: -w, y: -h }, finalMatrix),\n          tr = transformPoint({ x: w, y: -h }, finalMatrix),\n          bl = transformPoint({ x: -w, y: h }, finalMatrix),\n          br = transformPoint({ x: w, y: h }, finalMatrix);\n      if (!absolute) {\n        var padding = this.padding, angle = degreesToRadians(this.angle),\n            cos = fabric.util.cos(angle), sin = fabric.util.sin(angle),\n            cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP,\n            cosPMinusSinP = cosP - sinP;\n        if (padding) {\n          tl.x -= cosPMinusSinP;\n          tl.y -= cosPSinP;\n          tr.x += cosPSinP;\n          tr.y -= cosPMinusSinP;\n          bl.x -= cosPSinP;\n          bl.y += cosPMinusSinP;\n          br.x += cosPMinusSinP;\n          br.y += cosPSinP;\n        }\n        var ml  = new fabric.Point((tl.x + bl.x) / 2, (tl.y + bl.y) / 2),\n            mt  = new fabric.Point((tr.x + tl.x) / 2, (tr.y + tl.y) / 2),\n            mr  = new fabric.Point((br.x + tr.x) / 2, (br.y + tr.y) / 2),\n            mb  = new fabric.Point((br.x + bl.x) / 2, (br.y + bl.y) / 2),\n            mtr = new fabric.Point(mt.x + sin * this.rotatingPointOffset, mt.y - cos * this.rotatingPointOffset);\n      }\n\n      // if (!absolute) {\n      //   var canvas = this.canvas;\n      //   setTimeout(function() {\n      //     canvas.contextTop.clearRect(0, 0, 700, 700);\n      //     canvas.contextTop.fillStyle = 'green';\n      //     canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);\n      //     canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);\n      //     canvas.contextTop.fillRect(br.x, br.y, 3, 3);\n      //     canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);\n      //     canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);\n      //     canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);\n      //     canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);\n      //     canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);\n      //     canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);\n      //   }, 50);\n      // }\n\n      var coords = {\n        // corners\n        tl: tl, tr: tr, br: br, bl: bl,\n      };\n      if (!absolute) {\n        // middle\n        coords.ml = ml;\n        coords.mt = mt;\n        coords.mr = mr;\n        coords.mb = mb;\n        // rotating point\n        coords.mtr = mtr;\n      }\n      return coords;\n    },\n\n    /**\n     * Sets corner position coordinates based on current angle, width and height.\n     * See {@link https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords|When-to-call-setCoords}\n     * @param {Boolean} [ignoreZoom] set oCoords with or without the viewport transform.\n     * @param {Boolean} [skipAbsolute] skip calculation of aCoords, usefull in setViewportTransform\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setCoords: function(ignoreZoom, skipAbsolute) {\n      this.oCoords = this.calcCoords(ignoreZoom);\n      if (!skipAbsolute) {\n        this.aCoords = this.calcCoords(true);\n      }\n\n      // set coordinates of the draggable boxes in the corners used to scale/rotate the image\n      ignoreZoom || (this._setCornerCoords && this._setCornerCoords());\n\n      return this;\n    },\n\n    /**\n     * calculate rotation matrix of an object\n     * @return {Array} rotation matrix for the object\n     */\n    _calcRotateMatrix: function() {\n      if (this.angle) {\n        var theta = degreesToRadians(this.angle), cos = fabric.util.cos(theta), sin = fabric.util.sin(theta);\n        return [cos, sin, -sin, cos, 0, 0];\n      }\n      return fabric.iMatrix.concat();\n    },\n\n    /**\n     * calculate the translation matrix for an object transform\n     * @return {Array} rotation matrix for the object\n     */\n    _calcTranslateMatrix: function() {\n      var center = this.getCenterPoint();\n      return [1, 0, 0, 1, center.x, center.y];\n    },\n\n    transformMatrixKey: function(skipGroup) {\n      var sep = '_', prefix = '';\n      if (!skipGroup && this.group) {\n        prefix = this.group.transformMatrixKey(skipGroup) + sep;\n      };\n      return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY +\n        sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY +\n        sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;\n    },\n\n    /**\n     * calculate trasform Matrix that represent current transformation from\n     * object properties.\n     * @param {Boolean} [skipGroup] return transformMatrix for object and not go upward with parents\n     * @return {Array} matrix Transform Matrix for the object\n     */\n    calcTransformMatrix: function(skipGroup) {\n      if (skipGroup) {\n        return this.calcOwnMatrix();\n      }\n      var key = this.transformMatrixKey(), cache = this.matrixCache || (this.matrixCache = {});\n      if (cache.key === key) {\n        return cache.value;\n      }\n      var matrix = this.calcOwnMatrix();\n      if (this.group) {\n        matrix = multiplyMatrices(this.group.calcTransformMatrix(), matrix);\n      }\n      cache.key = key;\n      cache.value = matrix;\n      return matrix;\n    },\n\n    calcOwnMatrix: function() {\n      var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});\n      if (cache.key === key) {\n        return cache.value;\n      }\n      var matrix = this._calcTranslateMatrix(),\n          rotateMatrix,\n          dimensionMatrix = this._calcDimensionsTransformMatrix(this.skewX, this.skewY, true);\n      if (this.angle) {\n        rotateMatrix = this._calcRotateMatrix();\n        matrix = multiplyMatrices(matrix, rotateMatrix);\n      }\n      matrix = multiplyMatrices(matrix, dimensionMatrix);\n      cache.key = key;\n      cache.value = matrix;\n      return matrix;\n    },\n\n    _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {\n      var skewMatrix,\n          scaleX = this.scaleX * (flipping && this.flipX ? -1 : 1),\n          scaleY = this.scaleY * (flipping && this.flipY ? -1 : 1),\n          scaleMatrix = [scaleX, 0, 0, scaleY, 0, 0];\n      if (skewX) {\n        skewMatrix = [1, 0, Math.tan(degreesToRadians(skewX)), 1];\n        scaleMatrix = multiplyMatrices(scaleMatrix, skewMatrix, true);\n      }\n      if (skewY) {\n        skewMatrix = [1, Math.tan(degreesToRadians(skewY)), 0, 1];\n        scaleMatrix = multiplyMatrices(scaleMatrix, skewMatrix, true);\n      }\n      return scaleMatrix;\n    },\n\n\n    /*\n     * Calculate object dimensions from its properties\n     * @private\n     * @return {Object} .x width dimension\n     * @return {Object} .y height dimension\n     */\n    _getNonTransformedDimensions: function() {\n      var strokeWidth = this.strokeWidth,\n          w = this.width + strokeWidth,\n          h = this.height + strokeWidth;\n      return { x: w, y: h };\n    },\n\n    /*\n     * Calculate object bounding boxdimensions from its properties scale, skew.\n     * @private\n     * @return {Object} .x width dimension\n     * @return {Object} .y height dimension\n     */\n    _getTransformedDimensions: function(skewX, skewY) {\n      if (typeof skewX === 'undefined') {\n        skewX = this.skewX;\n      }\n      if (typeof skewY === 'undefined') {\n        skewY = this.skewY;\n      }\n      var dimensions = this._getNonTransformedDimensions();\n      if (skewX === 0 && skewY === 0) {\n        return { x: dimensions.x * this.scaleX, y: dimensions.y * this.scaleY };\n      }\n      var dimX = dimensions.x / 2, dimY = dimensions.y / 2,\n          points = [\n            {\n              x: -dimX,\n              y: -dimY\n            },\n            {\n              x: dimX,\n              y: -dimY\n            },\n            {\n              x: -dimX,\n              y: dimY\n            },\n            {\n              x: dimX,\n              y: dimY\n            }],\n          i, transformMatrix = this._calcDimensionsTransformMatrix(skewX, skewY, false),\n          bbox;\n      for (i = 0; i < points.length; i++) {\n        points[i] = fabric.util.transformPoint(points[i], transformMatrix);\n      }\n      bbox = fabric.util.makeBoundingBoxFromPoints(points);\n      return { x: bbox.width, y: bbox.height };\n    },\n\n    /*\n     * Calculate object dimensions for controls. include padding and canvas zoom\n     * private\n     */\n    _calculateCurrentDimensions: function()  {\n      var vpt = this.getViewportTransform(),\n          dim = this._getTransformedDimensions(),\n          p = fabric.util.transformPoint(dim, vpt, true);\n\n      return p.scalarAdd(2 * this.padding);\n    },\n  });\n})();\n\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * Moves an object to the bottom of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  sendToBack: function() {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\n    }\n    else {\n      this.canvas.sendToBack(this);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object to the top of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  bringToFront: function() {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\n    }\n    else {\n      this.canvas.bringToFront(this);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object down in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  sendBackwards: function(intersecting) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\n    }\n    else {\n      this.canvas.sendBackwards(this, intersecting);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object up in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  bringForward: function(intersecting) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\n    }\n    else {\n      this.canvas.bringForward(this, intersecting);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object to specified level in stack of drawn objects\n   * @param {Number} index New position of object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  moveTo: function(index) {\n    if (this.group && this.group.type !== 'activeSelection') {\n      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\n    }\n    else {\n      this.canvas.moveTo(this, index);\n    }\n    return this;\n  }\n});\n\n\n/* _TO_SVG_START_ */\n(function() {\n  function getSvgColorString(prop, value) {\n    if (!value) {\n      return prop + ': none; ';\n    }\n    else if (value.toLive) {\n      return prop + ': url(#SVGID_' + value.id + '); ';\n    }\n    else {\n      var color = new fabric.Color(value),\n          str = prop + ': ' + color.toRgb() + '; ',\n          opacity = color.getAlpha();\n      if (opacity !== 1) {\n        //change the color in rgb + opacity\n        str += prop + '-opacity: ' + opacity.toString() + '; ';\n      }\n      return str;\n    }\n  }\n\n  var toFixed = fabric.util.toFixed;\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n    /**\n     * Returns styles-string for svg-export\n     * @param {Boolean} skipShadow a boolean to skip shadow filter output\n     * @return {String}\n     */\n    getSvgStyles: function(skipShadow) {\n\n      var fillRule = this.fillRule ? this.fillRule : 'nonzero',\n          strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n          strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',\n          strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\n          strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n          strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n          strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n          opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n          visibility = this.visible ? '' : ' visibility: hidden;',\n          filter = skipShadow ? '' : this.getSvgFilter(),\n          fill = getSvgColorString('fill', this.fill),\n          stroke = getSvgColorString('stroke', this.stroke);\n\n      return [\n        stroke,\n        'stroke-width: ', strokeWidth, '; ',\n        'stroke-dasharray: ', strokeDashArray, '; ',\n        'stroke-linecap: ', strokeLineCap, '; ',\n        'stroke-dashoffset: ', strokeDashOffset, '; ',\n        'stroke-linejoin: ', strokeLineJoin, '; ',\n        'stroke-miterlimit: ', strokeMiterLimit, '; ',\n        fill,\n        'fill-rule: ', fillRule, '; ',\n        'opacity: ', opacity, ';',\n        filter,\n        visibility\n      ].join('');\n    },\n\n    /**\n     * Returns styles-string for svg-export\n     * @param {Object} style the object from which to retrieve style properties\n     * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n     * @return {String}\n     */\n    getSvgSpanStyles: function(style, useWhiteSpace) {\n      var term = '; ';\n      var fontFamily = style.fontFamily ?\n        'font-family: ' + (((style.fontFamily.indexOf('\\'') === -1 && style.fontFamily.indexOf('\"') === -1) ?\n          '\\'' + style.fontFamily  + '\\'' : style.fontFamily)) + term : '';\n      var strokeWidth = style.strokeWidth ? 'stroke-width: ' + style.strokeWidth + term : '',\n          fontFamily = fontFamily,\n          fontSize = style.fontSize ? 'font-size: ' + style.fontSize + 'px' + term : '',\n          fontStyle = style.fontStyle ? 'font-style: ' + style.fontStyle + term : '',\n          fontWeight = style.fontWeight ? 'font-weight: ' + style.fontWeight + term : '',\n          fill = style.fill ? getSvgColorString('fill', style.fill) : '',\n          stroke = style.stroke ? getSvgColorString('stroke', style.stroke) : '',\n          textDecoration = this.getSvgTextDecoration(style),\n          deltaY = style.deltaY ? 'baseline-shift: ' + (-style.deltaY) + '; ' : '';\n      if (textDecoration) {\n        textDecoration = 'text-decoration: ' + textDecoration + term;\n      }\n\n      return [\n        stroke,\n        strokeWidth,\n        fontFamily,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        textDecoration,\n        fill,\n        deltaY,\n        useWhiteSpace ? 'white-space: pre; ' : ''\n      ].join('');\n    },\n\n    /**\n     * Returns text-decoration property for svg-export\n     * @param {Object} style the object from which to retrieve style properties\n     * @return {String}\n     */\n    getSvgTextDecoration: function(style) {\n      if ('overline' in style || 'underline' in style || 'linethrough' in style) {\n        return (style.overline ? 'overline ' : '') +\n          (style.underline ? 'underline ' : '') + (style.linethrough ? 'line-through ' : '');\n      }\n      return '';\n    },\n\n    /**\n     * Returns filter for svg shadow\n     * @return {String}\n     */\n    getSvgFilter: function() {\n      return this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';\n    },\n\n    /**\n     * Returns id attribute for svg output\n     * @return {String}\n     */\n    getSvgCommons: function() {\n      return [\n        this.id ? 'id=\"' + this.id + '\" ' : '',\n        this.clipPath ? 'clip-path=\"url(#' + this.clipPath.clipPathId + ')\" ' : '',\n      ].join('');\n    },\n\n    /**\n     * Returns transform-string for svg-export\n     * @param {Boolean} use the full transform or the single object one.\n     * @return {String}\n     */\n    getSvgTransform: function(full, additionalTransform) {\n      var transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n          svgTransform = transform.map(function(value) {\n            return toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);\n          }).join(' ');\n      return 'transform=\"matrix(' + svgTransform + ')' +\n        (additionalTransform || '') + this.getSvgTransformMatrix() + '\" ';\n    },\n\n    /**\n     * Returns transform-string for svg-export from the transform matrix of single elements\n     * @return {String}\n     */\n    getSvgTransformMatrix: function() {\n      return this.transformMatrix ? ' matrix(' + this.transformMatrix.join(' ') + ')' : '';\n    },\n\n    _setSVGBg: function(textBgRects) {\n      if (this.backgroundColor) {\n        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n        textBgRects.push(\n          '\\t\\t<rect ',\n          this._getFillAttributes(this.backgroundColor),\n          ' x=\"',\n          toFixed(-this.width / 2, NUM_FRACTION_DIGITS),\n          '\" y=\"',\n          toFixed(-this.height / 2, NUM_FRACTION_DIGITS),\n          '\" width=\"',\n          toFixed(this.width, NUM_FRACTION_DIGITS),\n          '\" height=\"',\n          toFixed(this.height, NUM_FRACTION_DIGITS),\n          '\"></rect>\\n');\n      }\n    },\n\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      return this._createBaseSVGMarkup(this._toSVG(), { reviver: reviver });\n    },\n\n    /**\n     * Returns svg clipPath representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toClipPathSVG: function(reviver) {\n      return '\\t' + this._createBaseClipPathSVGMarkup(this._toSVG(), { reviver: reviver });\n    },\n\n    /**\n     * @private\n     */\n    _createBaseClipPathSVGMarkup: function(objectMarkup, options) {\n      options = options || {};\n      var reviver = options.reviver,\n          additionalTransform = options.additionalTransform || '',\n          commonPieces = [\n            this.getSvgTransform(true, additionalTransform),\n            this.getSvgCommons(),\n          ].join(''),\n          // insert commons in the markup, style and svgCommons\n          index = objectMarkup.indexOf('COMMON_PARTS');\n      objectMarkup[index] = commonPieces;\n      return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\n    },\n\n    /**\n     * @private\n     */\n    _createBaseSVGMarkup: function(objectMarkup, options) {\n      options = options || {};\n      var noStyle = options.noStyle, withShadow = options.withShadow,\n          reviver = options.reviver,\n          styleInfo = noStyle ? '' : 'style=\"' + this.getSvgStyles() + '\" ',\n          shadowInfo = withShadow ? 'style=\"' + this.getSvgFilter() + '\" ' : '',\n          clipPath = this.clipPath,\n          absoluteClipPath = this.clipPath && this.clipPath.absolutePositioned,\n          commonPieces, markup = [], clipPathMarkup,\n          // insert commons in the markup, style and svgCommons\n          index = objectMarkup.indexOf('COMMON_PARTS'),\n          additionalTransform = options.additionalTransform;\n      if (clipPath) {\n        clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;\n        clipPathMarkup = '<clipPath id=\"' + clipPath.clipPathId + '\" >\\n' +\n          this.clipPath.toClipPathSVG(reviver) +\n          '</clipPath>\\n';\n      }\n      if (absoluteClipPath) {\n        markup.push(\n          '<g ', shadowInfo, this.getSvgCommons(), ' >\\n'\n        );\n      }\n      markup.push(\n        '<g ',\n        this.getSvgTransform(false),\n        !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\n        ' >\\n'\n      );\n      commonPieces = [\n        styleInfo,\n        noStyle ? '' : this.addPaintOrder(), ' ',\n        additionalTransform ? 'transform=\"' + additionalTransform + '\" ' : '',\n      ].join('');\n      objectMarkup[index] = commonPieces;\n      if (this.fill && this.fill.toLive) {\n        markup.push(this.fill.toSVG(this, false));\n      }\n      if (this.stroke && this.stroke.toLive) {\n        markup.push(this.stroke.toSVG(this, false));\n      }\n      if (this.shadow) {\n        markup.push(this.shadow.toSVG(this));\n      }\n      if (clipPath) {\n        markup.push(clipPathMarkup);\n      }\n      markup.push(objectMarkup.join(''));\n      markup.push('</g>\\n');\n      absoluteClipPath && markup.push('</g>\\n');\n      return reviver ? reviver(markup.join('')) : markup.join('');\n    },\n\n    addPaintOrder: function() {\n      return this.paintFirst !== 'fill' ? ' paint-order=\"' + this.paintFirst + '\" ' : '';\n    }\n  });\n})();\n/* _TO_SVG_END_ */\n\n\n(function() {\n\n  var extend = fabric.util.object.extend,\n      originalSet = 'stateProperties';\n\n  /*\n    Depends on `stateProperties`\n  */\n  function saveProps(origin, destination, props) {\n    var tmpObj = { }, deep = true;\n    props.forEach(function(prop) {\n      tmpObj[prop] = origin[prop];\n    });\n    extend(origin[destination], tmpObj, deep);\n  }\n\n  function _isEqual(origValue, currentValue, firstPass) {\n    if (origValue === currentValue) {\n      // if the objects are identical, return\n      return true;\n    }\n    else if (Array.isArray(origValue)) {\n      if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {\n        return false;\n      }\n      for (var i = 0, len = origValue.length; i < len; i++) {\n        if (!_isEqual(origValue[i], currentValue[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else if (origValue && typeof origValue === 'object') {\n      var keys = Object.keys(origValue), key;\n      if (!currentValue ||\n          typeof currentValue !== 'object' ||\n          (!firstPass && keys.length !== Object.keys(currentValue).length)\n      ) {\n        return false;\n      }\n      for (var i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        // since clipPath is in the statefull cache list and the clipPath objects\n        // would be iterated as an object, this would lead to possible infinite recursion\n        if (key === 'canvas') {\n          continue;\n        }\n        if (!_isEqual(origValue[key], currentValue[key])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Returns true if object state (one of its state properties) was changed\n     * @param {String} [propertySet] optional name for the set of property we want to save\n     * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\n     */\n    hasStateChanged: function(propertySet) {\n      propertySet = propertySet || originalSet;\n      var dashedPropertySet = '_' + propertySet;\n      if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {\n        return true;\n      }\n      return !_isEqual(this[dashedPropertySet], this, true);\n    },\n\n    /**\n     * Saves state of an object\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n     * @return {fabric.Object} thisArg\n     */\n    saveState: function(options) {\n      var propertySet = options && options.propertySet || originalSet,\n          destination = '_' + propertySet;\n      if (!this[destination]) {\n        return this.setupState(options);\n      }\n      saveProps(this, destination, this[propertySet]);\n      if (options && options.stateProperties) {\n        saveProps(this, destination, options.stateProperties);\n      }\n      return this;\n    },\n\n    /**\n     * Setups state of an object\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n     * @return {fabric.Object} thisArg\n     */\n    setupState: function(options) {\n      options = options || { };\n      var propertySet = options.propertySet || originalSet;\n      options.propertySet = propertySet;\n      this['_' + propertySet] = { };\n      this.saveState(options);\n      return this;\n    }\n  });\n})();\n\n\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians;\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * The object interactivity controls.\n     * @private\n     */\n    _controlsVisibility: null,\n\n    /**\n     * Determines which corner has been clicked\n     * @private\n     * @param {Object} pointer The pointer indicating the mouse position\n     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\n     */\n    _findTargetCorner: function(pointer) {\n      // objects in group, anykind, are not self modificable,\n      // must not return an hovered corner.\n      if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {\n        return false;\n      }\n\n      var ex = pointer.x,\n          ey = pointer.y,\n          xPoints,\n          lines;\n      this.__corner = 0;\n      for (var i in this.oCoords) {\n\n        if (!this.isControlVisible(i)) {\n          continue;\n        }\n\n        if (i === 'mtr' && !this.hasRotatingPoint) {\n          continue;\n        }\n\n        if (this.get('lockUniScaling') &&\n           (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {\n          continue;\n        }\n\n        lines = this._getImageLines(this.oCoords[i].corner);\n\n        // debugging\n\n        // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n\n        // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n        // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n\n        xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\n        if (xPoints !== 0 && xPoints % 2 === 1) {\n          this.__corner = i;\n          return i;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Sets the coordinates of the draggable boxes in the corners of\n     * the image used to scale/rotate it.\n     * @private\n     */\n    _setCornerCoords: function() {\n      var coords = this.oCoords,\n          newTheta = degreesToRadians(45 - this.angle),\n          /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */\n          /* 0.707106 stands for sqrt(2)/2 */\n          cornerHypotenuse = this.cornerSize * 0.707106,\n          cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta),\n          sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta),\n          x, y;\n\n      for (var point in coords) {\n        x = coords[point].x;\n        y = coords[point].y;\n        coords[point].corner = {\n          tl: {\n            x: x - sinHalfOffset,\n            y: y - cosHalfOffset\n          },\n          tr: {\n            x: x + cosHalfOffset,\n            y: y - sinHalfOffset\n          },\n          bl: {\n            x: x - cosHalfOffset,\n            y: y + sinHalfOffset\n          },\n          br: {\n            x: x + sinHalfOffset,\n            y: y + cosHalfOffset\n          }\n        };\n      }\n    },\n\n    /**\n     * Draws a colored layer behind the object, inside its selection borders.\n     * Requires public options: padding, selectionBackgroundColor\n     * this function is called when the context is transformed\n     * has checks to be skipped when the object is on a staticCanvas\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawSelectionBackground: function(ctx) {\n      if (!this.selectionBackgroundColor ||\n        (this.canvas && !this.canvas.interactive) ||\n        (this.canvas && this.canvas._activeObject !== this)\n      ) {\n        return this;\n      }\n      ctx.save();\n      var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(),\n          vpt = this.canvas.viewportTransform;\n      ctx.translate(center.x, center.y);\n      ctx.scale(1 / vpt[0], 1 / vpt[3]);\n      ctx.rotate(degreesToRadians(this.angle));\n      ctx.fillStyle = this.selectionBackgroundColor;\n      ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws borders of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: padding, borderColor\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawBorders: function(ctx, styleOverride) {\n      styleOverride = styleOverride || {};\n      var wh = this._calculateCurrentDimensions(),\n          strokeWidth = 1 / this.borderScaleFactor,\n          width = wh.x + strokeWidth,\n          height = wh.y + strokeWidth,\n          drawRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\n            styleOverride.hasRotatingPoint : this.hasRotatingPoint,\n          hasControls = typeof styleOverride.hasControls !== 'undefined' ?\n            styleOverride.hasControls : this.hasControls,\n          rotatingPointOffset = typeof styleOverride.rotatingPointOffset !== 'undefined' ?\n            styleOverride.rotatingPointOffset : this.rotatingPointOffset;\n\n      ctx.save();\n      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\n\n      ctx.strokeRect(\n        -width / 2,\n        -height / 2,\n        width,\n        height\n      );\n\n      if (drawRotatingPoint && this.isControlVisible('mtr') && hasControls) {\n\n        var rotateHeight = -height / 2;\n\n        ctx.beginPath();\n        ctx.moveTo(0, rotateHeight);\n        ctx.lineTo(0, rotateHeight - rotatingPointOffset);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws borders of an object's bounding box when it is inside a group.\n     * Requires public properties: width, height\n     * Requires public options: padding, borderColor\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {object} options object representing current object parameters\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawBordersInGroup: function(ctx, options, styleOverride) {\n      styleOverride = styleOverride || {};\n      var p = this._getNonTransformedDimensions(),\n          matrix = fabric.util.customTransformMatrix(options.scaleX, options.scaleY, options.skewX),\n          wh = fabric.util.transformPoint(p, matrix),\n          strokeWidth = 1 / this.borderScaleFactor,\n          width = wh.x + strokeWidth,\n          height = wh.y + strokeWidth;\n\n      ctx.save();\n      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);\n      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n\n      ctx.strokeRect(\n        -width / 2,\n        -height / 2,\n        width,\n        height\n      );\n\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws corners of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: cornerSize, padding\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawControls: function(ctx, styleOverride) {\n      styleOverride = styleOverride || {};\n      var wh = this._calculateCurrentDimensions(),\n          width = wh.x,\n          height = wh.y,\n          scaleOffset = styleOverride.cornerSize || this.cornerSize,\n          left = -(width + scaleOffset) / 2,\n          top = -(height + scaleOffset) / 2,\n          transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?\n            styleOverride.transparentCorners : this.transparentCorners,\n          hasRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?\n            styleOverride.hasRotatingPoint : this.hasRotatingPoint,\n          methodName = transparentCorners ? 'stroke' : 'fill';\n\n      ctx.save();\n      ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;\n      if (!this.transparentCorners) {\n        ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;\n      }\n      this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray, null);\n\n      // top-left\n      this._drawControl('tl', ctx, methodName,\n        left,\n        top, styleOverride);\n\n      // top-right\n      this._drawControl('tr', ctx, methodName,\n        left + width,\n        top, styleOverride);\n\n      // bottom-left\n      this._drawControl('bl', ctx, methodName,\n        left,\n        top + height, styleOverride);\n\n      // bottom-right\n      this._drawControl('br', ctx, methodName,\n        left + width,\n        top + height, styleOverride);\n\n      if (!this.get('lockUniScaling')) {\n\n        // middle-top\n        this._drawControl('mt', ctx, methodName,\n          left + width / 2,\n          top, styleOverride);\n\n        // middle-bottom\n        this._drawControl('mb', ctx, methodName,\n          left + width / 2,\n          top + height, styleOverride);\n\n        // middle-right\n        this._drawControl('mr', ctx, methodName,\n          left + width,\n          top + height / 2, styleOverride);\n\n        // middle-left\n        this._drawControl('ml', ctx, methodName,\n          left,\n          top + height / 2, styleOverride);\n      }\n\n      // middle-top-rotate\n      if (hasRotatingPoint) {\n        this._drawControl('mtr', ctx, methodName,\n          left + width / 2,\n          top - this.rotatingPointOffset, styleOverride);\n      }\n\n      ctx.restore();\n\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _drawControl: function(control, ctx, methodName, left, top, styleOverride) {\n      styleOverride = styleOverride || {};\n      if (!this.isControlVisible(control)) {\n        return;\n      }\n      var size = this.cornerSize, stroke = !this.transparentCorners && this.cornerStrokeColor;\n      switch (styleOverride.cornerStyle || this.cornerStyle) {\n        case 'circle':\n          ctx.beginPath();\n          ctx.arc(left + size / 2, top + size / 2, size / 2, 0, 2 * Math.PI, false);\n          ctx[methodName]();\n          if (stroke) {\n            ctx.stroke();\n          }\n          break;\n        default:\n          this.transparentCorners || ctx.clearRect(left, top, size, size);\n          ctx[methodName + 'Rect'](left, top, size, size);\n          if (stroke) {\n            ctx.strokeRect(left, top, size, size);\n          }\n      }\n    },\n\n    /**\n     * Returns true if the specified control is visible, false otherwise.\n     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @returns {Boolean} true if the specified control is visible, false otherwise\n     */\n    isControlVisible: function(controlName) {\n      return this._getControlsVisibility()[controlName];\n    },\n\n    /**\n     * Sets the visibility of the specified control.\n     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @param {Boolean} visible true to set the specified control visible, false otherwise\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setControlVisible: function(controlName, visible) {\n      this._getControlsVisibility()[controlName] = visible;\n      return this;\n    },\n\n    /**\n     * Sets the visibility state of object controls.\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\n     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\n     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\n     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\n     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\n     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\n     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\n     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setControlsVisibility: function(options) {\n      options || (options = { });\n\n      for (var p in options) {\n        this.setControlVisible(p, options[p]);\n      }\n      return this;\n    },\n\n    /**\n     * Returns the instance of the control visibility set for this object.\n     * @private\n     * @returns {Object}\n     */\n    _getControlsVisibility: function() {\n      if (!this._controlsVisibility) {\n        this._controlsVisibility = {\n          tl: true,\n          tr: true,\n          br: true,\n          bl: true,\n          ml: true,\n          mt: true,\n          mr: true,\n          mb: true,\n          mtr: true\n        };\n      }\n      return this._controlsVisibility;\n    },\n\n    /**\n     * This callback function is called every time _discardActiveObject or _setActiveObject\n     * try to to deselect this object. If the function returns true, the process is cancelled\n     * @param {Object} [options] options sent from the upper functions\n     * @param {Event} [options.e] event if the process is generated by an event\n     */\n    onDeselect: function() {\n      // implemented by sub-classes, as needed.\n    },\n\n\n    /**\n     * This callback function is called every time _discardActiveObject or _setActiveObject\n     * try to to select this object. If the function returns true, the process is cancelled\n     * @param {Object} [options] options sent from the upper functions\n     * @param {Event} [options.e] event if the process is generated by an event\n     */\n    onSelect: function() {\n      // implemented by sub-classes, as needed.\n    }\n  });\n})();\n\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Animation duration (in ms) for fx* methods\n   * @type Number\n   * @default\n   */\n  FX_DURATION: 500,\n\n  /**\n   * Centers object horizontally with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxCenterObjectH: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.left,\n      endValue: this.getCenter().left,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('left', value);\n        _this.requestRenderAll();\n        onChange();\n      },\n      onComplete: function() {\n        object.setCoords();\n        onComplete();\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * Centers object vertically with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxCenterObjectV: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.top,\n      endValue: this.getCenter().top,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('top', value);\n        _this.requestRenderAll();\n        onChange();\n      },\n      onComplete: function() {\n        object.setCoords();\n        onComplete();\n      }\n    });\n\n    return this;\n  },\n\n  /**\n   * Same as `fabric.Canvas#remove` but animated\n   * @param {fabric.Object} object Object to remove\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxRemove: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: object.opacity,\n      endValue: 0,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('opacity', value);\n        _this.requestRenderAll();\n        onChange();\n      },\n      onComplete: function () {\n        _this.remove(object);\n        onComplete();\n      }\n    });\n\n    return this;\n  }\n});\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n  /**\n   * Animates object's properties\n   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\n   * @param {Number|Object} value Value to animate property to (if string was given first) or options object\n   * @return {fabric.Object} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @chainable\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   *\n   * As string — one property\n   *\n   * object.animate('left', ...);\n   * object.animate('left', { duration: ... });\n   *\n   */\n  animate: function() {\n    if (arguments[0] && typeof arguments[0] === 'object') {\n      var propsToAnimate = [], prop, skipCallbacks;\n      for (prop in arguments[0]) {\n        propsToAnimate.push(prop);\n      }\n      for (var i = 0, len = propsToAnimate.length; i < len; i++) {\n        prop = propsToAnimate[i];\n        skipCallbacks = i !== len - 1;\n        this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);\n      }\n    }\n    else {\n      this._animate.apply(this, arguments);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   * @param {String} property Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\n   */\n  _animate: function(property, to, options, skipCallbacks) {\n    var _this = this, propPair;\n\n    to = to.toString();\n\n    if (!options) {\n      options = { };\n    }\n    else {\n      options = fabric.util.object.clone(options);\n    }\n\n    if (~property.indexOf('.')) {\n      propPair = property.split('.');\n    }\n\n    var currentValue = propPair\n      ? this.get(propPair[0])[propPair[1]]\n      : this.get(property);\n\n    if (!('from' in options)) {\n      options.from = currentValue;\n    }\n\n    if (~to.indexOf('=')) {\n      to = currentValue + parseFloat(to.replace('=', ''));\n    }\n    else {\n      to = parseFloat(to);\n    }\n\n    fabric.util.animate({\n      startValue: options.from,\n      endValue: to,\n      byValue: options.by,\n      easing: options.easing,\n      duration: options.duration,\n      abort: options.abort && function() {\n        return options.abort.call(_this);\n      },\n      onChange: function(value, valueProgress, timeProgress) {\n        if (propPair) {\n          _this[propPair[0]][propPair[1]] = value;\n        }\n        else {\n          _this.set(property, value);\n        }\n        if (skipCallbacks) {\n          return;\n        }\n        options.onChange && options.onChange(value, valueProgress, timeProgress);\n      },\n      onComplete: function(value, valueProgress, timeProgress) {\n        if (skipCallbacks) {\n          return;\n        }\n\n        _this.setCoords();\n        options.onComplete && options.onComplete(value, valueProgress, timeProgress);\n      }\n    });\n  }\n});\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone,\n      coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },\n      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');\n\n  if (fabric.Line) {\n    fabric.warn('fabric.Line is already defined');\n    return;\n  }\n\n  /**\n   * Line class\n   * @class fabric.Line\n   * @extends fabric.Object\n   * @see {@link fabric.Line#initialize} for constructor definition\n   */\n  fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'line',\n\n    /**\n     * x value or first line edge\n     * @type Number\n     * @default\n     */\n    x1: 0,\n\n    /**\n     * y value or first line edge\n     * @type Number\n     * @default\n     */\n    y1: 0,\n\n    /**\n     * x value or second line edge\n     * @type Number\n     * @default\n     */\n    x2: 0,\n\n    /**\n     * y value or second line edge\n     * @type Number\n     * @default\n     */\n    y2: 0,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('x1', 'x2', 'y1', 'y2'),\n\n    /**\n     * Constructor\n     * @param {Array} [points] Array of points\n     * @param {Object} [options] Options object\n     * @return {fabric.Line} thisArg\n     */\n    initialize: function(points, options) {\n      if (!points) {\n        points = [0, 0, 0, 0];\n      }\n\n      this.callSuper('initialize', options);\n\n      this.set('x1', points[0]);\n      this.set('y1', points[1]);\n      this.set('x2', points[2]);\n      this.set('y2', points[3]);\n\n      this._setWidthHeight(options);\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options\n     */\n    _setWidthHeight: function(options) {\n      options || (options = { });\n\n      this.width = Math.abs(this.x2 - this.x1);\n      this.height = Math.abs(this.y2 - this.y1);\n\n      this.left = 'left' in options\n        ? options.left\n        : this._getLeftToOriginX();\n\n      this.top = 'top' in options\n        ? options.top\n        : this._getTopToOriginY();\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {*} value\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n      if (typeof coordProps[key] !== 'undefined') {\n        this._setWidthHeight();\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.\n     */\n    _getLeftToOriginX: makeEdgeToOriginGetter(\n      { // property names\n        origin: 'originX',\n        axis1: 'x1',\n        axis2: 'x2',\n        dimension: 'width'\n      },\n      { // possible values of origin\n        nearest: 'left',\n        center: 'center',\n        farthest: 'right'\n      }\n    ),\n\n    /**\n     * @private\n     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.\n     */\n    _getTopToOriginY: makeEdgeToOriginGetter(\n      { // property names\n        origin: 'originY',\n        axis1: 'y1',\n        axis2: 'y2',\n        dimension: 'height'\n      },\n      { // possible values of origin\n        nearest: 'top',\n        center: 'center',\n        farthest: 'bottom'\n      }\n    ),\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      ctx.beginPath();\n\n      if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {\n        // move from center (of virtual box) to its left/top corner\n        // we can't assume x1, y1 is top left and x2, y2 is bottom right\n        var p = this.calcLinePoints();\n        ctx.moveTo(p.x1, p.y1);\n        ctx.lineTo(p.x2, p.y2);\n      }\n\n      ctx.lineWidth = this.strokeWidth;\n\n      // TODO: test this\n      // make sure setting \"fill\" changes color of a line\n      // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n      var origStrokeStyle = ctx.strokeStyle;\n      ctx.strokeStyle = this.stroke || ctx.fillStyle;\n      this.stroke && this._renderStroke(ctx);\n      ctx.strokeStyle = origStrokeStyle;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var p = this.calcLinePoints();\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /**\n     * This function is an helper for svg import. it returns the center of the object in the svg\n     * untransformed coordinates\n     * @private\n     * @return {Object} center point from element coordinates\n     */\n    _findCenterFromElement: function() {\n      return {\n        x: (this.x1 + this.x2) / 2,\n        y: (this.y1 + this.y2) / 2,\n      };\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @methd toObject\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());\n    },\n\n    /*\n     * Calculate object dimensions from its properties\n     * @private\n     */\n    _getNonTransformedDimensions: function() {\n      var dim = this.callSuper('_getNonTransformedDimensions');\n      if (this.strokeLineCap === 'butt') {\n        if (this.width === 0) {\n          dim.y -= this.strokeWidth;\n        }\n        if (this.height === 0) {\n          dim.x -= this.strokeWidth;\n        }\n      }\n      return dim;\n    },\n\n    /**\n     * Recalculates line points given width and height\n     * @private\n     */\n    calcLinePoints: function() {\n      var xMult = this.x1 <= this.x2 ? -1 : 1,\n          yMult = this.y1 <= this.y2 ? -1 : 1,\n          x1 = (xMult * this.width * 0.5),\n          y1 = (yMult * this.height * 0.5),\n          x2 = (xMult * this.width * -0.5),\n          y2 = (yMult * this.height * -0.5);\n\n      return {\n        x1: x1,\n        x2: x2,\n        y1: y1,\n        y2: y2\n      };\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var p = this.calcLinePoints();\n      return [\n        '<line ', 'COMMON_PARTS',\n        'x1=\"', p.x1,\n        '\" y1=\"', p.y1,\n        '\" x2=\"', p.x2,\n        '\" y2=\"', p.y2,\n        '\" />\\n'\n      ];\n    },\n    /* _TO_SVG_END_ */\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})\n   * @static\n   * @memberOf fabric.Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));\n\n  /**\n   * Returns fabric.Line instance from an SVG element\n   * @static\n   * @memberOf fabric.Line\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] callback function invoked after parsing\n   */\n  fabric.Line.fromElement = function(element, callback, options) {\n    options = options || { };\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),\n        points = [\n          parsedAttributes.x1 || 0,\n          parsedAttributes.y1 || 0,\n          parsedAttributes.x2 || 0,\n          parsedAttributes.y2 || 0\n        ];\n    callback(new fabric.Line(points, extend(parsedAttributes, options)));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Line instance from an object representation\n   * @static\n   * @memberOf fabric.Line\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] invoked with new instance as first argument\n   */\n  fabric.Line.fromObject = function(object, callback) {\n    function _callback(instance) {\n      delete instance.points;\n      callback && callback(instance);\n    };\n    var options = clone(object, true);\n    options.points = [object.x1, object.y1, object.x2, object.y2];\n    fabric.Object._fromObject('Line', options, _callback, 'points');\n  };\n\n  /**\n   * Produces a function that calculates distance from canvas edge to Line origin.\n   */\n  function makeEdgeToOriginGetter(propertyNames, originValues) {\n    var origin = propertyNames.origin,\n        axis1 = propertyNames.axis1,\n        axis2 = propertyNames.axis2,\n        dimension = propertyNames.dimension,\n        nearest = originValues.nearest,\n        center = originValues.center,\n        farthest = originValues.farthest;\n\n    return function() {\n      switch (this.get(origin)) {\n        case nearest:\n          return Math.min(this.get(axis1), this.get(axis2));\n        case center:\n          return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));\n        case farthest:\n          return Math.max(this.get(axis1), this.get(axis2));\n      }\n    };\n\n  }\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      pi = Math.PI;\n\n  if (fabric.Circle) {\n    fabric.warn('fabric.Circle is already defined.');\n    return;\n  }\n\n  /**\n   * Circle class\n   * @class fabric.Circle\n   * @extends fabric.Object\n   * @see {@link fabric.Circle#initialize} for constructor definition\n   */\n  fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'circle',\n\n    /**\n     * Radius of this circle\n     * @type Number\n     * @default\n     */\n    radius: 0,\n\n    /**\n     * Start angle of the circle, moving clockwise\n     * deprectated type, this should be in degree, this was an oversight.\n     * probably will change to degrees in next major version\n     * @type Number\n     * @default 0\n     */\n    startAngle: 0,\n\n    /**\n     * End angle of the circle\n     * deprectated type, this should be in degree, this was an oversight.\n     * probably will change to degrees in next major version\n     * @type Number\n     * @default 2Pi\n     */\n    endAngle: pi * 2,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('radius', 'startAngle', 'endAngle'),\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {*} value\n     * @return {fabric.Circle} thisArg\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n\n      if (key === 'radius') {\n        this.setRadius(value);\n      }\n\n      return this;\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return this.callSuper('toObject', ['radius', 'startAngle', 'endAngle'].concat(propertiesToInclude));\n    },\n\n    /* _TO_SVG_START_ */\n\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var svgString, x = 0, y = 0,\n          angle = (this.endAngle - this.startAngle) % ( 2 * pi);\n\n      if (angle === 0) {\n        svgString = [\n          '<circle ', 'COMMON_PARTS',\n          'cx=\"' + x + '\" cy=\"' + y + '\" ',\n          'r=\"', this.radius,\n          '\" />\\n'\n        ];\n      }\n      else {\n        var startX = fabric.util.cos(this.startAngle) * this.radius,\n            startY = fabric.util.sin(this.startAngle) * this.radius,\n            endX = fabric.util.cos(this.endAngle) * this.radius,\n            endY = fabric.util.sin(this.endAngle) * this.radius,\n            largeFlag = angle > pi ? '1' : '0';\n        svgString = [\n          '<path d=\"M ' + startX + ' ' + startY,\n          ' A ' + this.radius + ' ' + this.radius,\n          ' 0 ', +largeFlag + ' 1', ' ' + endX + ' ' + endY,\n          '\"', 'COMMON_PARTS', ' />\\n'\n        ];\n      }\n      return svgString;\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render on\n     */\n    _render: function(ctx) {\n      ctx.beginPath();\n      ctx.arc(\n        0,\n        0,\n        this.radius,\n        this.startAngle,\n        this.endAngle, false);\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * Returns horizontal radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRadiusX: function() {\n      return this.get('radius') * this.get('scaleX');\n    },\n\n    /**\n     * Returns vertical radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRadiusY: function() {\n      return this.get('radius') * this.get('scaleY');\n    },\n\n    /**\n     * Sets radius of an object (and updates width accordingly)\n     * @return {fabric.Circle} thisArg\n     */\n    setRadius: function(value) {\n      this.radius = value;\n      return this.set('width', value * 2).set('height', value * 2);\n    },\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})\n   * @static\n   * @memberOf fabric.Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));\n\n  /**\n   * Returns {@link fabric.Circle} instance from an SVG element\n   * @static\n   * @memberOf fabric.Circle\n   * @param {SVGElement} element Element to parse\n   * @param {Function} [callback] Options callback invoked after parsing is finished\n   * @param {Object} [options] Options object\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   */\n  fabric.Circle.fromElement = function(element, callback) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);\n\n    if (!isValidRadius(parsedAttributes)) {\n      throw new Error('value of `r` attribute is required and can not be negative');\n    }\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;\n    callback(new fabric.Circle(parsedAttributes));\n  };\n\n  /**\n   * @private\n   */\n  function isValidRadius(attributes) {\n    return (('radius' in attributes) && (attributes.radius >= 0));\n  }\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Circle} instance from an object representation\n   * @static\n   * @memberOf fabric.Circle\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] invoked with new instance as first argument\n   * @return {Object} Instance of fabric.Circle\n   */\n  fabric.Circle.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Circle', object, callback);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Triangle) {\n    fabric.warn('fabric.Triangle is already defined');\n    return;\n  }\n\n  /**\n   * Triangle class\n   * @class fabric.Triangle\n   * @extends fabric.Object\n   * @return {fabric.Triangle} thisArg\n   * @see {@link fabric.Triangle#initialize} for constructor definition\n   */\n  fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'triangle',\n\n    /**\n     * Width is set to 100 to compensate the old initialize code that was setting it to 100\n     * @type Number\n     * @default\n     */\n    width: 100,\n\n    /**\n     * Height is set to 100 to compensate the old initialize code that was setting it to 100\n     * @type Number\n     * @default\n     */\n    height: 100,\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      var widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2;\n\n      ctx.beginPath();\n      ctx.moveTo(-widthBy2, heightBy2);\n      ctx.lineTo(0, -heightBy2);\n      ctx.lineTo(widthBy2, heightBy2);\n      ctx.closePath();\n\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2;\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var widthBy2 = this.width / 2,\n          heightBy2 = this.height / 2,\n          points = [\n            -widthBy2 + ' ' + heightBy2,\n            '0 ' + -heightBy2,\n            widthBy2 + ' ' + heightBy2\n          ].join(',');\n      return [\n        '<polygon ', 'COMMON_PARTS',\n        'points=\"', points,\n        '\" />'\n      ];\n    },\n    /* _TO_SVG_END_ */\n  });\n\n  /**\n   * Returns {@link fabric.Triangle} instance from an object representation\n   * @static\n   * @memberOf fabric.Triangle\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] invoked with new instance as first argument\n   */\n  fabric.Triangle.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Triangle', object, callback);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      piBy2   = Math.PI * 2;\n\n  if (fabric.Ellipse) {\n    fabric.warn('fabric.Ellipse is already defined.');\n    return;\n  }\n\n  /**\n   * Ellipse class\n   * @class fabric.Ellipse\n   * @extends fabric.Object\n   * @return {fabric.Ellipse} thisArg\n   * @see {@link fabric.Ellipse#initialize} for constructor definition\n   */\n  fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'ellipse',\n\n    /**\n     * Horizontal radius\n     * @type Number\n     * @default\n     */\n    rx:   0,\n\n    /**\n     * Vertical radius\n     * @type Number\n     * @default\n     */\n    ry:   0,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {fabric.Ellipse} thisArg\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      this.set('rx', options && options.rx || 0);\n      this.set('ry', options && options.ry || 0);\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {*} value\n     * @return {fabric.Ellipse} thisArg\n     */\n    _set: function(key, value) {\n      this.callSuper('_set', key, value);\n      switch (key) {\n\n        case 'rx':\n          this.rx = value;\n          this.set('width', value * 2);\n          break;\n\n        case 'ry':\n          this.ry = value;\n          this.set('height', value * 2);\n          break;\n\n      }\n      return this;\n    },\n\n    /**\n     * Returns horizontal radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRx: function() {\n      return this.get('rx') * this.get('scaleX');\n    },\n\n    /**\n     * Returns Vertical radius of an object (according to how an object is scaled)\n     * @return {Number}\n     */\n    getRy: function() {\n      return this.get('ry') * this.get('scaleY');\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      return [\n        '<ellipse ', 'COMMON_PARTS',\n        'cx=\"0\" cy=\"0\" ',\n        'rx=\"', this.rx,\n        '\" ry=\"', this.ry,\n        '\" />\\n'\n      ];\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render on\n     */\n    _render: function(ctx) {\n      ctx.beginPath();\n      ctx.save();\n      ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n      ctx.arc(\n        0,\n        0,\n        this.rx,\n        0,\n        piBy2,\n        false);\n      ctx.restore();\n      this._renderPaintInOrder(ctx);\n    },\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})\n   * @static\n   * @memberOf fabric.Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));\n\n  /**\n   * Returns {@link fabric.Ellipse} instance from an SVG element\n   * @static\n   * @memberOf fabric.Ellipse\n   * @param {SVGElement} element Element to parse\n   * @param {Function} [callback] Options callback invoked after parsing is finished\n   * @return {fabric.Ellipse}\n   */\n  fabric.Ellipse.fromElement = function(element, callback) {\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n    callback(new fabric.Ellipse(parsedAttributes));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Ellipse} instance from an object representation\n   * @static\n   * @memberOf fabric.Ellipse\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] invoked with new instance as first argument\n   * @return {fabric.Ellipse}\n   */\n  fabric.Ellipse.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Ellipse', object, callback);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  if (fabric.Rect) {\n    fabric.warn('fabric.Rect is already defined');\n    return;\n  }\n\n  /**\n   * Rectangle class\n   * @class fabric.Rect\n   * @extends fabric.Object\n   * @return {fabric.Rect} thisArg\n   * @see {@link fabric.Rect#initialize} for constructor definition\n   */\n  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\n\n    /**\n     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: fabric.Object.prototype.stateProperties.concat('rx', 'ry'),\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'rect',\n\n    /**\n     * Horizontal border radius\n     * @type Number\n     * @default\n     */\n    rx:   0,\n\n    /**\n     * Vertical border radius\n     * @type Number\n     * @default\n     */\n    ry:   0,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      this._initRxRy();\n    },\n\n    /**\n     * Initializes rx/ry attributes\n     * @private\n     */\n    _initRxRy: function() {\n      if (this.rx && !this.ry) {\n        this.ry = this.rx;\n      }\n      else if (this.ry && !this.rx) {\n        this.rx = this.ry;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n\n      // 1x1 case (used in spray brush) optimization was removed because\n      // with caching and higher zoom level this makes more damage than help\n\n      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\n          ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\n          w = this.width,\n          h = this.height,\n          x = -this.width / 2,\n          y = -this.height / 2,\n          isRounded = rx !== 0 || ry !== 0,\n          /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\n          k = 1 - 0.5522847498;\n      ctx.beginPath();\n\n      ctx.moveTo(x + rx, y);\n\n      ctx.lineTo(x + w - rx, y);\n      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\n\n      ctx.lineTo(x + w, y + h - ry);\n      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\n\n      ctx.lineTo(x + rx, y + h);\n      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\n\n      ctx.lineTo(x, y + ry);\n      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\n\n      ctx.closePath();\n\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var x = -this.width / 2,\n          y = -this.height / 2,\n          w = this.width,\n          h = this.height;\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n      ctx.closePath();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var x = -this.width / 2, y = -this.height / 2;\n      return [\n        '<rect ', 'COMMON_PARTS',\n        'x=\"', x, '\" y=\"', y,\n        '\" rx=\"', this.rx, '\" ry=\"', this.ry,\n        '\" width=\"', this.width, '\" height=\"', this.height,\n        '\" />\\n'\n      ];\n    },\n    /* _TO_SVG_END_ */\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)\n   * @static\n   * @memberOf fabric.Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));\n\n  /**\n   * Returns {@link fabric.Rect} instance from an SVG element\n   * @static\n   * @memberOf fabric.Rect\n   * @param {SVGElement} element Element to parse\n   * @param {Function} callback callback function invoked after parsing\n   * @param {Object} [options] Options object\n   */\n  fabric.Rect.fromElement = function(element, callback, options) {\n    if (!element) {\n      return callback(null);\n    }\n    options = options || { };\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);\n\n    parsedAttributes.left = parsedAttributes.left || 0;\n    parsedAttributes.top  = parsedAttributes.top  || 0;\n    var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n    rect.visible = rect.visible && rect.width > 0 && rect.height > 0;\n    callback(rect);\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns {@link fabric.Rect} instance from an object representation\n   * @static\n   * @memberOf fabric.Rect\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created\n   */\n  fabric.Rect.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Rect', object, callback);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      toFixed = fabric.util.toFixed;\n\n  if (fabric.Polyline) {\n    fabric.warn('fabric.Polyline is already defined');\n    return;\n  }\n\n  /**\n   * Polyline class\n   * @class fabric.Polyline\n   * @extends fabric.Object\n   * @see {@link fabric.Polyline#initialize} for constructor definition\n   */\n  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'polyline',\n\n    /**\n     * Points array\n     * @type Array\n     * @default\n     */\n    points: null,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('points'),\n\n    /**\n     * Constructor\n     * @param {Array} points Array of points (where each point is an object with x and y)\n     * @param {Object} [options] Options object\n     * @return {fabric.Polyline} thisArg\n     * @example\n     * var poly = new fabric.Polyline([\n     *     { x: 10, y: 10 },\n     *     { x: 50, y: 30 },\n     *     { x: 40, y: 70 },\n     *     { x: 60, y: 50 },\n     *     { x: 100, y: 150 },\n     *     { x: 40, y: 100 }\n     *   ], {\n     *   stroke: 'red',\n     *   left: 100,\n     *   top: 100\n     * });\n     */\n    initialize: function(points, options) {\n      options = options || {};\n      this.points = points || [];\n      this.callSuper('initialize', options);\n      var calcDim = this._calcDimensions();\n      if (typeof options.left === 'undefined') {\n        this.left = calcDim.left;\n      }\n      if (typeof options.top === 'undefined') {\n        this.top = calcDim.top;\n      }\n      this.width = calcDim.width;\n      this.height = calcDim.height;\n      this.pathOffset = {\n        x: calcDim.left + this.width / 2,\n        y: calcDim.top + this.height / 2\n      };\n    },\n\n    /**\n     * Calculate the polygon min and max point from points array,\n     * returning an object with left, top, widht, height to measure the\n     * polygon size\n     * @return {Object} object.left X coordinate of the polygon leftmost point\n     * @return {Object} object.top Y coordinate of the polygon topmost point\n     * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point\n     * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point\n     * @private\n     */\n    _calcDimensions: function() {\n\n      var points = this.points,\n          minX = min(points, 'x') || 0,\n          minY = min(points, 'y') || 0,\n          maxX = max(points, 'x') || 0,\n          maxY = max(points, 'y') || 0,\n          width = (maxX - minX),\n          height = (maxY - minY);\n\n      return {\n        left: minX,\n        top: minY,\n        width: width,\n        height: height\n      };\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        points: this.points.concat()\n      });\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var points = [], diffX = this.pathOffset.x, diffY = this.pathOffset.y,\n          NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n\n      for (var i = 0, len = this.points.length; i < len; i++) {\n        points.push(\n          toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS), ',',\n          toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS), ' '\n        );\n      }\n      return [\n        '<' + this.type + ' ', 'COMMON_PARTS',\n        'points=\"', points.join(''),\n        '\" />\\n'\n      ];\n    },\n    /* _TO_SVG_END_ */\n\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    commonRender: function(ctx) {\n      var point, len = this.points.length,\n          x = this.pathOffset.x,\n          y = this.pathOffset.y;\n\n      if (!len || isNaN(this.points[len - 1].y)) {\n        // do not draw if no points or odd points\n        // NaN comes from parseFloat of a empty string in parser\n        return false;\n      }\n      ctx.beginPath();\n      ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n      for (var i = 0; i < len; i++) {\n        point = this.points[i];\n        ctx.lineTo(point.x - x, point.y - y);\n      }\n      return true;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (!this.commonRender(ctx)) {\n        return;\n      }\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var p1, p2;\n\n      ctx.beginPath();\n      for (var i = 0, len = this.points.length; i < len; i++) {\n        p1 = this.points[i];\n        p2 = this.points[i + 1] || p1;\n        fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);\n      }\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.get('points').length;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})\n   * @static\n   * @memberOf fabric.Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\n  /**\n   * Returns fabric.Polyline instance from an SVG element\n   * @static\n   * @memberOf fabric.Polyline\n   * @param {SVGElement} element Element to parser\n   * @param {Function} callback callback function invoked after parsing\n   * @param {Object} [options] Options object\n   */\n  fabric.Polyline.fromElement = function(element, callback, options) {\n    if (!element) {\n      return callback(null);\n    }\n    options || (options = { });\n\n    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n        parsedAttributes = fabric.parseAttributes(element, fabric.Polyline.ATTRIBUTE_NAMES);\n\n    callback(new fabric.Polyline(points, fabric.util.object.extend(parsedAttributes, options)));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Polyline instance from an object representation\n   * @static\n   * @memberOf fabric.Polyline\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n   */\n  fabric.Polyline.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Polyline', object, callback, 'points');\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  if (fabric.Polygon) {\n    fabric.warn('fabric.Polygon is already defined');\n    return;\n  }\n\n  /**\n   * Polygon class\n   * @class fabric.Polygon\n   * @extends fabric.Polyline\n   * @see {@link fabric.Polygon#initialize} for constructor definition\n   */\n  fabric.Polygon = fabric.util.createClass(fabric.Polyline, /** @lends fabric.Polygon.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'polygon',\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (!this.commonRender(ctx)) {\n        return;\n      }\n      ctx.closePath();\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      this.callSuper('_renderDashedStroke', ctx);\n      ctx.closePath();\n    },\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)\n   * @static\n   * @memberOf fabric.Polygon\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement\n   */\n  fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();\n\n  /**\n   * Returns {@link fabric.Polygon} instance from an SVG element\n   * @static\n   * @memberOf fabric.Polygon\n   * @param {SVGElement} element Element to parse\n   * @param {Function} callback callback function invoked after parsing\n   * @param {Object} [options] Options object\n   */\n  fabric.Polygon.fromElement = function(element, callback, options) {\n    if (!element) {\n      return callback(null);\n    }\n\n    options || (options = { });\n\n    var points = fabric.parsePointsAttribute(element.getAttribute('points')),\n        parsedAttributes = fabric.parseAttributes(element, fabric.Polygon.ATTRIBUTE_NAMES);\n\n    callback(new fabric.Polygon(points, extend(parsedAttributes, options)));\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Polygon instance from an object representation\n   * @static\n   * @memberOf fabric.Polygon\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n   */\n  fabric.Polygon.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Polygon', object, callback, 'points');\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      extend = fabric.util.object.extend,\n      _toString = Object.prototype.toString,\n      drawArc = fabric.util.drawArc,\n      toFixed = fabric.util.toFixed,\n      commandLengths = {\n        m: 2,\n        l: 2,\n        h: 1,\n        v: 1,\n        c: 6,\n        s: 4,\n        q: 4,\n        t: 2,\n        a: 7\n      },\n      repeatedCommands = {\n        m: 'l',\n        M: 'L'\n      };\n\n  if (fabric.Path) {\n    fabric.warn('fabric.Path is already defined');\n    return;\n  }\n\n  /**\n   * Path class\n   * @class fabric.Path\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}\n   * @see {@link fabric.Path#initialize} for constructor definition\n   */\n  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'path',\n\n    /**\n     * Array of path points\n     * @type Array\n     * @default\n     */\n    path: null,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('path', 'fillRule'),\n\n    stateProperties: fabric.Object.prototype.stateProperties.concat('path'),\n\n    /**\n     * Constructor\n     * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n     * @param {Object} [options] Options object\n     * @return {fabric.Path} thisArg\n     */\n    initialize: function(path, options) {\n      options = options || { };\n      this.callSuper('initialize', options);\n\n      if (!path) {\n        path = [];\n      }\n\n      var fromArray = _toString.call(path) === '[object Array]';\n\n      this.path = fromArray\n        ? path\n        // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\n        : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\n\n      if (!this.path) {\n        return;\n      }\n\n      if (!fromArray) {\n        this.path = this._parsePath();\n      }\n\n      this._setPositionDimensions(options);\n    },\n\n    /**\n     * @private\n     * @param {Object} options Options object\n     */\n    _setPositionDimensions: function(options) {\n      var calcDim = this._parseDimensions();\n\n      this.width = calcDim.width;\n      this.height = calcDim.height;\n\n      if (typeof options.left === 'undefined') {\n        this.left = calcDim.left;\n      }\n\n      if (typeof options.top === 'undefined') {\n        this.top = calcDim.top;\n      }\n\n      this.pathOffset = this.pathOffset || {\n        x: calcDim.left + this.width / 2,\n        y: calcDim.top + this.height / 2\n      };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render path on\n     */\n    _renderPathCommands: function(ctx) {\n      var current, // current instruction\n          previous = null,\n          subpathStartX = 0,\n          subpathStartY = 0,\n          x = 0, // current x\n          y = 0, // current y\n          controlX = 0, // current control point x\n          controlY = 0, // current control point y\n          tempX,\n          tempY,\n          l = -this.pathOffset.x,\n          t = -this.pathOffset.y;\n\n      ctx.beginPath();\n\n      for (var i = 0, len = this.path.length; i < len; ++i) {\n\n        current = this.path[i];\n\n        switch (current[0]) { // first letter\n\n          case 'l': // lineto, relative\n            x += current[1];\n            y += current[2];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'L': // lineto, absolute\n            x = current[1];\n            y = current[2];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'h': // horizontal lineto, relative\n            x += current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'H': // horizontal lineto, absolute\n            x = current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'v': // vertical lineto, relative\n            y += current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'V': // verical lineto, absolute\n            y = current[1];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'm': // moveTo, relative\n            x += current[1];\n            y += current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            ctx.moveTo(x + l, y + t);\n            break;\n\n          case 'M': // moveTo, absolute\n            x = current[1];\n            y = current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            ctx.moveTo(x + l, y + t);\n            break;\n\n          case 'c': // bezierCurveTo, relative\n            tempX = x + current[5];\n            tempY = y + current[6];\n            controlX = x + current[3];\n            controlY = y + current[4];\n            ctx.bezierCurveTo(\n              x + current[1] + l, // x1\n              y + current[2] + t, // y1\n              controlX + l, // x2\n              controlY + t, // y2\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'C': // bezierCurveTo, absolute\n            x = current[5];\n            y = current[6];\n            controlX = current[3];\n            controlY = current[4];\n            ctx.bezierCurveTo(\n              current[1] + l,\n              current[2] + t,\n              controlX + l,\n              controlY + t,\n              x + l,\n              y + t\n            );\n            break;\n\n          case 's': // shorthand cubic bezierCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            ctx.bezierCurveTo(\n              controlX + l,\n              controlY + t,\n              x + current[1] + l,\n              y + current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = x + current[1];\n            controlY = y + current[2];\n\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'S': // shorthand cubic bezierCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            ctx.bezierCurveTo(\n              controlX + l,\n              controlY + t,\n              current[1] + l,\n              current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = current[1];\n            controlY = current[2];\n\n            break;\n\n          case 'q': // quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            controlX = x + current[1];\n            controlY = y + current[2];\n\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'Q': // quadraticCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n\n            ctx.quadraticCurveTo(\n              current[1] + l,\n              current[2] + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            controlX = current[1];\n            controlY = current[2];\n            break;\n\n          case 't': // shorthand quadraticCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[1];\n            tempY = y + current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n\n            break;\n\n          case 'T':\n            tempX = current[1];\n            tempY = current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            ctx.quadraticCurveTo(\n              controlX + l,\n              controlY + t,\n              tempX + l,\n              tempY + t\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'a':\n            // TODO: optimize this\n            drawArc(ctx, x + l, y + t, [\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + x + l,\n              current[7] + y + t\n            ]);\n            x += current[6];\n            y += current[7];\n            break;\n\n          case 'A':\n            // TODO: optimize this\n            drawArc(ctx, x + l, y + t, [\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + l,\n              current[7] + t\n            ]);\n            x = current[6];\n            y = current[7];\n            break;\n\n          case 'z':\n          case 'Z':\n            x = subpathStartX;\n            y = subpathStartY;\n            ctx.closePath();\n            break;\n        }\n        previous = current;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render path on\n     */\n    _render: function(ctx) {\n      this._renderPathCommands(ctx);\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} string representation of an instance\n     */\n    toString: function() {\n      return '#<fabric.Path (' + this.complexity() +\n        '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var o = extend(this.callSuper('toObject', propertiesToInclude), {\n        path: this.path.map(function(item) { return item.slice(); }),\n        top: this.top,\n        left: this.left,\n      });\n      return o;\n    },\n\n    /**\n     * Returns dataless object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      var o = this.toObject(['sourcePath'].concat(propertiesToInclude));\n      if (o.sourcePath) {\n        delete o.path;\n      }\n      return o;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var path = this.path.map(function(path) {\n        return path.join(' ');\n      }).join(' ');\n      return [\n        '<path ', 'COMMON_PARTS',\n        'd=\"', path,\n        '\" stroke-linecap=\"round\" ',\n        '/>\\n'\n      ];\n    },\n\n    _getOffsetTransform: function() {\n      var digits = fabric.Object.NUM_FRACTION_DIGITS;\n      return ' translate(' + toFixed(-this.pathOffset.x, digits) + ', ' +\n          toFixed(-this.pathOffset.y, digits) + ')';\n    },\n\n    /**\n     * Returns svg clipPath representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toClipPathSVG: function(reviver) {\n      var additionalTransform = this._getOffsetTransform();\n      return '\\t' + this._createBaseClipPathSVGMarkup(\n        this._toSVG(), { reviver: reviver, additionalTransform: additionalTransform }\n      );\n    },\n\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var additionalTransform = this._getOffsetTransform();\n      return this._createBaseSVGMarkup(this._toSVG(), { reviver: reviver, additionalTransform: additionalTransform  });\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns number representation of an instance complexity\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.path.length;\n    },\n\n    /**\n     * @private\n     */\n    _parsePath: function() {\n      var result = [],\n          coords = [],\n          currentPath,\n          parsed,\n          re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/ig,\n          match,\n          coordsStr;\n\n      for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {\n        currentPath = this.path[i];\n\n        coordsStr = currentPath.slice(1).trim();\n        coords.length = 0;\n\n        while ((match = re.exec(coordsStr))) {\n          coords.push(match[0]);\n        }\n\n        coordsParsed = [currentPath.charAt(0)];\n\n        for (var j = 0, jlen = coords.length; j < jlen; j++) {\n          parsed = parseFloat(coords[j]);\n          if (!isNaN(parsed)) {\n            coordsParsed.push(parsed);\n          }\n        }\n\n        var command = coordsParsed[0],\n            commandLength = commandLengths[command.toLowerCase()],\n            repeatedCommand = repeatedCommands[command] || command;\n\n        if (coordsParsed.length - 1 > commandLength) {\n          for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\n            result.push([command].concat(coordsParsed.slice(k, k + commandLength)));\n            command = repeatedCommand;\n          }\n        }\n        else {\n          result.push(coordsParsed);\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * @private\n     */\n    _parseDimensions: function() {\n\n      var aX = [],\n          aY = [],\n          current, // current instruction\n          previous = null,\n          subpathStartX = 0,\n          subpathStartY = 0,\n          x = 0, // current x\n          y = 0, // current y\n          controlX = 0, // current control point x\n          controlY = 0, // current control point y\n          tempX,\n          tempY,\n          bounds;\n\n      for (var i = 0, len = this.path.length; i < len; ++i) {\n\n        current = this.path[i];\n\n        switch (current[0]) { // first letter\n\n          case 'l': // lineto, relative\n            x += current[1];\n            y += current[2];\n            bounds = [];\n            break;\n\n          case 'L': // lineto, absolute\n            x = current[1];\n            y = current[2];\n            bounds = [];\n            break;\n\n          case 'h': // horizontal lineto, relative\n            x += current[1];\n            bounds = [];\n            break;\n\n          case 'H': // horizontal lineto, absolute\n            x = current[1];\n            bounds = [];\n            break;\n\n          case 'v': // vertical lineto, relative\n            y += current[1];\n            bounds = [];\n            break;\n\n          case 'V': // verical lineto, absolute\n            y = current[1];\n            bounds = [];\n            break;\n\n          case 'm': // moveTo, relative\n            x += current[1];\n            y += current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            bounds = [];\n            break;\n\n          case 'M': // moveTo, absolute\n            x = current[1];\n            y = current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            bounds = [];\n            break;\n\n          case 'c': // bezierCurveTo, relative\n            tempX = x + current[5];\n            tempY = y + current[6];\n            controlX = x + current[3];\n            controlY = y + current[4];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              x + current[1], // x1\n              y + current[2], // y1\n              controlX, // x2\n              controlY, // y2\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'C': // bezierCurveTo, absolute\n            controlX = current[3];\n            controlY = current[4];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              current[1],\n              current[2],\n              controlX,\n              controlY,\n              current[5],\n              current[6]\n            );\n            x = current[5];\n            y = current[6];\n            break;\n\n          case 's': // shorthand cubic bezierCurveTo, relative\n\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              x + current[1],\n              y + current[2],\n              tempX,\n              tempY\n            );\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = x + current[1];\n            controlY = y + current[2];\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'S': // shorthand cubic bezierCurveTo, absolute\n            tempX = current[3];\n            tempY = current[4];\n            if (previous[0].match(/[CcSs]/) === null) {\n              // If there is no previous command or if the previous command was not a C, c, S, or s,\n              // the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control points\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              current[1],\n              current[2],\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            // set control point to 2nd one of this command\n            // \"... the first control point is assumed to be\n            // the reflection of the second control point on\n            // the previous command relative to the current point.\"\n            controlX = current[1];\n            controlY = current[2];\n            break;\n\n          case 'q': // quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[3];\n            tempY = y + current[4];\n            controlX = x + current[1];\n            controlY = y + current[2];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'Q': // quadraticCurveTo, absolute\n            controlX = current[1];\n            controlY = current[2];\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              current[3],\n              current[4]\n            );\n            x = current[3];\n            y = current[4];\n            break;\n\n          case 't': // shorthand quadraticCurveTo, relative\n            // transform to absolute x,y\n            tempX = x + current[1];\n            tempY = y + current[2];\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n\n            break;\n\n          case 'T':\n            tempX = current[1];\n            tempY = current[2];\n\n            if (previous[0].match(/[QqTt]/) === null) {\n              // If there is no previous command or if the previous command was not a Q, q, T or t,\n              // assume the control point is coincident with the current point\n              controlX = x;\n              controlY = y;\n            }\n            else {\n              // calculate reflection of previous control point\n              controlX = 2 * x - controlX;\n              controlY = 2 * y - controlY;\n            }\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              controlX,\n              controlY,\n              controlX,\n              controlY,\n              tempX,\n              tempY\n            );\n            x = tempX;\n            y = tempY;\n            break;\n\n          case 'a':\n            // TODO: optimize this\n            bounds = fabric.util.getBoundsOfArc(x, y,\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6] + x,\n              current[7] + y\n            );\n            x += current[6];\n            y += current[7];\n            break;\n\n          case 'A':\n            // TODO: optimize this\n            bounds = fabric.util.getBoundsOfArc(x, y,\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6],\n              current[7]\n            );\n            x = current[6];\n            y = current[7];\n            break;\n\n          case 'z':\n          case 'Z':\n            x = subpathStartX;\n            y = subpathStartY;\n            break;\n        }\n        previous = current;\n        bounds.forEach(function (point) {\n          aX.push(point.x);\n          aY.push(point.y);\n        });\n        aX.push(x);\n        aY.push(y);\n      }\n\n      var minX = min(aX) || 0,\n          minY = min(aY) || 0,\n          maxX = max(aX) || 0,\n          maxY = max(aY) || 0,\n          deltaX = maxX - minX,\n          deltaY = maxY - minY,\n\n          o = {\n            left: minX,\n            top: minY,\n            width: deltaX,\n            height: deltaY\n          };\n\n      return o;\n    }\n  });\n\n  /**\n   * Creates an instance of fabric.Path from an object\n   * @static\n   * @memberOf fabric.Path\n   * @param {Object} object\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n   */\n  fabric.Path.fromObject = function(object, callback) {\n    if (typeof object.sourcePath === 'string') {\n      var pathUrl = object.sourcePath;\n      fabric.loadSVGFromURL(pathUrl, function (elements) {\n        var path = elements[0];\n        path.setOptions(object);\n        callback && callback(path);\n      });\n    }\n    else {\n      fabric.Object._fromObject('Path', object, callback, 'path');\n    }\n  };\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)\n   * @static\n   * @memberOf fabric.Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);\n\n  /**\n   * Creates an instance of fabric.Path from an SVG <path> element\n   * @static\n   * @memberOf fabric.Path\n   * @param {SVGElement} element to parse\n   * @param {Function} callback Callback to invoke when an fabric.Path instance is created\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] Options callback invoked after parsing is finished\n   */\n  fabric.Path.fromElement = function(element, callback, options) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);\n    callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));\n  };\n  /* _FROM_SVG_END_ */\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      min = fabric.util.array.min,\n      max = fabric.util.array.max;\n\n  if (fabric.Group) {\n    return;\n  }\n\n  /**\n   * Group class\n   * @class fabric.Group\n   * @extends fabric.Object\n   * @mixes fabric.Collection\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\n   * @see {@link fabric.Group#initialize} for constructor definition\n   */\n  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'group',\n\n    /**\n     * Width of stroke\n     * @type Number\n     * @default\n     */\n    strokeWidth: 0,\n\n    /**\n     * Indicates if click events should also check for subtargets\n     * @type Boolean\n     * @default\n     */\n    subTargetCheck: false,\n\n    /**\n     * Groups are container, do not render anything on theyr own, ence no cache properties\n     * @type Array\n     * @default\n     */\n    cacheProperties: [],\n\n    /**\n     * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still\n     * available setting this boolean to true.\n     * @type Boolean\n     * @since 2.0.0\n     * @default\n     */\n    useSetOnGroup: false,\n\n    /**\n     * Constructor\n     * @param {Object} objects Group objects\n     * @param {Object} [options] Options object\n     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\n     * @return {Object} thisArg\n     */\n    initialize: function(objects, options, isAlreadyGrouped) {\n      options = options || {};\n      this._objects = [];\n      // if objects enclosed in a group have been grouped already,\n      // we cannot change properties of objects.\n      // Thus we need to set options to group without objects,\n      isAlreadyGrouped && this.callSuper('initialize', options);\n      this._objects = objects || [];\n      for (var i = this._objects.length; i--; ) {\n        this._objects[i].group = this;\n      }\n\n      if (!isAlreadyGrouped) {\n        var center = options && options.centerPoint;\n        // we want to set origins before calculating the bounding box.\n        // so that the topleft can be set with that in mind.\n        // if specific top and left are passed, are overwritten later\n        // with the callSuper('initialize', options)\n        if (options.originX !== undefined) {\n          this.originX = options.originX;\n        }\n        if (options.originY !== undefined) {\n          this.originY = options.originY;\n        }\n        // if coming from svg i do not want to calc bounds.\n        // i assume width and height are passed along options\n        center || this._calcBounds();\n        this._updateObjectsCoords(center);\n        delete options.centerPoint;\n        this.callSuper('initialize', options);\n      }\n      else {\n        this._updateObjectsACoords();\n      }\n\n      this.setCoords();\n    },\n\n    /**\n     * @private\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n     */\n    _updateObjectsACoords: function() {\n      var ignoreZoom = true, skipAbsolute = true;\n      for (var i = this._objects.length; i--; ){\n        this._objects[i].setCoords(ignoreZoom, skipAbsolute);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n     */\n    _updateObjectsCoords: function(center) {\n      var center = center || this.getCenterPoint();\n      for (var i = this._objects.length; i--; ){\n        this._updateObjectCoords(this._objects[i], center);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     * @param {fabric.Point} center, current center of group.\n     */\n    _updateObjectCoords: function(object, center) {\n      var objectLeft = object.left,\n          objectTop = object.top,\n          ignoreZoom = true, skipAbsolute = true;\n\n      object.set({\n        left: objectLeft - center.x,\n        top: objectTop - center.y\n      });\n      object.group = this;\n      object.setCoords(ignoreZoom, skipAbsolute);\n    },\n\n    /**\n     * Returns string represenation of a group\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.Group: (' + this.complexity() + ')>';\n    },\n\n    /**\n     * Adds an object to a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    addWithUpdate: function(object) {\n      this._restoreObjectsState();\n      fabric.util.resetObjectTransform(this);\n      if (object) {\n        this._objects.push(object);\n        object.group = this;\n        object._set('canvas', this.canvas);\n      }\n      this._calcBounds();\n      this._updateObjectsCoords();\n      this.setCoords();\n      this.dirty = true;\n      return this;\n    },\n\n    /**\n     * Removes an object from a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    removeWithUpdate: function(object) {\n      this._restoreObjectsState();\n      fabric.util.resetObjectTransform(this);\n\n      this.remove(object);\n      this._calcBounds();\n      this._updateObjectsCoords();\n      this.setCoords();\n      this.dirty = true;\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _onObjectAdded: function(object) {\n      this.dirty = true;\n      object.group = this;\n      object._set('canvas', this.canvas);\n    },\n\n    /**\n     * @private\n     */\n    _onObjectRemoved: function(object) {\n      this.dirty = true;\n      delete object.group;\n    },\n\n    /**\n     * @private\n     */\n    _set: function(key, value) {\n      var i = this._objects.length;\n      if (this.useSetOnGroup) {\n        while (i--) {\n          this._objects[i].setOnGroup(key, value);\n        }\n      }\n      if (key === 'canvas') {\n        while (i--) {\n          this._objects[i]._set(key, value);\n        }\n      }\n      fabric.Object.prototype._set.call(this, key, value);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var _includeDefaultValues = this.includeDefaultValues;\n      var objsToObject = this._objects.map(function(obj) {\n        var originalDefaults = obj.includeDefaultValues;\n        obj.includeDefaultValues = _includeDefaultValues;\n        var _obj = obj.toObject(propertiesToInclude);\n        obj.includeDefaultValues = originalDefaults;\n        return _obj;\n      });\n      var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);\n      obj.objects = objsToObject;\n      return obj;\n    },\n\n    /**\n     * Returns object representation of an instance, in dataless mode.\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      var objsToObject, sourcePath = this.sourcePath;\n      if (sourcePath) {\n        objsToObject = sourcePath;\n      }\n      else {\n        var _includeDefaultValues = this.includeDefaultValues;\n        objsToObject = this._objects.map(function(obj) {\n          var originalDefaults = obj.includeDefaultValues;\n          obj.includeDefaultValues = _includeDefaultValues;\n          var _obj = obj.toDatalessObject(propertiesToInclude);\n          obj.includeDefaultValues = originalDefaults;\n          return _obj;\n        });\n      }\n      var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);\n      obj.objects = objsToObject;\n      return obj;\n    },\n\n    /**\n     * Renders instance on a given context\n     * @param {CanvasRenderingContext2D} ctx context to render instance on\n     */\n    render: function(ctx) {\n      this._transformDone = true;\n      this.callSuper('render', ctx);\n      this._transformDone = false;\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      var ownCache = this.objectCaching && (!this.group || this.needsItsOwnCache() || !this.group.isOnACache());\n      this.ownCaching = ownCache;\n      if (ownCache) {\n        for (var i = 0, len = this._objects.length; i < len; i++) {\n          if (this._objects[i].willDrawShadow()) {\n            this.ownCaching = false;\n            return false;\n          }\n        }\n      }\n      return ownCache;\n    },\n\n    /**\n     * Check if this object or a child object will cast a shadow\n     * @return {Boolean}\n     */\n    willDrawShadow: function() {\n      if (this.shadow) {\n        return fabric.Object.prototype.willDrawShadow.call(this);\n      }\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Check if this group or its parent group are caching, recursively up\n     * @return {Boolean}\n     */\n    isOnACache: function() {\n      return this.ownCaching || (this.group && this.group.isOnACache());\n    },\n\n    /**\n     * Execute the drawing operation for an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawObject: function(ctx) {\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i].render(ctx);\n      }\n      this._drawClipPath(ctx);\n    },\n\n    /**\n     * Check if cache is dirty\n     */\n    isCacheDirty: function(skipCanvas) {\n      if (this.callSuper('isCacheDirty', skipCanvas)) {\n        return true;\n      }\n      if (!this.statefullCache) {\n        return false;\n      }\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        if (this._objects[i].isCacheDirty(true)) {\n          if (this._cacheCanvas) {\n            // if this group has not a cache canvas there is nothing to clean\n            var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;\n            this._cacheContext.clearRect(-x / 2, -y / 2, x, y);\n          }\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Retores original state of each of group objects (original state is that which was before group was created).\n     * @private\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    _restoreObjectsState: function() {\n      this._objects.forEach(this._restoreObjectState, this);\n      return this;\n    },\n\n    /**\n     * Realises the transform from this group onto the supplied object\n     * i.e. it tells you what would happen if the supplied object was in\n     * the group, and then the group was destroyed. It mutates the supplied\n     * object.\n     * @param {fabric.Object} object\n     * @return {fabric.Object} transformedObject\n     */\n    realizeTransform: function(object) {\n      var matrix = object.calcTransformMatrix(),\n          options = fabric.util.qrDecompose(matrix),\n          center = new fabric.Point(options.translateX, options.translateY);\n      object.flipX = false;\n      object.flipY = false;\n      object.set('scaleX', options.scaleX);\n      object.set('scaleY', options.scaleY);\n      object.skewX = options.skewX;\n      object.skewY = options.skewY;\n      object.angle = options.angle;\n      object.setPositionByOrigin(center, 'center', 'center');\n      return object;\n    },\n\n    /**\n     * Restores original state of a specified object in group\n     * @private\n     * @param {fabric.Object} object\n     * @return {fabric.Group} thisArg\n     */\n    _restoreObjectState: function(object) {\n      this.realizeTransform(object);\n      object.setCoords();\n      delete object.group;\n      return this;\n    },\n\n    /**\n     * Destroys a group (restoring state of its objects)\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    destroy: function() {\n      // when group is destroyed objects needs to get a repaint to be eventually\n      // displayed on canvas.\n      this._objects.forEach(function(object) {\n        object.set('dirty', true);\n      });\n      return this._restoreObjectsState();\n    },\n\n    /**\n     * make a group an active selection, remove the group from canvas\n     * the group has to be on canvas for this to work.\n     * @return {fabric.ActiveSelection} thisArg\n     * @chainable\n     */\n    toActiveSelection: function() {\n      if (!this.canvas) {\n        return;\n      }\n      var objects = this._objects, canvas = this.canvas;\n      this._objects = [];\n      var options = this.toObject();\n      delete options.objects;\n      var activeSelection = new fabric.ActiveSelection([]);\n      activeSelection.set(options);\n      activeSelection.type = 'activeSelection';\n      canvas.remove(this);\n      objects.forEach(function(object) {\n        object.group = activeSelection;\n        object.dirty = true;\n        canvas.add(object);\n      });\n      activeSelection.canvas = canvas;\n      activeSelection._objects = objects;\n      canvas._activeObject = activeSelection;\n      activeSelection.setCoords();\n      return activeSelection;\n    },\n\n    /**\n     * Destroys a group (restoring state of its objects)\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    ungroupOnCanvas: function() {\n      return this._restoreObjectsState();\n    },\n\n    /**\n     * Sets coordinates of all objects inside group\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    setObjectsCoords: function() {\n      var ignoreZoom = true, skipAbsolute = true;\n      this.forEachObject(function(object) {\n        object.setCoords(ignoreZoom, skipAbsolute);\n      });\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _calcBounds: function(onlyWidthHeight) {\n      var aX = [],\n          aY = [],\n          o, prop,\n          props = ['tr', 'br', 'bl', 'tl'],\n          i = 0, iLen = this._objects.length,\n          j, jLen = props.length,\n          ignoreZoom = true;\n\n      for ( ; i < iLen; ++i) {\n        o = this._objects[i];\n        o.setCoords(ignoreZoom);\n        for (j = 0; j < jLen; j++) {\n          prop = props[j];\n          aX.push(o.oCoords[prop].x);\n          aY.push(o.oCoords[prop].y);\n        }\n      }\n\n      this._getBounds(aX, aY, onlyWidthHeight);\n    },\n\n    /**\n     * @private\n     */\n    _getBounds: function(aX, aY, onlyWidthHeight) {\n      var minXY = new fabric.Point(min(aX), min(aY)),\n          maxXY = new fabric.Point(max(aX), max(aY)),\n          top = minXY.y || 0, left = minXY.x || 0,\n          width = (maxXY.x - minXY.x) || 0,\n          height = (maxXY.y - minXY.y) || 0;\n      this.width = width;\n      this.height = height;\n      if (!onlyWidthHeight) {\n        // the bounding box always finds the topleft most corner.\n        // whatever is the group origin, we set up here the left/top position.\n        this.setPositionByOrigin({ x: left, y: top }, 'left', 'top');\n      }\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var svgString = [];\n\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        svgString.push('\\t', this._objects[i].toSVG(reviver));\n      }\n\n      return this._createBaseSVGMarkup(\n        svgString,\n        { reviver: reviver, noStyle: true, withShadow: true });\n    },\n\n    /**\n     * Returns svg clipPath representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toClipPathSVG: function(reviver) {\n      var svgString = [];\n\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\n      }\n\n      return this._createBaseClipPathSVGMarkup(svgString, { reviver: reviver });\n    },\n    /* _TO_SVG_END_ */\n  });\n\n  /**\n   * Returns {@link fabric.Group} instance from an object representation\n   * @static\n   * @memberOf fabric.Group\n   * @param {Object} object Object to create a group from\n   * @param {Function} [callback] Callback to invoke when an group instance is created\n   */\n  fabric.Group.fromObject = function(object, callback) {\n    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n      fabric.util.enlivenObjects([object.clipPath], function(enlivedClipPath) {\n        var options = fabric.util.object.clone(object, true);\n        options.clipPath = enlivedClipPath[0];\n        delete options.objects;\n        callback && callback(new fabric.Group(enlivenedObjects, options, true));\n      });\n    });\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.ActiveSelection) {\n    return;\n  }\n\n  /**\n   * Group class\n   * @class fabric.ActiveSelection\n   * @extends fabric.Group\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\n   * @see {@link fabric.ActiveSelection#initialize} for constructor definition\n   */\n  fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'activeSelection',\n\n    /**\n     * Constructor\n     * @param {Object} objects ActiveSelection objects\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(objects, options) {\n      options = options || {};\n      this._objects = objects || [];\n      for (var i = this._objects.length; i--; ) {\n        this._objects[i].group = this;\n      }\n\n      if (options.originX) {\n        this.originX = options.originX;\n      }\n      if (options.originY) {\n        this.originY = options.originY;\n      }\n      this._calcBounds();\n      this._updateObjectsCoords();\n      fabric.Object.prototype.initialize.call(this, options);\n      this.setCoords();\n    },\n\n    /**\n     * Change te activeSelection to a normal group,\n     * High level function that automatically adds it to canvas as\n     * active object. no events fired.\n     * @since 2.0.0\n     * @return {fabric.Group}\n     */\n    toGroup: function() {\n      var objects = this._objects.concat();\n      this._objects = [];\n      var options = fabric.Object.prototype.toObject.call(this);\n      var newGroup = new fabric.Group([]);\n      delete options.type;\n      newGroup.set(options);\n      objects.forEach(function(object) {\n        object.canvas.remove(object);\n        object.group = newGroup;\n      });\n      newGroup._objects = objects;\n      if (!this.canvas) {\n        return newGroup;\n      }\n      var canvas = this.canvas;\n      canvas.add(newGroup);\n      canvas._activeObject = newGroup;\n      newGroup.setCoords();\n      return newGroup;\n    },\n\n    /**\n     * If returns true, deselection is cancelled.\n     * @since 2.0.0\n     * @return {Boolean} [cancel]\n     */\n    onDeselect: function() {\n      this.destroy();\n      return false;\n    },\n\n    /**\n     * Returns string representation of a group\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.ActiveSelection: (' + this.complexity() + ')>';\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      return false;\n    },\n\n    /**\n     * Check if this group or its parent group are caching, recursively up\n     * @return {Boolean}\n     */\n    isOnACache: function() {\n      return false;\n    },\n\n    /**\n     * Renders controls and borders for the object\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [styleOverride] properties to override the object style\n     * @param {Object} [childrenOverride] properties to override the children overrides\n     */\n    _renderControls: function(ctx, styleOverride, childrenOverride) {\n      ctx.save();\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      this.callSuper('_renderControls', ctx, styleOverride);\n      childrenOverride = childrenOverride || { };\n      if (typeof childrenOverride.hasControls === 'undefined') {\n        childrenOverride.hasControls = false;\n      }\n      if (typeof childrenOverride.hasRotatingPoint === 'undefined') {\n        childrenOverride.hasRotatingPoint = false;\n      }\n      childrenOverride.forActiveSelection = true;\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i]._renderControls(ctx, childrenOverride);\n      }\n      ctx.restore();\n    },\n  });\n\n  /**\n   * Returns {@link fabric.ActiveSelection} instance from an object representation\n   * @static\n   * @memberOf fabric.ActiveSelection\n   * @param {Object} object Object to create a group from\n   * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created\n   */\n  fabric.ActiveSelection.fromObject = function(object, callback) {\n    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n      delete object.objects;\n      callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));\n    });\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var extend = fabric.util.object.extend;\n\n  if (!global.fabric) {\n    global.fabric = { };\n  }\n\n  if (global.fabric.Image) {\n    fabric.warn('fabric.Image is already defined.');\n    return;\n  }\n\n  /**\n   * Image class\n   * @class fabric.Image\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n   * @see {@link fabric.Image#initialize} for constructor definition\n   */\n  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'image',\n\n    /**\n     * crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\n     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n     * @type String\n     * @default\n     */\n    crossOrigin: '',\n\n    /**\n     * Width of a stroke.\n     * For image quality a stroke multiple of 2 gives better results.\n     * @type Number\n     * @default\n     */\n    strokeWidth: 0,\n\n    /**\n     * private\n     * contains last value of scaleX to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */\n    _lastScaleX: 1,\n\n    /**\n     * private\n     * contains last value of scaleY to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */\n    _lastScaleY: 1,\n\n    /**\n     * private\n     * contains last value of scaling applied by the apply filter chain\n     * @type Number\n     */\n    _filterScalingX: 1,\n\n    /**\n     * private\n     * contains last value of scaling applied by the apply filter chain\n     * @type Number\n     */\n    _filterScalingY: 1,\n\n    /**\n     * minimum scale factor under which any resizeFilter is triggered to resize the image\n     * 0 will disable the automatic resize. 1 will trigger automatically always.\n     * number bigger than 1 are not implemented yet.\n     * @type Number\n     */\n    minimumScaleTrigger: 0.5,\n\n    /**\n     * List of properties to consider when checking if\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: fabric.Object.prototype.stateProperties.concat('cropX', 'cropY'),\n\n    /**\n     * key used to retrieve the texture representing this image\n     * since 2.0.0\n     * @type String\n     * @default\n     */\n    cacheKey: '',\n\n    /**\n     * Image crop in pixels from original image size.\n     * since 2.0.0\n     * @type Number\n     * @default\n     */\n    cropX: 0,\n\n    /**\n     * Image crop in pixels from original image size.\n     * since 2.0.0\n     * @type Number\n     * @default\n     */\n    cropY: 0,\n\n    /**\n     * Constructor\n     * @param {HTMLImageElement | String} element Image element\n     * @param {Object} [options] Options object\n     * @param {function} [callback] callback function to call after eventual filters applied.\n     * @return {fabric.Image} thisArg\n     */\n    initialize: function(element, options) {\n      options || (options = { });\n      this.filters = [];\n      this.cacheKey = 'texture' + fabric.Object.__uid++;\n      this.callSuper('initialize', options);\n      this._initElement(element, options);\n    },\n\n    /**\n     * Returns image element which this instance if based on\n     * @return {HTMLImageElement} Image element\n     */\n    getElement: function() {\n      return this._element || {};\n    },\n\n    /**\n     * Sets image element for this instance to a specified one.\n     * If filters defined they are applied to new image.\n     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n     * @param {HTMLImageElement} element\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setElement: function(element, options) {\n      this.removeTexture(this.cacheKey);\n      this.removeTexture(this.cacheKey + '_filtered');\n      this._element = element;\n      this._originalElement = element;\n      this._initConfig(options);\n      if (this.filters.length !== 0) {\n        this.applyFilters();\n      }\n      // resizeFilters work on the already filtered copy.\n      // we need to apply resizeFilters AFTER normal filters.\n      // applyResizeFilters is run more often than normal fiters\n      // and is triggered by user interactions rather than dev code\n      if (this.resizeFilter) {\n        this.applyResizeFilters();\n      }\n      return this;\n    },\n\n    /**\n     * Delete a single texture if in webgl mode\n     */\n    removeTexture: function(key) {\n      var backend = fabric.filterBackend;\n      if (backend && backend.evictCachesForKey) {\n        backend.evictCachesForKey(key);\n      }\n    },\n\n    /**\n     * Delete textures, reference to elements and eventually JSDOM cleanup\n     */\n    dispose: function() {\n      this.removeTexture(this.cacheKey);\n      this.removeTexture(this.cacheKey + '_filtered');\n      this._cacheContext = undefined;\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'].forEach((function(element) {\n        fabric.util.cleanUpJsdomNode(this[element]);\n        this[element] = undefined;\n      }).bind(this));\n    },\n\n    /**\n     * Sets crossOrigin value (on an instance and corresponding image element)\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setCrossOrigin: function(value) {\n      this.crossOrigin = value;\n      this._element.crossOrigin = value;\n\n      return this;\n    },\n\n    /**\n     * Returns original size of an image\n     * @return {Object} Object with \"width\" and \"height\" properties\n     */\n    getOriginalSize: function() {\n      var element = this.getElement();\n      return {\n        width: element.naturalWidth || element.width,\n        height: element.naturalHeight || element.height\n      };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _stroke: function(ctx) {\n      if (!this.stroke || this.strokeWidth === 0) {\n        return;\n      }\n      var w = this.width / 2, h = this.height / 2;\n      ctx.beginPath();\n      ctx.moveTo(-w, -h);\n      ctx.lineTo(w, -h);\n      ctx.lineTo(w, h);\n      ctx.lineTo(-w, h);\n      ctx.lineTo(-w, -h);\n      ctx.closePath();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderDashedStroke: function(ctx) {\n      var x = -this.width / 2,\n          y = -this.height / 2,\n          w = this.width,\n          h = this.height;\n\n      ctx.save();\n      this._setStrokeStyles(ctx, this);\n\n      ctx.beginPath();\n      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);\n      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var filters = [];\n\n      this.filters.forEach(function(filterObj) {\n        if (filterObj) {\n          filters.push(filterObj.toObject());\n        }\n      });\n      var object = extend(\n        this.callSuper(\n          'toObject',\n          ['crossOrigin', 'cropX', 'cropY'].concat(propertiesToInclude)\n        ), {\n          src: this.getSrc(),\n          filters: filters,\n        });\n      if (this.resizeFilter) {\n        object.resizeFilter = this.resizeFilter.toObject();\n      }\n      return object;\n    },\n\n    /**\n     * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,hight.\n     * @return {Boolean}\n     */\n    hasCrop: function() {\n      return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;\n    },\n\n    /* _TO_SVG_START_ */\n    /**\n     * Returns svg representation of an instance\n     * @return {Array} an array of strings with the specific svg representation\n     * of the instance\n     */\n    _toSVG: function() {\n      var svgString = [], imageMarkup = [], strokeSvg,\n          x = -this.width / 2, y = -this.height / 2, clipPath = '';\n      if (this.hasCrop()) {\n        var clipPathId = fabric.Object.__uid++;\n        svgString.push(\n          '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n          '\\t<rect x=\"' + x + '\" y=\"' + y + '\" width=\"' + this.width + '\" height=\"' + this.height + '\" />\\n',\n          '</clipPath>\\n'\n        );\n        clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n      }\n      imageMarkup.push('\\t<image ', 'COMMON_PARTS', 'xlink:href=\"', this.getSvgSrc(true),\n        '\" x=\"', x - this.cropX, '\" y=\"', y - this.cropY,\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n        '\" width=\"', this._element.width || this._element.naturalWidth,\n        '\" height=\"', this._element.height || this._element.height,\n        '\"', clipPath,\n        '></image>\\n');\n\n      if (this.stroke || this.strokeDashArray) {\n        var origFill = this.fill;\n        this.fill = null;\n        strokeSvg = [\n          '\\t<rect ',\n          'x=\"', x, '\" y=\"', y,\n          '\" width=\"', this.width, '\" height=\"', this.height,\n          '\" style=\"', this.getSvgStyles(),\n          '\"/>\\n'\n        ];\n        this.fill = origFill;\n      }\n      if (this.paintFirst !== 'fill') {\n        svgString = svgString.concat(strokeSvg, imageMarkup);\n      }\n      else {\n        svgString = svgString.concat(imageMarkup, strokeSvg);\n      }\n      return svgString;\n    },\n    /* _TO_SVG_END_ */\n\n    /**\n     * Returns source of an image\n     * @param {Boolean} filtered indicates if the src is needed for svg\n     * @return {String} Source of an image\n     */\n    getSrc: function(filtered) {\n      var element = filtered ? this._element : this._originalElement;\n      if (element) {\n        if (element.toDataURL) {\n          return element.toDataURL();\n        }\n        return element.src;\n      }\n      else {\n        return this.src || '';\n      }\n    },\n\n    /**\n     * Sets source of an image\n     * @param {String} src Source string (URL)\n     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setSrc: function(src, callback, options) {\n      fabric.util.loadImage(src, function(img) {\n        this.setElement(img, options);\n        this._setWidthHeight();\n        callback(this);\n      }, this, options && options.crossOrigin);\n      return this;\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} String representation of an instance\n     */\n    toString: function() {\n      return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\n    },\n\n    applyResizeFilters: function() {\n      var filter = this.resizeFilter,\n          minimumScale = this.minimumScaleTrigger,\n          objectScale = this.getTotalObjectScaling(),\n          scaleX = objectScale.scaleX,\n          scaleY = objectScale.scaleY,\n          elementToFilter = this._filteredEl || this._originalElement;\n      if (this.group) {\n        this.set('dirty', true);\n      }\n      if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n        this._element = elementToFilter;\n        this._filterScalingX = 1;\n        this._filterScalingY = 1;\n        this._lastScaleX = scaleX;\n        this._lastScaleY = scaleY;\n        return;\n      }\n      if (!fabric.filterBackend) {\n        fabric.filterBackend = fabric.initFilterBackend();\n      }\n      var canvasEl = fabric.util.createCanvasElement(),\n          cacheKey = this._filteredEl ? (this.cacheKey + '_filtered') : this.cacheKey,\n          sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;\n      canvasEl.width = sourceWidth;\n      canvasEl.height = sourceHeight;\n      this._element = canvasEl;\n      this._lastScaleX = filter.scaleX = scaleX;\n      this._lastScaleY = filter.scaleY = scaleY;\n      fabric.filterBackend.applyFilters(\n        [filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);\n      this._filterScalingX = canvasEl.width / this._originalElement.width;\n      this._filterScalingY = canvasEl.height / this._originalElement.height;\n    },\n\n    /**\n     * Applies filters assigned to this image (from \"filters\" array) or from filter param\n     * @method applyFilters\n     * @param {Array} filters to be applied\n     * @param {Boolean} forResizing specify if the filter operation is a resize operation\n     * @return {thisArg} return the fabric.Image object\n     * @chainable\n     */\n    applyFilters: function(filters) {\n\n      filters = filters || this.filters || [];\n      filters = filters.filter(function(filter) { return filter && !filter.isNeutralState(); });\n      this.set('dirty', true);\n\n      // needs to clear out or WEBGL will not resize correctly\n      this.removeTexture(this.cacheKey + '_filtered');\n\n      if (filters.length === 0) {\n        this._element = this._originalElement;\n        this._filteredEl = null;\n        this._filterScalingX = 1;\n        this._filterScalingY = 1;\n        return this;\n      }\n\n      var imgElement = this._originalElement,\n          sourceWidth = imgElement.naturalWidth || imgElement.width,\n          sourceHeight = imgElement.naturalHeight || imgElement.height;\n\n      if (this._element === this._originalElement) {\n        // if the element is the same we need to create a new element\n        var canvasEl = fabric.util.createCanvasElement();\n        canvasEl.width = sourceWidth;\n        canvasEl.height = sourceHeight;\n        this._element = canvasEl;\n        this._filteredEl = canvasEl;\n      }\n      else {\n        // clear the existing element to get new filter data\n        // also dereference the eventual resized _element\n        this._element = this._filteredEl;\n        this._filteredEl.getContext('2d').clearRect(0, 0, sourceWidth, sourceHeight);\n        // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n        this._lastScaleX = 1;\n        this._lastScaleY = 1;\n      }\n      if (!fabric.filterBackend) {\n        fabric.filterBackend = fabric.initFilterBackend();\n      }\n      fabric.filterBackend.applyFilters(\n        filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);\n      if (this._originalElement.width !== this._element.width ||\n        this._originalElement.height !== this._element.height) {\n        this._filterScalingX = this._element.width / this._originalElement.width;\n        this._filterScalingY = this._element.height / this._originalElement.height;\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n        this.applyResizeFilters();\n      }\n      this._stroke(ctx);\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * This is the special image version where we would like to avoid caching where possible.\n     * Essentially images do not benefit from caching. They may require caching, and in that\n     * case we do it. Also caching an image usually ends in a loss of details.\n     * A full performance audit should be done.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      this.ownCaching = this.objectCaching && this.needsItsOwnCache();\n      return this.ownCaching;\n    },\n\n    _renderFill: function(ctx) {\n      var elementToDraw = this._element,\n          w = this.width, h = this.height,\n          sW = Math.min(elementToDraw.naturalWidth || elementToDraw.width, w * this._filterScalingX),\n          sH = Math.min(elementToDraw.naturalHeight || elementToDraw.height, h * this._filterScalingY),\n          x = -w / 2, y = -h / 2,\n          sX = Math.max(0, this.cropX * this._filterScalingX),\n          sY = Math.max(0, this.cropY * this._filterScalingY);\n\n      elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, w, h);\n    },\n\n    /**\n     * @private, needed to check if image needs resize\n     */\n    _needsResize: function() {\n      var scale = this.getTotalObjectScaling();\n      return (scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY);\n    },\n\n    /**\n     * @private\n     */\n    _resetWidthHeight: function() {\n      this.set(this.getOriginalSize());\n    },\n\n    /**\n     * The Image class's initialization method. This method is automatically\n     * called by the constructor.\n     * @private\n     * @param {HTMLImageElement|String} element The element representing the image\n     * @param {Object} [options] Options object\n     */\n    _initElement: function(element, options) {\n      this.setElement(fabric.util.getById(element), options);\n      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initConfig: function(options) {\n      options || (options = { });\n      this.setOptions(options);\n      this._setWidthHeight(options);\n      if (this._element && this.crossOrigin) {\n        this._element.crossOrigin = this.crossOrigin;\n      }\n    },\n\n    /**\n     * @private\n     * @param {Array} filters to be initialized\n     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\n     */\n    _initFilters: function(filters, callback) {\n      if (filters && filters.length) {\n        fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\n          callback && callback(enlivenedObjects);\n        }, 'fabric.Image.filters');\n      }\n      else {\n        callback && callback();\n      }\n    },\n\n    /**\n     * @private\n     * Set the width and the height of the image object, using the element or the\n     * options.\n     * @param {Object} [options] Object with width/height properties\n     */\n    _setWidthHeight: function(options) {\n      options || (options = { });\n      var el = this.getElement();\n      this.width = options.width || el.naturalWidth || el.width || 0;\n      this.height = options.height || el.naturalHeight || el.height || 0;\n    },\n\n    /**\n     * Calculate offset for center and scale factor for the image in order to respect\n     * the preserveAspectRatio attribute\n     * @private\n     * @return {Object}\n     */\n    parsePreserveAspectRatioAttribute: function() {\n      var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ''),\n          rWidth = this._element.width, rHeight = this._element.height,\n          scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0,\n          offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };\n      if (pAR && (pAR.alignX !== 'none' || pAR.alignY !== 'none')) {\n        if (pAR.meetOrSlice === 'meet') {\n          scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);\n          offset = (pWidth - rWidth * scaleX) / 2;\n          if (pAR.alignX === 'Min') {\n            offsetLeft = -offset;\n          }\n          if (pAR.alignX === 'Max') {\n            offsetLeft = offset;\n          }\n          offset = (pHeight - rHeight * scaleY) / 2;\n          if (pAR.alignY === 'Min') {\n            offsetTop = -offset;\n          }\n          if (pAR.alignY === 'Max') {\n            offsetTop = offset;\n          }\n        }\n        if (pAR.meetOrSlice === 'slice') {\n          scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);\n          offset = rWidth - pWidth / scaleX;\n          if (pAR.alignX === 'Mid') {\n            cropX = offset / 2;\n          }\n          if (pAR.alignX === 'Max') {\n            cropX = offset;\n          }\n          offset = rHeight - pHeight / scaleY;\n          if (pAR.alignY === 'Mid') {\n            cropY = offset / 2;\n          }\n          if (pAR.alignY === 'Max') {\n            cropY = offset;\n          }\n          rWidth = pWidth / scaleX;\n          rHeight = pHeight / scaleY;\n        }\n      }\n      else {\n        scaleX = pWidth / rWidth;\n        scaleY = pHeight / rHeight;\n      }\n      return {\n        width: rWidth,\n        height: rHeight,\n        scaleX: scaleX,\n        scaleY: scaleY,\n        offsetLeft: offsetLeft,\n        offsetTop: offsetTop,\n        cropX: cropX,\n        cropY: cropY\n      };\n    }\n  });\n\n  /**\n   * Default CSS class name for canvas\n   * @static\n   * @type String\n   * @default\n   */\n  fabric.Image.CSS_CANVAS = 'canvas-img';\n\n  /**\n   * Alias for getSrc\n   * @static\n   */\n  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\n\n  /**\n   * Creates an instance of fabric.Image from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} callback Callback to invoke when an image instance is created\n   */\n  fabric.Image.fromObject = function(_object, callback) {\n    var object = fabric.util.object.clone(_object);\n    fabric.util.loadImage(object.src, function(img, error) {\n      if (error) {\n        callback && callback(null, error);\n        return;\n      }\n      fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\n        object.filters = filters || [];\n        fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {\n          object.resizeFilter = resizeFilters[0];\n          fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {\n            object.clipPath = enlivedProps[0];\n            var image = new fabric.Image(img, object);\n            callback(image);\n          });\n        });\n      });\n    }, null, object.crossOrigin);\n  };\n\n  /**\n   * Creates an instance of fabric.Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)\n   * @param {Object} [imgOptions] Options object\n   */\n  fabric.Image.fromURL = function(url, callback, imgOptions) {\n    fabric.util.loadImage(url, function(img) {\n      callback && callback(new fabric.Image(img, imgOptions));\n    }, null, imgOptions && imgOptions.crossOrigin);\n  };\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  fabric.Image.ATTRIBUTE_NAMES =\n    fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href crossOrigin'.split(' '));\n\n  /**\n   * Returns {@link fabric.Image} instance from an SVG element\n   * @static\n   * @param {SVGElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} callback Callback to execute when fabric.Image object is created\n   * @return {fabric.Image} Instance of fabric.Image\n   */\n  fabric.Image.fromElement = function(element, callback, options) {\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES);\n    fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,\n      extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));\n  };\n  /* _FROM_SVG_END_ */\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * @private\n   * @return {Number} angle value\n   */\n  _getAngleValueForStraighten: function() {\n    var angle = this.angle % 360;\n    if (angle > 0) {\n      return Math.round((angle - 1) / 90) * 90;\n    }\n    return Math.round(angle / 90) * 90;\n  },\n\n  /**\n   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  straighten: function() {\n    this.rotate(this._getAngleValueForStraighten());\n    return this;\n  },\n\n  /**\n   * Same as {@link fabric.Object.prototype.straighten} but with animation\n   * @param {Object} callbacks Object with callback functions\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  fxStraighten: function(callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    fabric.util.animate({\n      startValue: this.get('angle'),\n      endValue: this._getAngleValueForStraighten(),\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        _this.rotate(value);\n        onChange();\n      },\n      onComplete: function() {\n        _this.setCoords();\n        onComplete();\n      },\n    });\n\n    return this;\n  }\n});\n\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Straightens object, then rerenders canvas\n   * @param {fabric.Object} object Object to straighten\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  straightenObject: function (object) {\n    object.straighten();\n    this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated\n   * @param {fabric.Object} object Object to straighten\n   * @return {fabric.Canvas} thisArg\n   * @chainable\n   */\n  fxStraightenObject: function (object) {\n    object.fxStraighten({\n      onChange: this.requestRenderAllBound\n    });\n    return this;\n  }\n});\n\n\n(function() {\n\n  'use strict';\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  function testPrecision(gl, precision){\n    var fragmentSource = 'precision ' + precision + ' float;\\nvoid main(){}';\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Indicate whether this filtering backend is supported by the user's browser.\n   * @param {Number} tileSize check if the tileSize is supported\n   * @returns {Boolean} Whether the user's browser supports WebGL.\n   */\n  fabric.isWebglSupported = function(tileSize) {\n    if (fabric.isLikelyNode) {\n      return false;\n    }\n    tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;\n    var canvas = document.createElement('canvas');\n    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    var isSupported = false;\n    // eslint-disable-next-line\n    if (gl) {\n      fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      isSupported = fabric.maxTextureSize >= tileSize;\n      var precisions = ['highp', 'mediump', 'lowp'];\n      for (var i = 0; i < 3; i++){\n        if (testPrecision(gl, precisions[i])){\n          fabric.webGlPrecision = precisions[i];\n          break;\n        };\n      }\n    }\n    this.isSupported = isSupported;\n    return isSupported;\n  };\n\n  fabric.WebglFilterBackend = WebglFilterBackend;\n\n  /**\n   * WebGL filter backend.\n   */\n  function WebglFilterBackend(options) {\n    if (options && options.tileSize) {\n      this.tileSize = options.tileSize;\n    }\n    this.setupGLContext(this.tileSize, this.tileSize);\n    this.captureGPUInfo();\n  };\n\n  WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {\n\n    tileSize: 2048,\n\n    /**\n     * Experimental. This object is a sort of repository of help layers used to avoid\n     * of recreating them during frequent filtering. If you are previewing a filter with\n     * a slider you problably do not want to create help layers every filter step.\n     * in this object there will be appended some canvases, created once, resized sometimes\n     * cleared never. Clearing is left to the developer.\n     **/\n    resources: {\n\n    },\n\n    /**\n     * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n     */\n    setupGLContext: function(width, height) {\n      this.dispose();\n      this.createWebGLCanvas(width, height);\n      // eslint-disable-next-line\n      this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n      this.chooseFastestCopyGLTo2DMethod(width, height);\n    },\n\n    /**\n     * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n     * putImageData is faster than drawImage for that specific operation.\n     */\n    chooseFastestCopyGLTo2DMethod: function(width, height) {\n      var canMeasurePerf = typeof window.performance !== 'undefined';\n      var canUseImageData;\n      try {\n        new ImageData(1, 1);\n        canUseImageData = true;\n      }\n      catch (e) {\n        canUseImageData = false;\n      }\n      // eslint-disable-next-line no-undef\n      var canUseArrayBuffer = typeof ArrayBuffer !== 'undefined';\n      // eslint-disable-next-line no-undef\n      var canUseUint8Clamped = typeof Uint8ClampedArray !== 'undefined';\n\n      if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {\n        return;\n      }\n\n      var targetCanvas = fabric.util.createCanvasElement();\n      // eslint-disable-next-line no-undef\n      var imageBuffer = new ArrayBuffer(width * height * 4);\n      var testContext = {\n        imageBuffer: imageBuffer,\n        destinationWidth: width,\n        destinationHeight: height,\n        targetCanvas: targetCanvas\n      };\n      var startTime, drawImageTime, putImageDataTime;\n      targetCanvas.width = width;\n      targetCanvas.height = height;\n\n      startTime = window.performance.now();\n      copyGLTo2DDrawImage.call(testContext, this.gl, testContext);\n      drawImageTime = window.performance.now() - startTime;\n\n      startTime = window.performance.now();\n      copyGLTo2DPutImageData.call(testContext, this.gl, testContext);\n      putImageDataTime = window.performance.now() - startTime;\n\n      if (drawImageTime > putImageDataTime) {\n        this.imageBuffer = imageBuffer;\n        this.copyGLTo2D = copyGLTo2DPutImageData;\n      }\n      else {\n        this.copyGLTo2D = copyGLTo2DDrawImage;\n      }\n    },\n\n    /**\n     * Create a canvas element and associated WebGL context and attaches them as\n     * class properties to the GLFilterBackend class.\n     */\n    createWebGLCanvas: function(width, height) {\n      var canvas = fabric.util.createCanvasElement();\n      canvas.width = width;\n      canvas.height = height;\n      var glOptions = {\n            alpha: true,\n            premultipliedAlpha: false,\n            depth: false,\n            stencil: false,\n            antialias: false\n          },\n          gl = canvas.getContext('webgl', glOptions);\n      if (!gl) {\n        gl = canvas.getContext('experimental-webgl', glOptions);\n      }\n      if (!gl) {\n        return;\n      }\n      gl.clearColor(0, 0, 0, 0);\n      // this canvas can fire webglcontextlost and webglcontextrestored\n      this.canvas = canvas;\n      this.gl = gl;\n    },\n\n    /**\n     * Attempts to apply the requested filters to the source provided, drawing the filtered output\n     * to the provided target canvas.\n     *\n     * @param {Array} filters The filters to apply.\n     * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.\n     * @param {Number} width The width of the source input.\n     * @param {Number} height The height of the source input.\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n     * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n     * omitted, caching will be skipped.\n     */\n    applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {\n      var gl = this.gl;\n      var cachedTexture;\n      if (cacheKey) {\n        cachedTexture = this.getCachedTexture(cacheKey, source);\n      }\n      var pipelineState = {\n        originalWidth: source.width || source.originalWidth,\n        originalHeight: source.height || source.originalHeight,\n        sourceWidth: width,\n        sourceHeight: height,\n        destinationWidth: width,\n        destinationHeight: height,\n        context: gl,\n        sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),\n        targetTexture: this.createTexture(gl, width, height),\n        originalTexture: cachedTexture ||\n          this.createTexture(gl, width, height, !cachedTexture && source),\n        passes: filters.length,\n        webgl: true,\n        aPosition: this.aPosition,\n        programCache: this.programCache,\n        pass: 0,\n        filterBackend: this,\n        targetCanvas: targetCanvas\n      };\n      var tempFbo = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n      filters.forEach(function(filter) { filter && filter.applyTo(pipelineState); });\n      resizeCanvasIfNeeded(pipelineState);\n      this.copyGLTo2D(gl, pipelineState);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n      gl.deleteTexture(pipelineState.sourceTexture);\n      gl.deleteTexture(pipelineState.targetTexture);\n      gl.deleteFramebuffer(tempFbo);\n      targetCanvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);\n      return pipelineState;\n    },\n\n    /**\n     * Detach event listeners, remove references, and clean up caches.\n     */\n    dispose: function() {\n      if (this.canvas) {\n        this.canvas = null;\n        this.gl = null;\n      }\n      this.clearWebGLCaches();\n    },\n\n    /**\n     * Wipe out WebGL-related caches.\n     */\n    clearWebGLCaches: function() {\n      this.programCache = {};\n      this.textureCache = {};\n    },\n\n    /**\n     * Create a WebGL texture object.\n     *\n     * Accepts specific dimensions to initialize the textuer to or a source image.\n     *\n     * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n     * @param {Number} width The width to initialize the texture at.\n     * @param {Number} height The height to initialize the texture.\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.\n     * @returns {WebGLTexture}\n     */\n    createTexture: function(gl, width, height, textureImageSource) {\n      var texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      if (textureImageSource) {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);\n      }\n      else {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      }\n      return texture;\n    },\n\n    /**\n     * Can be optionally used to get a texture from the cache array\n     *\n     * If an existing texture is not found, a new texture is created and cached.\n     *\n     * @param {String} uniqueId A cache key to use to find an existing texture.\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n     * texture cache entry if one does not already exist.\n     */\n    getCachedTexture: function(uniqueId, textureImageSource) {\n      if (this.textureCache[uniqueId]) {\n        return this.textureCache[uniqueId];\n      }\n      else {\n        var texture = this.createTexture(\n          this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);\n        this.textureCache[uniqueId] = texture;\n        return texture;\n      }\n    },\n\n    /**\n     * Clear out cached resources related to a source image that has been\n     * filtered previously.\n     *\n     * @param {String} cacheKey The cache key provided when the source image was filtered.\n     */\n    evictCachesForKey: function(cacheKey) {\n      if (this.textureCache[cacheKey]) {\n        this.gl.deleteTexture(this.textureCache[cacheKey]);\n        delete this.textureCache[cacheKey];\n      }\n    },\n\n    copyGLTo2D: copyGLTo2DDrawImage,\n\n    /**\n     * Attempt to extract GPU information strings from a WebGL context.\n     *\n     * Useful information when debugging or blacklisting specific GPUs.\n     *\n     * @returns {Object} A GPU info object with renderer and vendor strings.\n     */\n    captureGPUInfo: function() {\n      if (this.gpuInfo) {\n        return this.gpuInfo;\n      }\n      var gl = this.gl, gpuInfo = { renderer: '', vendor: '' };\n      if (!gl) {\n        return gpuInfo;\n      }\n      var ext = gl.getExtension('WEBGL_debug_renderer_info');\n      if (ext) {\n        var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n        var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n        if (renderer) {\n          gpuInfo.renderer = renderer.toLowerCase();\n        }\n        if (vendor) {\n          gpuInfo.vendor = vendor.toLowerCase();\n        }\n      }\n      this.gpuInfo = gpuInfo;\n      return gpuInfo;\n    },\n  };\n})();\n\nfunction resizeCanvasIfNeeded(pipelineState) {\n  var targetCanvas = pipelineState.targetCanvas,\n      width = targetCanvas.width, height = targetCanvas.height,\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n\n/**\n * Copy an input WebGL canvas on to an output 2D canvas.\n *\n * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n * desired output image appearing in the bottom-left corner of the WebGL canvas.\n *\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n * @param {Object} pipelineState The 2D target canvas to copy on to.\n */\nfunction copyGLTo2DDrawImage(gl, pipelineState) {\n  var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n  ctx.translate(0, targetCanvas.height); // move it down again\n  ctx.scale(1, -1); // vertical flip\n  // where is my image on the big glcanvas?\n  var sourceY = glCanvas.height - targetCanvas.height;\n  ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0,\n    targetCanvas.width, targetCanvas.height);\n}\n\n/**\n * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n *\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n * @param {Object} pipelineState The 2D target canvas to copy on to.\n */\nfunction copyGLTo2DPutImageData(gl, pipelineState) {\n  var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n\n  // eslint-disable-next-line no-undef\n  var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n  // eslint-disable-next-line no-undef\n  var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n  gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n  var imgData = new ImageData(u8Clamped, dWidth, dHeight);\n  ctx.putImageData(imgData, 0, 0);\n}\n\n\n(function() {\n\n  'use strict';\n\n  var noop = function() {};\n\n  fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;\n\n  /**\n   * Canvas 2D filter backend.\n   */\n  function Canvas2dFilterBackend() {};\n\n  Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {\n    evictCachesForKey: noop,\n    dispose: noop,\n    clearWebGLCaches: noop,\n\n    /**\n     * Experimental. This object is a sort of repository of help layers used to avoid\n     * of recreating them during frequent filtering. If you are previewing a filter with\n     * a slider you probably do not want to create help layers every filter step.\n     * in this object there will be appended some canvases, created once, resized sometimes\n     * cleared never. Clearing is left to the developer.\n     **/\n    resources: {\n\n    },\n\n    /**\n     * Apply a set of filters against a source image and draw the filtered output\n     * to the provided destination canvas.\n     *\n     * @param {EnhancedFilter} filters The filter to apply.\n     * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n     * @param {Number} sourceWidth The width of the source input.\n     * @param {Number} sourceHeight The height of the source input.\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n     */\n    applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {\n      var ctx = targetCanvas.getContext('2d');\n      ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n      var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n      var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n      var pipelineState = {\n        sourceWidth: sourceWidth,\n        sourceHeight: sourceHeight,\n        imageData: imageData,\n        originalEl: sourceElement,\n        originalImageData: originalImageData,\n        canvasEl: targetCanvas,\n        ctx: ctx,\n        filterBackend: this,\n      };\n      filters.forEach(function(filter) { filter.applyTo(pipelineState); });\n      if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {\n        targetCanvas.width = pipelineState.imageData.width;\n        targetCanvas.height = pipelineState.imageData.height;\n      }\n      ctx.putImageData(pipelineState.imageData, 0, 0);\n      return pipelineState;\n    },\n\n  };\n})();\n\n\n/**\n * @namespace fabric.Image.filters\n * @memberOf fabric.Image\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}\n * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n */\nfabric.Image = fabric.Image || { };\nfabric.Image.filters = fabric.Image.filters || { };\n\n/**\n * Root filter class from which all filter classes inherit from\n * @class fabric.Image.filters.BaseFilter\n * @memberOf fabric.Image.filters\n */\nfabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\n\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  type: 'BaseFilter',\n\n  /**\n   * Array of attributes to send with buffers. do not modify\n   * @private\n   */\n\n  vertexSource: 'attribute vec2 aPosition;\\n' +\n    'varying vec2 vTexCoord;\\n' +\n    'void main() {\\n' +\n      'vTexCoord = aPosition;\\n' +\n      'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\n    '}',\n\n  fragmentSource: 'precision highp float;\\n' +\n    'varying vec2 vTexCoord;\\n' +\n    'uniform sampler2D uTexture;\\n' +\n    'void main() {\\n' +\n      'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\n    '}',\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  initialize: function(options) {\n    if (options) {\n      this.setOptions(options);\n    }\n  },\n\n  /**\n   * Sets filter's properties from options\n   * @param {Object} [options] Options object\n   */\n  setOptions: function(options) {\n    for (var prop in options) {\n      this[prop] = options[prop];\n    }\n  },\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram: function(gl, fragmentSource, vertexSource) {\n    fragmentSource = fragmentSource || this.fragmentSource;\n    vertexSource = vertexSource || this.vertexSource;\n    if (fabric.webGlPrecision !== 'highp'){\n      fragmentSource = fragmentSource.replace(\n        /precision highp float/g,\n        'precision ' + fabric.webGlPrecision + ' float'\n      );\n    }\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new Error(\n        // eslint-disable-next-line prefer-template\n        'Vertex shader compile error for ' + this.type + ': ' +\n        gl.getShaderInfoLog(vertexShader)\n      );\n    }\n\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new Error(\n        // eslint-disable-next-line prefer-template\n        'Fragment shader compile error for ' + this.type + ': ' +\n        gl.getShaderInfoLog(fragmentShader)\n      );\n    }\n\n    var program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new Error(\n        // eslint-disable-next-line prefer-template\n        'Shader link error for \"${this.type}\" ' +\n        gl.getProgramInfoLog(program)\n      );\n    }\n\n    var attributeLocations = this.getAttributeLocations(gl, program);\n    var uniformLocations = this.getUniformLocations(gl, program) || { };\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n    return {\n      program: program,\n      attributeLocations: attributeLocations,\n      uniformLocations: uniformLocations\n    };\n  },\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations: function(gl, program) {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  },\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations: function (/* gl, program */) {\n    // in case i do not need any special uniform i need to return an empty object\n    return { };\n  },\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData: function(gl, attributeLocations, aPositionData) {\n    var attributeLocation = attributeLocations.aPosition;\n    var buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  },\n\n  _setupFrameBuffer: function(options) {\n    var gl = options.context, width, height;\n    if (options.passes > 1) {\n      width = options.destinationWidth;\n      height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(gl, width, height);\n      }\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,\n        options.targetTexture, 0);\n    }\n    else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  },\n\n  _swapTextures: function(options) {\n    options.passes--;\n    options.pass++;\n    var temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  },\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own verison ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  isNeutralState: function(/* options */) {\n    var main = this.mainParameter,\n        _class = fabric.Image.filters[this.type].prototype;\n    if (main) {\n      if (Array.isArray(_class[main])) {\n        for (var i = _class[main].length; i--;) {\n          if (this[main][i] !== _class[main][i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n      else {\n        return _class[main] === this[main];\n      }\n    }\n    else {\n      return false;\n    }\n  },\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo: function(options) {\n    if (options.webgl) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    }\n    else {\n      this.applyTo2d(options);\n    }\n  },\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  retrieveShader: function(options) {\n    if (!options.programCache.hasOwnProperty(this.type)) {\n      options.programCache[this.type] = this.createProgram(options.context);\n    }\n    return options.programCache[this.type];\n  },\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL: function(options) {\n    var gl = options.context;\n    var shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    }\n    else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  },\n\n  bindAdditionalTexture: function(gl, texture, textureUnit) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  },\n\n  unbindAdditionalTexture: function(gl, textureUnit) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  },\n\n  getMainParameter: function() {\n    return this[this.mainParameter];\n  },\n\n  setMainParameter: function(value) {\n    this[this.mainParameter] = value;\n  },\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData: function(/* gl, uniformLocations */) {\n    // Intentionally left blank.  Override me in subclasses.\n  },\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer: function(options) {\n    if (!options.helpLayer) {\n      var helpLayer = document.createElement('canvas');\n      helpLayer.width = options.sourceWidth;\n      helpLayer.height = options.sourceHeight;\n      options.helpLayer = helpLayer;\n    }\n  },\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject: function() {\n    var object = { type: this.type }, mainP = this.mainParameter;\n    if (mainP) {\n      object[mainP] = this[mainP];\n    }\n    return object;\n  },\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON: function() {\n    // delegate, not alias\n    return this.toObject();\n  }\n});\n\nfabric.Image.filters.BaseFilter.fromObject = function(object, callback) {\n  var filter = new fabric.Image.filters[object.type](object);\n  callback && callback(filter);\n  return filter;\n};\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Color Matrix filter class\n   * @class fabric.Image.filters.ColorMatrix\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}\n   * @example <caption>Kodachrome filter</caption>\n   * var filter = new fabric.Image.filters.ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'ColorMatrix',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'uniform mat4 uColorMatrix;\\n' +\n      'uniform vec4 uConstants;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'color *= uColorMatrix;\\n' +\n        'color += uConstants;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Colormatrix for pixels.\n     * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n     * outside the -1, 1 range.\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n     * @param {Array} matrix array of 20 numbers.\n     * @default\n     */\n    matrix: [\n      1, 0, 0, 0, 0,\n      0, 1, 0, 0, 0,\n      0, 0, 1, 0, 0,\n      0, 0, 0, 1, 0\n    ],\n\n    mainParameter: 'matrix',\n\n    /**\n     * Lock the colormatrix on the color part, skipping alpha, manly for non webgl scenario\n     * to save some calculation\n     */\n    colorsOnly: true,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      // create a new array instead mutating the prototype with push\n      this.matrix = this.matrix.slice(0);\n    },\n\n    /**\n     * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data,\n          iLen = data.length,\n          m = this.matrix,\n          r, g, b, a, i, colorsOnly = this.colorsOnly;\n\n      for (i = 0; i < iLen; i += 4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n        if (colorsOnly) {\n          data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n        }\n        else {\n          a = data[i + 3];\n          data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\n          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\n          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\n          data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),\n        uConstants: gl.getUniformLocation(program, 'uConstants'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var m = this.matrix,\n          matrix = [\n            m[0], m[1], m[2], m[3],\n            m[5], m[6], m[7], m[8],\n            m[10], m[11], m[12], m[13],\n            m[15], m[16], m[17], m[18]\n          ],\n          constants = [m[4], m[9], m[14], m[19]];\n      gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n      gl.uniform4fv(uniformLocations.uConstants, constants);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] function to invoke after filter creation\n   * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix\n   */\n  fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Brightness filter class\n   * @class fabric.Image.filters.Brightness\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Brightness({\n   *   brightness: 0.05\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Brightness',\n\n    /**\n     * Fragment source for the brightness program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uBrightness;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'color.rgb += uBrightness;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Brightness value, from -1 to 1.\n     * translated to -255 to 255 for 2d\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n     * @param {Number} brightness\n     * @default\n     */\n    brightness: 0,\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'brightness',\n\n    /**\n    * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n    *\n    * @param {Object} options\n    * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n    */\n    applyTo2d: function(options) {\n      if (this.brightness === 0) {\n        return;\n      }\n      var imageData = options.imageData,\n          data = imageData.data, i, len = data.length,\n          brightness = Math.round(this.brightness * 255);\n      for (i = 0; i < len; i += 4) {\n        data[i] = data[i] + brightness;\n        data[i + 1] = data[i + 1] + brightness;\n        data[i + 2] = data[i + 2] + brightness;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uBrightness: gl.getUniformLocation(program, 'uBrightness'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\n   */\n  fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n   * @class fabric.Image.filters.Convolute\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example <caption>Sharpen filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 0, -1,  0,\n   *            -1,  5, -1,\n   *             0, -1,  0 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Blur filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Emboss filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Emboss filter with opaqueness</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   opaque: true,\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Convolute',\n\n    /*\n     * Opaque value (true/false)\n     */\n    opaque: false,\n\n    /*\n     * matrix for the filter, max 9x9\n     */\n    matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n\n    /**\n     * Fragment source for the brightness program\n     */\n    fragmentSource: {\n      Convolute_3_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[9];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_3_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[9];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n      Convolute_5_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[25];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_5_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[25];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n      Convolute_7_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[49];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_7_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[49];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n      Convolute_9_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[81];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_9_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[81];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n    },\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Convolute.prototype\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.opaque=false] Opaque value (true/false)\n     * @param {Array} [options.matrix] Filter matrix\n     */\n\n\n    /**\n    * Retrieves the cached shader.\n    * @param {Object} options\n    * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n    * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n    */\n    retrieveShader: function(options) {\n      var size = Math.sqrt(this.matrix.length);\n      var cacheKey = this.type + '_' + size + '_' + (this.opaque ? 1 : 0);\n      var shaderSource = this.fragmentSource[cacheKey];\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    /**\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data,\n          weights = this.matrix,\n          side = Math.round(Math.sqrt(weights.length)),\n          halfSide = Math.floor(side / 2),\n          sw = imageData.width,\n          sh = imageData.height,\n          output = options.ctx.createImageData(sw, sh),\n          dst = output.data,\n          // go through the destination image pixels\n          alphaFac = this.opaque ? 1 : 0,\n          r, g, b, a, dstOff,\n          scx, scy, srcOff, wt,\n          x, y, cx, cy;\n\n      for (y = 0; y < sh; y++) {\n        for (x = 0; x < sw; x++) {\n          dstOff = (y * sw + x) * 4;\n          // calculate the weighed sum of the source image pixels that\n          // fall under the convolution matrix\n          r = 0; g = 0; b = 0; a = 0;\n\n          for (cy = 0; cy < side; cy++) {\n            for (cx = 0; cx < side; cx++) {\n              scy = y + cy - halfSide;\n              scx = x + cx - halfSide;\n\n              // eslint-disable-next-line max-depth\n              if (scy < 0 || scy > sh || scx < 0 || scx > sw) {\n                continue;\n              }\n\n              srcOff = (scy * sw + scx) * 4;\n              wt = weights[cy * side + cx];\n\n              r += data[srcOff] * wt;\n              g += data[srcOff + 1] * wt;\n              b += data[srcOff + 2] * wt;\n              // eslint-disable-next-line max-depth\n              if (!alphaFac) {\n                a += data[srcOff + 3] * wt;\n              }\n            }\n          }\n          dst[dstOff] = r;\n          dst[dstOff + 1] = g;\n          dst[dstOff + 2] = b;\n          if (!alphaFac) {\n            dst[dstOff + 3] = a;\n          }\n          else {\n            dst[dstOff + 3] = data[dstOff + 3];\n          }\n        }\n      }\n      options.imageData = output;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uMatrix: gl.getUniformLocation(program, 'uMatrix'),\n        uOpaque: gl.getUniformLocation(program, 'uOpaque'),\n        uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),\n        uSize: gl.getUniformLocation(program, 'uSize'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        opaque: this.opaque,\n        matrix: this.matrix\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\n   */\n  fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Grayscale image filter class\n   * @class fabric.Image.filters.Grayscale\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Grayscale();\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Grayscale',\n\n    fragmentSource: {\n      average: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'float average = (color.r + color.b + color.g) / 3.0;\\n' +\n          'gl_FragColor = vec4(average, average, average, color.a);\\n' +\n        '}',\n      lightness: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform int uMode;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\n          'float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n' +\n          'gl_FragColor = vec4(average, average, average, col.a);\\n' +\n        '}',\n      luminosity: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform int uMode;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\n          'float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n' +\n          'gl_FragColor = vec4(average, average, average, col.a);\\n' +\n        '}',\n    },\n\n\n    /**\n     * Grayscale mode, between 'average', 'lightness', 'luminosity'\n     * @param {String} type\n     * @default\n     */\n    mode: 'average',\n\n    mainParameter: 'mode',\n\n    /**\n     * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, i,\n          len = data.length, value,\n          mode = this.mode;\n      for (i = 0; i < len; i += 4) {\n        if (mode === 'average') {\n          value = (data[i] + data[i + 1] + data[i + 2]) / 3;\n        }\n        else if (mode === 'lightness') {\n          value = (Math.min(data[i], data[i + 1], data[i + 2]) +\n            Math.max(data[i], data[i + 1], data[i + 2])) / 2;\n        }\n        else if (mode === 'luminosity') {\n          value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\n        }\n        data[i] = value;\n        data[i + 1] = value;\n        data[i + 2] = value;\n      }\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var cacheKey = this.type + '_' + this.mode;\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        var shaderSource = this.fragmentSource[this.mode];\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uMode: gl.getUniformLocation(program, 'uMode'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      // default average mode.\n      var mode = 1;\n      gl.uniform1i(uniformLocations.uMode, mode);\n    },\n\n    /**\n     * Grayscale filter isNeutralState implementation\n     * The filter is never neutral\n     * on the image\n     **/\n    isNeutralState: function() {\n      return false;\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\n   */\n  fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Invert filter class\n   * @class fabric.Image.filters.Invert\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Invert();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Invert',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform int uInvert;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'if (uInvert == 1) {\\n' +\n          'gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n' +\n        '} else {\\n' +\n          'gl_FragColor = color;\\n' +\n        '}\\n' +\n      '}',\n\n    /**\n     * Filter invert. if false, does nothing\n     * @param {Boolean} invert\n     * @default\n     */\n    invert: true,\n\n    mainParameter: 'invert',\n\n    /**\n     * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, i,\n          len = data.length;\n      for (i = 0; i < len; i += 4) {\n        data[i] = 255 - data[i];\n        data[i + 1] = 255 - data[i + 1];\n        data[i + 2] = 255 - data[i + 2];\n      }\n    },\n\n    /**\n     * Invert filter isNeutralState implementation\n     * Used only in image applyFilters to discard filters that will not have an effect\n     * on the image\n     * @param {Object} options\n     **/\n    isNeutralState: function() {\n      return !this.invert;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uInvert: gl.getUniformLocation(program, 'uInvert'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1i(uniformLocations.uInvert, this.invert);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\n   */\n  fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Noise filter class\n   * @class fabric.Image.filters.Noise\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Noise({\n   *   noise: 700\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Noise',\n\n    /**\n     * Fragment source for the noise program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uStepH;\\n' +\n      'uniform float uNoise;\\n' +\n      'uniform float uSeed;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'float rand(vec2 co, float seed, float vScale) {\\n' +\n        'return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n' +\n      '}\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'noise',\n\n    /**\n     * Noise value, from\n     * @param {Number} noise\n     * @default\n     */\n    noise: 0,\n\n    /**\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      if (this.noise === 0) {\n        return;\n      }\n      var imageData = options.imageData,\n          data = imageData.data, i, len = data.length,\n          noise = this.noise, rand;\n\n      for (i = 0, len = data.length; i < len; i += 4) {\n\n        rand = (0.5 - Math.random()) * noise;\n\n        data[i] += rand;\n        data[i + 1] += rand;\n        data[i + 2] += rand;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uNoise: gl.getUniformLocation(program, 'uNoise'),\n        uSeed: gl.getUniformLocation(program, 'uSeed'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n      gl.uniform1f(uniformLocations.uSeed, Math.random());\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        noise: this.noise\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\n   */\n  fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Pixelate filter class\n   * @class fabric.Image.filters.Pixelate\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Pixelate({\n   *   blocksize: 8\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Pixelate',\n\n    blocksize: 4,\n\n    mainParameter: 'blocksize',\n\n    /**\n     * Fragment source for the Pixelate program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uBlocksize;\\n' +\n      'uniform float uStepW;\\n' +\n      'uniform float uStepH;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'float blockW = uBlocksize * uStepW;\\n' +\n        'float blockH = uBlocksize * uStepW;\\n' +\n        'int posX = int(vTexCoord.x / blockW);\\n' +\n        'int posY = int(vTexCoord.y / blockH);\\n' +\n        'float fposX = float(posX);\\n' +\n        'float fposY = float(posY);\\n' +\n        'vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n' +\n        'vec4 color = texture2D(uTexture, squareCoords);\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data,\n          iLen = imageData.height,\n          jLen = imageData.width,\n          index, i, j, r, g, b, a,\n          _i, _j, _iLen, _jLen;\n\n      for (i = 0; i < iLen; i += this.blocksize) {\n        for (j = 0; j < jLen; j += this.blocksize) {\n\n          index = (i * 4) * jLen + (j * 4);\n\n          r = data[index];\n          g = data[index + 1];\n          b = data[index + 2];\n          a = data[index + 3];\n\n          _iLen = Math.min(i + this.blocksize, iLen);\n          _jLen = Math.min(j + this.blocksize, jLen);\n          for (_i = i; _i < _iLen; _i++) {\n            for (_j = j; _j < _jLen; _j++) {\n              index = (_i * 4) * jLen + (_j * 4);\n              data[index] = r;\n              data[index + 1] = g;\n              data[index + 2] = b;\n              data[index + 3] = a;\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Indicate when the filter is not gonna apply changes to the image\n     **/\n    isNeutralState: function() {\n      return this.blocksize === 1;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),\n        uStepW: gl.getUniformLocation(program, 'uStepW'),\n        uStepH: gl.getUniformLocation(program, 'uStepH'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\n   */\n  fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Remove white filter class\n   * @class fabric.Image.filters.RemoveColor\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.RemoveColor({\n   *   threshold: 0.2,\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'RemoveColor',\n\n    /**\n     * Color to remove, in any format understood by fabric.Color.\n     * @param {String} type\n     * @default\n     */\n    color: '#FFFFFF',\n\n    /**\n     * Fragment source for the brightness program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec4 uLow;\\n' +\n      'uniform vec4 uHigh;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\n        'if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n' +\n          'gl_FragColor.a = 0.0;\\n' +\n        '}\\n' +\n      '}',\n\n    /**\n     * distance to actual color, as value up or down from each r,g,b\n     * between 0 and 1\n     **/\n    distance: 0.02,\n\n    /**\n     * For color to remove inside distance, use alpha channel for a smoother deletion\n     * NOT IMPLEMENTED YET\n     **/\n    useAlpha: false,\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.RemoveWhite.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.color=#RRGGBB] Threshold value\n     * @param {Number} [options.distance=10] Distance value\n     */\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, i,\n          distance = this.distance * 255,\n          r, g, b,\n          source = new fabric.Color(this.color).getSource(),\n          lowC = [\n            source[0] - distance,\n            source[1] - distance,\n            source[2] - distance,\n          ],\n          highC = [\n            source[0] + distance,\n            source[1] + distance,\n            source[2] + distance,\n          ];\n\n\n      for (i = 0; i < data.length; i += 4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        if (r > lowC[0] &&\n            g > lowC[1] &&\n            b > lowC[2] &&\n            r < highC[0] &&\n            g < highC[1] &&\n            b < highC[2]) {\n          data[i + 3] = 0;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uLow: gl.getUniformLocation(program, 'uLow'),\n        uHigh: gl.getUniformLocation(program, 'uHigh'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var source = new fabric.Color(this.color).getSource(),\n          distance = parseFloat(this.distance),\n          lowC = [\n            0 + source[0] / 255 - distance,\n            0 + source[1] / 255 - distance,\n            0 + source[2] / 255 - distance,\n            1\n          ],\n          highC = [\n            source[0] / 255 + distance,\n            source[1] / 255 + distance,\n            source[2] / 255 + distance,\n            1\n          ];\n      gl.uniform4fv(uniformLocations.uLow, lowC);\n      gl.uniform4fv(uniformLocations.uHigh, highC);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        color: this.color,\n        distance: this.distance\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite\n   */\n  fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  var matrices = {\n    Brownie: [\n      0.59970,0.34553,-0.27082,0,0.186,\n      -0.03770,0.86095,0.15059,0,-0.1449,\n      0.24113,-0.07441,0.44972,0,-0.02965,\n      0,0,0,1,0\n    ],\n    Vintage: [\n      0.62793,0.32021,-0.03965,0,0.03784,\n      0.02578,0.64411,0.03259,0,0.02926,\n      0.04660,-0.08512,0.52416,0,0.02023,\n      0,0,0,1,0\n    ],\n    Kodachrome: [\n      1.12855,-0.39673,-0.03992,0,0.24991,\n      -0.16404,1.08352,-0.05498,0,0.09698,\n      -0.16786,-0.56034,1.60148,0,0.13972,\n      0,0,0,1,0\n    ],\n    Technicolor: [\n      1.91252,-0.85453,-0.09155,0,0.04624,\n      -0.30878,1.76589,-0.10601,0,-0.27589,\n      -0.23110,-0.75018,1.84759,0,0.12137,\n      0,0,0,1,0\n    ],\n    Polaroid: [\n      1.438,-0.062,-0.062,0,0,\n      -0.122,1.378,-0.122,0,0,\n      -0.016,-0.016,1.483,0,0,\n      0,0,0,1,0\n    ],\n    Sepia: [\n      0.393, 0.769, 0.189, 0, 0,\n      0.349, 0.686, 0.168, 0, 0,\n      0.272, 0.534, 0.131, 0, 0,\n      0, 0, 0, 1, 0\n    ],\n    BlackWhite: [\n      1.5, 1.5, 1.5, 0, -1,\n      1.5, 1.5, 1.5, 0, -1,\n      1.5, 1.5, 1.5, 0, -1,\n      0, 0, 0, 1, 0,\n    ]\n  };\n\n  for (var key in matrices) {\n    filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: key,\n\n      /**\n       * Colormatrix for the effect\n       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n       * outside the -1, 1 range.\n       * @param {Array} matrix array of 20 numbers.\n       * @default\n       */\n      matrix: matrices[key],\n\n      /**\n       * Lock the matrix export for this kind of static, parameter less filters.\n       */\n      mainParameter: false,\n      /**\n       * Lock the colormatrix on the color part, skipping alpha\n       */\n      colorsOnly: true,\n\n    });\n    fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;\n  }\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n  'use strict';\n\n  var fabric = global.fabric,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Color Blend filter class\n   * @class fabric.Image.filter.BlendColor\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example\n   * var filter = new fabric.Image.filters.BlendColor({\n   *  color: '#000',\n   *  mode: 'multiply'\n   * });\n   *\n   * var filter = new fabric.Image.filters.BlendImage({\n   *  image: fabricImageObject,\n   *  mode: 'multiply',\n   *  alpha: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n\n  filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {\n    type: 'BlendColor',\n\n    /**\n     * Color to make the blend operation with. default to a reddish color since black or white\n     * gives always strong result.\n     **/\n    color: '#F95C63',\n\n    /**\n     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\n     * darken, lighten, overlay, exclusion, tint.\n     **/\n    mode: 'multiply',\n\n    /**\n     * alpha value. represent the strength of the blend color operation.\n     **/\n    alpha: 1,\n\n    /**\n     * Fragment source for the Multiply program\n     */\n    fragmentSource: {\n      multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n      screen: 'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n      add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n      diff: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n      subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n      lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n      darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n      exclusion: 'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n      overlay: 'if (uColor.r < 0.5) {\\n' +\n          'gl_FragColor.r *= 2.0 * uColor.r;\\n' +\n        '} else {\\n' +\n          'gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n' +\n        '}\\n' +\n        'if (uColor.g < 0.5) {\\n' +\n          'gl_FragColor.g *= 2.0 * uColor.g;\\n' +\n        '} else {\\n' +\n          'gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n' +\n        '}\\n' +\n        'if (uColor.b < 0.5) {\\n' +\n          'gl_FragColor.b *= 2.0 * uColor.b;\\n' +\n        '} else {\\n' +\n          'gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n' +\n        '}\\n',\n      tint: 'gl_FragColor.rgb *= (1.0 - uColor.a);\\n' +\n        'gl_FragColor.rgb += uColor.rgb;\\n',\n    },\n\n    /**\n     * build the fragment source for the filters, joining the common part with\n     * the specific one.\n     * @param {String} mode the mode of the filter, a key of this.fragmentSource\n     * @return {String} the source to be compiled\n     * @private\n     */\n    buildSource: function(mode) {\n      return 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform vec4 uColor;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'gl_FragColor = color;\\n' +\n          'if (color.a > 0.0) {\\n' +\n            this.fragmentSource[mode] +\n          '}\\n' +\n        '}';\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var cacheKey = this.type + '_' + this.mode, shaderSource;\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        shaderSource = this.buildSource(this.mode);\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    /**\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, iLen = data.length,\n          tr, tg, tb,\n          r, g, b,\n          source, alpha1 = 1 - this.alpha;\n\n      source = new fabric.Color(this.color).getSource();\n      tr = source[0] * this.alpha;\n      tg = source[1] * this.alpha;\n      tb = source[2] * this.alpha;\n\n      for (var i = 0; i < iLen; i += 4) {\n\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        switch (this.mode) {\n          case 'multiply':\n            data[i] = r * tr / 255;\n            data[i + 1] = g * tg / 255;\n            data[i + 2] = b * tb / 255;\n            break;\n          case 'screen':\n            data[i] = 255 - (255 - r) * (255 - tr) / 255;\n            data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;\n            data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;\n            break;\n          case 'add':\n            data[i] = r + tr;\n            data[i + 1] = g + tg;\n            data[i + 2] = b + tb;\n            break;\n          case 'diff':\n          case 'difference':\n            data[i] = Math.abs(r - tr);\n            data[i + 1] = Math.abs(g - tg);\n            data[i + 2] = Math.abs(b - tb);\n            break;\n          case 'subtract':\n            data[i] = r - tr;\n            data[i + 1] = g - tg;\n            data[i + 2] = b - tb;\n            break;\n          case 'darken':\n            data[i] = Math.min(r, tr);\n            data[i + 1] = Math.min(g, tg);\n            data[i + 2] = Math.min(b, tb);\n            break;\n          case 'lighten':\n            data[i] = Math.max(r, tr);\n            data[i + 1] = Math.max(g, tg);\n            data[i + 2] = Math.max(b, tb);\n            break;\n          case 'overlay':\n            data[i] = tr < 128 ? (2 * r * tr / 255) : (255 - 2 * (255 - r) * (255 - tr) / 255);\n            data[i + 1] = tg < 128 ? (2 * g * tg / 255) : (255 - 2 * (255 - g) * (255 - tg) / 255);\n            data[i + 2] = tb < 128 ? (2 * b * tb / 255) : (255 - 2 * (255 - b) * (255 - tb) / 255);\n            break;\n          case 'exclusion':\n            data[i] = tr + r - ((2 * tr * r) / 255);\n            data[i + 1] = tg + g - ((2 * tg * g) / 255);\n            data[i + 2] = tb + b - ((2 * tb * b) / 255);\n            break;\n          case 'tint':\n            data[i] = tr + r * alpha1;\n            data[i + 1] = tg + g * alpha1;\n            data[i + 2] = tb + b * alpha1;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uColor: gl.getUniformLocation(program, 'uColor'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var source = new fabric.Color(this.color).getSource();\n      source[0] = this.alpha * source[0] / 255;\n      source[1] = this.alpha * source[1] / 255;\n      source[2] = this.alpha * source[2] / 255;\n      source[3] = this.alpha;\n      gl.uniform4fv(uniformLocations.uColor, source);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        color: this.color,\n        mode: this.mode,\n        alpha: this.alpha\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor\n   */\n  fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n  'use strict';\n\n  var fabric = global.fabric,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Image Blend filter class\n   * @class fabric.Image.filter.BlendImage\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example\n   * var filter = new fabric.Image.filters.BlendColor({\n   *  color: '#000',\n   *  mode: 'multiply'\n   * });\n   *\n   * var filter = new fabric.Image.filters.BlendImage({\n   *  image: fabricImageObject,\n   *  mode: 'multiply',\n   *  alpha: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n\n  filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {\n    type: 'BlendImage',\n\n    /**\n     * Color to make the blend operation with. default to a reddish color since black or white\n     * gives always strong result.\n     **/\n    image: null,\n\n    /**\n     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\n     * darken, lighten, overlay, exclusion, tint.\n     **/\n    mode: 'multiply',\n\n    /**\n     * alpha value. represent the strength of the blend image operation.\n     * not implemented.\n     **/\n    alpha: 1,\n\n    vertexSource: 'attribute vec2 aPosition;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'varying vec2 vTexCoord2;\\n' +\n      'uniform mat3 uTransformMatrix;\\n' +\n      'void main() {\\n' +\n        'vTexCoord = aPosition;\\n' +\n        'vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n' +\n        'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\n      '}',\n\n    /**\n     * Fragment source for the Multiply program\n     */\n    fragmentSource: {\n      multiply: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform sampler2D uImage;\\n' +\n        'uniform vec4 uColor;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'varying vec2 vTexCoord2;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\n          'color.rgba *= color2.rgba;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      mask: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform sampler2D uImage;\\n' +\n        'uniform vec4 uColor;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'varying vec2 vTexCoord2;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\n          'color.a = color2.a;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var cacheKey = this.type + '_' + this.mode;\n      var shaderSource = this.fragmentSource[this.mode];\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    applyToWebGL: function(options) {\n      // load texture to blend.\n      var gl = options.context,\n          texture = this.createTexture(options.filterBackend, this.image);\n      this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);\n      this.callSuper('applyToWebGL', options);\n      this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n    },\n\n    createTexture: function(backend, image) {\n      return backend.getCachedTexture(image.cacheKey, image._element);\n    },\n\n    /**\n     * Calculate a transformMatrix to adapt the image to blend over\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    calculateMatrix: function() {\n      var image = this.image,\n          width = image._element.width,\n          height = image._element.height;\n      return [\n        1 / image.scaleX, 0, 0,\n        0, 1 / image.scaleY, 0,\n        -image.left / width, -image.top / height, 1\n      ];\n    },\n\n    /**\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          resources = options.filterBackend.resources,\n          data = imageData.data, iLen = data.length,\n          width = imageData.width,\n          height = imageData.height,\n          tr, tg, tb, ta,\n          r, g, b, a,\n          canvas1, context, image = this.image, blendData;\n\n      if (!resources.blendImage) {\n        resources.blendImage = fabric.util.createCanvasElement();\n      }\n      canvas1 = resources.blendImage;\n      context = canvas1.getContext('2d');\n      if (canvas1.width !== width || canvas1.height !== height) {\n        canvas1.width = width;\n        canvas1.height = height;\n      }\n      else {\n        context.clearRect(0, 0, width, height);\n      }\n      context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);\n      context.drawImage(image._element, 0, 0, width, height);\n      blendData = context.getImageData(0, 0, width, height).data;\n      for (var i = 0; i < iLen; i += 4) {\n\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n        a = data[i + 3];\n\n        tr = blendData[i];\n        tg = blendData[i + 1];\n        tb = blendData[i + 2];\n        ta = blendData[i + 3];\n\n        switch (this.mode) {\n          case 'multiply':\n            data[i] = r * tr / 255;\n            data[i + 1] = g * tg / 255;\n            data[i + 2] = b * tb / 255;\n            data[i + 3] = a * ta / 255;\n            break;\n          case 'mask':\n            data[i + 3] = ta;\n            break;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),\n        uImage: gl.getUniformLocation(program, 'uImage'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var matrix = this.calculateMatrix();\n      gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n      gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        image: this.image && this.image.toObject(),\n        mode: this.mode,\n        alpha: this.alpha\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} callback to be invoked after filter creation\n   * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage\n   */\n  fabric.Image.filters.BlendImage.fromObject = function(object, callback) {\n    fabric.Image.fromObject(object.image, function(image) {\n      var options = fabric.util.object.clone(object);\n      options.image = image;\n      callback(new fabric.Image.filters.BlendImage(options));\n    });\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,\n      sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin,\n      ceil = Math.ceil,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Resize image filter class\n   * @class fabric.Image.filters.Resize\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Resize();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Resize',\n\n    /**\n     * Resize type\n     * for webgl resizeType is just lanczos, for canvas2d can be:\n     * bilinear, hermite, sliceHack, lanczos.\n     * @param {String} resizeType\n     * @default\n     */\n    resizeType: 'hermite',\n\n    /**\n     * Scale factor for resizing, x axis\n     * @param {Number} scaleX\n     * @default\n     */\n    scaleX: 1,\n\n    /**\n     * Scale factor for resizing, y axis\n     * @param {Number} scaleY\n     * @default\n     */\n    scaleY: 1,\n\n    /**\n     * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n     * @param {Number} lanczosLobes\n     * @default\n     */\n    lanczosLobes: 3,\n\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uDelta: gl.getUniformLocation(program, 'uDelta'),\n        uTaps: gl.getUniformLocation(program, 'uTaps'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);\n      gl.uniform1fv(uniformLocations.uTaps, this.taps);\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var filterWindow = this.getFilterWindow(), cacheKey = this.type + '_' + filterWindow;\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        var fragmentShader = this.generateShader(filterWindow);\n        options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    getFilterWindow: function() {\n      var scale = this.tempScale;\n      return Math.ceil(this.lanczosLobes / scale);\n    },\n\n    getTaps: function() {\n      var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale,\n          filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);\n      for (var i = 1; i <= filterWindow; i++) {\n        taps[i - 1] = lobeFunction(i * scale);\n      }\n      return taps;\n    },\n\n    /**\n     * Generate vertex and shader sources from the necessary steps numbers\n     * @param {Number} filterWindow\n     */\n    generateShader: function(filterWindow) {\n      var offsets = new Array(filterWindow),\n          fragmentShader = this.fragmentSourceTOP, filterWindow;\n\n      for (var i = 1; i <= filterWindow; i++) {\n        offsets[i - 1] = i + '.0 * uDelta';\n      }\n\n      fragmentShader += 'uniform float uTaps[' + filterWindow + '];\\n';\n      fragmentShader += 'void main() {\\n';\n      fragmentShader += '  vec4 color = texture2D(uTexture, vTexCoord);\\n';\n      fragmentShader += '  float sum = 1.0;\\n';\n\n      offsets.forEach(function(offset, i) {\n        fragmentShader += '  color += texture2D(uTexture, vTexCoord + ' + offset + ') * uTaps[' + i + '];\\n';\n        fragmentShader += '  color += texture2D(uTexture, vTexCoord - ' + offset + ') * uTaps[' + i + '];\\n';\n        fragmentShader += '  sum += 2.0 * uTaps[' + i + '];\\n';\n      });\n      fragmentShader += '  gl_FragColor = color / sum;\\n';\n      fragmentShader += '}';\n      return fragmentShader;\n    },\n\n    fragmentSourceTOP: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec2 uDelta;\\n' +\n      'varying vec2 vTexCoord;\\n',\n\n    /**\n     * Apply the resize filter to the image\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be executed\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    applyTo: function(options) {\n      if (options.webgl) {\n        options.passes++;\n        this.width = options.sourceWidth;\n        this.horizontal = true;\n        this.dW = Math.round(this.width * this.scaleX);\n        this.dH = options.sourceHeight;\n        this.tempScale = this.dW / this.width;\n        this.taps = this.getTaps();\n        options.destinationWidth = this.dW;\n        this._setupFrameBuffer(options);\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n        options.sourceWidth = options.destinationWidth;\n\n        this.height = options.sourceHeight;\n        this.horizontal = false;\n        this.dH = Math.round(this.height * this.scaleY);\n        this.tempScale = this.dH / this.height;\n        this.taps = this.getTaps();\n        options.destinationHeight = this.dH;\n        this._setupFrameBuffer(options);\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n        options.sourceHeight = options.destinationHeight;\n      }\n      else {\n        this.applyTo2d(options);\n      }\n    },\n\n    isNeutralState: function() {\n      return this.scaleX === 1 && this.scaleY === 1;\n    },\n\n    lanczosCreate: function(lobes) {\n      return function(x) {\n        if (x >= lobes || x <= -lobes) {\n          return 0.0;\n        }\n        if (x < 1.19209290E-07 && x > -1.19209290E-07) {\n          return 1.0;\n        }\n        x *= Math.PI;\n        var xx = x / lobes;\n        return (sin(x) / x) * sin(xx) / xx;\n      };\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Resize.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          scaleX = this.scaleX,\n          scaleY = this.scaleY;\n\n      this.rcpScaleX = 1 / scaleX;\n      this.rcpScaleY = 1 / scaleY;\n\n      var oW = imageData.width, oH = imageData.height,\n          dW = round(oW * scaleX), dH = round(oH * scaleY),\n          newData;\n\n      if (this.resizeType === 'sliceHack') {\n        newData = this.sliceByTwo(options, oW, oH, dW, dH);\n      }\n      else if (this.resizeType === 'hermite') {\n        newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n      }\n      else if (this.resizeType === 'bilinear') {\n        newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n      }\n      else if (this.resizeType === 'lanczos') {\n        newData = this.lanczosResize(options, oW, oH, dW, dH);\n      }\n      options.imageData = newData;\n    },\n\n    /**\n     * Filter sliceByTwo\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    sliceByTwo: function(options, oW, oH, dW, dH) {\n      var imageData = options.imageData,\n          mult = 0.5, doneW = false, doneH = false, stepW = oW * mult,\n          stepH = oH * mult, resources = fabric.filterBackend.resources,\n          tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;\n      if (!resources.sliceByTwo) {\n        resources.sliceByTwo = document.createElement('canvas');\n      }\n      tmpCanvas = resources.sliceByTwo;\n      if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n        tmpCanvas.width = oW * 1.5;\n        tmpCanvas.height = oH;\n      }\n      ctx = tmpCanvas.getContext('2d');\n      ctx.clearRect(0, 0, oW * 1.5, oH);\n      ctx.putImageData(imageData, 0, 0);\n\n      dW = floor(dW);\n      dH = floor(dH);\n\n      while (!doneW || !doneH) {\n        oW = stepW;\n        oH = stepH;\n        if (dW < floor(stepW * mult)) {\n          stepW = floor(stepW * mult);\n        }\n        else {\n          stepW = dW;\n          doneW = true;\n        }\n        if (dH < floor(stepH * mult)) {\n          stepH = floor(stepH * mult);\n        }\n        else {\n          stepH = dH;\n          doneH = true;\n        }\n        ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n        sX = dX;\n        sY = dY;\n        dY += stepH;\n      }\n      return ctx.getImageData(sX, sY, dW, dH);\n    },\n\n    /**\n     * Filter lanczosResize\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    lanczosResize: function(options, oW, oH, dW, dH) {\n\n      function process(u) {\n        var v, i, weight, idx, a, red, green,\n            blue, alpha, fX, fY;\n        center.x = (u + 0.5) * ratioX;\n        icenter.x = floor(center.x);\n        for (v = 0; v < dH; v++) {\n          center.y = (v + 0.5) * ratioY;\n          icenter.y = floor(center.y);\n          a = 0; red = 0; green = 0; blue = 0; alpha = 0;\n          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n            if (i < 0 || i >= oW) {\n              continue;\n            }\n            fX = floor(1000 * abs(i - center.x));\n            if (!cacheLanc[fX]) {\n              cacheLanc[fX] = { };\n            }\n            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n              if (j < 0 || j >= oH) {\n                continue;\n              }\n              fY = floor(1000 * abs(j - center.y));\n              if (!cacheLanc[fX][fY]) {\n                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\n              }\n              weight = cacheLanc[fX][fY];\n              if (weight > 0) {\n                idx = (j * oW + i) * 4;\n                a += weight;\n                red += weight * srcData[idx];\n                green += weight * srcData[idx + 1];\n                blue += weight * srcData[idx + 2];\n                alpha += weight * srcData[idx + 3];\n              }\n            }\n          }\n          idx = (v * dW + u) * 4;\n          destData[idx] = red / a;\n          destData[idx + 1] = green / a;\n          destData[idx + 2] = blue / a;\n          destData[idx + 3] = alpha / a;\n        }\n\n        if (++u < dW) {\n          return process(u);\n        }\n        else {\n          return destImg;\n        }\n      }\n\n      var srcData = options.imageData.data,\n          destImg = options.ctx.createImageData(dW, dH),\n          destData = destImg.data,\n          lanczos = this.lanczosCreate(this.lanczosLobes),\n          ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\n          rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\n          range2X = ceil(ratioX * this.lanczosLobes / 2),\n          range2Y = ceil(ratioY * this.lanczosLobes / 2),\n          cacheLanc = { }, center = { }, icenter = { };\n\n      return process(0);\n    },\n\n    /**\n     * bilinearFiltering\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    bilinearFiltering: function(options, oW, oH, dW, dH) {\n      var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\n          color, offset = 0, origPix, ratioX = this.rcpScaleX,\n          ratioY = this.rcpScaleY,\n          w4 = 4 * (oW - 1), img = options.imageData,\n          pixels = img.data, destImage = options.ctx.createImageData(dW, dH),\n          destPixels = destImage.data;\n      for (i = 0; i < dH; i++) {\n        for (j = 0; j < dW; j++) {\n          x = floor(ratioX * j);\n          y = floor(ratioY * i);\n          xDiff = ratioX * j - x;\n          yDiff = ratioY * i - y;\n          origPix = 4 * (y * oW + x);\n\n          for (chnl = 0; chnl < 4; chnl++) {\n            a = pixels[origPix + chnl];\n            b = pixels[origPix + 4 + chnl];\n            c = pixels[origPix + w4 + chnl];\n            d = pixels[origPix + w4 + 4 + chnl];\n            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\n                    c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\n            destPixels[offset++] = color;\n          }\n        }\n      }\n      return destImage;\n    },\n\n    /**\n     * hermiteFastResize\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    hermiteFastResize: function(options, oW, oH, dW, dH) {\n      var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\n          ratioWHalf = ceil(ratioW / 2),\n          ratioHHalf = ceil(ratioH / 2),\n          img = options.imageData, data = img.data,\n          img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;\n      for (var j = 0; j < dH; j++) {\n        for (var i = 0; i < dW; i++) {\n          var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\n              gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\n          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\n                centerX = (i + 0.5) * ratioW, w0 = dy * dy;\n            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\n                  w = sqrt(w0 + dx * dx);\n              /* eslint-disable max-depth */\n              if (w > 1 && w < -1) {\n                continue;\n              }\n              //hermite filter\n              weight = 2 * w * w * w - 3 * w * w + 1;\n              if (weight > 0) {\n                dx = 4 * (xx + yy * oW);\n                //alpha\n                gxA += weight * data[dx + 3];\n                weightsAlpha += weight;\n                //colors\n                if (data[dx + 3] < 255) {\n                  weight = weight * data[dx + 3] / 250;\n                }\n                gxR += weight * data[dx];\n                gxG += weight * data[dx + 1];\n                gxB += weight * data[dx + 2];\n                weights += weight;\n              }\n              /* eslint-enable max-depth */\n            }\n          }\n          data2[x2] = gxR / weights;\n          data2[x2 + 1] = gxG / weights;\n          data2[x2 + 2] = gxB / weights;\n          data2[x2 + 3] = gxA / weightsAlpha;\n        }\n      }\n      return img2;\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        resizeType: this.resizeType,\n        lanczosLobes: this.lanczosLobes\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\n   */\n  fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Contrast filter class\n   * @class fabric.Image.filters.Contrast\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Contrast({\n   *   contrast: 40\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Contrast',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uContrast;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n' +\n        'color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    contrast: 0,\n\n    mainParameter: 'contrast',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Contrast.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)\n     */\n\n    /**\n      * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n      *\n      * @param {Object} options\n      * @param {ImageData} options.imageData The Uint8Array to be filtered.\n      */\n    applyTo2d: function(options) {\n      if (this.contrast === 0) {\n        return;\n      }\n      var imageData = options.imageData, i, len,\n          data = imageData.data, len = data.length,\n          contrast = Math.floor(this.contrast * 255),\n          contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));\n\n      for (i = 0; i < len; i += 4) {\n        data[i] = contrastF * (data[i] - 128) + 128;\n        data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n        data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uContrast: gl.getUniformLocation(program, 'uContrast'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uContrast, this.contrast);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast\n   */\n  fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Saturate filter class\n   * @class fabric.Image.filters.Saturation\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Saturation({\n   *   saturation: 100\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Saturation',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uSaturation;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'float rgMax = max(color.r, color.g);\\n' +\n        'float rgbMax = max(rgMax, color.b);\\n' +\n        'color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n' +\n        'color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n' +\n        'color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    saturation: 0,\n\n    mainParameter: 'saturation',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Saturate.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)\n     */\n\n    /**\n     * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      if (this.saturation === 0) {\n        return;\n      }\n      var imageData = options.imageData,\n          data = imageData.data, len = data.length,\n          adjust = -this.saturation, i, max;\n\n      for (i = 0; i < len; i += 4) {\n        max = Math.max(data[i], data[i + 1], data[i + 2]);\n        data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\n        data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\n        data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uSaturation: gl.getUniformLocation(program, 'uSaturation'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate\n   */\n  fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Blur filter class\n   * @class fabric.Image.filters.Blur\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Blur({\n   *   blur: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {\n\n    type: 'Blur',\n\n    /*\n'gl_FragColor = vec4(0.0);',\n'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',\n'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',\n'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',\n'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',\n'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',\n'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',\n'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',\n'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',\n'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',\n'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',\n'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',\n'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',\n'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',\n'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',\n'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',\n*/\n\n    /* eslint-disable max-len */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec2 uDelta;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'const float nSamples = 15.0;\\n' +\n      'vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n' +\n      'float random(vec3 scale) {\\n' +\n        /* use the fragment position for a different seed per-pixel */\n        'return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n' +\n      '}\\n' +\n      'void main() {\\n' +\n        'vec4 color = vec4(0.0);\\n' +\n        'float total = 0.0;\\n' +\n        'float offset = random(v3offset);\\n' +\n        'for (float t = -nSamples; t <= nSamples; t++) {\\n' +\n          'float percent = (t + offset - 0.5) / nSamples;\\n' +\n          'float weight = 1.0 - abs(percent);\\n' +\n          'color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n' +\n          'total += weight;\\n' +\n        '}\\n' +\n        'gl_FragColor = color / total;\\n' +\n      '}',\n    /* eslint-enable max-len */\n\n    /**\n     * blur value, in percentage of image dimensions.\n     * specific to keep the image blur constant at different resolutions\n     * range bewteen 0 and 1.\n     */\n    blur: 0,\n\n    mainParameter: 'blur',\n\n    applyTo: function(options) {\n      if (options.webgl) {\n        // this aspectRatio is used to give the same blur to vertical and horizontal\n        this.aspectRatio = options.sourceWidth / options.sourceHeight;\n        options.passes++;\n        this._setupFrameBuffer(options);\n        this.horizontal = true;\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n        this._setupFrameBuffer(options);\n        this.horizontal = false;\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n      }\n      else {\n        this.applyTo2d(options);\n      }\n    },\n\n    applyTo2d: function(options) {\n      // paint canvasEl with current image data.\n      //options.ctx.putImageData(options.imageData, 0, 0);\n      options.imageData = this.simpleBlur(options);\n    },\n\n    simpleBlur: function(options) {\n      var resources = options.filterBackend.resources, canvas1, canvas2,\n          width = options.imageData.width,\n          height = options.imageData.height;\n\n      if (!resources.blurLayer1) {\n        resources.blurLayer1 = fabric.util.createCanvasElement();\n        resources.blurLayer2 = fabric.util.createCanvasElement();\n      }\n      canvas1 = resources.blurLayer1;\n      canvas2 = resources.blurLayer2;\n      if (canvas1.width !== width || canvas1.height !== height) {\n        canvas2.width = canvas1.width = width;\n        canvas2.height = canvas1.height = height;\n      }\n      var ctx1 = canvas1.getContext('2d'),\n          ctx2 = canvas2.getContext('2d'),\n          nSamples = 15,\n          random, percent, j, i,\n          blur = this.blur * 0.06 * 0.5;\n\n      // load first canvas\n      ctx1.putImageData(options.imageData, 0, 0);\n      ctx2.clearRect(0, 0, width, height);\n\n      for (i = -nSamples; i <= nSamples; i++) {\n        random = (Math.random() - 0.5) / 4;\n        percent = i / nSamples;\n        j = blur * percent * width + random;\n        ctx2.globalAlpha = 1 - Math.abs(percent);\n        ctx2.drawImage(canvas1, j, random);\n        ctx1.drawImage(canvas2, 0, 0);\n        ctx2.globalAlpha = 1;\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n      }\n      for (i = -nSamples; i <= nSamples; i++) {\n        random = (Math.random() - 0.5) / 4;\n        percent = i / nSamples;\n        j = blur * percent * height + random;\n        ctx2.globalAlpha = 1 - Math.abs(percent);\n        ctx2.drawImage(canvas1, random, j);\n        ctx1.drawImage(canvas2, 0, 0);\n        ctx2.globalAlpha = 1;\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n      }\n      options.ctx.drawImage(canvas1, 0, 0);\n      var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);\n      ctx1.globalAlpha = 1;\n      ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\n      return newImageData;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        delta: gl.getUniformLocation(program, 'uDelta'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var delta = this.chooseRightDelta();\n      gl.uniform2fv(uniformLocations.delta, delta);\n    },\n\n    /**\n     * choose right value of image percentage to blur with\n     * @returns {Array} a numeric array with delta values\n     */\n    chooseRightDelta: function() {\n      var blurScale = 1, delta = [0, 0], blur;\n      if (this.horizontal) {\n        if (this.aspectRatio > 1) {\n          // image is wide, i want to shrink radius horizontal\n          blurScale = 1 / this.aspectRatio;\n        }\n      }\n      else {\n        if (this.aspectRatio < 1) {\n          // image is tall, i want to shrink radius vertical\n          blurScale = this.aspectRatio;\n        }\n      }\n      blur = blurScale * this.blur * 0.12;\n      if (this.horizontal) {\n        delta[0] = blur;\n      }\n      else {\n        delta[1] = blur;\n      }\n      return delta;\n    },\n  });\n\n  /**\n   * Deserialize a JSON definition of a BlurFilter into a concrete instance.\n   */\n  filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Gamma filter class\n   * @class fabric.Image.filters.Gamma\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Gamma({\n   *   brightness: 200\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Gamma',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec3 uGamma;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'vec3 correction = (1.0 / uGamma);\\n' +\n        'color.r = pow(color.r, correction.r);\\n' +\n        'color.g = pow(color.g, correction.g);\\n' +\n        'color.b = pow(color.b, correction.b);\\n' +\n        'gl_FragColor = color;\\n' +\n        'gl_FragColor.rgb *= color.a;\\n' +\n      '}',\n\n    /**\n     * Gamma array value, from 0.01 to 2.2.\n     * @param {Array} gamma\n     * @default\n     */\n    gamma: [1, 1, 1],\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'gamma',\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      this.gamma = [1, 1, 1];\n      filters.BaseFilter.prototype.initialize.call(this, options);\n    },\n\n    /**\n     * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData, data = imageData.data,\n          gamma = this.gamma, len = data.length,\n          rInv = 1 / gamma[0], gInv = 1 / gamma[1],\n          bInv = 1 / gamma[2], i;\n\n      if (!this.rVals) {\n        // eslint-disable-next-line\n        this.rVals = new Uint8Array(256);\n        // eslint-disable-next-line\n        this.gVals = new Uint8Array(256);\n        // eslint-disable-next-line\n        this.bVals = new Uint8Array(256);\n      }\n\n      // This is an optimization - pre-compute a look-up table for each color channel\n      // instead of performing these pow calls for each pixel in the image.\n      for (i = 0, len = 256; i < len; i++) {\n        this.rVals[i] = Math.pow(i / 255, rInv) * 255;\n        this.gVals[i] = Math.pow(i / 255, gInv) * 255;\n        this.bVals[i] = Math.pow(i / 255, bInv) * 255;\n      }\n      for (i = 0, len = data.length; i < len; i += 4) {\n        data[i] = this.rVals[data[i]];\n        data[i + 1] = this.gVals[data[i + 1]];\n        data[i + 2] = this.bVals[data[i + 2]];\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uGamma: gl.getUniformLocation(program, 'uGamma'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma\n   */\n  fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * A container class that knows how to apply a sequence of filters to an input image.\n   */\n  filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {\n\n    type: 'Composed',\n\n    /**\n     * A non sparse array of filters to apply\n     */\n    subFilters: [],\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      // create a new array instead mutating the prototype with push\n      this.subFilters = this.subFilters.slice(0);\n    },\n\n    /**\n     * Apply this container's filters to the input image provided.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be applied.\n     */\n    applyTo: function(options) {\n      options.passes += this.subFilters.length - 1;\n      this.subFilters.forEach(function(filter) {\n        filter.applyTo(options);\n      });\n    },\n\n    /**\n     * Serialize this filter into JSON.\n     *\n     * @returns {Object} A JSON representation of this filter.\n     */\n    toObject: function() {\n      return fabric.util.object.extend(this.callSuper('toObject'), {\n        subFilters: this.subFilters.map(function(filter) { return filter.toObject(); }),\n      });\n    },\n\n    isNeutralState: function() {\n      return !this.subFilters.some(function(filter) { return !filter.isNeutralState(); });\n    }\n  });\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   */\n  fabric.Image.filters.Composed.fromObject = function(object, callback) {\n    var filters = object.subFilters || [],\n        subFilters = filters.map(function(filter) {\n          return new fabric.Image.filters[filter.type](filter);\n        }),\n        instance = new fabric.Image.filters.Composed({ subFilters: subFilters });\n    callback && callback(instance);\n    return instance;\n  };\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * HueRotation filter class\n   * @class fabric.Image.filters.HueRotation\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.HueRotation({\n   *   rotation: -0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'HueRotation',\n\n    /**\n     * HueRotation value, from -1 to 1.\n     * the unit is radians\n     * @param {Number} myParameter\n     * @default\n     */\n    rotation: 0,\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'rotation',\n\n    calculateMatrix: function() {\n      var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad),\n          aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;\n      this.matrix = [\n        1, 0, 0, 0, 0,\n        0, 1, 0, 0, 0,\n        0, 0, 1, 0, 0,\n        0, 0, 0, 1, 0\n      ];\n      this.matrix[0] = cos + OneMinusCos / 3;\n      this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\n      this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\n      this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\n      this.matrix[6] = cos + aThird * OneMinusCos;\n      this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\n      this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\n      this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\n      this.matrix[12] = cos + aThird * OneMinusCos;\n    },\n\n    /**\n     * HueRotation isNeutralState implementation\n     * Used only in image applyFilters to discard filters that will not have an effect\n     * on the image\n     * @param {Object} options\n     **/\n    isNeutralState: function(options) {\n      this.calculateMatrix();\n      return filters.BaseFilter.prototype.isNeutralState.call(this, options);\n    },\n\n    /**\n     * Apply this filter to the input image data provided.\n     *\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be executed\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    applyTo: function(options) {\n      this.calculateMatrix();\n      filters.BaseFilter.prototype.applyTo.call(this, options);\n    },\n\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation\n   */\n  fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      clone = fabric.util.object.clone;\n\n  if (fabric.Text) {\n    fabric.warn('fabric.Text is already defined');\n    return;\n  }\n\n  /**\n   * Text class\n   * @class fabric.Text\n   * @extends fabric.Object\n   * @return {fabric.Text} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n   * @see {@link fabric.Text#initialize} for constructor definition\n   */\n  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\n\n    /**\n     * Properties which when set cause object to change dimensions\n     * @type Array\n     * @private\n     */\n    _dimensionAffectingProps: [\n      'fontSize',\n      'fontWeight',\n      'fontFamily',\n      'fontStyle',\n      'lineHeight',\n      'text',\n      'charSpacing',\n      'textAlign',\n      'styles',\n    ],\n\n    /**\n     * @private\n     */\n    _reNewline: /\\r?\\n/,\n\n    /**\n     * Use this regular expression to filter for whitespaces that is not a new line.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reSpacesAndTabs: /[ \\t\\r]/g,\n\n    /**\n     * Use this regular expression to filter for whitespace that is not a new line.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reSpaceAndTab: /[ \\t\\r]/,\n\n    /**\n     * Use this regular expression to filter consecutive groups of non spaces.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reWords: /\\S+/g,\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type:                 'text',\n\n    /**\n     * Font size (in pixels)\n     * @type Number\n     * @default\n     */\n    fontSize:             40,\n\n    /**\n     * Font weight (e.g. bold, normal, 400, 600, 800)\n     * @type {(Number|String)}\n     * @default\n     */\n    fontWeight:           'normal',\n\n    /**\n     * Font family\n     * @type String\n     * @default\n     */\n    fontFamily:           'Times New Roman',\n\n    /**\n     * Text decoration underline.\n     * @type Boolean\n     * @default\n     */\n    underline:       false,\n\n    /**\n     * Text decoration overline.\n     * @type Boolean\n     * @default\n     */\n    overline:       false,\n\n    /**\n     * Text decoration linethrough.\n     * @type Boolean\n     * @default\n     */\n    linethrough:       false,\n\n    /**\n     * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n     * \"justify-left\", \"justify-center\" or \"justify-right\".\n     * @type String\n     * @default\n     */\n    textAlign:            'left',\n\n    /**\n     * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n     * @type String\n     * @default\n     */\n    fontStyle:            'normal',\n\n    /**\n     * Line height\n     * @type Number\n     * @default\n     */\n    lineHeight:           1.16,\n\n    /**\n     * Superscript schema object (minimum overlap)\n     * @type {Object}\n     * @default\n     */\n    superscript: {\n      size:      0.60, // fontSize factor\n      baseline: -0.35  // baseline-shift factor (upwards)\n    },\n\n    /**\n     * Subscript schema object (minimum overlap)\n     * @type {Object}\n     * @default\n     */\n    subscript: {\n      size:      0.60, // fontSize factor\n      baseline:  0.11  // baseline-shift factor (downwards)\n    },\n\n    /**\n     * Background color of text lines\n     * @type String\n     * @default\n     */\n    textBackgroundColor:  '',\n\n    /**\n     * List of properties to consider when checking if\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: fabric.Object.prototype.stateProperties.concat('fontFamily',\n      'fontWeight',\n      'fontSize',\n      'text',\n      'underline',\n      'overline',\n      'linethrough',\n      'textAlign',\n      'fontStyle',\n      'lineHeight',\n      'textBackgroundColor',\n      'charSpacing',\n      'styles'),\n\n    /**\n     * List of properties to consider when checking if cache needs refresh\n     * @type Array\n     */\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('fontFamily',\n      'fontWeight',\n      'fontSize',\n      'text',\n      'underline',\n      'overline',\n      'linethrough',\n      'textAlign',\n      'fontStyle',\n      'lineHeight',\n      'textBackgroundColor',\n      'charSpacing',\n      'styles'),\n\n    /**\n     * When defined, an object is rendered via stroke and this property specifies its color.\n     * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\n     * @type String\n     * @default\n     */\n    stroke:               null,\n\n    /**\n     * Shadow object representing shadow of this shape.\n     * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow:               null,\n\n    /**\n     * @private\n     */\n    _fontSizeFraction: 0.222,\n\n    /**\n     * @private\n     */\n    offsets: {\n      underline: 0.10,\n      linethrough: -0.315,\n      overline: -0.88\n    },\n\n    /**\n     * Text Line proportion to font Size (in pixels)\n     * @type Number\n     * @default\n     */\n    _fontSizeMult:             1.13,\n\n    /**\n     * additional space between characters\n     * expressed in thousands of em unit\n     * @type Number\n     * @default\n     */\n    charSpacing:             0,\n\n    /**\n     * Object containing character styles - top-level properties -> line numbers,\n     * 2nd-level properties - charater numbers\n     * @type Object\n     * @default\n     */\n    styles: null,\n\n    /**\n     * Reference to a context to measure text char or couple of chars\n     * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas\n     * once created it will be referenced on fabric._measuringContext to avoide creating a canvas for every\n     * text object created.\n     * @type {CanvasRenderingContext2D}\n     * @default\n     */\n    _measuringContext: null,\n\n    /**\n     * Baseline shift, stlyes only, keep at 0 for the main text object\n     * @type {Number}\n     * @default\n     */\n    deltaY: 0,\n\n    /**\n     * Array of properties that define a style unit (of 'styles').\n     * @type {Array}\n     * @default\n     */\n    _styleProperties: [\n      'stroke',\n      'strokeWidth',\n      'fill',\n      'fontFamily',\n      'fontSize',\n      'fontWeight',\n      'fontStyle',\n      'underline',\n      'overline',\n      'linethrough',\n      'deltaY',\n      'textBackgroundColor',\n    ],\n\n    /**\n     * contains characters bounding boxes\n     */\n    __charBounds: [],\n\n    /**\n     * use this size when measuring text. To avoid IE11 rounding errors\n     * @type {Number}\n     * @default\n     * @readonly\n     * @private\n     */\n    CACHE_FONT_SIZE: 400,\n\n    /**\n     * contains the min text width to avoid getting 0\n     * @type {Number}\n     * @default\n     */\n    MIN_TEXT_WIDTH: 2,\n\n    /**\n     * Constructor\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Text} thisArg\n     */\n    initialize: function(text, options) {\n      this.styles = options ? (options.styles || { }) : { };\n      this.text = text;\n      this.__skipDimension = true;\n      this.callSuper('initialize', options);\n      this.__skipDimension = false;\n      this.initDimensions();\n      this.setCoords();\n      this.setupState({ propertySet: '_dimensionAffectingProps' });\n    },\n\n    /**\n     * Return a contex for measurement of text string.\n     * if created it gets stored for reuse\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Text} thisArg\n     */\n    getMeasuringContext: function() {\n      // if we did not return we have to measure something.\n      if (!fabric._measuringContext) {\n        fabric._measuringContext = this.canvas && this.canvas.contextCache ||\n          fabric.util.createCanvasElement().getContext('2d');\n      }\n      return fabric._measuringContext;\n    },\n\n    /**\n     * @private\n     * Divides text into lines of text and lines of graphemes.\n     */\n    _splitText: function() {\n      var newLines = this._splitTextIntoLines(this.text);\n      this.textLines = newLines.lines;\n      this._textLines = newLines.graphemeLines;\n      this._unwrappedTextLines = newLines._unwrappedLines;\n      this._text = newLines.graphemeText;\n      return newLines;\n    },\n\n    /**\n     * Initialize or update text dimensions.\n     * Updates this.width and this.height with the proper values.\n     * Does not return dimensions.\n     */\n    initDimensions: function() {\n      if (this.__skipDimension) {\n        return;\n      }\n      this._splitText();\n      this._clearCache();\n      this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      if (this.textAlign.indexOf('justify') !== -1) {\n        // once text is measured we need to make space fatter to make justified text.\n        this.enlargeSpaces();\n      }\n      this.height = this.calcTextHeight();\n      this.saveState({ propertySet: '_dimensionAffectingProps' });\n    },\n\n    /**\n     * Enlarge space boxes and shift the others\n     */\n    enlargeSpaces: function() {\n      var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        if (this.textAlign !== 'justify' && (i === len - 1 || this.isEndOfWrapping(i))) {\n          continue;\n        }\n        accumulatedSpace = 0;\n        line = this._textLines[i];\n        currentLineWidth = this.getLineWidth(i);\n        if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {\n          numberOfSpaces = spaces.length;\n          diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n          for (var j = 0, jlen = line.length; j <= jlen; j++) {\n            charBound = this.__charBounds[i][j];\n            if (this._reSpaceAndTab.test(line[j])) {\n              charBound.width += diffSpace;\n              charBound.kernedWidth += diffSpace;\n              charBound.left += accumulatedSpace;\n              accumulatedSpace += diffSpace;\n            }\n            else {\n              charBound.left += accumulatedSpace;\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Detect if the text line is ended with an hard break\n     * text and itext do not have wrapping, return false\n     * @return {Boolean}\n     */\n    isEndOfWrapping: function(lineIndex) {\n      return lineIndex === this._textLines.length - 1;\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} String representation of text object\n     */\n    toString: function() {\n      return '#<fabric.Text (' + this.complexity() +\n        '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\n    },\n\n    /**\n     * Return the dimension and the zoom level needed to create a cache canvas\n     * big enough to host the object to be cached.\n     * @private\n     * @param {Object} dim.x width of object to be cached\n     * @param {Object} dim.y height of object to be cached\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */\n    _getCacheCanvasDimensions: function() {\n      var dims = this.callSuper('_getCacheCanvasDimensions');\n      var fontSize = this.fontSize;\n      dims.width += fontSize * dims.zoomX;\n      dims.height += fontSize * dims.zoomY;\n      return dims;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      this._setTextStyles(ctx);\n      this._renderTextLinesBackground(ctx);\n      this._renderTextDecoration(ctx, 'underline');\n      this._renderText(ctx);\n      this._renderTextDecoration(ctx, 'overline');\n      this._renderTextDecoration(ctx, 'linethrough');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderText: function(ctx) {\n      if (this.paintFirst === 'stroke') {\n        this._renderTextStroke(ctx);\n        this._renderTextFill(ctx);\n      }\n      else {\n        this._renderTextFill(ctx);\n        this._renderTextStroke(ctx);\n      }\n    },\n\n    /**\n     * Set the font parameter of the context with the object properties or with charStyle\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [charStyle] object with font style properties\n     * @param {String} [charStyle.fontFamily] Font Family\n     * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n     * @param {String} [charStyle.fontWeight] Font weight\n     * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n     */\n    _setTextStyles: function(ctx, charStyle, forMeasuring) {\n      ctx.textBaseline = 'alphabetic';\n      ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n    },\n\n    /**\n     * calculate and return the text Width measuring each line.\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {Number} Maximum width of fabric.Text object\n     */\n    calcTextWidth: function() {\n      var maxWidth = this.getLineWidth(0);\n\n      for (var i = 1, len = this._textLines.length; i < len; i++) {\n        var currentLineWidth = this.getLineWidth(i);\n        if (currentLineWidth > maxWidth) {\n          maxWidth = currentLineWidth;\n        }\n      }\n      return maxWidth;\n    },\n\n    /**\n     * @private\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line Text to render\n     * @param {Number} left Left position of text\n     * @param {Number} top Top position of text\n     * @param {Number} lineIndex Index of a line in a text\n     */\n    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n      this._renderChars(method, ctx, line, left, top, lineIndex);\n    },\n\n    /**\n     * Renders the text background for lines, taking care of style\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextLinesBackground: function(ctx) {\n      if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n        return;\n      }\n      var lineTopOffset = 0, heightOfLine,\n          lineLeftOffset, originalFill = ctx.fillStyle,\n          line, lastColor,\n          leftOffset = this._getLeftOffset(),\n          topOffset = this._getTopOffset(),\n          boxStart = 0, boxWidth = 0, charBox, currentColor;\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        heightOfLine = this.getHeightOfLine(i);\n        if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor', i)) {\n          lineTopOffset += heightOfLine;\n          continue;\n        }\n        line = this._textLines[i];\n        lineLeftOffset = this._getLineLeftOffset(i);\n        boxWidth = 0;\n        boxStart = 0;\n        lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\n          charBox = this.__charBounds[i][j];\n          currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n          if (currentColor !== lastColor) {\n            ctx.fillStyle = lastColor;\n            lastColor && ctx.fillRect(\n              leftOffset + lineLeftOffset + boxStart,\n              topOffset + lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight\n            );\n            boxStart = charBox.left;\n            boxWidth = charBox.width;\n            lastColor = currentColor;\n          }\n          else {\n            boxWidth += charBox.kernedWidth;\n          }\n        }\n        if (currentColor) {\n          ctx.fillStyle = currentColor;\n          ctx.fillRect(\n            leftOffset + lineLeftOffset + boxStart,\n            topOffset + lineTopOffset,\n            boxWidth,\n            heightOfLine / this.lineHeight\n          );\n        }\n        lineTopOffset += heightOfLine;\n      }\n      ctx.fillStyle = originalFill;\n      // if there is text background color no\n      // other shadows should be casted\n      this._removeShadow(ctx);\n    },\n\n    /**\n     * @private\n     * @param {Object} decl style declaration for cache\n     * @param {String} decl.fontFamily fontFamily\n     * @param {String} decl.fontStyle fontStyle\n     * @param {String} decl.fontWeight fontWeight\n     * @return {Object} reference to cache\n     */\n    getFontCache: function(decl) {\n      var fontFamily = decl.fontFamily.toLowerCase();\n      if (!fabric.charWidthsCache[fontFamily]) {\n        fabric.charWidthsCache[fontFamily] = { };\n      }\n      var cache = fabric.charWidthsCache[fontFamily],\n          cacheProp = decl.fontStyle.toLowerCase() + '_' + (decl.fontWeight + '').toLowerCase();\n      if (!cache[cacheProp]) {\n        cache[cacheProp] = { };\n      }\n      return cache[cacheProp];\n    },\n\n    /**\n     * apply all the character style to canvas for rendering\n     * @private\n     * @param {String} _char\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} [decl]\n     */\n    _applyCharStyles: function(method, ctx, lineIndex, charIndex, styleDeclaration) {\n\n      this._setFillStyles(ctx, styleDeclaration);\n      this._setStrokeStyles(ctx, styleDeclaration);\n\n      ctx.font = this._getFontDeclaration(styleDeclaration);\n    },\n\n    /**\n     * measure and return the width of a single character.\n     * possibly overridden to accommodate different measure logic or\n     * to hook some external lib for character measurement\n     * @private\n     * @param {String} char to be measured\n     * @param {Object} charStyle style of char to be measured\n     * @param {String} [previousChar] previous char\n     * @param {Object} [prevCharStyle] style of previous char\n     */\n    _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {\n      // first i try to return from cache\n      var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle),\n          previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char,\n          stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth,\n          fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;\n\n      if (previousChar && fontCache[previousChar] !== undefined) {\n        previousWidth = fontCache[previousChar];\n      }\n      if (fontCache[_char] !== undefined) {\n        kernedWidth = width = fontCache[_char];\n      }\n      if (stylesAreEqual && fontCache[couple] !== undefined) {\n        coupleWidth = fontCache[couple];\n        kernedWidth = coupleWidth - previousWidth;\n      }\n      if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {\n        var ctx = this.getMeasuringContext();\n        // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n        this._setTextStyles(ctx, charStyle, true);\n      }\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        kernedWidth = coupleWidth - previousWidth;\n      }\n      return { width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };\n    },\n\n    /**\n     * Computes height of character at given position\n     * @param {Number} line the line number\n     * @param {Number} char the character number\n     * @return {Number} fontSize of the character\n     */\n    getHeightOfChar: function(line, char) {\n      return this.getValueOfPropertyAt(line, char, 'fontSize');\n    },\n\n    /**\n     * measure a text line measuring all characters.\n     * @param {Number} lineIndex line number\n     * @return {Number} Line width\n     */\n    measureLine: function(lineIndex) {\n      var lineInfo = this._measureLine(lineIndex);\n      if (this.charSpacing !== 0) {\n        lineInfo.width -= this._getWidthOfCharSpacing();\n      }\n      if (lineInfo.width < 0) {\n        lineInfo.width = 0;\n      }\n      return lineInfo;\n    },\n\n    /**\n     * measure every grapheme of a line, populating __charBounds\n     * @param {Number} lineIndex\n     * @return {Object} object.width total width of characters\n     * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs\n     */\n    _measureLine: function(lineIndex) {\n      var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme,\n          graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length);\n\n      this.__charBounds[lineIndex] = lineBounds;\n      for (i = 0; i < line.length; i++) {\n        grapheme = line[i];\n        graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n        lineBounds[i] = graphemeInfo;\n        width += graphemeInfo.kernedWidth;\n        prevGrapheme = grapheme;\n      }\n      // this latest bound box represent the last character of the line\n      // to simplify cursor handling in interactive mode.\n      lineBounds[i] = {\n        left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n        width: 0,\n        kernedWidth: 0,\n        height: this.fontSize\n      };\n      return { width: width, numOfSpaces: numOfSpaces };\n    },\n\n    /**\n     * Measure and return the info of a single grapheme.\n     * needs the the info of previous graphemes already filled\n     * @private\n     * @param {String} grapheme to be measured\n     * @param {Number} lineIndex index of the line where the char is\n     * @param {Number} charIndex position in the line\n     * @param {String} [prevGrapheme] character preceding the one to be measured\n     */\n    _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {\n      var style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n          prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : { },\n          info = this._measureChar(grapheme, style, prevGrapheme, prevStyle),\n          kernedWidth = info.kernedWidth,\n          width = info.width, charSpacing;\n\n      if (this.charSpacing !== 0) {\n        charSpacing = this._getWidthOfCharSpacing();\n        width += charSpacing;\n        kernedWidth += charSpacing;\n      }\n\n      var box = {\n        width: width,\n        left: 0,\n        height: style.fontSize,\n        kernedWidth: kernedWidth,\n        deltaY: style.deltaY,\n      };\n      if (charIndex > 0 && !skipLeft) {\n        var previousBox = this.__charBounds[lineIndex][charIndex - 1];\n        box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;\n      }\n      return box;\n    },\n\n    /**\n     * Calculate height of line at 'lineIndex'\n     * @param {Number} lineIndex index of line to calculate\n     * @return {Number}\n     */\n    getHeightOfLine: function(lineIndex) {\n      if (this.__lineHeights[lineIndex]) {\n        return this.__lineHeights[lineIndex];\n      }\n\n      var line = this._textLines[lineIndex],\n          // char 0 is measured before the line cycle because it nneds to char\n          // emptylines\n          maxHeight = this.getHeightOfChar(lineIndex, 0);\n      for (var i = 1, len = line.length; i < len; i++) {\n        maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n      }\n\n      return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\n    },\n\n    /**\n     * Calculate text box height\n     */\n    calcTextHeight: function() {\n      var lineHeight, height = 0;\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        lineHeight = this.getHeightOfLine(i);\n        height += (i === len - 1 ? lineHeight / this.lineHeight : lineHeight);\n      }\n      return height;\n    },\n\n    /**\n     * @private\n     * @return {Number} Left offset\n     */\n    _getLeftOffset: function() {\n      return -this.width / 2;\n    },\n\n    /**\n     * @private\n     * @return {Number} Top offset\n     */\n    _getTopOffset: function() {\n      return -this.height / 2;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     */\n    _renderTextCommon: function(ctx, method) {\n      ctx.save();\n      var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset(),\n          offsets = this._applyPatternGradientTransform(ctx, method === 'fillText' ? this.fill : this.stroke);\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        var heightOfLine = this.getHeightOfLine(i),\n            maxHeight = heightOfLine / this.lineHeight,\n            leftOffset = this._getLineLeftOffset(i);\n        this._renderTextLine(\n          method,\n          ctx,\n          this._textLines[i],\n          left + leftOffset - offsets.offsetX,\n          top + lineHeights + maxHeight - offsets.offsetY,\n          i\n        );\n        lineHeights += heightOfLine;\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextFill: function(ctx) {\n      if (!this.fill && !this.styleHas('fill')) {\n        return;\n      }\n\n      this._renderTextCommon(ctx, 'fillText');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextStroke: function(ctx) {\n      if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n        return;\n      }\n\n      if (this.shadow && !this.shadow.affectStroke) {\n        this._removeShadow(ctx);\n      }\n\n      ctx.save();\n      this._setLineDash(ctx, this.strokeDashArray);\n      ctx.beginPath();\n      this._renderTextCommon(ctx, 'strokeText');\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line Content of the line\n     * @param {Number} left\n     * @param {Number} top\n     * @param {Number} lineIndex\n     * @param {Number} charOffset\n     */\n    _renderChars: function(method, ctx, line, left, top, lineIndex) {\n      // set proper line offset\n      var lineHeight = this.getHeightOfLine(lineIndex),\n          isJustify = this.textAlign.indexOf('justify') !== -1,\n          actualStyle,\n          nextStyle,\n          charsToRender = '',\n          charBox,\n          boxWidth = 0,\n          timeToRender,\n          shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex);\n\n      ctx.save();\n      top -= lineHeight * this._fontSizeFraction / this.lineHeight;\n      if (shortCut) {\n        // render all the line in one pass without checking\n        this._renderChar(method, ctx, lineIndex, 0, this.textLines[lineIndex], left, top, lineHeight);\n        ctx.restore();\n        return;\n      }\n      for (var i = 0, len = line.length - 1; i <= len; i++) {\n        timeToRender = i === len || this.charSpacing;\n        charsToRender += line[i];\n        charBox = this.__charBounds[lineIndex][i];\n        if (boxWidth === 0) {\n          left += charBox.kernedWidth - charBox.width;\n          boxWidth += charBox.width;\n        }\n        else {\n          boxWidth += charBox.kernedWidth;\n        }\n        if (isJustify && !timeToRender) {\n          if (this._reSpaceAndTab.test(line[i])) {\n            timeToRender = true;\n          }\n        }\n        if (!timeToRender) {\n          // if we have charSpacing, we render char by char\n          actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n          nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n          timeToRender = this._hasStyleChanged(actualStyle, nextStyle);\n        }\n        if (timeToRender) {\n          this._renderChar(method, ctx, lineIndex, i, charsToRender, left, top, lineHeight);\n          charsToRender = '';\n          actualStyle = nextStyle;\n          left += boxWidth;\n          boxWidth = 0;\n        }\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {String} _char\n     * @param {Number} left Left coordinate\n     * @param {Number} top Top coordinate\n     * @param {Number} lineHeight Height of the line\n     */\n    _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {\n      var decl = this._getStyleDeclaration(lineIndex, charIndex),\n          fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n          shouldFill = method === 'fillText' && fullDecl.fill,\n          shouldStroke = method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n      if (!shouldStroke && !shouldFill) {\n        return;\n      }\n      decl && ctx.save();\n\n      this._applyCharStyles(method, ctx, lineIndex, charIndex, fullDecl);\n\n      if (decl && decl.textBackgroundColor) {\n        this._removeShadow(ctx);\n      }\n      if (decl && decl.deltaY) {\n        top += decl.deltaY;\n      }\n\n      shouldFill && ctx.fillText(_char, left, top);\n      shouldStroke && ctx.strokeText(_char, left, top);\n      decl && ctx.restore();\n    },\n\n    /**\n     * Turns the character into a 'superior figure' (i.e. 'superscript')\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */\n    setSuperscript: function(start, end) {\n      return this._setScript(start, end, this.superscript);\n    },\n\n    /**\n     * Turns the character into an 'inferior figure' (i.e. 'subscript')\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */\n    setSubscript: function(start, end) {\n      return this._setScript(start, end, this.subscript);\n    },\n\n    /**\n     * Applies 'schema' at given position\n     * @private\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @param {Number} schema\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */\n    _setScript: function(start, end, schema) {\n      var loc = this.get2DCursorLocation(start, true),\n          fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'fontSize'),\n          dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n          style = { fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline };\n      this.setSelectionStyles(style, start, end);\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {Object} prevStyle\n     * @param {Object} thisStyle\n     */\n    _hasStyleChanged: function(prevStyle, thisStyle) {\n      return prevStyle.fill !== thisStyle.fill ||\n              prevStyle.stroke !== thisStyle.stroke ||\n              prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n              prevStyle.fontSize !== thisStyle.fontSize ||\n              prevStyle.fontFamily !== thisStyle.fontFamily ||\n              prevStyle.fontWeight !== thisStyle.fontWeight ||\n              prevStyle.fontStyle !== thisStyle.fontStyle ||\n              prevStyle.deltaY !== thisStyle.deltaY;\n    },\n\n    /**\n     * @private\n     * @param {Object} prevStyle\n     * @param {Object} thisStyle\n     */\n    _hasStyleChangedForSvg: function(prevStyle, thisStyle) {\n      return this._hasStyleChanged(prevStyle, thisStyle) ||\n        prevStyle.overline !== thisStyle.overline ||\n        prevStyle.underline !== thisStyle.underline ||\n        prevStyle.linethrough !== thisStyle.linethrough;\n    },\n\n    /**\n     * @private\n     * @param {Number} lineIndex index text line\n     * @return {Number} Line left offset\n     */\n    _getLineLeftOffset: function(lineIndex) {\n      var lineWidth = this.getLineWidth(lineIndex);\n      if (this.textAlign === 'center') {\n        return (this.width - lineWidth) / 2;\n      }\n      if (this.textAlign === 'right') {\n        return this.width - lineWidth;\n      }\n      if (this.textAlign === 'justify-center' && this.isEndOfWrapping(lineIndex)) {\n        return (this.width - lineWidth) / 2;\n      }\n      if (this.textAlign === 'justify-right' && this.isEndOfWrapping(lineIndex)) {\n        return this.width - lineWidth;\n      }\n      return 0;\n    },\n\n    /**\n     * @private\n     */\n    _clearCache: function() {\n      this.__lineWidths = [];\n      this.__lineHeights = [];\n      this.__charBounds = [];\n    },\n\n    /**\n     * @private\n     */\n    _shouldClearDimensionCache: function() {\n      var shouldClear = this._forceClearCache;\n      shouldClear || (shouldClear = this.hasStateChanged('_dimensionAffectingProps'));\n      if (shouldClear) {\n        this.dirty = true;\n        this._forceClearCache = false;\n      }\n      return shouldClear;\n    },\n\n    /**\n     * Measure a single line given its index. Used to calculate the initial\n     * text bounding box. The values are calculated and stored in __lineWidths cache.\n     * @private\n     * @param {Number} lineIndex line number\n     * @return {Number} Line width\n     */\n    getLineWidth: function(lineIndex) {\n      if (this.__lineWidths[lineIndex]) {\n        return this.__lineWidths[lineIndex];\n      }\n\n      var width, line = this._textLines[lineIndex], lineInfo;\n\n      if (line === '') {\n        width = 0;\n      }\n      else {\n        lineInfo = this.measureLine(lineIndex);\n        width = lineInfo.width;\n      }\n      this.__lineWidths[lineIndex] = width;\n      return width;\n    },\n\n    _getWidthOfCharSpacing: function() {\n      if (this.charSpacing !== 0) {\n        return this.fontSize * this.charSpacing / 1000;\n      }\n      return 0;\n    },\n\n    /**\n     * Retrieves the value of property at given character position\n     * @param {Number} lineIndex the line number\n     * @param {Number} charIndex the charater number\n     * @param {String} property the property name\n     * @returns the value of 'property'\n     */\n    getValueOfPropertyAt: function(lineIndex, charIndex, property) {\n      var charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n      if (charStyle && typeof charStyle[property] !== 'undefined') {\n        return charStyle[property];\n      }\n      return this[property];\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextDecoration: function(ctx, type) {\n      if (!this[type] && !this.styleHas(type)) {\n        return;\n      }\n      var heightOfLine, size, _size,\n          lineLeftOffset, dy, _dy,\n          line, lastDecoration,\n          leftOffset = this._getLeftOffset(),\n          topOffset = this._getTopOffset(), top,\n          boxStart, boxWidth, charBox, currentDecoration,\n          maxHeight, currentFill, lastFill,\n          charSpacing = this._getWidthOfCharSpacing();\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        heightOfLine = this.getHeightOfLine(i);\n        if (!this[type] && !this.styleHas(type, i)) {\n          topOffset += heightOfLine;\n          continue;\n        }\n        line = this._textLines[i];\n        maxHeight = heightOfLine / this.lineHeight;\n        lineLeftOffset = this._getLineLeftOffset(i);\n        boxStart = 0;\n        boxWidth = 0;\n        lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n        lastFill = this.getValueOfPropertyAt(i, 0, 'fill');\n        top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n        size = this.getHeightOfChar(i, 0);\n        dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\n          charBox = this.__charBounds[i][j];\n          currentDecoration = this.getValueOfPropertyAt(i, j, type);\n          currentFill = this.getValueOfPropertyAt(i, j, 'fill');\n          _size = this.getHeightOfChar(i, j);\n          _dy = this.getValueOfPropertyAt(i, j, 'deltaY');\n          if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) &&\n              boxWidth > 0) {\n            ctx.fillStyle = lastFill;\n            lastDecoration && lastFill && ctx.fillRect(\n              leftOffset + lineLeftOffset + boxStart,\n              top + this.offsets[type] * size + dy,\n              boxWidth,\n              this.fontSize / 15\n            );\n            boxStart = charBox.left;\n            boxWidth = charBox.width;\n            lastDecoration = currentDecoration;\n            lastFill = currentFill;\n            size = _size;\n            dy = _dy;\n          }\n          else {\n            boxWidth += charBox.kernedWidth;\n          }\n        }\n        ctx.fillStyle = currentFill;\n        currentDecoration && currentFill && ctx.fillRect(\n          leftOffset + lineLeftOffset + boxStart,\n          top + this.offsets[type] * size + dy,\n          boxWidth - charSpacing,\n          this.fontSize / 15\n        );\n        topOffset += heightOfLine;\n      }\n      // if there is text background color no\n      // other shadows should be casted\n      this._removeShadow(ctx);\n    },\n\n    /**\n     * return font declaration string for canvas context\n     * @param {Object} [styleObject] object\n     * @returns {String} font declaration formatted for canvas context.\n     */\n    _getFontDeclaration: function(styleObject, forMeasuring) {\n      var style = styleObject || this, family = this.fontFamily,\n          fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;\n      var fontFamily = family === undefined ||\n      family.indexOf('\\'') > -1 ||\n      family.indexOf('\"') > -1 || fontIsGeneric\n        ? style.fontFamily : '\"' + style.fontFamily + '\"';\n      return [\n        // node-canvas needs \"weight style\", while browsers need \"style weight\"\n        (fabric.isLikelyNode ? style.fontWeight : style.fontStyle),\n        (fabric.isLikelyNode ? style.fontStyle : style.fontWeight),\n        forMeasuring ? this.CACHE_FONT_SIZE + 'px' : style.fontSize + 'px',\n        fontFamily\n      ].join(' ');\n    },\n\n    /**\n     * Renders text instance on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    render: function(ctx) {\n      // do not render if object is not visible\n      if (!this.visible) {\n        return;\n      }\n      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n        return;\n      }\n      if (this._shouldClearDimensionCache()) {\n        this.initDimensions();\n      }\n      this.callSuper('render', ctx);\n    },\n\n    /**\n     * Returns the text as an array of lines.\n     * @param {String} text text to split\n     * @returns {Array} Lines in the text\n     */\n    _splitTextIntoLines: function(text) {\n      var lines = text.split(this._reNewline),\n          newLines = new Array(lines.length),\n          newLine = ['\\n'],\n          newText = [];\n      for (var i = 0; i < lines.length; i++) {\n        newLines[i] = fabric.util.string.graphemeSplit(lines[i]);\n        newText = newText.concat(newLines[i], newLine);\n      }\n      newText.pop();\n      return { _unwrappedLines: newLines, lines: lines, graphemeText: newText, graphemeLines: newLines };\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var additionalProperties = [\n        'text',\n        'fontSize',\n        'fontWeight',\n        'fontFamily',\n        'fontStyle',\n        'lineHeight',\n        'underline',\n        'overline',\n        'linethrough',\n        'textAlign',\n        'textBackgroundColor',\n        'charSpacing',\n      ].concat(propertiesToInclude);\n      var obj = this.callSuper('toObject', additionalProperties);\n      obj.styles = clone(this.styles, true);\n      return obj;\n    },\n\n    /**\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    set: function(key, value) {\n      this.callSuper('set', key, value);\n      var needsDims = false;\n      if (typeof key === 'object') {\n        for (var _key in key) {\n          needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;\n        }\n      }\n      else {\n        needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;\n      }\n      if (needsDims) {\n        this.initDimensions();\n        this.setCoords();\n      }\n      return this;\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})\n   * @static\n   * @memberOf fabric.Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(\n    'x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor'.split(' '));\n\n  /**\n   * Default SVG font size\n   * @static\n   * @memberOf fabric.Text\n   */\n  fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;\n\n  /**\n   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf fabric.Text\n   * @param {SVGElement} element Element to parse\n   * @param {Function} callback callback function invoked after parsing\n   * @param {Object} [options] Options object\n   */\n  fabric.Text.fromElement = function(element, callback, options) {\n    if (!element) {\n      return callback(null);\n    }\n\n    var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES),\n        parsedAnchor = parsedAttributes.textAnchor || 'left';\n    options = fabric.util.object.extend((options ? clone(options) : { }), parsedAttributes);\n\n    options.top = options.top || 0;\n    options.left = options.left || 0;\n    if (parsedAttributes.textDecoration) {\n      var textDecoration = parsedAttributes.textDecoration;\n      if (textDecoration.indexOf('underline') !== -1) {\n        options.underline = true;\n      }\n      if (textDecoration.indexOf('overline') !== -1) {\n        options.overline = true;\n      }\n      if (textDecoration.indexOf('line-through') !== -1) {\n        options.linethrough = true;\n      }\n      delete options.textDecoration;\n    }\n    if ('dx' in parsedAttributes) {\n      options.left += parsedAttributes.dx;\n    }\n    if ('dy' in parsedAttributes) {\n      options.top += parsedAttributes.dy;\n    }\n    if (!('fontSize' in options)) {\n      options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n    }\n\n    var textContent = '';\n\n    // The XML is not properly parsed in IE9 so a workaround to get\n    // textContent is through firstChild.data. Another workaround would be\n    // to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)\n    if (!('textContent' in element)) {\n      if ('firstChild' in element && element.firstChild !== null) {\n        if ('data' in element.firstChild && element.firstChild.data !== null) {\n          textContent = element.firstChild.data;\n        }\n      }\n    }\n    else {\n      textContent = element.textContent;\n    }\n\n    textContent = textContent.replace(/^\\s+|\\s+$|\\n+/g, '').replace(/\\s+/g, ' ');\n    var originalStrokeWidth = options.strokeWidth;\n    options.strokeWidth = 0;\n\n    var text = new fabric.Text(textContent, options),\n        textHeightScaleFactor = text.getScaledHeight() / text.height,\n        lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height,\n        scaledDiff = lineHeightDiff * textHeightScaleFactor,\n        textHeight = text.getScaledHeight() + scaledDiff,\n        offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (parsedAnchor === 'center') {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (parsedAnchor === 'right') {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,\n      strokeWidth: typeof originalStrokeWidth !== 'undefined' ? originalStrokeWidth : 1,\n    });\n    callback(text);\n  };\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns fabric.Text instance from an object representation\n   * @static\n   * @memberOf fabric.Text\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created\n   */\n  fabric.Text.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Text', object, callback, 'text');\n  };\n\n  fabric.Text.genericFonts = ['sans-serif', 'serif', 'cursive', 'fantasy', 'monospace'];\n\n  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);\n\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n  fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\n    /**\n     * Returns true if object has no styling or no styling in a line\n     * @param {Number} lineIndex , lineIndex is on wrapped lines.\n     * @return {Boolean}\n     */\n    isEmptyStyles: function(lineIndex) {\n      if (!this.styles) {\n        return true;\n      }\n      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n        return true;\n      }\n      var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\n      for (var p1 in obj) {\n        for (var p2 in obj[p1]) {\n          // eslint-disable-next-line no-unused-vars\n          for (var p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Returns true if object has a style property or has it ina specified line\n     * @param {Number} lineIndex\n     * @return {Boolean}\n     */\n    styleHas: function(property, lineIndex) {\n      if (!this.styles || !property || property === '') {\n        return false;\n      }\n      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n        return false;\n      }\n      var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\n      // eslint-disable-next-line\n      for (var p1 in obj) {\n        // eslint-disable-next-line\n        for (var p2 in obj[p1]) {\n          if (typeof obj[p1][p2][property] !== 'undefined') {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Check if characters in a text have a value for a property\n     * whose value matches the textbox's value for that property.  If so,\n     * the character-level property is deleted.  If the character\n     * has no other properties, then it is also deleted.  Finally,\n     * if the line containing that character has no other characters\n     * then it also is deleted.\n     *\n     * @param {string} property The property to compare between characters and text.\n     */\n    cleanStyle: function(property) {\n      if (!this.styles || !property || property === '') {\n        return false;\n      }\n      var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue,\n          allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;\n      // eslint-disable-next-line\n      for (var p1 in obj) {\n        letterCount = 0;\n        // eslint-disable-next-line\n        for (var p2 in obj[p1]) {\n          var styleObject = obj[p1][p2],\n              stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);\n\n          stylesCount++;\n\n          if (stylePropertyHasBeenSet) {\n            if (!stylePropertyValue) {\n              stylePropertyValue = styleObject[property];\n            }\n            else if (styleObject[property] !== stylePropertyValue) {\n              allStyleObjectPropertiesMatch = false;\n            }\n\n            if (styleObject[property] === this[property]) {\n              delete styleObject[property];\n            }\n          }\n          else {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (Object.keys(styleObject).length !== 0) {\n            letterCount++;\n          }\n          else {\n            delete obj[p1][p2];\n          }\n        }\n\n        if (letterCount === 0) {\n          delete obj[p1];\n        }\n      }\n      // if every grapheme has the same style set then\n      // delete those styles and set it on the parent\n      for (var i = 0; i < this._textLines.length; i++) {\n        graphemeCount += this._textLines[i].length;\n      }\n      if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n        this[property] = stylePropertyValue;\n        this.removeStyle(property);\n      }\n    },\n\n    /**\n     * Remove a style property or properties from all individual character styles\n     * in a text object.  Deletes the character style object if it contains no other style\n     * props.  Deletes a line style object if it contains no other character styles.\n     *\n     * @param {String} props The property to remove from character styles.\n     */\n    removeStyle: function(property) {\n      if (!this.styles || !property || property === '') {\n        return;\n      }\n      var obj = this.styles, line, lineNum, charNum;\n      for (lineNum in obj) {\n        line = obj[lineNum];\n        for (charNum in line) {\n          delete line[charNum][property];\n          if (Object.keys(line[charNum]).length === 0) {\n            delete line[charNum];\n          }\n        }\n        if (Object.keys(line).length === 0) {\n          delete obj[lineNum];\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _extendStyles: function(index, styles) {\n      var loc = this.get2DCursorLocation(index);\n\n      if (!this._getLineStyle(loc.lineIndex)) {\n        this._setLineStyle(loc.lineIndex, {});\n      }\n\n      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\n        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\n      }\n\n      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\n    },\n\n    /**\n     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n     * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. usefull to manage styles.\n     */\n    get2DCursorLocation: function(selectionStart, skipWrapping) {\n      if (typeof selectionStart === 'undefined') {\n        selectionStart = this.selectionStart;\n      }\n      var lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n      var len = lines.length;\n      for (var i = 0; i < len; i++) {\n        if (selectionStart <= lines[i].length) {\n          return {\n            lineIndex: i,\n            charIndex: selectionStart\n          };\n        }\n        selectionStart -= lines[i].length + 1;\n      }\n      return {\n        lineIndex: i - 1,\n        charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart\n      };\n    },\n\n    /**\n     * Gets style of a current selection/cursor (at the start position)\n     * if startIndex or endIndex are not provided, slectionStart or selectionEnd will be used.\n     * @param {Number} [startIndex] Start index to get styles at\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n     * @param {Boolean} [complete] get full style or not\n     * @return {Array} styles an array with one, zero or more Style objects\n     */\n    getSelectionStyles: function(startIndex, endIndex, complete) {\n      if (typeof startIndex === 'undefined') {\n        startIndex = this.selectionStart || 0;\n      }\n      if (typeof endIndex === 'undefined') {\n        endIndex = this.selectionEnd || startIndex;\n      }\n      var styles = [];\n      for (var i = startIndex; i < endIndex; i++) {\n        styles.push(this.getStyleAtPosition(i, complete));\n      }\n      return styles;\n    },\n\n    /**\n     * Gets style of a current selection/cursor position\n     * @param {Number} position  to get styles at\n     * @param {Boolean} [complete] full style if true\n     * @return {Object} style Style object at a specified index\n     * @private\n     */\n    getStyleAtPosition: function(position, complete) {\n      var loc = this.get2DCursorLocation(position),\n          style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) :\n            this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\n      return style || {};\n    },\n\n    /**\n     * Sets style of a current selection, if no selection exist, do not set anything.\n     * @param {Object} [styles] Styles object\n     * @param {Number} [startIndex] Start index to get styles at\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    setSelectionStyles: function(styles, startIndex, endIndex) {\n      if (typeof startIndex === 'undefined') {\n        startIndex = this.selectionStart || 0;\n      }\n      if (typeof endIndex === 'undefined') {\n        endIndex = this.selectionEnd || startIndex;\n      }\n      for (var i = startIndex; i < endIndex; i++) {\n        this._extendStyles(i, styles);\n      }\n      /* not included in _extendStyles to avoid clearing cache more than once */\n      this._forceClearCache = true;\n      return this;\n    },\n\n    /**\n     * get the reference, not a clone, of the style object for a given character\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @return {Object} style object\n     */\n    _getStyleDeclaration: function(lineIndex, charIndex) {\n      var lineStyle = this.styles && this.styles[lineIndex];\n      if (!lineStyle) {\n        return null;\n      }\n      return lineStyle[charIndex];\n    },\n\n    /**\n     * return a new object that contains all the style property for a character\n     * the object returned is newly created\n     * @param {Number} lineIndex of the line where the character is\n     * @param {Number} charIndex position of the character on the line\n     * @return {Object} style object\n     */\n    getCompleteStyleDeclaration: function(lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex) || { },\n          styleObject = { }, prop;\n      for (var i = 0; i < this._styleProperties.length; i++) {\n        prop = this._styleProperties[i];\n        styleObject[prop] = typeof style[prop] === 'undefined' ? this[prop] : style[prop];\n      }\n      return styleObject;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} style\n     * @private\n     */\n    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n      this.styles[lineIndex][charIndex] = style;\n    },\n\n    /**\n     *\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n      delete this.styles[lineIndex][charIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _getLineStyle: function(lineIndex) {\n      return this.styles[lineIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Object} style\n     * @private\n     */\n    _setLineStyle: function(lineIndex, style) {\n      this.styles[lineIndex] = style;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _deleteLineStyle: function(lineIndex) {\n      delete this.styles[lineIndex];\n    }\n  });\n})();\n\n\n(function() {\n\n  function parseDecoration(object) {\n    if (object.textDecoration) {\n      object.textDecoration.indexOf('underline') > -1 && (object.underline = true);\n      object.textDecoration.indexOf('line-through') > -1 && (object.linethrough = true);\n      object.textDecoration.indexOf('overline') > -1 && (object.overline = true);\n      delete object.textDecoration;\n    }\n  }\n\n  /**\n   * IText class (introduced in <b>v1.4</b>) Events are also fired with \"text:\"\n   * prefix when observing canvas.\n   * @class fabric.IText\n   * @extends fabric.Text\n   * @mixes fabric.Observable\n   *\n   * @fires changed\n   * @fires selection:changed\n   * @fires editing:entered\n   * @fires editing:exited\n   *\n   * @return {fabric.IText} thisArg\n   * @see {@link fabric.IText#initialize} for constructor definition\n   *\n   * <p>Supported key combinations:</p>\n   * <pre>\n   *   Move cursor:                    left, right, up, down\n   *   Select character:               shift + left, shift + right\n   *   Select text vertically:         shift + up, shift + down\n   *   Move cursor by word:            alt + left, alt + right\n   *   Select words:                   shift + alt + left, shift + alt + right\n   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n   *   Jump to start/end of text:      cmd + up, cmd + down\n   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n   *   Delete character:               backspace\n   *   Delete word:                    alt + backspace\n   *   Delete line:                    cmd + backspace\n   *   Forward delete:                 delete\n   *   Copy text:                      ctrl/cmd + c\n   *   Paste text:                     ctrl/cmd + v\n   *   Cut text:                       ctrl/cmd + x\n   *   Select entire text:             ctrl/cmd + a\n   *   Quit editing                    tab or esc\n   * </pre>\n   *\n   * <p>Supported mouse/touch combination</p>\n   * <pre>\n   *   Position cursor:                click/touch\n   *   Create selection:               click/touch & drag\n   *   Create selection:               click & shift + click\n   *   Select word:                    double click\n   *   Select line:                    triple click\n   * </pre>\n   */\n  fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'i-text',\n\n    /**\n     * Index where text selection starts (or where cursor is when there is no selection)\n     * @type Number\n     * @default\n     */\n    selectionStart: 0,\n\n    /**\n     * Index where text selection ends\n     * @type Number\n     * @default\n     */\n    selectionEnd: 0,\n\n    /**\n     * Color of text selection\n     * @type String\n     * @default\n     */\n    selectionColor: 'rgba(17,119,255,0.3)',\n\n    /**\n     * Indicates whether text is in editing mode\n     * @type Boolean\n     * @default\n     */\n    isEditing: false,\n\n    /**\n     * Indicates whether a text can be edited\n     * @type Boolean\n     * @default\n     */\n    editable: true,\n\n    /**\n     * Border color of text object while it's in editing mode\n     * @type String\n     * @default\n     */\n    editingBorderColor: 'rgba(102,153,255,0.25)',\n\n    /**\n     * Width of cursor (in px)\n     * @type Number\n     * @default\n     */\n    cursorWidth: 2,\n\n    /**\n     * Color of default cursor (when not overwritten by character style)\n     * @type String\n     * @default\n     */\n    cursorColor: '#333',\n\n    /**\n     * Delay between cursor blink (in ms)\n     * @type Number\n     * @default\n     */\n    cursorDelay: 1000,\n\n    /**\n     * Duration of cursor fadein (in ms)\n     * @type Number\n     * @default\n     */\n    cursorDuration: 600,\n\n    /**\n     * Indicates whether internal text char widths can be cached\n     * @type Boolean\n     * @default\n     */\n    caching: true,\n\n    /**\n     * @private\n     */\n    _reSpace: /\\s|\\n/,\n\n    /**\n     * @private\n     */\n    _currentCursorOpacity: 0,\n\n    /**\n     * @private\n     */\n    _selectionDirection: null,\n\n    /**\n     * @private\n     */\n    _abortCursorAnimation: false,\n\n    /**\n     * @private\n     */\n    __widthOfSpace: [],\n\n    /**\n     * Helps determining when the text is in composition, so that the cursor\n     * rendering is altered.\n     */\n    inCompositionMode: false,\n\n    /**\n     * Constructor\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.IText} thisArg\n     */\n    initialize: function(text, options) {\n      this.callSuper('initialize', text, options);\n      this.initBehavior();\n    },\n\n    /**\n     * Sets selection start (left boundary of a selection)\n     * @param {Number} index Index to set selection start to\n     */\n    setSelectionStart: function(index) {\n      index = Math.max(index, 0);\n      this._updateAndFire('selectionStart', index);\n    },\n\n    /**\n     * Sets selection end (right boundary of a selection)\n     * @param {Number} index Index to set selection end to\n     */\n    setSelectionEnd: function(index) {\n      index = Math.min(index, this.text.length);\n      this._updateAndFire('selectionEnd', index);\n    },\n\n    /**\n     * @private\n     * @param {String} property 'selectionStart' or 'selectionEnd'\n     * @param {Number} index new position of property\n     */\n    _updateAndFire: function(property, index) {\n      if (this[property] !== index) {\n        this._fireSelectionChanged();\n        this[property] = index;\n      }\n      this._updateTextarea();\n    },\n\n    /**\n     * Fires the even of selection changed\n     * @private\n     */\n    _fireSelectionChanged: function() {\n      this.fire('selection:changed');\n      this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n    },\n\n    /**\n     * Initialize text dimensions. Render all text on given context\n     * or on a offscreen canvas to get the text width with measureText.\n     * Updates this.width and this.height with the proper values.\n     * Does not return dimensions.\n     * @private\n     */\n    initDimensions: function() {\n      this.isEditing && this.initDelayedCursor();\n      this.clearContextTop();\n      this.callSuper('initDimensions');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    render: function(ctx) {\n      this.clearContextTop();\n      this.callSuper('render', ctx);\n      // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n      // the correct position but not at every cursor animation.\n      this.cursorOffsetCache = { };\n      this.renderCursorOrSelection();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      this.callSuper('_render', ctx);\n    },\n\n    /**\n     * Prepare and clean the contextTop\n     */\n    clearContextTop: function(skipRestore) {\n      if (!this.isEditing) {\n        return;\n      }\n      if (this.canvas && this.canvas.contextTop) {\n        var ctx = this.canvas.contextTop, v = this.canvas.viewportTransform;\n        ctx.save();\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n        this.transform(ctx);\n        this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);\n        this._clearTextArea(ctx);\n        skipRestore || ctx.restore();\n      }\n    },\n\n    /**\n     * Renders cursor or selection (depending on what exists)\n     */\n    renderCursorOrSelection: function() {\n      if (!this.isEditing || !this.canvas) {\n        return;\n      }\n      var boundaries = this._getCursorBoundaries(), ctx;\n      if (this.canvas && this.canvas.contextTop) {\n        ctx = this.canvas.contextTop;\n        this.clearContextTop(true);\n      }\n      else {\n        ctx = this.canvas.contextContainer;\n        ctx.save();\n      }\n      if (this.selectionStart === this.selectionEnd) {\n        this.renderCursor(boundaries, ctx);\n      }\n      else {\n        this.renderSelection(boundaries, ctx);\n      }\n      ctx.restore();\n    },\n\n    _clearTextArea: function(ctx) {\n      // we add 4 pixel, to be sure to do not leave any pixel out\n      var width = this.width + 4, height = this.height + 4;\n      ctx.clearRect(-width / 2, -height / 2, width, height);\n    },\n\n    /**\n     * Returns cursor boundaries (left, top, leftOffset, topOffset)\n     * @private\n     * @param {Array} chars Array of characters\n     * @param {String} typeOfBoundaries\n     */\n    _getCursorBoundaries: function(position) {\n\n      // left/top are left/top of entire text box\n      // leftOffset/topOffset are offset from that left/top point of a text box\n\n      if (typeof position === 'undefined') {\n        position = this.selectionStart;\n      }\n\n      var left = this._getLeftOffset(),\n          top = this._getTopOffset(),\n          offsets = this._getCursorBoundariesOffsets(position);\n\n      return {\n        left: left,\n        top: top,\n        leftOffset: offsets.left,\n        topOffset: offsets.top\n      };\n    },\n\n    /**\n     * @private\n     */\n    _getCursorBoundariesOffsets: function(position) {\n      if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n        return this.cursorOffsetCache;\n      }\n      var lineLeftOffset,\n          lineIndex,\n          charIndex,\n          topOffset = 0,\n          leftOffset = 0,\n          boundaries,\n          cursorPosition = this.get2DCursorLocation(position);\n      charIndex = cursorPosition.charIndex;\n      lineIndex = cursorPosition.lineIndex;\n      for (var i = 0; i < lineIndex; i++) {\n        topOffset += this.getHeightOfLine(i);\n      }\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n      var bound = this.__charBounds[lineIndex][charIndex];\n      bound && (leftOffset = bound.left);\n      if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {\n        leftOffset -= this._getWidthOfCharSpacing();\n      }\n      boundaries = {\n        top: topOffset,\n        left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n      };\n      this.cursorOffsetCache = boundaries;\n      return this.cursorOffsetCache;\n    },\n\n    /**\n     * Renders cursor\n     * @param {Object} boundaries\n     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n     */\n    renderCursor: function(boundaries, ctx) {\n      var cursorLocation = this.get2DCursorLocation(),\n          lineIndex = cursorLocation.lineIndex,\n          charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n          charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n          multiplier = this.scaleX * this.canvas.getZoom(),\n          cursorWidth = this.cursorWidth / multiplier,\n          topOffset = boundaries.topOffset,\n          dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY');\n\n      topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight\n        - charHeight * (1 - this._fontSizeFraction);\n\n      if (this.inCompositionMode) {\n        this.renderSelection(boundaries, ctx);\n      }\n\n      ctx.fillStyle = this.getValueOfPropertyAt(lineIndex, charIndex, 'fill');\n      ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;\n      ctx.fillRect(\n        boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n        topOffset + boundaries.top + dy,\n        cursorWidth,\n        charHeight);\n    },\n\n    /**\n     * Renders text selection\n     * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n     * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n     */\n    renderSelection: function(boundaries, ctx) {\n\n      var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,\n          selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd,\n          isJustify = this.textAlign.indexOf('justify') !== -1,\n          start = this.get2DCursorLocation(selectionStart),\n          end = this.get2DCursorLocation(selectionEnd),\n          startLine = start.lineIndex,\n          endLine = end.lineIndex,\n          startChar = start.charIndex < 0 ? 0 : start.charIndex,\n          endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n      for (var i = startLine; i <= endLine; i++) {\n        var lineOffset = this._getLineLeftOffset(i) || 0,\n            lineHeight = this.getHeightOfLine(i),\n            realLineHeight = 0, boxStart = 0, boxEnd = 0;\n\n        if (i === startLine) {\n          boxStart = this.__charBounds[startLine][startChar].left;\n        }\n        if (i >= startLine && i < endLine) {\n          boxEnd = isJustify && !this.isEndOfWrapping(i) ? this.width : this.getLineWidth(i) || 5; // WTF is this 5?\n        }\n        else if (i === endLine) {\n          if (endChar === 0) {\n            boxEnd = this.__charBounds[endLine][endChar].left;\n          }\n          else {\n            var charSpacing = this._getWidthOfCharSpacing();\n            boxEnd = this.__charBounds[endLine][endChar - 1].left\n              + this.__charBounds[endLine][endChar - 1].width - charSpacing;\n          }\n        }\n        realLineHeight = lineHeight;\n        if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n          lineHeight /= this.lineHeight;\n        }\n        if (this.inCompositionMode) {\n          ctx.fillStyle = this.compositionColor || 'black';\n          ctx.fillRect(\n            boundaries.left + lineOffset + boxStart,\n            boundaries.top + boundaries.topOffset + lineHeight,\n            boxEnd - boxStart,\n            1);\n        }\n        else {\n          ctx.fillStyle = this.selectionColor;\n          ctx.fillRect(\n            boundaries.left + lineOffset + boxStart,\n            boundaries.top + boundaries.topOffset,\n            boxEnd - boxStart,\n            lineHeight);\n        }\n\n\n        boundaries.topOffset += realLineHeight;\n      }\n    },\n\n    /**\n     * High level function to know the height of the cursor.\n     * the currentChar is the one that precedes the cursor\n     * Returns fontSize of char at the current cursor\n     * @return {Number} Character font size\n     */\n    getCurrentCharFontSize: function() {\n      var cp = this._getCurrentCharIndex();\n      return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n    },\n\n    /**\n     * High level function to know the color of the cursor.\n     * the currentChar is the one that precedes the cursor\n     * Returns color (fill) of char at the current cursor\n     * @return {String} Character color (fill)\n     */\n    getCurrentCharColor: function() {\n      var cp = this._getCurrentCharIndex();\n      return this.getValueOfPropertyAt(cp.l, cp.c, 'fill');\n    },\n\n    /**\n     * Returns the cursor position for the getCurrent.. functions\n     * @private\n     */\n    _getCurrentCharIndex: function() {\n      var cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n          charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n      return { l: cursorPosition.lineIndex, c: charIndex };\n    }\n  });\n\n  /**\n   * Returns fabric.IText instance from an object representation\n   * @static\n   * @memberOf fabric.IText\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] invoked with new instance as argument\n   */\n  fabric.IText.fromObject = function(object, callback) {\n    parseDecoration(object);\n    if (object.styles) {\n      for (var i in object.styles) {\n        for (var j in object.styles[i]) {\n          parseDecoration(object.styles[i][j]);\n        }\n      }\n    }\n    fabric.Object._fromObject('IText', object, callback, 'text');\n  };\n})();\n\n\n(function() {\n\n  var clone = fabric.util.object.clone;\n\n  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n    /**\n     * Initializes all the interactive behavior of IText\n     */\n    initBehavior: function() {\n      this.initAddedHandler();\n      this.initRemovedHandler();\n      this.initCursorSelectionHandlers();\n      this.initDoubleClickSimulation();\n      this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\n    },\n\n    onDeselect: function() {\n      this.isEditing && this.exitEditing();\n      this.selected = false;\n    },\n\n    /**\n     * Initializes \"added\" event handler\n     */\n    initAddedHandler: function() {\n      var _this = this;\n      this.on('added', function() {\n        var canvas = _this.canvas;\n        if (canvas) {\n          if (!canvas._hasITextHandlers) {\n            canvas._hasITextHandlers = true;\n            _this._initCanvasHandlers(canvas);\n          }\n          canvas._iTextInstances = canvas._iTextInstances || [];\n          canvas._iTextInstances.push(_this);\n        }\n      });\n    },\n\n    initRemovedHandler: function() {\n      var _this = this;\n      this.on('removed', function() {\n        var canvas = _this.canvas;\n        if (canvas) {\n          canvas._iTextInstances = canvas._iTextInstances || [];\n          fabric.util.removeFromArray(canvas._iTextInstances, _this);\n          if (canvas._iTextInstances.length === 0) {\n            canvas._hasITextHandlers = false;\n            _this._removeCanvasHandlers(canvas);\n          }\n        }\n      });\n    },\n\n    /**\n     * register canvas event to manage exiting on other instances\n     * @private\n     */\n    _initCanvasHandlers: function(canvas) {\n      canvas._mouseUpITextHandler = function() {\n        if (canvas._iTextInstances) {\n          canvas._iTextInstances.forEach(function(obj) {\n            obj.__isMousedown = false;\n          });\n        }\n      };\n      canvas.on('mouse:up', canvas._mouseUpITextHandler);\n    },\n\n    /**\n     * remove canvas event to manage exiting on other instances\n     * @private\n     */\n    _removeCanvasHandlers: function(canvas) {\n      canvas.off('mouse:up', canvas._mouseUpITextHandler);\n    },\n\n    /**\n     * @private\n     */\n    _tick: function() {\n      this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');\n    },\n\n    /**\n     * @private\n     */\n    _animateCursor: function(obj, targetOpacity, duration, completeMethod) {\n\n      var tickState;\n\n      tickState = {\n        isAborted: false,\n        abort: function() {\n          this.isAborted = true;\n        },\n      };\n\n      obj.animate('_currentCursorOpacity', targetOpacity, {\n        duration: duration,\n        onComplete: function() {\n          if (!tickState.isAborted) {\n            obj[completeMethod]();\n          }\n        },\n        onChange: function() {\n          // we do not want to animate a selection, only cursor\n          if (obj.canvas && obj.selectionStart === obj.selectionEnd) {\n            obj.renderCursorOrSelection();\n          }\n        },\n        abort: function() {\n          return tickState.isAborted;\n        }\n      });\n      return tickState;\n    },\n\n    /**\n     * @private\n     */\n    _onTickComplete: function() {\n\n      var _this = this;\n\n      if (this._cursorTimeout1) {\n        clearTimeout(this._cursorTimeout1);\n      }\n      this._cursorTimeout1 = setTimeout(function() {\n        _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');\n      }, 100);\n    },\n\n    /**\n     * Initializes delayed cursor\n     */\n    initDelayedCursor: function(restart) {\n      var _this = this,\n          delay = restart ? 0 : this.cursorDelay;\n\n      this.abortCursorAnimation();\n      this._currentCursorOpacity = 1;\n      this._cursorTimeout2 = setTimeout(function() {\n        _this._tick();\n      }, delay);\n    },\n\n    /**\n     * Aborts cursor animation and clears all timeouts\n     */\n    abortCursorAnimation: function() {\n      var shouldClear = this._currentTickState || this._currentTickCompleteState,\n          canvas = this.canvas;\n      this._currentTickState && this._currentTickState.abort();\n      this._currentTickCompleteState && this._currentTickCompleteState.abort();\n\n      clearTimeout(this._cursorTimeout1);\n      clearTimeout(this._cursorTimeout2);\n\n      this._currentCursorOpacity = 0;\n      // to clear just itext area we need to transform the context\n      // it may not be worth it\n      if (shouldClear && canvas) {\n        canvas.clearContext(canvas.contextTop || canvas.contextContainer);\n      }\n\n    },\n\n    /**\n     * Selects entire text\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    selectAll: function() {\n      this.selectionStart = 0;\n      this.selectionEnd = this._text.length;\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      return this;\n    },\n\n    /**\n     * Returns selected text\n     * @return {String}\n     */\n    getSelectedText: function() {\n      return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n    },\n\n    /**\n     * Find new selection index representing start of current word according to current selection index\n     * @param {Number} startFrom Surrent selection index\n     * @return {Number} New selection index\n     */\n    findWordBoundaryLeft: function(startFrom) {\n      var offset = 0, index = startFrom - 1;\n\n      // remove space before cursor first\n      if (this._reSpace.test(this._text[index])) {\n        while (this._reSpace.test(this._text[index])) {\n          offset++;\n          index--;\n        }\n      }\n      while (/\\S/.test(this._text[index]) && index > -1) {\n        offset++;\n        index--;\n      }\n\n      return startFrom - offset;\n    },\n\n    /**\n     * Find new selection index representing end of current word according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findWordBoundaryRight: function(startFrom) {\n      var offset = 0, index = startFrom;\n\n      // remove space after cursor first\n      if (this._reSpace.test(this._text[index])) {\n        while (this._reSpace.test(this._text[index])) {\n          offset++;\n          index++;\n        }\n      }\n      while (/\\S/.test(this._text[index]) && index < this.text.length) {\n        offset++;\n        index++;\n      }\n\n      return startFrom + offset;\n    },\n\n    /**\n     * Find new selection index representing start of current line according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findLineBoundaryLeft: function(startFrom) {\n      var offset = 0, index = startFrom - 1;\n\n      while (!/\\n/.test(this._text[index]) && index > -1) {\n        offset++;\n        index--;\n      }\n\n      return startFrom - offset;\n    },\n\n    /**\n     * Find new selection index representing end of current line according to current selection index\n     * @param {Number} startFrom Current selection index\n     * @return {Number} New selection index\n     */\n    findLineBoundaryRight: function(startFrom) {\n      var offset = 0, index = startFrom;\n\n      while (!/\\n/.test(this._text[index]) && index < this.text.length) {\n        offset++;\n        index++;\n      }\n\n      return startFrom + offset;\n    },\n\n    /**\n     * Finds index corresponding to beginning or end of a word\n     * @param {Number} selectionStart Index of a character\n     * @param {Number} direction 1 or -1\n     * @return {Number} Index of the beginning or end of a word\n     */\n    searchWordBoundary: function(selectionStart, direction) {\n      var index     = this._reSpace.test(this.text.charAt(selectionStart)) ? selectionStart - 1 : selectionStart,\n          _char     = this.text.charAt(index),\n          reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\n      while (!reNonWord.test(_char) && index > 0 && index < this.text.length) {\n        index += direction;\n        _char = this.text.charAt(index);\n      }\n      if (reNonWord.test(_char) && _char !== '\\n') {\n        index += direction === 1 ? 0 : 1;\n      }\n      return index;\n    },\n\n    /**\n     * Selects a word based on the index\n     * @param {Number} selectionStart Index of a character\n     */\n    selectWord: function(selectionStart) {\n      selectionStart = selectionStart || this.selectionStart;\n      var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */\n          newSelectionEnd = this.searchWordBoundary(selectionStart, 1); /* search forward */\n\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = newSelectionEnd;\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    },\n\n    /**\n     * Selects a line based on the index\n     * @param {Number} selectionStart Index of a character\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    selectLine: function(selectionStart) {\n      selectionStart = selectionStart || this.selectionStart;\n      var newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n          newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = newSelectionEnd;\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      return this;\n    },\n\n    /**\n     * Enters editing state\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    enterEditing: function(e) {\n      if (this.isEditing || !this.editable) {\n        return;\n      }\n\n      if (this.canvas) {\n        this.canvas.calcOffset();\n        this.exitEditingOnOthers(this.canvas);\n      }\n\n      this.isEditing = true;\n\n      this.initHiddenTextarea(e);\n      this.hiddenTextarea.focus();\n      this.hiddenTextarea.value = this.text;\n      this._updateTextarea();\n      this._saveEditingProps();\n      this._setEditingProps();\n      this._textBeforeEdit = this.text;\n\n      this._tick();\n      this.fire('editing:entered');\n      this._fireSelectionChanged();\n      if (!this.canvas) {\n        return this;\n      }\n      this.canvas.fire('text:editing:entered', { target: this });\n      this.initMouseMoveHandler();\n      this.canvas.requestRenderAll();\n      return this;\n    },\n\n    exitEditingOnOthers: function(canvas) {\n      if (canvas._iTextInstances) {\n        canvas._iTextInstances.forEach(function(obj) {\n          obj.selected = false;\n          if (obj.isEditing) {\n            obj.exitEditing();\n          }\n        });\n      }\n    },\n\n    /**\n     * Initializes \"mousemove\" event handler\n     */\n    initMouseMoveHandler: function() {\n      this.canvas.on('mouse:move', this.mouseMoveHandler);\n    },\n\n    /**\n     * @private\n     */\n    mouseMoveHandler: function(options) {\n      if (!this.__isMousedown || !this.isEditing) {\n        return;\n      }\n\n      var newSelectionStart = this.getSelectionStartFromPointer(options.e),\n          currentStart = this.selectionStart,\n          currentEnd = this.selectionEnd;\n      if (\n        (newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd)\n        &&\n        (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n      ) {\n        return;\n      }\n      if (newSelectionStart > this.__selectionStartOnMouseDown) {\n        this.selectionStart = this.__selectionStartOnMouseDown;\n        this.selectionEnd = newSelectionStart;\n      }\n      else {\n        this.selectionStart = newSelectionStart;\n        this.selectionEnd = this.__selectionStartOnMouseDown;\n      }\n      if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {\n        this.restartCursorIfNeeded();\n        this._fireSelectionChanged();\n        this._updateTextarea();\n        this.renderCursorOrSelection();\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setEditingProps: function() {\n      this.hoverCursor = 'text';\n\n      if (this.canvas) {\n        this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n      }\n\n      this.borderColor = this.editingBorderColor;\n\n      this.hasControls = this.selectable = false;\n      this.lockMovementX = this.lockMovementY = true;\n    },\n\n    /**\n     * convert from textarea to grapheme indexes\n     */\n    fromStringToGraphemeSelection: function(start, end, text) {\n      var smallerTextStart = text.slice(0, start),\n          graphemeStart = fabric.util.string.graphemeSplit(smallerTextStart).length;\n      if (start === end) {\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n      }\n      var smallerTextEnd = text.slice(start, end),\n          graphemeEnd = fabric.util.string.graphemeSplit(smallerTextEnd).length;\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\n    },\n\n    /**\n     * convert from fabric to textarea values\n     */\n    fromGraphemeToStringSelection: function(start, end, _text) {\n      var smallerTextStart = _text.slice(0, start),\n          graphemeStart = smallerTextStart.join('').length;\n      if (start === end) {\n        return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n      }\n      var smallerTextEnd = _text.slice(start, end),\n          graphemeEnd = smallerTextEnd.join('').length;\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };\n    },\n\n    /**\n     * @private\n     */\n    _updateTextarea: function() {\n      this.cursorOffsetCache = { };\n      if (!this.hiddenTextarea) {\n        return;\n      }\n      if (!this.inCompositionMode) {\n        var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);\n        this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n        this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n      }\n      this.updateTextareaPosition();\n    },\n\n    /**\n     * @private\n     */\n    updateFromTextArea: function() {\n      if (!this.hiddenTextarea) {\n        return;\n      }\n      this.cursorOffsetCache = { };\n      this.text = this.hiddenTextarea.value;\n      if (this._shouldClearDimensionCache()) {\n        this.initDimensions();\n        this.setCoords();\n      }\n      var newSelection = this.fromStringToGraphemeSelection(\n        this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);\n      this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n      if (!this.inCompositionMode) {\n        this.selectionStart = newSelection.selectionStart;\n      }\n      this.updateTextareaPosition();\n    },\n\n    /**\n     * @private\n     */\n    updateTextareaPosition: function() {\n      if (this.selectionStart === this.selectionEnd) {\n        var style = this._calcTextareaPosition();\n        this.hiddenTextarea.style.left = style.left;\n        this.hiddenTextarea.style.top = style.top;\n      }\n    },\n\n    /**\n     * @private\n     * @return {Object} style contains style for hiddenTextarea\n     */\n    _calcTextareaPosition: function() {\n      if (!this.canvas) {\n        return { x: 1, y: 1 };\n      }\n      var desiredPostion = this.inCompositionMode ? this.compositionStart : this.selectionStart,\n          boundaries = this._getCursorBoundaries(desiredPostion),\n          cursorLocation = this.get2DCursorLocation(desiredPostion),\n          lineIndex = cursorLocation.lineIndex,\n          charIndex = cursorLocation.charIndex,\n          charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') * this.lineHeight,\n          leftOffset = boundaries.leftOffset,\n          m = this.calcTransformMatrix(),\n          p = {\n            x: boundaries.left + leftOffset,\n            y: boundaries.top + boundaries.topOffset + charHeight\n          },\n          upperCanvas = this.canvas.upperCanvasEl,\n          upperCanvasWidth = upperCanvas.width,\n          upperCanvasHeight = upperCanvas.height,\n          maxWidth = upperCanvasWidth - charHeight,\n          maxHeight = upperCanvasHeight - charHeight,\n          scaleX = upperCanvas.clientWidth / upperCanvasWidth,\n          scaleY = upperCanvas.clientHeight / upperCanvasHeight;\n\n      p = fabric.util.transformPoint(p, m);\n      p = fabric.util.transformPoint(p, this.canvas.viewportTransform);\n      p.x *= scaleX;\n      p.y *= scaleY;\n      if (p.x < 0) {\n        p.x = 0;\n      }\n      if (p.x > maxWidth) {\n        p.x = maxWidth;\n      }\n      if (p.y < 0) {\n        p.y = 0;\n      }\n      if (p.y > maxHeight) {\n        p.y = maxHeight;\n      }\n\n      // add canvas offset on document\n      p.x += this.canvas._offset.left;\n      p.y += this.canvas._offset.top;\n\n      return { left: p.x + 'px', top: p.y + 'px', fontSize: charHeight + 'px', charHeight: charHeight };\n    },\n\n    /**\n     * @private\n     */\n    _saveEditingProps: function() {\n      this._savedProps = {\n        hasControls: this.hasControls,\n        borderColor: this.borderColor,\n        lockMovementX: this.lockMovementX,\n        lockMovementY: this.lockMovementY,\n        hoverCursor: this.hoverCursor,\n        defaultCursor: this.canvas && this.canvas.defaultCursor,\n        moveCursor: this.canvas && this.canvas.moveCursor\n      };\n    },\n\n    /**\n     * @private\n     */\n    _restoreEditingProps: function() {\n      if (!this._savedProps) {\n        return;\n      }\n\n      this.hoverCursor = this._savedProps.hoverCursor;\n      this.hasControls = this._savedProps.hasControls;\n      this.borderColor = this._savedProps.borderColor;\n      this.lockMovementX = this._savedProps.lockMovementX;\n      this.lockMovementY = this._savedProps.lockMovementY;\n\n      if (this.canvas) {\n        this.canvas.defaultCursor = this._savedProps.defaultCursor;\n        this.canvas.moveCursor = this._savedProps.moveCursor;\n      }\n    },\n\n    /**\n     * Exits from editing state\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    exitEditing: function() {\n      var isTextChanged = (this._textBeforeEdit !== this.text);\n      this.selected = false;\n      this.isEditing = false;\n      this.selectable = true;\n\n      this.selectionEnd = this.selectionStart;\n\n      if (this.hiddenTextarea) {\n        this.hiddenTextarea.blur && this.hiddenTextarea.blur();\n        this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);\n        this.hiddenTextarea = null;\n      }\n\n      this.abortCursorAnimation();\n      this._restoreEditingProps();\n      this._currentCursorOpacity = 0;\n      if (this._shouldClearDimensionCache()) {\n        this.initDimensions();\n        this.setCoords();\n      }\n      this.fire('editing:exited');\n      isTextChanged && this.fire('modified');\n      if (this.canvas) {\n        this.canvas.off('mouse:move', this.mouseMoveHandler);\n        this.canvas.fire('text:editing:exited', { target: this });\n        isTextChanged && this.canvas.fire('object:modified', { target: this });\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _removeExtraneousStyles: function() {\n      for (var prop in this.styles) {\n        if (!this._textLines[prop]) {\n          delete this.styles[prop];\n        }\n      }\n    },\n\n    /**\n     * remove and reflow a style block from start to end.\n     * @param {Number} start linear start position for removal (included in removal)\n     * @param {Number} end linear end position for removal ( excluded from removal )\n     */\n    removeStyleFromTo: function(start, end) {\n      var cursorStart = this.get2DCursorLocation(start, true),\n          cursorEnd = this.get2DCursorLocation(end, true),\n          lineStart = cursorStart.lineIndex,\n          charStart = cursorStart.charIndex,\n          lineEnd = cursorEnd.lineIndex,\n          charEnd = cursorEnd.charIndex,\n          i, styleObj;\n      if (lineStart !== lineEnd) {\n        // step1 remove the trailing of lineStart\n        if (this.styles[lineStart]) {\n          for (i = charStart; i < this._unwrappedTextLines[lineStart].length; i++) {\n            delete this.styles[lineStart][i];\n          }\n        }\n        // step2 move the trailing of lineEnd to lineStart if needed\n        if (this.styles[lineEnd]) {\n          for (i = charEnd; i < this._unwrappedTextLines[lineEnd].length; i++) {\n            styleObj = this.styles[lineEnd][i];\n            if (styleObj) {\n              this.styles[lineStart] || (this.styles[lineStart] = { });\n              this.styles[lineStart][charStart + i - charEnd] = styleObj;\n            }\n          }\n        }\n        // step3 detects lines will be completely removed.\n        for (i = lineStart + 1; i <= lineEnd; i++) {\n          delete this.styles[i];\n        }\n        // step4 shift remaining lines.\n        this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n      }\n      else {\n        // remove and shift left on the same line\n        if (this.styles[lineStart]) {\n          styleObj = this.styles[lineStart];\n          var diff = charEnd - charStart, numericChar, _char;\n          for (i = charStart; i < charEnd; i++) {\n            delete styleObj[i];\n          }\n          for (_char in this.styles[lineStart]) {\n            numericChar = parseInt(_char, 10);\n            if (numericChar >= charEnd) {\n              styleObj[numericChar - diff] = styleObj[_char];\n              delete styleObj[_char];\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Shifts line styles up or down\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} offset Can any number?\n     */\n    shiftLineStyles: function(lineIndex, offset) {\n      // shift all line styles by offset upward or downward\n      // do not clone deep. we need new array, not new style objects\n      var clonedStyles = clone(this.styles);\n      for (var line in this.styles) {\n        var numericLine = parseInt(line, 10);\n        if (numericLine > lineIndex) {\n          this.styles[numericLine + offset] = clonedStyles[numericLine];\n          if (!clonedStyles[numericLine - offset]) {\n            delete this.styles[numericLine];\n          }\n        }\n      }\n    },\n\n    restartCursorIfNeeded: function() {\n      if (!this._currentTickState || this._currentTickState.isAborted\n        || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted\n      ) {\n        this.initDelayedCursor();\n      }\n    },\n\n    /**\n     * Inserts new style object\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Number} qty number of lines to add\n     * @param {Array} copiedStyle Array of objects styles\n     */\n    insertNewlineStyleObject: function(lineIndex, charIndex, qty, copiedStyle) {\n      var currentCharStyle,\n          newLineStyles = {},\n          somethingAdded = false;\n\n      qty || (qty = 1);\n      this.shiftLineStyles(lineIndex, qty);\n      if (this.styles[lineIndex]) {\n        currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];\n      }\n\n      // we clone styles of all chars\n      // after cursor onto the current line\n      for (var index in this.styles[lineIndex]) {\n        var numIndex = parseInt(index, 10);\n        if (numIndex >= charIndex) {\n          somethingAdded = true;\n          newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n          // remove lines from the previous line since they're on a new line now\n          delete this.styles[lineIndex][index];\n        }\n      }\n      if (somethingAdded) {\n        this.styles[lineIndex + qty] = newLineStyles;\n      }\n      else {\n        delete this.styles[lineIndex + qty];\n      }\n      // for the other lines\n      // we clone current char style onto the next (otherwise empty) line\n      while (qty > 1) {\n        qty--;\n        if (copiedStyle && copiedStyle[qty]) {\n          this.styles[lineIndex + qty] = { 0: clone(copiedStyle[qty]) };\n        }\n        else if (currentCharStyle) {\n          this.styles[lineIndex + qty] = { 0: clone(currentCharStyle) };\n        }\n        else {\n          delete this.styles[lineIndex + qty];\n        }\n      }\n      this._forceClearCache = true;\n    },\n\n    /**\n     * Inserts style object for a given line/char index\n     * @param {Number} lineIndex Index of a line\n     * @param {Number} charIndex Index of a char\n     * @param {Number} quantity number Style object to insert, if given\n     * @param {Array} copiedStyle array of style objecs\n     */\n    insertCharStyleObject: function(lineIndex, charIndex, quantity, copiedStyle) {\n      if (!this.styles) {\n        this.styles = {};\n      }\n      var currentLineStyles       = this.styles[lineIndex],\n          currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};\n\n      quantity || (quantity = 1);\n      // shift all char styles by quantity forward\n      // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n      for (var index in currentLineStylesCloned) {\n        var numericIndex = parseInt(index, 10);\n        if (numericIndex >= charIndex) {\n          currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];\n          // only delete the style if there was nothing moved there\n          if (!currentLineStylesCloned[numericIndex - quantity]) {\n            delete currentLineStyles[numericIndex];\n          }\n        }\n      }\n      this._forceClearCache = true;\n      if (copiedStyle) {\n        while (quantity--) {\n          if (!Object.keys(copiedStyle[quantity]).length) {\n            continue;\n          }\n          if (!this.styles[lineIndex]) {\n            this.styles[lineIndex] = {};\n          }\n          this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);\n        }\n        return;\n      }\n      if (!currentLineStyles) {\n        return;\n      }\n      var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n      while (newStyle && quantity--) {\n        this.styles[lineIndex][charIndex + quantity] = clone(newStyle);\n      }\n    },\n\n    /**\n     * Inserts style object(s)\n     * @param {Array} insertedText Characters at the location where style is inserted\n     * @param {Number} start cursor index for inserting style\n     * @param {Array} [copiedStyle] array of style objects to insert.\n     */\n    insertNewStyleBlock: function(insertedText, start, copiedStyle) {\n      var cursorLoc = this.get2DCursorLocation(start, true),\n          addedLines = [0], linesLenght = 0;\n      for (var i = 0; i < insertedText.length; i++) {\n        if (insertedText[i] === '\\n') {\n          linesLenght++;\n          addedLines[linesLenght] = 0;\n        }\n        else {\n          addedLines[linesLenght]++;\n        }\n      }\n      if (addedLines[0] > 0) {\n        this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);\n        copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n      }\n      linesLenght && this.insertNewlineStyleObject(\n        cursorLoc.lineIndex, cursorLoc.charIndex + addedLines[0], linesLenght);\n      for (var i = 1; i < linesLenght; i++) {\n        if (addedLines[i] > 0) {\n          this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\n        }\n        else if (copiedStyle) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n        copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n      }\n      // we use i outside the loop to get it like linesLength\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);\n      }\n    },\n\n    /**\n     * Set the selectionStart and selectionEnd according to the ne postion of cursor\n     * mimic the key - mouse navigation when shift is pressed.\n     */\n    setSelectionStartEndWithShift: function(start, end, newSelection) {\n      if (newSelection <= start) {\n        if (end === start) {\n          this._selectionDirection = 'left';\n        }\n        else if (this._selectionDirection === 'right') {\n          this._selectionDirection = 'left';\n          this.selectionEnd = start;\n        }\n        this.selectionStart = newSelection;\n      }\n      else if (newSelection > start && newSelection < end) {\n        if (this._selectionDirection === 'right') {\n          this.selectionEnd = newSelection;\n        }\n        else {\n          this.selectionStart = newSelection;\n        }\n      }\n      else {\n        // newSelection is > selection start and end\n        if (end === start) {\n          this._selectionDirection = 'right';\n        }\n        else if (this._selectionDirection === 'left') {\n          this._selectionDirection = 'right';\n          this.selectionStart = end;\n        }\n        this.selectionEnd = newSelection;\n      }\n    },\n\n    setSelectionInBoundaries: function() {\n      var length = this.text.length;\n      if (this.selectionStart > length) {\n        this.selectionStart = length;\n      }\n      else if (this.selectionStart < 0) {\n        this.selectionStart = 0;\n      }\n      if (this.selectionEnd > length) {\n        this.selectionEnd = length;\n      }\n      else if (this.selectionEnd < 0) {\n        this.selectionEnd = 0;\n      }\n    }\n  });\n})();\n\n\nfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n  /**\n   * Initializes \"dbclick\" event handler\n   */\n  initDoubleClickSimulation: function() {\n\n    // for double click\n    this.__lastClickTime = +new Date();\n\n    // for triple click\n    this.__lastLastClickTime = +new Date();\n\n    this.__lastPointer = { };\n\n    this.on('mousedown', this.onMouseDown);\n  },\n\n  /**\n   * Default event handler to simulate triple click\n   * @private\n   */\n  onMouseDown: function(options) {\n    if (!this.canvas) {\n      return;\n    }\n    this.__newClickTime = +new Date();\n    var newPointer = options.pointer;\n    if (this.isTripleClick(newPointer)) {\n      this.fire('tripleclick', options);\n      this._stopEvent(options.e);\n    }\n    this.__lastLastClickTime = this.__lastClickTime;\n    this.__lastClickTime = this.__newClickTime;\n    this.__lastPointer = newPointer;\n    this.__lastIsEditing = this.isEditing;\n    this.__lastSelected = this.selected;\n  },\n\n  isTripleClick: function(newPointer) {\n    return this.__newClickTime - this.__lastClickTime < 500 &&\n        this.__lastClickTime - this.__lastLastClickTime < 500 &&\n        this.__lastPointer.x === newPointer.x &&\n        this.__lastPointer.y === newPointer.y;\n  },\n\n  /**\n   * @private\n   */\n  _stopEvent: function(e) {\n    e.preventDefault && e.preventDefault();\n    e.stopPropagation && e.stopPropagation();\n  },\n\n  /**\n   * Initializes event handlers related to cursor or selection\n   */\n  initCursorSelectionHandlers: function() {\n    this.initMousedownHandler();\n    this.initMouseupHandler();\n    this.initClicks();\n  },\n\n  /**\n   * Initializes double and triple click event handlers\n   */\n  initClicks: function() {\n    this.on('mousedblclick', function(options) {\n      this.selectWord(this.getSelectionStartFromPointer(options.e));\n    });\n    this.on('tripleclick', function(options) {\n      this.selectLine(this.getSelectionStartFromPointer(options.e));\n    });\n  },\n\n  /**\n   * Default event handler for the basic functionalities needed on _mouseDown\n   * can be overridden to do something different.\n   * Scope of this implementation is: find the click position, set selectionStart\n   * find selectionEnd, initialize the drawing of either cursor or selection area\n   */\n  _mouseDownHandler: function(options) {\n    if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\n      return;\n    }\n\n    this.__isMousedown = true;\n\n    if (this.selected) {\n      this.setCursorByClick(options.e);\n    }\n\n    if (this.isEditing) {\n      this.__selectionStartOnMouseDown = this.selectionStart;\n      if (this.selectionStart === this.selectionEnd) {\n        this.abortCursorAnimation();\n      }\n      this.renderCursorOrSelection();\n    }\n  },\n\n  /**\n   * Default event handler for the basic functionalities needed on mousedown:before\n   * can be overridden to do something different.\n   * Scope of this implementation is: verify the object is already selected when mousing down\n   */\n  _mouseDownHandlerBefore: function(options) {\n    if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {\n      return;\n    }\n    if (this === this.canvas._activeObject) {\n      this.selected = true;\n    }\n  },\n\n  /**\n   * Initializes \"mousedown\" event handler\n   */\n  initMousedownHandler: function() {\n    this.on('mousedown', this._mouseDownHandler);\n    this.on('mousedown:before', this._mouseDownHandlerBefore);\n  },\n\n  /**\n   * Initializes \"mouseup\" event handler\n   */\n  initMouseupHandler: function() {\n    this.on('mouseup', this.mouseUpHandler);\n  },\n\n  /**\n   * standard hander for mouse up, overridable\n   * @private\n   */\n  mouseUpHandler: function(options) {\n    this.__isMousedown = false;\n    if (!this.editable || this.group ||\n      (options.transform && options.transform.actionPerformed) ||\n      (options.e.button && options.e.button !== 1)) {\n      return;\n    }\n\n    if (this.canvas) {\n      var currentActive = this.canvas._activeObject;\n      if (currentActive && currentActive !== this) {\n        // avoid running this logic when there is an active object\n        // this because is possible with shift click and fast clicks,\n        // to rapidly deselect and reselect this object and trigger an enterEdit\n        return;\n      }\n    }\n\n    if (this.__lastSelected && !this.__corner) {\n      this.selected = false;\n      this.__lastSelected = false;\n      this.enterEditing(options.e);\n      if (this.selectionStart === this.selectionEnd) {\n        this.initDelayedCursor(true);\n      }\n      else {\n        this.renderCursorOrSelection();\n      }\n    }\n    else {\n      this.selected = true;\n    }\n  },\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {Event} e Event object\n   */\n  setCursorByClick: function(e) {\n    var newSelection = this.getSelectionStartFromPointer(e),\n        start = this.selectionStart, end = this.selectionEnd;\n    if (e.shiftKey) {\n      this.setSelectionStartEndWithShift(start, end, newSelection);\n    }\n    else {\n      this.selectionStart = newSelection;\n      this.selectionEnd = newSelection;\n    }\n    if (this.isEditing) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  },\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {Event} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer: function(e) {\n    var mouseOffset = this.getLocalPointer(e),\n        prevWidth = 0,\n        width = 0,\n        height = 0,\n        charIndex = 0,\n        lineIndex = 0,\n        lineLeftOffset,\n        line;\n\n    for (var i = 0, len = this._textLines.length; i < len; i++) {\n      if (height <= mouseOffset.y) {\n        height += this.getHeightOfLine(i) * this.scaleY;\n        lineIndex = i;\n        if (i > 0) {\n          charIndex += this._textLines[i - 1].length + 1;\n        }\n      }\n      else {\n        break;\n      }\n    }\n    lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    width = lineLeftOffset * this.scaleX;\n    line = this._textLines[lineIndex];\n    for (var j = 0, jlen = line.length; j < jlen; j++) {\n      prevWidth = width;\n      // i removed something about flipX here, check.\n      width += this.__charBounds[lineIndex][j].kernedWidth * this.scaleX;\n      if (width <= mouseOffset.x) {\n        charIndex++;\n      }\n      else {\n        break;\n      }\n    }\n    return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, charIndex, jlen);\n  },\n\n  /**\n   * @private\n   */\n  _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {\n    // we need Math.abs because when width is after the last char, the offset is given as 1, while is 0\n    var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,\n        distanceBtwNextCharAndCursor = width - mouseOffset.x,\n        offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ||\n          distanceBtwNextCharAndCursor < 0 ? 0 : 1,\n        newSelectionStart = index + offset;\n    // if object is horizontally flipped, mirror cursor location from the end\n    if (this.flipX) {\n      newSelectionStart = jlen - newSelectionStart;\n    }\n\n    if (newSelectionStart > this._text.length) {\n      newSelectionStart = this._text.length;\n    }\n\n    return newSelectionStart;\n  }\n});\n\n\nfabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea: function() {\n    this.hiddenTextarea = fabric.document.createElement('textarea');\n    this.hiddenTextarea.setAttribute('autocapitalize', 'off');\n    this.hiddenTextarea.setAttribute('autocorrect', 'off');\n    this.hiddenTextarea.setAttribute('autocomplete', 'off');\n    this.hiddenTextarea.setAttribute('spellcheck', 'false');\n    this.hiddenTextarea.setAttribute('data-fabric-hiddentextarea', '');\n    this.hiddenTextarea.setAttribute('wrap', 'off');\n    var style = this._calcTextareaPosition();\n    // line-height: 1px; was removed from the style to fix this:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n    this.hiddenTextarea.style.cssText = 'position: absolute; top: ' + style.top +\n    '; left: ' + style.left + '; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px;' +\n    ' paddingｰtop: ' + style.fontSize + ';';\n    fabric.document.body.appendChild(this.hiddenTextarea);\n\n    fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'keyup', this.onKeyUp.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'cut', this.copy.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'compositionstart', this.onCompositionStart.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'compositionupdate', this.onCompositionUpdate.bind(this));\n    fabric.util.addListener(this.hiddenTextarea, 'compositionend', this.onCompositionEnd.bind(this));\n\n    if (!this._clickHandlerInitialized && this.canvas) {\n      fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));\n      this._clickHandlerInitialized = true;\n    }\n  },\n\n  /**\n   * For functionalities on keyDown\n   * Map a special key to a function of the instance/prototype\n   * If you need different behaviour for ESC or TAB or arrows, you have to change\n   * this map setting the name of a function that you build on the fabric.Itext or\n   * your prototype.\n   * the map change will affect all Instances unless you need for only some text Instances\n   * in that case you have to clone this object and assign your Instance.\n   * this.keysMap = fabric.util.object.clone(this.keysMap);\n   * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]\n   */\n  keysMap: {\n    9:  'exitEditing',\n    27: 'exitEditing',\n    33: 'moveCursorUp',\n    34: 'moveCursorDown',\n    35: 'moveCursorRight',\n    36: 'moveCursorLeft',\n    37: 'moveCursorLeft',\n    38: 'moveCursorUp',\n    39: 'moveCursorRight',\n    40: 'moveCursorDown',\n  },\n\n  /**\n   * For functionalities on keyUp + ctrl || cmd\n   */\n  ctrlKeysMapUp: {\n    67: 'copy',\n    88: 'cut'\n  },\n\n  /**\n   * For functionalities on keyDown + ctrl || cmd\n   */\n  ctrlKeysMapDown: {\n    65: 'selectAll'\n  },\n\n  onClick: function() {\n    // No need to trigger click event here, focus is enough to have the keyboard appear on Android\n    this.hiddenTextarea && this.hiddenTextarea.focus();\n  },\n\n  /**\n   * Handles keyup event\n   * @param {Event} e Event object\n   */\n  onKeyDown: function(e) {\n    if (!this.isEditing || this.inCompositionMode) {\n      return;\n    }\n    if (e.keyCode in this.keysMap) {\n      this[this.keysMap[e.keyCode]](e);\n    }\n    else if ((e.keyCode in this.ctrlKeysMapDown) && (e.ctrlKey || e.metaKey)) {\n      this[this.ctrlKeysMapDown[e.keyCode]](e);\n    }\n    else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    if (e.keyCode >= 33 && e.keyCode <= 40) {\n      // if i press an arrow key just update selection\n      this.clearContextTop();\n      this.renderCursorOrSelection();\n    }\n    else {\n      this.canvas && this.canvas.requestRenderAll();\n    }\n  },\n\n  /**\n   * Handles keyup event\n   * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n   * if a copy/cut event fired, keyup is dismissed\n   * @param {Event} e Event object\n   */\n  onKeyUp: function(e) {\n    if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n      this._copyDone = false;\n      return;\n    }\n    if ((e.keyCode in this.ctrlKeysMapUp) && (e.ctrlKey || e.metaKey)) {\n      this[this.ctrlKeysMapUp[e.keyCode]](e);\n    }\n    else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.requestRenderAll();\n  },\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput: function(e) {\n    var fromPaste = this.fromPaste;\n    this.fromPaste = false;\n    e && e.stopPropagation();\n    if (!this.isEditing) {\n      return;\n    }\n    // decisions about style changes.\n    var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,\n        charCount = this._text.length,\n        nextCharCount = nextText.length,\n        removedText, insertedText,\n        charDiff = nextCharCount - charCount;\n    if (this.hiddenTextarea.value === '') {\n      this.styles = { };\n      this.updateFromTextArea();\n      this.fire('changed');\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this });\n        this.canvas.requestRenderAll();\n      }\n      return;\n    }\n\n    var textareaSelection = this.fromStringToGraphemeSelection(\n      this.hiddenTextarea.selectionStart,\n      this.hiddenTextarea.selectionEnd,\n      this.hiddenTextarea.value\n    );\n    var backDelete = this.selectionStart > textareaSelection.selectionStart;\n\n    if (this.selectionStart !== this.selectionEnd) {\n      removedText = this._text.slice(this.selectionStart, this.selectionEnd);\n      charDiff += this.selectionEnd - this.selectionStart;\n    }\n    else if (nextCharCount < charCount) {\n      if (backDelete) {\n        removedText = this._text.slice(this.selectionEnd + charDiff, this.selectionEnd);\n      }\n      else {\n        removedText = this._text.slice(this.selectionStart, this.selectionStart - charDiff);\n      }\n    }\n    insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);\n    if (removedText && removedText.length) {\n      if (this.selectionStart !== this.selectionEnd) {\n        this.removeStyleFromTo(this.selectionStart, this.selectionEnd);\n      }\n      else if (backDelete) {\n        // detect differencies between forwardDelete and backDelete\n        this.removeStyleFromTo(this.selectionEnd - removedText.length, this.selectionEnd);\n      }\n      else {\n        this.removeStyleFromTo(this.selectionEnd, this.selectionEnd + removedText.length);\n      }\n    }\n    if (insertedText.length) {\n      if (fromPaste && insertedText.join('') === fabric.copiedText) {\n        this.insertNewStyleBlock(insertedText, this.selectionStart, fabric.copiedTextStyle);\n      }\n      else {\n        this.insertNewStyleBlock(insertedText, this.selectionStart);\n      }\n    }\n    this.updateFromTextArea();\n    this.fire('changed');\n    if (this.canvas) {\n      this.canvas.fire('text:changed', { target: this });\n      this.canvas.requestRenderAll();\n    }\n  },\n  /**\n   * Composition start\n   */\n  onCompositionStart: function() {\n    this.inCompositionMode = true;\n  },\n\n  /**\n   * Composition end\n   */\n  onCompositionEnd: function() {\n    this.inCompositionMode = false;\n  },\n\n  // /**\n  //  * Composition update\n  //  */\n  onCompositionUpdate: function(e) {\n    this.compositionStart = e.target.selectionStart;\n    this.compositionEnd = e.target.selectionEnd;\n    this.updateTextareaPosition();\n  },\n\n  /**\n   * Copies selected text\n   * @param {Event} e Event object\n   */\n  copy: function() {\n    if (this.selectionStart === this.selectionEnd) {\n      //do not cut-copy if no selection\n      return;\n    }\n\n    fabric.copiedText = this.getSelectedText();\n    fabric.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);\n    this._copyDone = true;\n  },\n\n  /**\n   * Pastes text\n   * @param {Event} e Event object\n   */\n  paste: function() {\n    this.fromPaste = true;\n  },\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @return {Object} Clipboard data object\n   */\n  _getClipboardData: function(e) {\n    return (e && e.clipboardData) || fabric.window.clipboardData;\n  },\n\n  /**\n   * Finds the width in pixels before the cursor on the same line\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {Number} widthBeforeCursor width before cursor\n   */\n  _getWidthBeforeCursor: function(lineIndex, charIndex) {\n    var widthBeforeCursor = this._getLineLeftOffset(lineIndex), bound;\n\n    if (charIndex > 0) {\n      bound = this.__charBounds[lineIndex][charIndex - 1];\n      widthBeforeCursor += bound.left + bound.width;\n    }\n    return widthBeforeCursor;\n  },\n\n  /**\n   * Gets start offset of a selection\n   * @param {Event} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset: function(e, isRight) {\n    var selectionProp = this._getSelectionForOffset(e, isRight),\n        cursorLocation = this.get2DCursorLocation(selectionProp),\n        lineIndex = cursorLocation.lineIndex;\n    // if on last line, down cursor goes to end of line\n    if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {\n      // move to the end of a text\n      return this._text.length - selectionProp;\n    }\n    var charIndex = cursorLocation.charIndex,\n        widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n        indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n        textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n    return textAfterCursor.length + indexOnOtherLine + 2;\n  },\n\n  /**\n   * private\n   * Helps finding if the offset should be counted from Start or End\n   * @param {Event} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  _getSelectionForOffset: function(e, isRight) {\n    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n      return this.selectionEnd;\n    }\n    else {\n      return this.selectionStart;\n    }\n  },\n\n  /**\n   * @param {Event} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset: function(e, isRight) {\n    var selectionProp = this._getSelectionForOffset(e, isRight),\n        cursorLocation = this.get2DCursorLocation(selectionProp),\n        lineIndex = cursorLocation.lineIndex;\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      // if on first line, up cursor goes to start of line\n      return -selectionProp;\n    }\n    var charIndex = cursorLocation.charIndex,\n        widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n        indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n        textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex);\n    // return a negative offset\n    return -this._textLines[lineIndex - 1].length + indexOnOtherLine - textBeforeCursor.length;\n  },\n\n  /**\n   * for a given width it founds the matching character.\n   * @private\n   */\n  _getIndexOnLine: function(lineIndex, width) {\n\n    var line = this._textLines[lineIndex],\n        lineLeftOffset = this._getLineLeftOffset(lineIndex),\n        widthOfCharsOnLine = lineLeftOffset,\n        indexOnLine = 0, charWidth, foundMatch;\n\n    for (var j = 0, jlen = line.length; j < jlen; j++) {\n      charWidth = this.__charBounds[lineIndex][j].width;\n      widthOfCharsOnLine += charWidth;\n      if (widthOfCharsOnLine > width) {\n        foundMatch = true;\n        var leftEdge = widthOfCharsOnLine - charWidth,\n            rightEdge = widthOfCharsOnLine,\n            offsetFromLeftEdge = Math.abs(leftEdge - width),\n            offsetFromRightEdge = Math.abs(rightEdge - width);\n\n        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnLine = line.length - 1;\n    }\n\n    return indexOnLine;\n  },\n\n\n  /**\n   * Moves cursor down\n   * @param {Event} e Event object\n   */\n  moveCursorDown: function(e) {\n    if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\n      return;\n    }\n    this._moveCursorUpOrDown('Down', e);\n  },\n\n  /**\n   * Moves cursor up\n   * @param {Event} e Event object\n   */\n  moveCursorUp: function(e) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorUpOrDown('Up', e);\n  },\n\n  /**\n   * Moves cursor up or down, fires the events\n   * @param {String} direction 'Up' or 'Down'\n   * @param {Event} e Event object\n   */\n  _moveCursorUpOrDown: function(direction, e) {\n    // getUpCursorOffset\n    // getDownCursorOffset\n    var action = 'get' + direction + 'CursorOffset',\n        offset = this[action](e, this._selectionDirection === 'right');\n    if (e.shiftKey) {\n      this.moveCursorWithShift(offset);\n    }\n    else {\n      this.moveCursorWithoutShift(offset);\n    }\n    if (offset !== 0) {\n      this.setSelectionInBoundaries();\n      this.abortCursorAnimation();\n      this._currentCursorOpacity = 1;\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  },\n\n  /**\n   * Moves cursor with shift\n   * @param {Number} offset\n   */\n  moveCursorWithShift: function(offset) {\n    var newSelection = this._selectionDirection === 'left'\n      ? this.selectionStart + offset\n      : this.selectionEnd + offset;\n    this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);\n    return offset !== 0;\n  },\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorWithoutShift: function(offset) {\n    if (offset < 0) {\n      this.selectionStart += offset;\n      this.selectionEnd = this.selectionStart;\n    }\n    else {\n      this.selectionEnd += offset;\n      this.selectionStart = this.selectionEnd;\n    }\n    return offset !== 0;\n  },\n\n  /**\n   * Moves cursor left\n   * @param {Event} e Event object\n   */\n  moveCursorLeft: function(e) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Left', e);\n  },\n\n  /**\n   * @private\n   * @return {Boolean} true if a change happened\n   */\n  _move: function(e, prop, direction) {\n    var newValue;\n    if (e.altKey) {\n      newValue = this['findWordBoundary' + direction](this[prop]);\n    }\n    else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {\n      newValue = this['findLineBoundary' + direction](this[prop]);\n    }\n    else {\n      this[prop] += direction === 'Left' ? -1 : 1;\n      return true;\n    }\n    if (typeof newValue !== undefined && this[prop] !== newValue) {\n      this[prop] = newValue;\n      return true;\n    }\n  },\n\n  /**\n   * @private\n   */\n  _moveLeft: function(e, prop) {\n    return this._move(e, prop, 'Left');\n  },\n\n  /**\n   * @private\n   */\n  _moveRight: function(e, prop) {\n    return this._move(e, prop, 'Right');\n  },\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {Event} e\n   */\n  moveCursorLeftWithoutShift: function(e) {\n    var change = true;\n    this._selectionDirection = 'left';\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {\n      change = this._moveLeft(e, 'selectionStart');\n\n    }\n    this.selectionEnd = this.selectionStart;\n    return change;\n  },\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {Event} e\n   */\n  moveCursorLeftWithShift: function(e) {\n    if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {\n      return this._moveLeft(e, 'selectionEnd');\n    }\n    else if (this.selectionStart !== 0){\n      this._selectionDirection = 'left';\n      return this._moveLeft(e, 'selectionStart');\n    }\n  },\n\n  /**\n   * Moves cursor right\n   * @param {Event} e Event object\n   */\n  moveCursorRight: function(e) {\n    if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Right', e);\n  },\n\n  /**\n   * Moves cursor right or Left, fires event\n   * @param {String} direction 'Left', 'Right'\n   * @param {Event} e Event object\n   */\n  _moveCursorLeftOrRight: function(direction, e) {\n    var actionName = 'moveCursor' + direction + 'With';\n    this._currentCursorOpacity = 1;\n\n    if (e.shiftKey) {\n      actionName += 'Shift';\n    }\n    else {\n      actionName += 'outShift';\n    }\n    if (this[actionName](e)) {\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  },\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {Event} e\n   */\n  moveCursorRightWithShift: function(e) {\n    if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {\n      return this._moveRight(e, 'selectionStart');\n    }\n    else if (this.selectionEnd !== this._text.length) {\n      this._selectionDirection = 'right';\n      return this._moveRight(e, 'selectionEnd');\n    }\n  },\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {Event} e Event object\n   */\n  moveCursorRightWithoutShift: function(e) {\n    var changed = true;\n    this._selectionDirection = 'right';\n\n    if (this.selectionStart === this.selectionEnd) {\n      changed = this._moveRight(e, 'selectionStart');\n      this.selectionEnd = this.selectionStart;\n    }\n    else {\n      this.selectionStart = this.selectionEnd;\n    }\n    return changed;\n  },\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars: function(start, end) {\n    if (typeof end === 'undefined') {\n      end = start + 1;\n    }\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    if (this._shouldClearDimensionCache()) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    this._removeExtraneousStyles();\n  },\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars: function(text, style, start, end) {\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    var graphemes = fabric.util.string.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    if (this._shouldClearDimensionCache()) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    this._removeExtraneousStyles();\n  },\n\n});\n\n\n/* _TO_SVG_START_ */\n(function() {\n  var toFixed = fabric.util.toFixed,\n      multipleSpacesRegex = /  +/g;\n\n  fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\n\n    /**\n     * Returns SVG representation of an instance\n     * @param {Function} [reviver] Method for further parsing of svg representation.\n     * @return {String} svg representation of an instance\n     */\n    toSVG: function(reviver) {\n      var offsets = this._getSVGLeftTopOffsets(),\n          textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft),\n          internalMarkup = this._wrapSVGTextAndBg(textAndBg);\n      return this._createBaseSVGMarkup(\n        internalMarkup, { reviver: reviver, noStyle: true, withShadow: true });\n    },\n\n    /**\n     * @private\n     */\n    _getSVGLeftTopOffsets: function() {\n      return {\n        textLeft: -this.width / 2,\n        textTop: -this.height / 2,\n        lineTop: this.getHeightOfLine(0)\n      };\n    },\n\n    /**\n     * @private\n     */\n    _wrapSVGTextAndBg: function(textAndBg) {\n      var noShadow = true,\n          textDecoration = this.getSvgTextDecoration(this);\n      return [\n        textAndBg.textBgRects.join(''),\n        '\\t\\t<text xml:space=\"preserve\" ',\n        (this.fontFamily ? 'font-family=\"' + this.fontFamily.replace(/\"/g, '\\'') + '\" ' : ''),\n        (this.fontSize ? 'font-size=\"' + this.fontSize + '\" ' : ''),\n        (this.fontStyle ? 'font-style=\"' + this.fontStyle + '\" ' : ''),\n        (this.fontWeight ? 'font-weight=\"' + this.fontWeight + '\" ' : ''),\n        (textDecoration ? 'text-decoration=\"' + textDecoration + '\" ' : ''),\n        'style=\"', this.getSvgStyles(noShadow), '\"', this.addPaintOrder(), ' >',\n        textAndBg.textSpans.join(''),\n        '</text>\\n'\n      ];\n    },\n\n    /**\n     * @private\n     * @param {Number} textTopOffset Text top offset\n     * @param {Number} textLeftOffset Text left offset\n     * @return {Object}\n     */\n    _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {\n      var textSpans = [],\n          textBgRects = [],\n          height = textTopOffset, lineOffset;\n      // bounding-box background\n      this._setSVGBg(textBgRects);\n\n      // text and text-background\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        lineOffset = this._getLineLeftOffset(i);\n        if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n          this._setSVGTextLineBg(textBgRects, i, textLeftOffset + lineOffset, height);\n        }\n        this._setSVGTextLineText(textSpans, i, textLeftOffset + lineOffset, height);\n        height += this.getHeightOfLine(i);\n      }\n\n      return {\n        textSpans: textSpans,\n        textBgRects: textBgRects\n      };\n    },\n\n    /**\n     * @private\n     */\n    _createTextCharSpan: function(_char, styleDecl, left, top) {\n      var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex),\n          styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace),\n          fillStyles = styleProps ? 'style=\"' + styleProps + '\"' : '',\n          dy = styleDecl.deltaY, dySpan = '',\n          NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n      if (dy) {\n        dySpan = ' dy=\"' + toFixed(dy, NUM_FRACTION_DIGITS) + '\" ';\n      }\n      return [\n        '<tspan x=\"', toFixed(left, NUM_FRACTION_DIGITS), '\" y=\"',\n        toFixed(top, NUM_FRACTION_DIGITS), '\" ', dySpan,\n        fillStyles, '>',\n        fabric.util.string.escapeXml(_char),\n        '</tspan>'\n      ].join('');\n    },\n\n    _setSVGTextLineText: function(textSpans, lineIndex, textLeftOffset, textTopOffset) {\n      // set proper line offset\n      var lineHeight = this.getHeightOfLine(lineIndex),\n          isJustify = this.textAlign.indexOf('justify') !== -1,\n          actualStyle,\n          nextStyle,\n          charsToRender = '',\n          charBox, style,\n          boxWidth = 0,\n          line = this._textLines[lineIndex],\n          timeToRender;\n\n      textTopOffset += lineHeight * (1 - this._fontSizeFraction) / this.lineHeight;\n      for (var i = 0, len = line.length - 1; i <= len; i++) {\n        timeToRender = i === len || this.charSpacing;\n        charsToRender += line[i];\n        charBox = this.__charBounds[lineIndex][i];\n        if (boxWidth === 0) {\n          textLeftOffset += charBox.kernedWidth - charBox.width;\n          boxWidth += charBox.width;\n        }\n        else {\n          boxWidth += charBox.kernedWidth;\n        }\n        if (isJustify && !timeToRender) {\n          if (this._reSpaceAndTab.test(line[i])) {\n            timeToRender = true;\n          }\n        }\n        if (!timeToRender) {\n          // if we have charSpacing, we render char by char\n          actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n          nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n          timeToRender = this._hasStyleChangedForSvg(actualStyle, nextStyle);\n        }\n        if (timeToRender) {\n          style = this._getStyleDeclaration(lineIndex, i) || { };\n          textSpans.push(this._createTextCharSpan(charsToRender, style, textLeftOffset, textTopOffset));\n          charsToRender = '';\n          actualStyle = nextStyle;\n          textLeftOffset += boxWidth;\n          boxWidth = 0;\n        }\n      }\n    },\n\n    _pushTextBgRect: function(textBgRects, color, left, top, width, height) {\n      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;\n      textBgRects.push(\n        '\\t\\t<rect ',\n        this._getFillAttributes(color),\n        ' x=\"',\n        toFixed(left, NUM_FRACTION_DIGITS),\n        '\" y=\"',\n        toFixed(top, NUM_FRACTION_DIGITS),\n        '\" width=\"',\n        toFixed(width, NUM_FRACTION_DIGITS),\n        '\" height=\"',\n        toFixed(height, NUM_FRACTION_DIGITS),\n        '\"></rect>\\n');\n    },\n\n    _setSVGTextLineBg: function(textBgRects, i, leftOffset, textTopOffset) {\n      var line = this._textLines[i],\n          heightOfLine = this.getHeightOfLine(i) / this.lineHeight,\n          boxWidth = 0,\n          boxStart = 0,\n          charBox, currentColor,\n          lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (var j = 0, jlen = line.length; j < jlen; j++) {\n        charBox = this.__charBounds[i][j];\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (currentColor !== lastColor) {\n          lastColor && this._pushTextBgRect(textBgRects, lastColor, leftOffset + boxStart,\n            textTopOffset, boxWidth, heightOfLine);\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        }\n        else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      currentColor && this._pushTextBgRect(textBgRects, currentColor, leftOffset + boxStart,\n        textTopOffset, boxWidth, heightOfLine);\n    },\n\n    /**\n     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n     * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n     *\n     * @private\n     * @param {*} value\n     * @return {String}\n     */\n    _getFillAttributes: function(value) {\n      var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';\n      if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {\n        return 'fill=\"' + value + '\"';\n      }\n      return 'opacity=\"' + fillColor.getAlpha() + '\" fill=\"' + fillColor.setAlpha(1).toRgb() + '\"';\n    },\n\n    /**\n     * @private\n     */\n    _getSVGLineTopOffset: function(lineIndex) {\n      var lineTopOffset = 0, lastHeight = 0;\n      for (var j = 0; j < lineIndex; j++) {\n        lineTopOffset += this.getHeightOfLine(j);\n      }\n      lastHeight = this.getHeightOfLine(j);\n      return {\n        lineTop: lineTopOffset,\n        offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)\n      };\n    },\n\n    /**\n     * Returns styles-string for svg-export\n     * @param {Boolean} skipShadow a boolean to skip shadow filter output\n     * @return {String}\n     */\n    getSvgStyles: function(skipShadow) {\n      var svgStyle = fabric.Object.prototype.getSvgStyles.call(this, skipShadow);\n      return svgStyle + ' white-space: pre;';\n    },\n  });\n})();\n/* _TO_SVG_END_ */\n\n\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = {});\n\n  /**\n   * Textbox class, based on IText, allows the user to resize the text rectangle\n   * and wraps lines automatically. Textboxes have their Y scaling locked, the\n   * user can only change width. Height is adjusted automatically based on the\n   * wrapping of lines.\n   * @class fabric.Textbox\n   * @extends fabric.IText\n   * @mixes fabric.Observable\n   * @return {fabric.Textbox} thisArg\n   * @see {@link fabric.Textbox#initialize} for constructor definition\n   */\n  fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'textbox',\n\n    /**\n     * Minimum width of textbox, in pixels.\n     * @type Number\n     * @default\n     */\n    minWidth: 20,\n\n    /**\n     * Minimum calculated width of a textbox, in pixels.\n     * fixed to 2 so that an empty textbox cannot go to 0\n     * and is still selectable without text.\n     * @type Number\n     * @default\n     */\n    dynamicMinWidth: 2,\n\n    /**\n     * Cached array of text wrapping.\n     * @type Array\n     */\n    __cachedLines: null,\n\n    /**\n     * Override standard Object class values\n     */\n    lockScalingFlip: true,\n\n    /**\n     * Override standard Object class values\n     * Textbox needs this on false\n     */\n    noScaleCache: false,\n\n    /**\n     * Properties which when set cause object to change dimensions\n     * @type Object\n     * @private\n     */\n    _dimensionAffectingProps: fabric.Text.prototype._dimensionAffectingProps.concat('width'),\n\n    /**\n     * Use this regular expression to split strings in breakable lines\n     * @private\n     */\n    _wordJoiners: /[ \\t\\r\\u200B\\u200C]/,\n\n    /**\n     * Use this boolean property in order to split strings that have no white space concept.\n     * this is a cheap way to help with chinese/japaense\n     * @type Boolean\n     * @since 2.6.0\n     */\n    splitByGrapheme: false,\n\n    /**\n     * Unlike superclass's version of this function, Textbox does not update\n     * its width.\n     * @private\n     * @override\n     */\n    initDimensions: function() {\n      if (this.__skipDimension) {\n        return;\n      }\n      this.isEditing && this.initDelayedCursor();\n      this.clearContextTop();\n      this._clearCache();\n      // clear dynamicMinWidth as it will be different after we re-wrap line\n      this.dynamicMinWidth = 0;\n      // wrap lines\n      this._styleMap = this._generateStyleMap(this._splitText());\n      // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n      if (this.dynamicMinWidth > this.width) {\n        this._set('width', this.dynamicMinWidth);\n      }\n      if (this.textAlign.indexOf('justify') !== -1) {\n        // once text is measured we need to make space fatter to make justified text.\n        this.enlargeSpaces();\n      }\n      // clear cache and re-calculate height\n      this.height = this.calcTextHeight();\n      this.saveState({ propertySet: '_dimensionAffectingProps' });\n    },\n\n    /**\n     * Generate an object that translates the style object so that it is\n     * broken up by visual lines (new lines and automatic wrapping).\n     * The original text styles object is broken up by actual lines (new lines only),\n     * which is only sufficient for Text / IText\n     * @private\n     */\n    _generateStyleMap: function(textInfo) {\n      var realLineCount     = 0,\n          realLineCharCount = 0,\n          charCount         = 0,\n          map               = {};\n\n      for (var i = 0; i < textInfo.graphemeLines.length; i++) {\n        if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n          realLineCharCount = 0;\n          charCount++;\n          realLineCount++;\n        }\n        else if (this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i > 0) {\n          // this case deals with space's that are removed from end of lines when wrapping\n          realLineCharCount++;\n          charCount++;\n        }\n\n        map[i] = { line: realLineCount, offset: realLineCharCount };\n\n        charCount += textInfo.graphemeLines[i].length;\n        realLineCharCount += textInfo.graphemeLines[i].length;\n      }\n\n      return map;\n    },\n\n    /**\n     * Returns true if object has a style property or has it ina specified line\n     * @param {Number} lineIndex\n     * @return {Boolean}\n     */\n    styleHas: function(property, lineIndex) {\n      if (this._styleMap && !this.isWrapping) {\n        var map = this._styleMap[lineIndex];\n        if (map) {\n          lineIndex = map.line;\n        }\n      }\n      return fabric.Text.prototype.styleHas.call(this, property, lineIndex);\n    },\n\n    /**\n     * Returns true if object has no styling or no styling in a line\n     * @param {Number} lineIndex , lineIndex is on wrapped lines.\n     * @return {Boolean}\n     */\n    isEmptyStyles: function(lineIndex) {\n      var offset = 0, nextLineIndex = lineIndex + 1, nextOffset, obj, shouldLimit = false;\n      var map = this._styleMap[lineIndex];\n      var mapNextLine = this._styleMap[lineIndex + 1];\n      if (map) {\n        lineIndex = map.line;\n        offset = map.offset;\n      }\n      if (mapNextLine) {\n        nextLineIndex = mapNextLine.line;\n        shouldLimit = nextLineIndex === lineIndex;\n        nextOffset = mapNextLine.offset;\n      }\n      obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\n      for (var p1 in obj) {\n        for (var p2 in obj[p1]) {\n          if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {\n            // eslint-disable-next-line no-unused-vars\n            for (var p3 in obj[p1][p2]) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _getStyleDeclaration: function(lineIndex, charIndex) {\n      if (this._styleMap && !this.isWrapping) {\n        var map = this._styleMap[lineIndex];\n        if (!map) {\n          return null;\n        }\n        lineIndex = map.line;\n        charIndex = map.offset + charIndex;\n      }\n      return this.callSuper('_getStyleDeclaration', lineIndex, charIndex);\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} style\n     * @private\n     */\n    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      this.styles[lineIndex][charIndex] = style;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n      var map = this._styleMap[lineIndex];\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n\n      delete this.styles[lineIndex][charIndex];\n    },\n\n    /**\n    * probably broken need a fix\n     * @param {Number} lineIndex\n     * @private\n     */\n    _getLineStyle: function(lineIndex) {\n      var map = this._styleMap[lineIndex];\n      return this.styles[map.line];\n    },\n\n    /**\n     * probably broken need a fix\n     * @param {Number} lineIndex\n     * @param {Object} style\n     * @private\n     */\n    _setLineStyle: function(lineIndex, style) {\n      var map = this._styleMap[lineIndex];\n      this.styles[map.line] = style;\n    },\n\n    /**\n     * probably broken need a fix\n     * @param {Number} lineIndex\n     * @private\n     */\n    _deleteLineStyle: function(lineIndex) {\n      var map = this._styleMap[lineIndex];\n      delete this.styles[map.line];\n    },\n\n    /**\n     * Wraps text using the 'width' property of Textbox. First this function\n     * splits text on newlines, so we preserve newlines entered by the user.\n     * Then it wraps each line using the width of the Textbox by calling\n     * _wrapLine().\n     * @param {Array} lines The string array of text that is split into lines\n     * @param {Number} desiredWidth width you want to wrap to\n     * @returns {Array} Array of lines\n     */\n    _wrapText: function(lines, desiredWidth) {\n      var wrapped = [], i;\n      this.isWrapping = true;\n      for (i = 0; i < lines.length; i++) {\n        wrapped = wrapped.concat(this._wrapLine(lines[i], i, desiredWidth));\n      }\n      this.isWrapping = false;\n      return wrapped;\n    },\n\n    /**\n     * Helper function to measure a string of text, given its lineIndex and charIndex offset\n     * it gets called when charBounds are not available yet.\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {String} text\n     * @param {number} lineIndex\n     * @param {number} charOffset\n     * @returns {number}\n     * @private\n     */\n    _measureWord: function(word, lineIndex, charOffset) {\n      var width = 0, prevGrapheme, skipLeft = true;\n      charOffset = charOffset || 0;\n      for (var i = 0, len = word.length; i < len; i++) {\n        var box = this._getGraphemeBox(word[i], lineIndex, i + charOffset, prevGrapheme, skipLeft);\n        width += box.kernedWidth;\n        prevGrapheme = word[i];\n      }\n      return width;\n    },\n\n    /**\n     * Wraps a line of text using the width of the Textbox and a context.\n     * @param {Array} line The grapheme array that represent the line\n     * @param {Number} lineIndex\n     * @param {Number} desiredWidth width you want to wrap the line to\n     * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n     * @returns {Array} Array of line(s) into which the given text is wrapped\n     * to.\n     */\n    _wrapLine: function(_line, lineIndex, desiredWidth, reservedSpace) {\n      var lineWidth = 0,\n          splitByGrapheme = this.splitByGrapheme,\n          graphemeLines = [],\n          line = [],\n          // spaces in different languges?\n          words = splitByGrapheme ? fabric.util.string.graphemeSplit(_line) : _line.split(this._wordJoiners),\n          word = '',\n          offset = 0,\n          infix = splitByGrapheme ? '' : ' ',\n          wordWidth = 0,\n          infixWidth = 0,\n          largestWordWidth = 0,\n          lineJustStarted = true,\n          additionalSpace = splitByGrapheme ? 0 : this._getWidthOfCharSpacing(),\n          reservedSpace = reservedSpace || 0;\n\n      desiredWidth -= reservedSpace;\n      for (var i = 0; i < words.length; i++) {\n        // i would avoid resplitting the graphemes\n        word = fabric.util.string.graphemeSplit(words[i]);\n        wordWidth = this._measureWord(word, lineIndex, offset);\n        offset += word.length;\n\n        lineWidth += infixWidth + wordWidth - additionalSpace;\n\n        if (lineWidth >= desiredWidth && !lineJustStarted) {\n          graphemeLines.push(line);\n          line = [];\n          lineWidth = wordWidth;\n          lineJustStarted = true;\n        }\n        else {\n          lineWidth += additionalSpace;\n        }\n\n        if (!lineJustStarted) {\n          line.push(infix);\n        }\n        line = line.concat(word);\n\n        infixWidth = this._measureWord([infix], lineIndex, offset);\n        offset++;\n        lineJustStarted = false;\n        // keep track of largest word\n        if (wordWidth > largestWordWidth) {\n          largestWordWidth = wordWidth;\n        }\n      }\n\n      i && graphemeLines.push(line);\n\n      if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n        this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n      }\n\n      return graphemeLines;\n    },\n\n    /**\n     * Detect if the text line is ended with an hard break\n     * text and itext do not have wrapping, return false\n     * @param {Number} lineIndex text to split\n     * @return {Boolean}\n     */\n    isEndOfWrapping: function(lineIndex) {\n      if (!this._styleMap[lineIndex + 1]) {\n        // is last line, return true;\n        return true;\n      }\n      if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n        // this is last line before a line break, return true;\n        return true;\n      }\n      return false;\n    },\n\n    /**\n    * Gets lines of text to render in the Textbox. This function calculates\n    * text wrapping on the fly every time it is called.\n    * @param {String} text text to split\n    * @returns {Array} Array of lines in the Textbox.\n    * @override\n    */\n    _splitTextIntoLines: function(text) {\n      var newText = fabric.Text.prototype._splitTextIntoLines.call(this, text),\n          graphemeLines = this._wrapText(newText.lines, this.width),\n          lines = new Array(graphemeLines.length);\n\n      for (var i = 0; i < graphemeLines.length; i++) {\n        lines[i] = graphemeLines[i].join('');\n      }\n      newText.lines = lines;\n      newText.graphemeLines = graphemeLines;\n      return newText;\n    },\n\n    getMinWidth: function() {\n      return Math.max(this.minWidth, this.dynamicMinWidth);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @method toObject\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return this.callSuper('toObject', ['minWidth', 'splitByGrapheme'].concat(propertiesToInclude));\n    }\n  });\n\n  /**\n   * Returns fabric.Textbox instance from an object representation\n   * @static\n   * @memberOf fabric.Textbox\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Textbox instance is created\n   */\n  fabric.Textbox.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Textbox', object, callback, 'text');\n  };\n})(typeof exports !== 'undefined' ? exports : this);\n\n\n(function() {\n\n  /**\n   * Override _setObjectScale and add Textbox specific resizing behavior. Resizing\n   * a Textbox doesn't scale text, it only changes width and makes text wrap automatically.\n   */\n  var setObjectScaleOverridden = fabric.Canvas.prototype._setObjectScale;\n\n  fabric.Canvas.prototype._setObjectScale = function(localMouse, transform,\n    lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {\n\n    var t = transform.target, scaled,\n        scaleX = localMouse.x * t.scaleX / _dim.x,\n        scaleY = localMouse.y * t.scaleY / _dim.y;\n    if (by === 'x' && t instanceof fabric.Textbox) {\n      var tw = t._getTransformedDimensions().x;\n      var w = t.width * (localMouse.x / tw);\n      transform.newScaleX = scaleX;\n      transform.newScaleY = scaleY;\n      if (w >= t.getMinWidth()) {\n        scaled = w !== t.width;\n        t.set('width', w);\n        return scaled;\n      }\n    }\n    else {\n      return setObjectScaleOverridden.call(fabric.Canvas.prototype, localMouse, transform,\n        lockScalingX, lockScalingY, by, lockScalingFlip, _dim);\n    }\n  };\n\n  fabric.util.object.extend(fabric.Textbox.prototype, /** @lends fabric.IText.prototype */ {\n    /**\n     * @private\n     */\n    _removeExtraneousStyles: function() {\n      for (var prop in this._styleMap) {\n        if (!this._textLines[prop]) {\n          delete this.styles[this._styleMap[prop].line];\n        }\n      }\n    },\n\n  });\n})();\n\n"]}