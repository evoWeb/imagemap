{"version":3,"sources":["Imagemap.js"],"names":["define","fabric","imagemap","Rect","getLeftX","getTopY","getRightX","getBottomY","getAdditionalAttributeXML","getLink","Circle","getX","getY","getRadius","Polygon","joinCoords","AreaEditor","canvas","picture","form","scaling","width","parseInt","height","scaleFactor","configuration","coords","split","left","top","right","bottom","area","borderColor","color","stroke","strokeWidth","fill","hexToRgbA","add","radius","coordsXY","i","points","length","Error","xy","x","y","push","Math","min","hex","alpha","chars","r","g","b","result","test","substring","join","event","console","log","Canvas"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAA,CAAA,CAAA,2BAAA,CAAA,EAAA,UAAAC,MAAA,EAAA;AACA,MAAAC,QAAA,GAAAA,QAAA,IAAA,EAAA;;AADA,MAGAC,IAHA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,uCAIA;AACA,eAAA,gCAAA,KAAAC,QAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAAC,OAAA,CAAA,CAAA,CAAA,GACA,GADA,GACA,KAAAC,SAAA,CAAA,CAAA,CADA,GACA,GADA,GACA,KAAAC,UAAA,CAAA,CAAA,CADA,GAEA,IAFA,GAEA,KAAAC,yBAAA,EAFA,GAEA,GAFA,GAEA,KAAAC,OAAA,EAFA,GAEA,SAFA;AAGA;AARA;;AAAA;AAAA,IAGAR,MAAA,CAAAE,IAHA;;AAUAD,EAAAA,QAAA,CAAAC,IAAA,GAAAA,IAAA;;AAVA,MAYAO,MAZA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,uCAaA;AACA,eAAA,kCAAA,KAAAC,IAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAAC,IAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,KAAAC,SAAA,CAAA,CAAA,CAAA,GACA,IADA,GACA,KAAAL,yBAAA,EADA,GACA,GADA,GACA,KAAAC,OAAA,EADA,GACA,SADA;AAEA;AAhBA;;AAAA;AAAA,IAYAR,MAAA,CAAAS,MAZA;;AAkBAR,EAAAA,QAAA,CAAAQ,MAAA,GAAAA,MAAA;;AAlBA,MAoBAI,OApBA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,uCAqBA;AACA,eAAA,gCAAA,KAAAC,UAAA,EAAA,GACA,IADA,GACA,KAAAP,yBAAA,EADA,GACA,GADA,GACA,KAAAC,OAAA,EADA,GACA,SADA;AAEA;AAxBA;;AAAA;AAAA,IAoBAR,MAAA,CAAAa,OApBA;;AA0BAZ,EAAAA,QAAA,CAAAY,OAAA,GAAAA,OAAA;;AA1BA,MA4BAE,UA5BA;AAAA;AAAA;AAAA;;AA6BA,wBAAAC,MAAA,EAAAC,OAAA,EAAAC,IAAA,EAAA;AAAA;;AAAA,qFACAF,MADA,EACAC,OADA,EACAC,IADA;AAEA;;AA/BA;AAAA;AAAA,wCAiCAC,OAjCA,EAiCA;AACA,YAAAC,KAAA,GAAAC,QAAA,CAAAF,OAAA,CAAA,GAAA,KAAAC,KAAA;AAAA,YACAE,MAAA,GAAAD,QAAA,CAAAF,OAAA,CAAA,GAAA,KAAAG,MADA;AAEA,eAAAF,KAAA,GAAAE,MAAA,GAAAA,MAAA,GAAAF,KAAA;AACA;AArCA;AAAA;AAAA,+BAsCAD,OAtCA,EAsCA;AACA,aAAAI,WAAA,GAAAJ,OAAA,GAAA,CAAA,GAAA,CAAA,GAAAA,OAAA;AACA;AAxCA;AAAA;AAAA,oCAyCA;AACA,eAAA,KAAAI,WAAA,GAAA,KAAAH,KAAA;AACA;AA3CA;AAAA;AAAA,qCA4CA;AACA,eAAA,KAAAG,WAAA,GAAA,KAAAD,MAAA;AACA;AA9CA;AAAA;AAAA,8BAgDAE,aAhDA,EAgDA;AAAA,oCACAA,aAAA,CAAAC,MAAA,CAAAC,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,YACAC,IADA;AAAA,YACAC,GADA;AAAA,YACAC,KADA;AAAA,YACAC,MADA;;AAEA,YAAAC,IAAA,GAAA,IAAA9B,QAAA,CAAAC,IAAA,mBACAsB,aADA;AAEAG,UAAAA,IAAA,EAAAN,QAAA,CAAAM,IAAA,CAFA;AAGAC,UAAAA,GAAA,EAAAP,QAAA,CAAAO,GAAA,CAHA;AAIAR,UAAAA,KAAA,EAAAC,QAAA,CAAAQ,KAAA,GAAAF,IAAA,CAJA;AAKAL,UAAAA,MAAA,EAAAD,QAAA,CAAAS,MAAA,GAAAF,GAAA,CALA;AAMAI,UAAAA,WAAA,EAAAR,aAAA,CAAAS,KANA;AAOAC,UAAAA,MAAA,EAAAV,aAAA,CAAAS,KAPA;AAQAE,UAAAA,WAAA,EAAA,CARA;AASAC,UAAAA,IAAA,EAAA,KAAAC,SAAA,CAAAb,aAAA,CAAAS,KAAA,EAAA,GAAA;AATA,WAAA;AAWA,aAAAK,GAAA,CAAAP,IAAA;AACA;AA9DA;AAAA;AAAA,gCAgEAP,aAhEA,EAgEA;AAAA,qCACAA,aAAA,CAAAC,MAAA,CAAAC,KAAA,CAAA,GAAA,CADA;AAAA;AAAA,YACAC,IADA;AAAA,YACAC,GADA;AAAA,YACAW,MADA;;AAEA,YAAAR,IAAA,GAAA,IAAA9B,QAAA,CAAAQ,MAAA,mBACAe,aADA;AAEAG,UAAAA,IAAA,EAAAN,QAAA,CAAAM,IAAA,CAFA;AAGAC,UAAAA,GAAA,EAAAP,QAAA,CAAAO,GAAA,CAHA;AAIAW,UAAAA,MAAA,EAAAlB,QAAA,CAAAkB,MAAA,CAJA;AAKAP,UAAAA,WAAA,EAAAR,aAAA,CAAAS,KALA;AAMAC,UAAAA,MAAA,EAAAV,aAAA,CAAAS,KANA;AAOAE,UAAAA,WAAA,EAAA,CAPA;AAQAC,UAAAA,IAAA,EAAA,KAAAC,SAAA,CAAAb,aAAA,CAAAS,KAAA,EAAA,GAAA;AARA,WAAA;AAUA,aAAAK,GAAA,CAAAP,IAAA;AACA;AA7EA;AAAA;AAAA,8BA+EAP,aA/EA,EA+EA;AACA,YAAAgB,QAAA,GAAAhB,aAAA,CAAAC,MAAA,CAAAC,KAAA,CAAA,GAAA,CAAA;AAAA,YACAC,IAAA,GAAA,MADA;AAAA,YAEAC,GAAA,GAAA,MAFA;AAAA,YAGAa,CAAA,GAAA,CAHA;AAAA,YAIAC,MAAA,GAAA,EAJA;;AAMA,YAAAF,QAAA,CAAAG,MAAA,GAAA,CAAA,EAAA;AACA,gBAAA,IAAAC,KAAA,CAAA,kBAAA,CAAA;AACA;;AAEA,eAAAH,CAAA,GAAAD,QAAA,CAAAG,MAAA,EAAAF,CAAA,GAAAA,CAAA,GAAA,CAAA,EAAA;AACA,cAAAI,EAAA,GAAA;AAAAC,YAAAA,CAAA,EAAAzB,QAAA,CAAAmB,QAAA,CAAAC,CAAA,CAAA,CAAA;AAAAM,YAAAA,CAAA,EAAA1B,QAAA,CAAAmB,QAAA,CAAAC,CAAA,GAAA,CAAA,CAAA;AAAA,WAAA;AACAC,UAAAA,MAAA,CAAAM,IAAA,CAAAH,EAAA;AAEAlB,UAAAA,IAAA,GAAAsB,IAAA,CAAAC,GAAA,CAAAvB,IAAA,EAAAkB,EAAA,CAAAC,CAAA,CAAA;AACAlB,UAAAA,GAAA,GAAAqB,IAAA,CAAAC,GAAA,CAAAtB,GAAA,EAAAiB,EAAA,CAAAE,CAAA,CAAA;AACA;;AAEA,YAAAhB,IAAA,GAAA,IAAA9B,QAAA,CAAAY,OAAA,CAAA6B,MAAA,oBACAlB,aADA;AAEAI,UAAAA,GAAA,EAAAA,GAFA;AAGAD,UAAAA,IAAA,EAAAA,IAHA;AAIAK,UAAAA,WAAA,EAAAR,aAAA,CAAAS,KAJA;AAKAC,UAAAA,MAAA,EAAAV,aAAA,CAAAS,KALA;AAMAE,UAAAA,WAAA,EAAA,CANA;AAOAC,UAAAA,IAAA,EAAA,KAAAC,SAAA,CAAAb,aAAA,CAAAS,KAAA,EAAA,GAAA;AAPA,WAAA;AASA,aAAAK,GAAA,CAAAP,IAAA;AACA;AA5GA;AAAA;AAAA,gCA8GAoB,GA9GA,EA8GAC,KA9GA,EA8GA;AACA,YAAAC,KAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,MAAA;;AACA,YAAA,2BAAAC,IAAA,CAAAP,GAAA,CAAA,EAAA;AACAE,UAAAA,KAAA,GAAAF,GAAA,CAAAQ,SAAA,CAAA,CAAA,EAAAjC,KAAA,CAAA,EAAA,CAAA;;AACA,cAAA2B,KAAA,CAAAV,MAAA,KAAA,CAAA,EAAA;AACAU,YAAAA,KAAA,GAAA,CAAAA,KAAA,CAAA,CAAA,CAAA,EAAAA,KAAA,CAAA,CAAA,CAAA,EAAAA,KAAA,CAAA,CAAA,CAAA,EAAAA,KAAA,CAAA,CAAA,CAAA,EAAAA,KAAA,CAAA,CAAA,CAAA,EAAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA;;AAEAC,UAAAA,CAAA,GAAAjC,QAAA,CAAAgC,KAAA,CAAA,CAAA,CAAA,GAAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACAE,UAAAA,CAAA,GAAAlC,QAAA,CAAAgC,KAAA,CAAA,CAAA,CAAA,GAAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACAG,UAAAA,CAAA,GAAAnC,QAAA,CAAAgC,KAAA,CAAA,CAAA,CAAA,GAAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA;;AAEA,cAAAD,KAAA,EAAA;AACAK,YAAAA,MAAA,GAAA,UAAA,CAAAH,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAJ,KAAA,EAAAQ,IAAA,CAAA,IAAA,CAAA,GAAA,GAAA;AACA,WAFA,MAEA;AACAH,YAAAA,MAAA,GAAA,SAAA,CAAAH,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAI,IAAA,CAAA,IAAA,CAAA,GAAA,GAAA;AACA;;AACA,iBAAAH,MAAA;AACA;;AACA,cAAA,IAAAb,KAAA,CAAA,SAAA,CAAA;AACA;AAlIA;AAAA;AAAA,gCAoIAiB,KApIA,EAoIA;AACAC,QAAAA,OAAA,CAAAC,GAAA,CAAAF,KAAA;AACA;AAtIA;AAAA;AAAA,8BAwIAA,KAxIA,EAwIA;AACAC,QAAAA,OAAA,CAAAC,GAAA,CAAAF,KAAA;AACA;AA1IA;AAAA;AAAA,gCA4IAA,KA5IA,EA4IA;AACAC,QAAAA,OAAA,CAAAC,GAAA,CAAAF,KAAA;AACA;AA9IA;AAAA;AAAA,+BAgJAA,KAhJA,EAgJA;AACAC,QAAAA,OAAA,CAAAC,GAAA,CAAAF,KAAA;AACA;AAlJA;;AAAA;AAAA,IA4BA7D,MAAA,CAAAgE,MA5BA;;AAoJA/D,EAAAA,QAAA,CAAAc,UAAA,GAAAA,UAAA;AAEA,SAAAd,QAAA;AACA,CAvJA,CAAA","file":"Imagemap.js","sourcesContent":["define(['TYPO3/CMS/Imagemap/Fabric'], (fabric) => {\n\tlet imagemap = imagemap || {};\n\n\tclass Rect extends fabric.Rect {\n\t\tpersistanceXML() {\n\t\t\treturn '<area shape=\"rect\" coords=\"' + this.getLeftX(0) + \",\" + this.getTopY(0)\n\t\t\t\t+ \",\" + this.getRightX(0) + \",\" + this.getBottomY(0)\n\t\t\t\t+ '\" ' + this.getAdditionalAttributeXML() + \">\" + this.getLink() + \"</area>\"\n\t\t}\n\t}\n\timagemap.Rect = Rect;\n\n\tclass Circle extends fabric.Circle {\n\t\tpersistanceXML() {\n\t\t\treturn '<area shape=\"circle\" coords=\"' + this.getX(0) + \",\" + this.getY(0) + \",\" + this.getRadius(0)\n\t\t\t\t+ '\" ' + this.getAdditionalAttributeXML() + \">\" + this.getLink() + \"</area>\";\n\t\t}\n\t}\n\timagemap.Circle = Circle;\n\n\tclass Polygon extends fabric.Polygon {\n\t\tpersistanceXML() {\n\t\t\treturn '<area shape=\"poly\" coords=\"' + this.joinCoords()\n\t\t\t\t+ '\" ' + this.getAdditionalAttributeXML() + \">\" + this.getLink() + \"</area>\"\n\t\t}\n\t}\n\timagemap.Polygon = Polygon;\n\n\tclass AreaEditor extends fabric.Canvas {\n\t\tconstructor(canvas, picture, form) {\n\t\t\tsuper (canvas, picture, form);\n\t\t}\n\n\t\tinitializeScaling(scaling) {\n\t\t\tlet width = parseInt(scaling) / this.width,\n\t\t\t\theight = parseInt(scaling) / this.height;\n\t\t\treturn (width > height) ? height : width;\n\t\t}\n\t\tsetScale(scaling) {\n\t\t\tthis.scaleFactor = scaling > 1 ? 1 : scaling;\n\t\t}\n\t\tgetMaxWidth() {\n\t\t\treturn this.scaleFactor * this.width;\n\t\t}\n\t\tgetMaxHeight() {\n\t\t\treturn this.scaleFactor * this.height;\n\t\t}\n\n\t\taddRect(configuration) {\n\t\t\tlet [left, top, right, bottom] = configuration.coords.split(',');\n\t\t\tlet area = new imagemap.Rect({\n\t\t\t\t...configuration,\n\t\t\t\tleft: parseInt(left),\n\t\t\t\ttop: parseInt(top),\n\t\t\t\twidth: parseInt(right - left),\n\t\t\t\theight: parseInt(bottom - top),\n\t\t\t\tborderColor: configuration.color,\n\t\t\t\tstroke: configuration.color,\n\t\t\t\tstrokeWidth: 1,\n\t\t\t\tfill: this.hexToRgbA(configuration.color, 0.2)\n\t\t\t});\n\t\t\tthis.add(area);\n\t\t}\n\n\t\taddCircle(configuration) {\n\t\t\tlet [left, top, radius] = configuration.coords.split(',');\n\t\t\tlet area = new imagemap.Circle({\n\t\t\t\t...configuration,\n\t\t\t\tleft: parseInt(left),\n\t\t\t\ttop: parseInt(top),\n\t\t\t\tradius: parseInt(radius),\n\t\t\t\tborderColor: configuration.color,\n\t\t\t\tstroke: configuration.color,\n\t\t\t\tstrokeWidth: 1,\n\t\t\t\tfill: this.hexToRgbA(configuration.color, 0.2)\n\t\t\t});\n\t\t\tthis.add(area);\n\t\t}\n\n\t\taddPoly(configuration) {\n\t\t\tlet coordsXY = configuration.coords.split(','),\n\t\t\t\tleft = 100000,\n\t\t\t\ttop = 100000,\n\t\t\t\ti = 0,\n\t\t\t\tpoints = [];\n\n\t\t\tif (coordsXY.length % 2) {\n\t\t\t\tthrow new Error('Bad coords count');\n\t\t\t}\n\n\t\t\tfor (; i < coordsXY.length; i = i + 2) {\n\t\t\t\tlet xy = {x: parseInt(coordsXY[i]), y: parseInt(coordsXY[i + 1])};\n\t\t\t\tpoints.push(xy);\n\n\t\t\t\tleft = Math.min(left, xy.x);\n\t\t\t\ttop = Math.min(top, xy.y);\n\t\t\t}\n\n\t\t\tlet area = new imagemap.Polygon(points, {\n\t\t\t\t...configuration,\n\t\t\t\ttop: top,\n\t\t\t\tleft: left,\n\t\t\t\tborderColor: configuration.color,\n\t\t\t\tstroke: configuration.color,\n\t\t\t\tstrokeWidth: 1,\n\t\t\t\tfill: this.hexToRgbA(configuration.color, 0.2)\n\t\t\t});\n\t\t\tthis.add(area);\n\t\t}\n\n\t\thexToRgbA(hex, alpha) {\n\t\t\tlet chars, r, g, b, result;\n\t\t\tif (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n\t\t\t\tchars = hex.substring(1).split('');\n\t\t\t\tif (chars.length === 3) {\n\t\t\t\t\tchars = [chars[0], chars[0], chars[1], chars[1], chars[2], chars[2]];\n\t\t\t\t}\n\n\t\t\t\tr = parseInt(chars[0] + chars[1], 16);\n\t\t\t\tg = parseInt(chars[2] + chars[3], 16);\n\t\t\t\tb = parseInt(chars[4] + chars[5], 16);\n\n\t\t\t\tif (alpha) {\n\t\t\t\t\tresult = 'rgba(' + [r, g, b, alpha].join(', ') + ')';\n\t\t\t\t} else {\n\t\t\t\t\tresult = 'rgb(' + [r, g, b].join(', ') + ')';\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tthrow new Error('Bad Hex');\n\t\t}\n\n\t\tmousedown(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\n\t\tmouseup(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\n\t\tmousemove(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\n\t\tdblclick(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\t}\n\timagemap.AreaEditor = AreaEditor;\n\n\treturn imagemap;\n});\n"]}