{"version":3,"sources":["Imagemap.es6"],"names":["define","fabric","imagemap","Rect","options","form","subForm","coords","left","top","width","height","getAdditionalAttributeXML","getLink","Circle","radius","Polygon","joinCoords","AreaForm","formElement","element","document","querySelector","selector","DOMParser","parseFromString","innerHTML","body","firstChild","area","getFormElement","insertBefore","fillForm","coordForm","AreaEditor","canvas","scaling","parseInt","scaleFactor","configuration","split","right","bottom","borderColor","color","stroke","strokeWidth","fill","hexToRgbA","addRectSubForm","add","console","log","addCircleSubForm","coordsXY","i","points","length","Error","xy","x","y","push","Math","min","addPolySubForm","hex","alpha","chars","r","g","b","result","test","substring","join","event","Canvas"],"mappings":"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","file":"Imagemap.js","sourcesContent":["define(['TYPO3/CMS/Imagemap/Fabric'], (fabric) => {\n\tlet imagemap = imagemap || {};\n\n\tclass Rect extends fabric.Rect {\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\n\t\t\tthis.form = null;\n\t\t\tthis.subForm = null;\n\t\t}\n\n\t\tfillForm() {\n\n\t\t}\n\n\t\tpersistanceXML() {\n\t\t\tlet coords = this.left + ',' + this.top + ',' + (this.left + this.width) + ',' + (this.height + this.top);\n\t\t\treturn '<area shape=\"rect\" coords=\"' + coords + '\" ' + this.getAdditionalAttributeXML() + '>'\n\t\t\t\t+ this.getLink() + '</area>'\n\t\t}\n\t}\n\n\tclass Circle extends fabric.Circle {\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\n\t\t\tthis.form = null;\n\t\t\tthis.subForm = null;\n\t\t}\n\n\t\tpersistanceXML() {\n\t\t\tlet coords = this.left + ',' + this.top + ',' + this.radius;\n\t\t\treturn '<area shape=\"circle\" coords=\"' + coords + '\" ' + this.getAdditionalAttributeXML() + '>'\n\t\t\t\t+ this.getLink() + '</area>';\n\t\t}\n\t}\n\n\tclass Polygon extends fabric.Polygon {\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\n\t\t\tthis.form = null;\n\t\t\tthis.subForm = null;\n\t\t}\n\n\t\tpersistanceXML() {\n\t\t\treturn '<area shape=\"poly\" coords=\"' + this.joinCoords()\n\t\t\t\t+ '\" ' + this.getAdditionalAttributeXML() + \">\" + this.getLink() + \"</area>\"\n\t\t}\n\t}\n\n\tclass AreaForm {\n\t\tconstructor(formElement) {\n\t\t\tthis.element = fabric.document.querySelector('#' + formElement);\n\t\t}\n\n\t\tgetFormElement(selector) {\n\t\t\treturn new DOMParser().parseFromString(\n\t\t\t\tthis.element.querySelector(selector).innerHTML,\n\t\t\t\t'text/html'\n\t\t\t).body.firstChild;\n\t\t}\n\n\t\taddRectSubForm(area)\n\t\t{\n\t\t\tarea.form = this;\n\t\t\tarea.subForm = this.getFormElement('#rectForm');\n\n\t\t\tthis.element.insertBefore(area.subForm, this.element.firstChild);\n\t\t\tarea.fillForm();\n\t\t}\n\n\t\taddCircleSubForm(area)\n\t\t{\n\t\t\tarea.form = this;\n\t\t\tarea.subForm = this.getFormElement('#circForm');\n\n\t\t\tthis.element.insertBefore(area.subForm, this.element.firstChild);\n\t\t\tarea.fillForm();\n\t\t}\n\n\t\taddPolySubForm(area)\n\t\t{\n\t\t\tarea.form = this;\n\t\t\tarea.subForm = this.getFormElement('#polyForm');\n\t\t\tarea.coordForm = this.getFormElement('#polyCoords');\n\n\t\t\tthis.element.insertBefore(area.subForm, this.element.firstChild);\n\t\t\tarea.fillForm();\n\t\t}\n\t}\n\n\tclass AreaEditor extends fabric.Canvas {\n\t\tconstructor(canvas, form, options) {\n\t\t\tsuper (canvas, options);\n\n\t\t\tthis.form = new AreaForm(form);\n\t\t}\n\n\t\tinitializeScaling(scaling) {\n\t\t\tlet width = parseInt(scaling) / this.width,\n\t\t\t\theight = parseInt(scaling) / this.height;\n\t\t\treturn (width > height) ? height : width;\n\t\t}\n\t\tsetScale(scaling) {\n\t\t\tthis.scaleFactor = scaling > 1 ? 1 : scaling;\n\t\t}\n\t\tgetMaxWidth() {\n\t\t\treturn this.scaleFactor * this.width;\n\t\t}\n\t\tgetMaxHeight() {\n\t\t\treturn this.scaleFactor * this.height;\n\t\t}\n\n\t\taddRect(configuration) {\n\t\t\tlet [left, top, right, bottom] = configuration.coords.split(',');\n\t\t\tlet area = new Rect({\n\t\t\t\t...configuration,\n\t\t\t\tleft: parseInt(left),\n\t\t\t\ttop: parseInt(top),\n\t\t\t\twidth: parseInt(right - left),\n\t\t\t\theight: parseInt(bottom - top),\n\t\t\t\tborderColor: configuration.color,\n\t\t\t\tstroke: configuration.color,\n\t\t\t\tstrokeWidth: 1,\n\t\t\t\tfill: this.hexToRgbA(configuration.color, 0.2)\n\t\t\t});\n\n\t\t\tthis.form.addRectSubForm(area);\n\t\t\tthis.add(area);\n\t\t\tconsole.log(area);\n\t\t}\n\n\t\taddCircle(configuration) {\n\t\t\tlet [left, top, radius] = configuration.coords.split(',');\n\t\t\tlet area = new Circle({\n\t\t\t\t...configuration,\n\t\t\t\tleft: parseInt(left),\n\t\t\t\ttop: parseInt(top),\n\t\t\t\tradius: parseInt(radius),\n\t\t\t\tborderColor: configuration.color,\n\t\t\t\tstroke: configuration.color,\n\t\t\t\tstrokeWidth: 1,\n\t\t\t\tfill: this.hexToRgbA(configuration.color, 0.2)\n\t\t\t});\n\n\t\t\tthis.form.addCircleSubForm(area);\n\t\t\tthis.add(area);\n\t\t}\n\n\t\taddPoly(configuration) {\n\t\t\tlet coordsXY = configuration.coords.split(','),\n\t\t\t\tleft = 100000,\n\t\t\t\ttop = 100000,\n\t\t\t\ti = 0,\n\t\t\t\tpoints = [];\n\n\t\t\tif (coordsXY.length % 2) {\n\t\t\t\tthrow new Error('Bad coords count');\n\t\t\t}\n\n\t\t\tfor (; i < coordsXY.length; i = i + 2) {\n\t\t\t\tlet xy = {x: parseInt(coordsXY[i]), y: parseInt(coordsXY[i + 1])};\n\t\t\t\tpoints.push(xy);\n\n\t\t\t\tleft = Math.min(left, xy.x);\n\t\t\t\ttop = Math.min(top, xy.y);\n\t\t\t}\n\n\t\t\tlet area = new Polygon(points, {\n\t\t\t\t...configuration,\n\t\t\t\ttop: top,\n\t\t\t\tleft: left,\n\t\t\t\tborderColor: configuration.color,\n\t\t\t\tstroke: configuration.color,\n\t\t\t\tstrokeWidth: 1,\n\t\t\t\tfill: this.hexToRgbA(configuration.color, 0.2)\n\t\t\t});\n\n\t\t\tthis.form.addPolySubForm(area);\n\t\t\tthis.add(area);\n\t\t}\n\n\t\thexToRgbA(hex, alpha) {\n\t\t\tlet chars, r, g, b, result;\n\t\t\tif (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n\t\t\t\tchars = hex.substring(1).split('');\n\t\t\t\tif (chars.length === 3) {\n\t\t\t\t\tchars = [chars[0], chars[0], chars[1], chars[1], chars[2], chars[2]];\n\t\t\t\t}\n\n\t\t\t\tr = parseInt(chars[0] + chars[1], 16);\n\t\t\t\tg = parseInt(chars[2] + chars[3], 16);\n\t\t\t\tb = parseInt(chars[4] + chars[5], 16);\n\n\t\t\t\tif (alpha) {\n\t\t\t\t\tresult = 'rgba(' + [r, g, b, alpha].join(', ') + ')';\n\t\t\t\t} else {\n\t\t\t\t\tresult = 'rgb(' + [r, g, b].join(', ') + ')';\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tthrow new Error('Bad Hex');\n\t\t}\n\n\t\tmousedown(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\n\t\tmouseup(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\n\t\tmousemove(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\n\t\tdblclick(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\t}\n\timagemap.AreaEditor = AreaEditor;\n\n\treturn imagemap;\n});\n"]}