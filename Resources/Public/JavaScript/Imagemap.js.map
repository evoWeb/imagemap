{"version":3,"sources":["Imagemap.es6"],"names":["define","fabric","imagemap","Rect","options","form","subForm","values","addEvents","console","log","querySelector","value","link","alt","style","backgroundColor","color","addEventListener","openLinkWizard","coords","left","top","width","height","getAdditionalAttributeXML","getLink","Circle","radius","Polygon","joinCoords","AreaForm","formElement","element","document","selector","DOMParser","parseFromString","innerHTML","body","firstChild","area","getFormElement","insertBefore","postInitializeForm","coordForm","blur","data","window","browseLink","objectId","getId","currentValue","$","ajax","url","TYPO3","settings","ajaxUrls","context","done","response","vHWin","open","focus","AreaEditor","canvas","scaling","parseInt","scaleFactor","configuration","split","right","bottom","borderColor","stroke","strokeWidth","fill","hexToRgbA","addRectSubForm","add","addCircleSubForm","coordsXY","i","points","length","Error","xy","x","y","push","Math","min","addPolySubForm","hex","alpha","chars","r","g","b","result","test","substring","join","event","Canvas"],"mappings":"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","file":"Imagemap.js","sourcesContent":["define(['TYPO3/CMS/Imagemap/Fabric'], (fabric) => {\n\tlet imagemap = imagemap || {};\n\n\tclass Rect extends fabric.Rect {\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\n\t\t\tthis.form = null;\n\t\t\tthis.subForm = null;\n\t\t}\n\n\t\tpostInitializeForm() {\n\t\t\tthis.values();\n\t\t\tthis.addEvents();\n\t\t\tconsole.log(this);\n\t\t}\n\n\t\tsetValues() {\n\t\t\tthis.subForm.querySelector('#link').value = this.link;\n\t\t\tthis.subForm.querySelector('#label').value = this.alt;\n\t\t\tthis.subForm.querySelector('.colorPreview > div').style.backgroundColor = this.color;\n\t\t}\n\n\t\taddEvents() {\n\t\t\tthis.subForm.querySelector('#linkwizard').addEventListener('click', this.openLinkWizard);\n\t\t}\n\n\t\topenLinkWizard() {\n\n\t\t}\n\n\t\tpersistanceXML() {\n\t\t\tlet coords = this.left + ',' + this.top + ',' + (this.left + this.width) + ',' + (this.height + this.top);\n\t\t\treturn '<area shape=\"rect\" coords=\"' + coords + '\" ' + this.getAdditionalAttributeXML() + '>'\n\t\t\t\t+ this.getLink() + '</area>'\n\t\t}\n\t}\n\n\tclass Circle extends fabric.Circle {\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\n\t\t\tthis.form = null;\n\t\t\tthis.subForm = null;\n\t\t}\n\n\t\tpostInitializeForm() {\n\t\t\tthis.values();\n\t\t\tconsole.log(this);\n\t\t}\n\n\t\tsetValues() {\n\t\t\tthis.subForm.querySelector('#link').value = this.link;\n\t\t\tthis.subForm.querySelector('#label').value = this.alt;\n\t\t\tthis.subForm.querySelector('.colorPreview > div').style.backgroundColor = this.color;\n\t\t}\n\n\t\tpersistanceXML() {\n\t\t\tlet coords = this.left + ',' + this.top + ',' + this.radius;\n\t\t\treturn '<area shape=\"circle\" coords=\"' + coords + '\" ' + this.getAdditionalAttributeXML() + '>'\n\t\t\t\t+ this.getLink() + '</area>';\n\t\t}\n\t}\n\n\tclass Polygon extends fabric.Polygon {\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\n\t\t\tthis.form = null;\n\t\t\tthis.subForm = null;\n\t\t}\n\n\t\tpostInitializeForm() {\n\t\t\tthis.values();\n\t\t\tconsole.log(this);\n\t\t}\n\n\t\tsetValues() {\n\t\t\tthis.subForm.querySelector('#link').value = this.link;\n\t\t\tthis.subForm.querySelector('#label').value = this.alt;\n\t\t\tthis.subForm.querySelector('.colorPreview > div').style.backgroundColor = this.color;\n\t\t}\n\n\t\tpersistanceXML() {\n\t\t\treturn '<area shape=\"poly\" coords=\"' + this.joinCoords()\n\t\t\t\t+ '\" ' + this.getAdditionalAttributeXML() + \">\" + this.getLink() + \"</area>\"\n\t\t}\n\t}\n\n\tclass AreaForm {\n\t\tconstructor(formElement) {\n\t\t\tthis.element = fabric.document.querySelector('#' + formElement);\n\t\t}\n\n\t\tgetFormElement(selector) {\n\t\t\treturn new DOMParser().parseFromString(\n\t\t\t\tthis.element.querySelector(selector).innerHTML,\n\t\t\t\t'text/html'\n\t\t\t).body.firstChild;\n\t\t}\n\n\t\taddRectSubForm(area)\n\t\t{\n\t\t\tarea.form = this;\n\t\t\tarea.subForm = this.getFormElement('#rectForm');\n\n\t\t\tthis.element.insertBefore(area.subForm, this.element.firstChild);\n\t\t\tarea.postInitializeForm();\n\t\t}\n\n\t\taddCircleSubForm(area)\n\t\t{\n\t\t\tarea.form = this;\n\t\t\tarea.subForm = this.getFormElement('#circForm');\n\n\t\t\tthis.element.insertBefore(area.subForm, this.element.firstChild);\n\t\t\tarea.postInitializeForm();\n\t\t}\n\n\t\taddPolySubForm(area)\n\t\t{\n\t\t\tarea.form = this;\n\t\t\tarea.subForm = this.getFormElement('#polyForm');\n\t\t\tarea.coordForm = this.getFormElement('#polyCoords');\n\n\t\t\tthis.element.insertBefore(area.subForm, this.element.firstChild);\n\t\t\tarea.postInitializeForm();\n\t\t}\n\n\t\topenPopup(link, area) {\n\t\t\tlink.blur();\n\n\t\t\tlet data = window.imagemap.browseLink;\n\t\t\tdata.objectId = area.getId();\n\t\t\tdata.currentValue = area.getLink();\n\n\t\t\t$.ajax({\n\t\t\t\turl: TYPO3.settings.ajaxUrls['imagemap_browselink_url'],\n\t\t\t\tcontext: area,\n\t\t\t\tdata: data\n\t\t\t}).done(function (response) {\n\t\t\t\tconsole.log(response);\n\t\t\t\tlet vHWin = window.open(response.url, '', 'height=600,width=500,status=0,menubar=0,scrollbars=1'); vHWin.focus()\n\t\t\t});\n\t\t}\n\t}\n\n\tclass AreaEditor extends fabric.Canvas {\n\t\tconstructor(canvas, form, options) {\n\t\t\tsuper (canvas, options);\n\n\t\t\tthis.form = new AreaForm(form);\n\t\t}\n\n\t\tinitializeScaling(scaling) {\n\t\t\tlet width = parseInt(scaling) / this.width,\n\t\t\t\theight = parseInt(scaling) / this.height;\n\t\t\treturn (width > height) ? height : width;\n\t\t}\n\t\tsetScale(scaling) {\n\t\t\tthis.scaleFactor = scaling > 1 ? 1 : scaling;\n\t\t}\n\t\tgetMaxWidth() {\n\t\t\treturn this.scaleFactor * this.width;\n\t\t}\n\t\tgetMaxHeight() {\n\t\t\treturn this.scaleFactor * this.height;\n\t\t}\n\n\t\taddRect(configuration) {\n\t\t\tlet [left, top, right, bottom] = configuration.coords.split(',');\n\t\t\tlet area = new Rect({\n\t\t\t\t...configuration,\n\t\t\t\tleft: parseInt(left),\n\t\t\t\ttop: parseInt(top),\n\t\t\t\twidth: parseInt(right - left),\n\t\t\t\theight: parseInt(bottom - top),\n\t\t\t\tborderColor: configuration.color,\n\t\t\t\tstroke: configuration.color,\n\t\t\t\tstrokeWidth: 1,\n\t\t\t\tfill: this.hexToRgbA(configuration.color, 0.2)\n\t\t\t});\n\n\t\t\tthis.form.addRectSubForm(area);\n\t\t\tthis.add(area);\n\t\t}\n\n\t\taddCircle(configuration) {\n\t\t\tlet [left, top, radius] = configuration.coords.split(',');\n\t\t\tlet area = new Circle({\n\t\t\t\t...configuration,\n\t\t\t\tleft: parseInt(left),\n\t\t\t\ttop: parseInt(top),\n\t\t\t\tradius: parseInt(radius),\n\t\t\t\tborderColor: configuration.color,\n\t\t\t\tstroke: configuration.color,\n\t\t\t\tstrokeWidth: 1,\n\t\t\t\tfill: this.hexToRgbA(configuration.color, 0.2)\n\t\t\t});\n\n\t\t\tthis.form.addCircleSubForm(area);\n\t\t\tthis.add(area);\n\t\t}\n\n\t\taddPoly(configuration) {\n\t\t\tlet coordsXY = configuration.coords.split(','),\n\t\t\t\tleft = 100000,\n\t\t\t\ttop = 100000,\n\t\t\t\ti = 0,\n\t\t\t\tpoints = [];\n\n\t\t\tif (coordsXY.length % 2) {\n\t\t\t\tthrow new Error('Bad coords count');\n\t\t\t}\n\n\t\t\tfor (; i < coordsXY.length; i = i + 2) {\n\t\t\t\tlet xy = {x: parseInt(coordsXY[i]), y: parseInt(coordsXY[i + 1])};\n\t\t\t\tpoints.push(xy);\n\n\t\t\t\tleft = Math.min(left, xy.x);\n\t\t\t\ttop = Math.min(top, xy.y);\n\t\t\t}\n\n\t\t\tlet area = new Polygon(points, {\n\t\t\t\t...configuration,\n\t\t\t\ttop: top,\n\t\t\t\tleft: left,\n\t\t\t\tborderColor: configuration.color,\n\t\t\t\tstroke: configuration.color,\n\t\t\t\tstrokeWidth: 1,\n\t\t\t\tfill: this.hexToRgbA(configuration.color, 0.2)\n\t\t\t});\n\n\t\t\tthis.form.addPolySubForm(area);\n\t\t\tthis.add(area);\n\t\t}\n\n\t\thexToRgbA(hex, alpha) {\n\t\t\tlet chars, r, g, b, result;\n\t\t\tif (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n\t\t\t\tchars = hex.substring(1).split('');\n\t\t\t\tif (chars.length === 3) {\n\t\t\t\t\tchars = [chars[0], chars[0], chars[1], chars[1], chars[2], chars[2]];\n\t\t\t\t}\n\n\t\t\t\tr = parseInt(chars[0] + chars[1], 16);\n\t\t\t\tg = parseInt(chars[2] + chars[3], 16);\n\t\t\t\tb = parseInt(chars[4] + chars[5], 16);\n\n\t\t\t\tif (alpha) {\n\t\t\t\t\tresult = 'rgba(' + [r, g, b, alpha].join(', ') + ')';\n\t\t\t\t} else {\n\t\t\t\t\tresult = 'rgb(' + [r, g, b].join(', ') + ')';\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tthrow new Error('Bad Hex');\n\t\t}\n\n\t\tmousedown(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\n\t\tmouseup(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\n\t\tmousemove(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\n\t\tdblclick(event) {\n\t\t\tconsole.log(event);\n\t\t}\n\t}\n\timagemap.AreaEditor = AreaEditor;\n\n\treturn imagemap;\n});\n"]}